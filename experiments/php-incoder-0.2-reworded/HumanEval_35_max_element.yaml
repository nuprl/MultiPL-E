name: HumanEval_35_max_element
language: php
prompt: "<?php\n// Return maximum element in the array.\n// >>> max_element(array(1,\
  \ 2, 3))\n// 3\n// >>> max_element(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n\
  // 123\nfunction max_element($l) {\n"
tests: "function candidate(...$args) {\n    return max_element(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10))\
  \ !== 124) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max)\
    \ {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work when there are multiple max\
    \ values.\n<|/ c |>\n<| c |>\nThis doesn't work when there are multiple max values.\n\
    <|/ c |>\n<| c |>\nThis doesn't work when there are multiple max values.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't work when there are multiple max values.\n<|/ c |>\n\
    <| c |>\nThis doesn't work when there are multiple max values.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work when there are multiple max values.\n<|/ c |>\n<| c |>\n\
    This doesn't work when there are multiple max values.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$max = max($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work when there are multiple max values.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ when there are multiple max values.\n<|/ c |>\n<| c |>\nThis doesn't work when\
    \ there are multiple max values.\n<|/ c |>\n<| c |>\nThis doesn't work when there\
    \ are multiple max values.\n<|/ c |>\n<| c |>\nThis doesn't work when there are\
    \ multiple max values.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work when there are multiple\
    \ max values.\n<|/ c |>\n<| c |>\nThis doesn't work when there are multiple max\
    \ values.\n<|/ c |>\n<| c |>\nThis doesn't work when there are multiple max values.\n\
    <|/ c |>\n<| c |>\nThis doesn't work when there are multiple max values.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't work when there are multiple max values.\n<|/ c |>\n\
    <| c |>\nThis doesn't work when there are multiple max values.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work ", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $max = reset($l);\n    for\
    \ ($i = 1; $i < $n; ++$i) {\n        if ($l[$i] > $max) {\n            $max =\
    \ $l[$i];\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a dscore=0 |>\n<code>", "    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    return\
    \ $l[0];\n}\n", "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v\
    \ > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n",
  "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach ($l as $e) {\n\
    \        if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v\
    \ > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a dscore=5 tags=php,arrays |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Simple and elegant.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple\
    \ and elegant.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| a tags=php,arrays |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=5 |>\n<code>", "    $l = array_reverse($l);\n\
    \    $m = $l[0];\n    foreach ($l as $n) {\n        if ($n > $m) {\n         \
    \   $m = $n;\n        }\n    }\n    return $m;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ reset($l);\n    foreach ($l as $item) {\n        if ($item > $max) {\n     \
    \       $max = $item;\n        }\n    }\n    return $max;\n}\n", "    return $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v)\
    \ {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    $m = $n-1;\n    for($i = 0; $i < $n; $i++) {\n        if($l[$i] > $l[$m])\
    \ {\n            $m = $i;\n        }\n    }\n    return $l[$m];\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your answer, but I think it would be better to use a\
    \ foreach loop instead of a for loop. Also, why not use array_search instead of\
    \ array_reverse?\n<|/ c |>\n<| c |>\nI agree with you, foreach is better. array_search\
    \ is also a good idea, but array_search is case sensitive, while array_reverse\
    \ is not.\n<|/ c |>\n<| c |>\nI agree with you as well, array_search is case sensitive,\
    \ while array_reverse is not.\n<|/ c |>\n<| c |>\nI agree with you as well, array_search\
    \ is case sensitive, while array_reverse is not.\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array(1, 2, 3, 4, 5);\n$max = max($array);\n</code>\n<|/ a tags=php,arrays\
    \ dscore=5 |>\n<| c |>\nThis doesn't answer the question, which is about finding\
    \ the highest value in an array.\n<|/ c |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about finding the highest value in an array.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't answer the question, which is about finding the highest value in an\
    \ array.\n<|/ c |>\n<| c |>\nThis doesn't answer the question, which is about\
    \ finding the highest value in an array.\n<|/ c |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about finding the highest value in an array.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$max = max($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question, which is\
    \ about finding the highest value in an array.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $array = array(1, 2, 3, 4, 5);\n$max = max($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question, which is about finding the highest\
    \ value in an array.\n<|/ c |>\n<| a |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n\
    $max = max($array);\n</code>\n<|/ a ", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n         \
    \   $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n           \
    \ $max = $v;\n        }\n    }\n    return $max;\n}\n", "    return reset($l);\n\
    }\n", "    return $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n    \
    \        $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n           \
    \ $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_values($l);\n    return $l[0];\n}\n", "    return $l[0];\n}\n",
  "    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n   \
    \         $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n           \
    \ $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't answer the question. OP asked for \"the most common\
    \ element\", not \"the element with the highest count\".\n<|/ c |>\n<| c |>\n\
    This answer does answer the question. OP asked for the most common element. `array_count_values()`\
    \ returns an array with keys and values being the number of occurrences of each\
    \ element in the array. `max()` returns the highest value from that array.\n<|/\
    \ c |>\n<| c |>\nThis answer doesn't answer the question. OP asked for the most\
    \ common element. `array_count_values()` returns an array with keys and values\
    \ being the number of occurrences of each element in the array. `max()` returns\
    \ the highest value from that array.\n<|/ c |>\n<| c |>\nThis answer doesn't answer\
    \ the question. OP asked for the most common element. `array_count_values()` returns\
    \ an array with keys and values being the number of occurrences of each element\
    \ in the array. `max()` returns the highest value from that array.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't answer the question. OP asked for the most common\
    \ element. `array_count_values()` returns an array with keys and values being\
    \ the number of occurrences of each element in the array. `max()` returns the\
    \ highest value from that array.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array =\
    \ array(1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, ", "    $l = array_reverse($l);\n    $n\
    \ = count($l);\n    $m = $n-1;\n    $i = 0;\n    while($i < $m) {\n        if($l[$i]\
    \ > $l[$m]) {\n            $m = $i;\n        }\n        $i++;\n    }\n    return\
    \ $l[$m];\n}", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array is empty or contains only a single element\n<|/ c\
    \ |>\n<| c |>\nIt does work, try it out for yourself. It returns `null` if the\
    \ array is empty or contains only a single element\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you pass it an empty array or an array with only one element. Try it\
    \ out for yourself.\n<|/ c |>\n<| c |>\nIt does work, try it out for yourself.\
    \ It returns `null` if the array is empty or contains only a single element\n\
    <|/ c |>\n<| c |>\nIt does work, try it out for yourself. It returns `null` if\
    \ the array is empty or contains only a single element\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array(1, 2, 3, 4, 5);\n$max = max($array);\n</code>\n<|/ a tags=php,arrays\
    \ dscore=5 |>\n<| c |>\nThis doesn't work if the array is empty or contains only\
    \ a single element\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty\
    \ or contains only a single element\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array is empty or contains only a single element\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty or contains only a single element\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work if the array is empty or contains only a single element\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$max = max($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array is\
    \ empty or contains only a single element\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array is empty or contains only a single element\n<|/ c |>\n<| c |>\n\
    This doesn't work if the array is empty or contains only a single element\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$max = max($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c ", "    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $m = current($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $m) {\n            $m = $e;\n    \
    \    }\n    }\n    return $m;\n}\n", "    $max = reset($l);\n    foreach ($l as\
    \ $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n\
    \    return $max;\n}\n", "    return $l[count($l) - 1];\n}\n", "    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v)\
    \ {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $item)\
    \ {\n        if ($item > $max) {\n            $max = $item;\n        }\n    }\n\
    \    return $max;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd'\
    \ => 4,\n    'e' => 5,\n    'f' => 6,\n    'g' => 7,\n];\n\n$max = $array['a'];\n\
    foreach ($array as $key => $value) {\n    if ($value > $max) {\n        $max =\
    \ $value;\n    }\n}\n\nvar_dump($max);\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This solution works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution\
    \ works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$max = $array[0];\nforeach ($array as $key\
    \ => $value) {\n    if ($value > $max) {\n        $max = $value;\n    }\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>\n$max = $array[0];\nforeach ($array as $key => $value)\
    \ {\n    if ($value > $max) {\n        $max = $value;\n    }\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis solution works perfectly for me. Thanks!\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$max = $array[0];\nforeach ($array\
    \ as $key => $value) {\n    if ($value > $max) {\n        $max = $value;\n   \
    \ }\n}\n</code>\n<|/ a dscore=4 |>\n<| a tags=php,arrays |>\n<code>\n$max = $array[0];\n\
    foreach ($array as $key => $value) {\n    if ($value > $max) {\n        $max =\
    \ $value;\n    }\n}\n</code>\n<|/ a dscore=4 |>\n<| a ", "    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=5 tags=php,arrays\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's simple.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's simple.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max =\
    \ max($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly and it's simple.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ simple.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly and it's simple.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly and it's simple.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v)\
    \ {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v)\
    \ {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $l = array_reverse($l);\n    return $l[0];\n}", "    $max\
    \ = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n         \
    \   $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$array1 = array(1,2,3,4,5,6,7,8,9,10);\n$array2\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$array3 = array(1,2,3,4,5,6,7,8,9,10);\n\n$array4\
    \ = array_merge($array1,$array2,$array3);\n$array5 = array_unique($array4);\n\
    $array6 = array_intersect($array1,$array2,$array3);\n$array7 = array_diff($array1,$array2,$array3);\n\
    $array8 = array_diff($array1,$array2,$array3);\n\n$array9 = array_merge($array5,$array6,$array7,$array8);\n\
    $array10 = array_filter($array9,function($var){return $var != 0;});\n$array11\
    \ = array_keys($array10);\n$array12 = array_values($array10);\n$array13 = array_slice($array10,0,1);\n\
    $array14 = array_slice($array10,1,1);\n$array15 = array_slice($array10,2,1);\n\
    $array16 = array_slice($array10,3,1);\n$array17 = array_slice($array10,4,1);\n\
    $array18 = array_slice($array10,5,1);\n$array19 = array_slice($array10,6,1);\n\
    $array20 = array_slice($array10,7,1);\n$array21 = array_slice($array10,8,1);\n\
    $array22 = array_slice($array10,9,1);\n$array23 = array_slice($array10,10,1);\n\
    \n$array24 = array_merge($array11,$array12,$array13,$array14,$array15,$array16,$array17,$array18,$array19,$array20,$array21,$array22,$array23);\n\
    $array25 = array_unique($array24);\n$array26 = array_intersect($array11,$array12,$array13,$array14,$array15,$array16,$array17,$array18,$array19,$array20,$array21,$array22,$array23);\n\
    $array27 = array_diff($array11,$array12,$array13,$array14,$array15,$array16,$array17,$array18,$array19,$array20,$array21,$array22,$array23);\n\
    $array28 = ", "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v\
    \ > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work if you have negative numbers in the array\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "    $max = reset($l);\n    foreach ($l as\
    \ $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n    }\n\
    \    return $max;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, but this answer does not explain how it works. I believe that it is\
    \ better to explain the algorithm and how it works, instead of just providing\
    \ a piece of code.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No\
    \ need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$max = 0;\nforeach ($array as $value) {\n    if ($value > $max)\
    \ {\n        $max = $value;\n    }\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| a |>\n<code>\n$max = max($array);\n</code>\n<|/ a dscore=5\
    \ tags=php,arrays |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c ", "    $max\
    \ = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n         \
    \   $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n", "    return\
    \ $l[0];\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    return $l[0];\n}\n", "    $max = reset($l);\n    foreach ($l as $v) {\n \
    \       if ($v > $max) {\n            $max = $v;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach\
    \ ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n\
    \    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$max = $array[0];\n$maxIndex = 0;\n$maxLength =\
    \ 1;\nfor($i=1;$i<count($array);$i++){\n    if($array[$i] > $max){\n        $max\
    \ = $array[$i];\n        $maxIndex = $i;\n        $maxLength = 1;\n    }\n   \
    \ elseif($array[$i] == $max){\n        $maxLength++;\n    }\n}\necho \"Max Value\
    \ is $max and it's index is $maxIndex and it's length is $maxLength\";\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\",\"b\",\"c\"\
    ,\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"\
    ,\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$max = $array[0];\n\
    $maxIndex = 0;\n$maxLength = 1;\nfor($i=1;$i<count($array);$i++){\n    if($array[$i]\
    \ > $max){\n        $max = $array[$i];\n        $maxIndex = $i;\n        $maxLength\
    \ = 1;\n    }\n    elseif($array[$i] == $max){\n        $maxLength++;\n    }\n\
    }\necho \"Max Value is $max and it's index is $maxIndex and it's length is $maxLength\"\
    ;\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$max = $array[0];\n$maxIndex = 0;\n$maxLength = 1;\nfor($i=1;$i<count($array);$i++){",
  "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach ($l as $e) {\n\
    \        if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v\
    \ > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n",
  "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n   \
    \         $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ work with associative arrays as well.\n<|/ c |>\n<| c |>\n: Yes, it works with\
    \ associative arrays too. Just replace `array_search` with `array_key_exists`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with associative arrays as well.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with associative arrays as well.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with associative arrays as well.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>", "    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n\
    $max = max($array);\n$min = min($array);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nThis does provide an answer to the question. He asked how to find the\
    \ max and min of an array. He didn't ask for an alternative to max() and min().\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$max = max($array);\n\
    $min = min($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(1, 2, 3, 4, 5);\n$max = max($array);\n$min = min($array);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5);\n$max = max($array);\n$min = min($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$max = max($array);\n\
    $min = min($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or ", "    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $max = max($array);\n$min = min($array);\n$sum = array_sum($array);\n$avg = array_sum($array)\
    \ / count($array);\n$median = array_sum($array) / count($array) / 2;\n$mode =\
    \ array_count_values($array);\n$unique = array_unique($array);\n$unique_count\
    \ = count($unique);\n$unique_count = array_count_values($unique);\n$unique_count\
    \ = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($unique_count);\n$unique_count = array_count_values($unique_count);\n\
    $unique_count = array_keys($unique_count);\n$unique_count = array_values($unique_count);\n\
    $unique_count = array_unique($", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    $max = reset($l);\n    foreach ($l as $item) {\n        if\
    \ ($item > $max) {\n            $max = $item;\n        }\n    }\n    return $max;\n\
    }\n", "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach ($l as\
    \ $e) {\n        if ($e > $max) {\n            $max = $e;\n        }\n    }\n\
    \    return $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\n<code>\n<?php", "    $max = reset($l);\n    foreach ($l\
    \ as $item) {\n        if ($item > $max) {\n            $max = $item;\n      \
    \  }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more concise and elegant than using array_reduce.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and elegant\
    \ than using array_reduce.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and elegant than using array_reduce.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more concise and elegant than using array_reduce.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and elegant\
    \ than using array_reduce.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$max =\
    \ max($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more concise and elegant than using array_reduce.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Much more concise and elegant than\
    \ using array_reduce.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and elegant than using array_reduce.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more concise and elegant than using array_reduce.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and elegant\
    \ than using array_reduce.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = max($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and elegant than using array_reduce.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more concise and elegant than using array_reduce.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted ", "    return reset($l);\n}\n",
  "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n   \
    \         $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n \
    \           $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $max =\
    \ reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n           \
    \ $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n</code>\n<|/ a dscore=5 tags=php,arrays\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nI agree with you, this is much more elegant than the accepted\
    \ answer. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need\
    \ to reinvent the wheel.\n<|/ c |>\n<| c |>\nI agree with you, this is much more\
    \ elegant than the accepted answer. Thanks!\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$max = max($array);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$max = max($array);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $max = max($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be\
    \ the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. No need to reinvent the ", "    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $m = current($l);\n    foreach ($l as $v) {\n        if ($v > $m) {\n   \
    \         $m = $v;\n        }\n    }\n    return $m;\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    $m = $l[0];\n    for ($i = 1; $i < $n; $i++) {\n   \
    \     if ($l[$i] > $m) {\n            $m = $l[$i];\n        }\n    }\n    return\
    \ $m;\n}\n", "    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e\
    \ > $max) {\n            $max = $e;\n        }\n    }\n    return $max;\n}\n",
  "    $l = array_reverse($l);\n    $max = reset($l);\n    foreach ($l as $e) {\n\
    \        if ($e > $max) {\n            $max = $e;\n        }\n    }\n    return\
    \ $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v\
    \ > $max) {\n            $max = $v;\n        }\n    }\n    return $max;\n}\n",
  "    $max = reset($l);\n    foreach ($l as $v) {\n        if ($v > $max) {\n   \
    \         $max = $v;\n        }\n    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}", "    $l = array_reverse($l);\n\
    \    $max = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n \
    \           $max = $e;\n        }\n    }\n    return $max;\n}\n</code>\n<|/ a\
    \ dscore=5 tags=arrays,php |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me.\n<|/ c |>\n<| a |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $max = max($array);\n</code>\n<|/ a tags=arrays,php dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$max = max($array);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly\
    \ for me.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $max = max($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(1,2,3,4,5,6,7,", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $l = array_reverse($l);\n    $max = reset($l);\n\
    \    foreach ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n\
    \        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach\
    \ ($l as $v) {\n        if ($v > $max) {\n            $max = $v;\n        }\n\
    \    }\n    return $max;\n}\n", "    $max = reset($l);\n    foreach ($l as $item)\
    \ {\n        if ($item > $max) {\n            $max = $item;\n        }\n    }\n\
    \    return $max;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to reinvent the\
    \ wheel.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$max = $array[0];\nforeach ($array\
    \ as $key => $value) {\n    if ($value > $max) {\n        $max = $value;\n   \
    \ }\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. No need to reinvent the wheel.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. No need to reinvent the wheel.\n\
    <|/ c |>\n<| a |>\n<code>\n$max = max($array);\n</code>\n<|/ a tags=php,arrays\
    \ dscore=5 |>\n<| c |>\nThis should be the accepted answer. No need to reinvent\
    \ the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. No need to reinvent ", "    $l = array_reverse($l);\n    $max\
    \ = reset($l);\n    foreach ($l as $e) {\n        if ($e > $max) {\n         \
    \   $max = $e;\n        }\n    }\n    return $max;\n}\n", "    $max = reset($l);\n\
    \    foreach ($l as $e) {\n        if ($e > $max) {\n            $max = $e;\n\
    \        }\n    }\n    return $max;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
