name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes an array of integers as an input.\n// it\
  \ returns true if there are two distinct elements in the array that\n// sum to zero,\
  \ and false otherwise.\n// >>> pairs_sum_to_zero(array(1, 3, 5, 0))\n// false\n\
  // >>> pairs_sum_to_zero(array(1, 3, -2, 1))\n// false\n// >>> pairs_sum_to_zero(array(1,\
  \ 2, 3, 7))\n// false\n// >>> pairs_sum_to_zero(array(2, 4, -5, 3, 5, 7))\n// true\n\
  // >>> pairs_sum_to_zero(array(1))\n// false\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  $sum = 0;\n  foreach ($l as $i => $v) {\n    if ($v < 0) {\n    \
    \  return false;\n    }\n    $sum += $v;\n  }\n  return $sum == 0;\n}\n", "  $sum\
    \ = 0;\n  foreach ($l as $e) {\n    $sum += $e;\n  }\n  return $sum == 0;\n}\n",
  "    $sum = 0;\n    foreach ($l as $item) {\n        $sum += $item;\n    }\n   \
    \ return ($sum == 0);\n}\n", "    $sum = 0;\n    foreach ($l as $k => $v) {\n\
    \        $sum += $v;\n        if ($sum < 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    $pairs = array();\n    foreach ($l\
    \ as $i => $v) {\n        $pairs[$v] = $i;\n    }\n    $sum = 0;\n    foreach\
    \ ($pairs as $i => $v) {\n        $sum += $i;\n    }\n    return $sum == 0;\n\
    }\n", "    $sum = 0;\n    foreach ($l as $k => $v) {\n        if ($v > 0) {\n\
    \            $sum += $v;\n        }\n    }\n    return ($sum == 0);\n}\n", " \
    \   $sum = 0;\n    foreach ($l as $i => $v) {\n        if ($v < 0) {\n       \
    \     $sum += abs($v);\n        } else {\n            $sum += $v;\n        }\n\
    \    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l as $item)\
    \ {\n        $sum += $item;\n    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n\
    \    foreach ($l as $i => $v) {\n        if ($v < 0) {\n            $sum -= $v\
    \ * abs($v);\n        } else {\n            $sum += $v;\n        }\n    }\n  \
    \  return ($sum == 0);\n}\n", "    $sum = 0;\n    foreach ($l as $k => $v) {\n\
    \        $sum += $v;\n        if ($sum < 0) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    $n = count($l);\n    if ($n == 0)\
    \ {\n        return false;\n    }\n    $sum = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $sum += $l[$i];\n    }\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $j = $i + 1;\n        $k = $n - 1;\n        while ($j < $k && $l[$i] + $l[$j]\
    \ == 0) {\n            $j++;\n        }\n        while ($k > $j && $l[$i] + $l[$k]\
    \ == 0) {\n            $k--;\n        }\n        if ($j == $k) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n", "    $sum = 0;\n  \
    \  foreach ($l as $e) {\n        $sum += $e;\n    }\n    return $sum == 0;\n}\n",
  "    $sum = 0;\n    foreach ($l as $e) {\n        $sum += $e;\n    }\n    return\
    \ $sum == 0;\n}\n", "    $pairs = array();\n    foreach ($l as $i => $v) {\n \
    \       if ($v < 0) {\n            $v = -$v;\n        }\n        $pairs[$v][]\
    \ = $i;\n    }\n    $sum = 0;\n    foreach ($pairs as $v) {\n        if (count($v)\
    \ == 1) {\n            $sum += $v[0];\n        } else {\n            $sum += $v;\n\
    \        }\n    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l\
    \ as $k => $v) {\n        $sum += $v;\n        if ($sum < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $sum = 0;\n    $n = count($l);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $sum += $l[$i];\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    if ($l[$i] + $l[$j] == 0) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "    $sum = 0;\n    foreach ($l as\
    \ $item) {\n        $sum += $item;\n    }\n    return $sum == 0;\n}\n", "    $sum\
    \ = 0;\n    foreach ($l as $item) {\n        $sum += $item;\n    }\n    return\
    \ $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l as $item) {\n        $sum\
    \ += $item;\n    }\n    return $sum == 0;\n}\n", "    $sum = 0;\n    foreach ($l\
    \ as $k => $v) {\n        $sum += $v;\n        if ($sum < 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
