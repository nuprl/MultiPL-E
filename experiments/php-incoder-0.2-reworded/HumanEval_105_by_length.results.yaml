language: php
name: HumanEval_105_by_length
results:
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = str_replace(range(1, 9), array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"), $result[$i]);\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"One\", \"1\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Two\", \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Three\", \"3\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Four\", \"4\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Five\", \"5\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Six\", \"6\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Seven\", \"7\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Eight\", \"8\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Nine\", \"9\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"0\", \"0\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"1\", \"1\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"2\", \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"3\", \"3\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5w5l70hc.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0txilt1.php:35\n\
    Stack trace:\n#0 /tmp/tmp_0txilt1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_0txilt1.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n   \
    \ } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n  \
    \    $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_osqmfa.php:37\n\
    Stack trace:\n#0 /tmp/tmp6_osqmfa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6_osqmfa.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i]\
    \ && $arr[$i] <= $max) {\n      $result[] = name_by_index($arr[$i]);\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_index()\
    \ in /tmp/tmpt71qwbuq.php:27\nStack trace:\n#0 /tmp/tmpt71qwbuq.php(34): by_length(Array)\n\
    #1 /tmp/tmpt71qwbuq.php(38): candidate(Array)\n#2 /tmp/tmpt71qwbuq.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt71qwbuq.php on line 27\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array($item, 'One');\n    }\
    \ elseif ($item >= 10 && $item <= 99) {\n      $result[] = array($item, 'Two');\n\
    \    } elseif ($item >= 100 && $item <= 999) {\n      $result[] = array($item,\
    \ 'Three');\n    } elseif ($item >= 1000 && $item <= 9999) {\n      $result[]\
    \ = array($item, 'Four');\n    } elseif ($item >= 10000 && $item <= 99999) {\n\
    \      $result[] = array($item, 'Five');\n    } elseif ($item >= 100000 && $item\
    \ <= 999999) {\n      $result[] = array($item, 'Six');\n    } elseif ($item >=\
    \ 1000000 && $item <= 9999999) {\n      $result[] = array($item, 'Seven');\n \
    \   } elseif ($item >= 10000000 && $item <= 99999999) {\n      $result[] = array($item,\
    \ 'Eight');\n    } elseif ($item >= 100000000 && $item <= 999999999) {\n     \
    \ $result[] = array($item, 'Nine');\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `by_length(array(2, -1, 4, 5, 8, 2, 3))` returns `array(\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")`\n<|/ c |>\n<| c |>\n\
    I added a fix for negative numbers. I didn't test it thoroughly though.\n<|/ c\
    \ |>\n<| c |>\nI added a fix for negative numbers. I didn't test it thoroughly\
    \ though.\n<|/ c |>\n<| c |>\nI added a fix for negative numbers. I didn't test\
    \ it thoroughly though.\n<|/ c |>\n<| c |>\nI added a fix for negative numbers.\
    \ I didn't test it thoroughly though.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array,\
    \ function($v){\n    return $v >= 1 && $v <= 9;\n});\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $v >= 10 && $v <= 99 ? $v : \nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpib9lu6vi.php on line 39

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $range = range($min, $max);\n  $reversed = array_reverse($range);\n\
    \  $result = array();\n  foreach ($reversed as $digit) {\n    $result[] = array_search($digit,\
    \ range(1, 9));\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6t3sl3x.php:38\n\
    Stack trace:\n#0 /tmp/tmpf6t3sl3x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpf6t3sl3x.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $length = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n  \
    \  } else if ($arr[$i] == $max - 1) {\n      $result[] = 'Eight';\n    } else\
    \ if ($arr[$i] == $max - 2) {\n      $result[] = 'Seven';\n    } else if ($arr[$i]\
    \ == $max - 3) {\n      $result[] = 'Six';\n    } else if ($arr[$i] == $max -\
    \ 4) {\n      $result[] = 'Five';\n    } else if ($arr[$i] == $max - 5) {\n  \
    \    $result[] = 'Four';\n    } else if ($arr[$i] == $max - 6) {\n      $result[]\
    \ = 'Three';\n    } else if ($arr[$i] == $max - 7) {\n      $result[] = 'Two';\n\
    \    } else if ($arr[$i] == $max - 8) {\n      $result[] = 'One';\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work if there are multiple numbers with the same number of digits. For\
    \ example, `by_length(array(2, 1, 1, 4, 5, 8, 2, 3))` returns `array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")` instead\
    \ of `array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\", \"Nine\")`.\n<|/ c |>\n<| c |>\nI added a version that works with multiple\
    \ numbers with the same number of digits. I added a comment to the code explaining\
    \ what each line does.\n<|/ c |>\n<| c |>\nThanks for your answer! I added a version\
    \ that works with multiple numbers with the same number of digits. I added a comment\
    \ to the code explaining what each line does.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple numbers with the same number of digits. I added a comment\
    \ to the code explaining what each line does.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n$lengths\
    \ = array_count_values($arr);\n$min = $lengths[0];\n$max = $lengths[max($lengths)];\n\
    foreach($arr as $\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptu44_ebv.php on line 47

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph835kyxk.php:34\n\
    Stack trace:\n#0 /tmp/tmph835kyxk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmph835kyxk.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $reversed[$i]\
    \ && $reversed[$i] <= $max) {\n      $result[] = name_by_number($reversed[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmpvxv2h7x4.php:25\nStack trace:\n#0 /tmp/tmpvxv2h7x4.php(32): by_length(Array)\n\
    #1 /tmp/tmpvxv2h7x4.php(36): candidate(Array)\n#2 /tmp/tmpvxv2h7x4.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvxv2h7x4.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array($item);\n    }\n  }\n\
    \  if (count($result) == 0) {\n    return array();\n  }\n  sort($result);\n  $result\
    \ = array_reverse($result);\n  foreach ($result as $item) {\n    $result[$item[0]]\
    \ = $item[1];\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n\
    foreach ($numbers as $number) {\n    if ($number >= 1 && $number <= 9) {\n   \
    \     $result[] = $number;\n    }\n}\nsort($result);\n$result = array_reverse($result);\n\
    foreach ($result as $number) {\n    $result[$number] = $number == 1 ? 'One' :\
    \ $number == 2 ? 'Two' : $number == 3 ? 'Three' : $number == 4 ? 'Four' : $number\
    \ == 5 ? 'Five' : $number == 6 ? 'Six' : $number == 7 ? 'Seven' : $number == 8\
    \ ? 'Eight' : $number == 9 ? 'Nine' : '';\n}\nprint_r($result);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($numbers as $number) {\n\
    \    if ($number >= 1 && $number <= 9) {\n        $result[] = $number;\n    }\n\
    }\nsort($result);\n$result = array_reverse($result);\nforeach ($result as $number)\
    \ {\n    $result[$number] = $number == 1 ? 'One' : $number == 2 ? 'Two' : $number\
    \ == 3 ? 'Three' : $number == 4 ? 'Four' : $number == 5 ? 'Five' : $number ==\
    \ 6 ? 'Six' : $number == 7 ? 'Seven' : $number == 8 ? 'Eight' : $number == 9 ?\
    \ 'Nine' : '';\n}\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n\
    foreach ($numbers as $number) {\n    if ($number >= 1 && $number <= 9) {\n   \
    \     $result[] = $number;\n    }\n}\nsort($result);\n$result = array_reverse($result);\n\
    foreach ($result as $number) {\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn04892zz.php on line 31

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = array($value, $key);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array(\"One\", 1),\n    array(\"\
    Two\", 2),\n    array(\"Three\", 3),\n    array(\"Four\", 4),\n    array(\"Five\"\
    , 5),\n    array(\"Six\", 6),\n    array(\"Seven\", 7),\n    array(\"Eight\",\
    \ 8),\n    array(\"Nine\", 9),\n);\n\n$result = array();\nforeach ($array as $key\
    \ => $value) {\n    $result[$value[1]] = $value[0];\n}\n\n$result = array_flip($result);\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\n    array(\"One\", 1),\n    array(\"Two\", 2),\n\
    \    array(\"Three\", 3),\n    array(\"Four\", 4),\n    array(\"Five\", 5),\n\
    \    array(\"Six\", 6),\n    array(\"Seven\", 7),\n    array(\"Eight\", 8),\n\
    \    array(\"Nine\", 9),\n);\n\n$result = array();\nforeach ($array as $key =>\
    \ $value) {\n    $result[$value[1]] = $value[0];\n}\n\n$result = array_flip($result);\n\
    print_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\n    array(\"One\", 1),\n    array(\"Two\", 2),\n    array(\"Three\"\
    , 3),\n    array(\"Four\", 4),\n    array(\"Five\", 5),\n    array(\"Six\", 6),\n\
    \    array(\"Seven\", 7),\n    array(\"Eight\", 8),\n    array(\"Nine\", 9),\n\
    );\n\n$result = array();\nforeach ($array as $key => $value) {\n    $result[$value[1]]\
    \ = $value[0];\n}\n\n$result = array_flip($result);\nprint_r($\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp18kacnaf.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjgca8ge.php:37\n\
    Stack trace:\n#0 /tmp/tmpgjgca8ge.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgjgca8ge.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = array($value, $key);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9igeh5nu.php:35\n\
    Stack trace:\n#0 /tmp/tmp9igeh5nu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9igeh5nu.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $len = strlen($min);\n  $arr = array_reverse($arr);\n \
    \ $arr = array_map(function($v) use ($len) {\n    return str_pad($v, $len, \"\
    0\", STR_PAD_LEFT);\n  }, $arr);\n  return $arr;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array\
    \ = array_filter($array, function($v){\n    return $v > 0 && $v < 10;\n});\n$array\
    \ = array_map(function($v){\n    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n\
    }, $array);\n$array = array_merge($array, array_fill(0, 9, \"One\"));\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array,\
    \ function($v){\n    return $v > 0 && $v < 10;\n});\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($array,\
    \ array_fill(0, 9, \"One\"));\n$array = array_reverse($array);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array = array(2, 1, 1,\
    \ 4, 5, 8, 2, 3);\n$array = array_filter($array, function($v){\n    return $v\
    \ > 0 && $v < 10;\n});\n$array = array_map(function($v){\n    return str_pad($v,\
    \ 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($array, array_fill(0,\
    \ 9, \"One\"));\n$array = array_reverse($array);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array,\
    \ function($v){\n    return $v > 0 && $v < 10;\n});\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa2yn_ldp.php on line 31

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array('name' =>\
    \ $value, 'value' => $key);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvq9qgk4.php:29\n\
    Stack trace:\n#0 /tmp/tmpnvq9qgk4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnvq9qgk4.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $sorted\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $sorted[$value] = $key;\n    }\n  }\n  ksort($sorted);\n  $reversed\
    \ = array_reverse($sorted);\n  foreach ($reversed as $key => $value) {\n    $sorted[$key]\
    \ = $arr[$value];\n  }\n  return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvr220ugn.php:37\n\
    Stack trace:\n#0 /tmp/tmpvr220ugn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvr220ugn.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $digits = range($min, $max);\n  array_reverse($digits);\n\
    \  $names = array();\n  foreach ($digits as $digit) {\n    $names[] = $names[count($names)\
    \ - 1] . ($digit < 10 ? \"One\" : \"Two\") . ($digit < 100 ? \"Three\" : \"Four\"\
    ) . ($digit < 1000 ? \"Five\" : \"Six\") . ($digit < 10000 ? \"Seven\" : \"Eight\"\
    ) . ($digit < 100000 ? \"Nine\" : \"Ten\");\n  }\n  return $names;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i4j3g37.php:38\n\
    Stack trace:\n#0 /tmp/tmp1i4j3g37.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1i4j3g37.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array('name' => 'One', 'id'\
    \ => 1),\n    array('name' => 'Two', 'id' => 2),\n    array('name' => 'Three',\
    \ 'id' => 3),\n    array('name' => 'Four', 'id' => 4),\n    array('name' => 'Five',\
    \ 'id' => 5),\n    array('name' => 'Six', 'id' => 6),\n    array('name' => 'Seven',\
    \ 'id' => 7),\n    array('name' => 'Eight', 'id' => 8),\n    array('name' => 'Nine',\
    \ 'id' => 9),\n    array('name' => 'Ten', 'id' => 10),\n    array('name' => 'Eleven',\
    \ 'id' => 11),\n    array('name' => 'Twelve', 'id' => 12),\n    array('name' =>\
    \ 'Thirteen', 'id' => 13),\n    array('name' => 'Fourteen', 'id' => 14),\n   \
    \ array('name' => 'Fifteen', 'id' => 15),\n    array('name' => 'Sixteen', 'id'\
    \ => 16),\n    array('name' => 'Seventeen', 'id' => 17),\n    array('name' =>\
    \ 'Eighteen', 'id' => 18),\n    array('name' => 'Nineteen', 'id' => 19),\n   \
    \ array('name' => 'Twenty', 'id' => 20),\n    array('name' => 'Twenty-one', 'id'\
    \ => 21),\n    array('name' => 'Twenty-two', 'id' => 22),\n    array('name' =>\
    \ 'Twenty-three', 'id' => 23),\n    array('name' => 'Twenty-four', 'id' => 24),\n\
    \    array('name' => 'Twenty-five', 'id' => 25),\n    array('name' => 'Twenty-six',\
    \ 'id' => 26),\n    array('name' => 'Twenty-seven', 'id' => 27),\n    array('name'\
    \ => 'Twenty-eight', 'id' => 28),\n    array('name' => 'Twenty-nine', 'id' =>\
    \ 29),\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf9cadpr7.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n  \
    \  } else if ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    } else if\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    } else if ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    } else if ($arr[$i] == $max -\
    \ 2) {\n      $result[] = 'Five';\n    } else if ($arr[$i] == $min + 3) {\n  \
    \    $result[] = 'Six';\n    } else if ($arr[$i] == $max - 3) {\n      $result[]\
    \ = 'Seven';\n    } else if ($arr[$i] == $min + 4) {\n      $result[] = 'Eight';\n\
    \    } else {\n      $result[] = 'Nine';\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidf4ex5p.php:53\n\
    Stack trace:\n#0 /tmp/tmpidf4ex5p.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpidf4ex5p.php\
    \ on line 53\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $sorted\
    \ = array();\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i]\
    \ = $arr[$i];\n  }\n  array_multisort($sorted, SORT_DESC, $arr);\n  $result =\
    \ array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = array_search($arr[$i],\
    \ range(1, 9));\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $result = array();\n$i = 0;\nforeach($array as $value){\n    if($value == $array[$i]){\n\
    \        $result[$i] = $value;\n    }else{\n        $i++;\n    }\n}\nprint_r($result);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8aymi2un.php on line 30

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c2qsa0v.php:39\n\
    Stack trace:\n#0 /tmp/tmp1c2qsa0v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1c2qsa0v.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  foreach ($reversed as $key => $value)\
    \ {\n    $reversed[$key] = $arr[$key];\n  }\n  $result = array();\n  foreach ($reversed\
    \ as $key => $value) {\n    $result[] = str_pad($value, $len - $key, STR_PAD_LEFT);\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I believe it can be improved. For example, `by_length(array(2, 1, 1, 4,\
    \ 5, 8, 2, 3))` returns `array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")`, but `by_length(array())` returns `array()`. Also,\
    \ `by_length(array(1, -1, 55))` returns `array(\"One\")`, but `by_length(array())`\
    \ returns `array()`. Also, the `str_pad` function can be replaced by `sprintf('%'.$len.'s#',\
    \ $value)`.\n<|/ c |>\n<| c |>\nI added a version that handles empty arrays and\
    \ arrays with strange numbers. I agree that `sprintf` is more elegant, but `str_pad`\
    \ works just fine for my purposes.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n$length = count($array);\n\
    $min = min($array);\n$max = max($array);\n$range = range($min, $max);\n$reversed\
    \ = array_reverse($range);\nforeach ($reversed as $key => $value) {\n    $reversed[$key]\
    \ = $array[$key];\n}\nforeach ($reversed as $key => $value) {\n    $result[] =\
    \ str_pad($value, $length - $key, STR_PAD_LEFT);\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(2, 1, 1, 4,\
    \ 5, 8, 2, 3);\n$result = array();\n$length = count($array);\n$min = min($array);\n\
    $max = max($array);\n$range = range($min, $max);\n$reversed = array_reverse($range);\n\
    foreach ($reversed as $key => $value) {\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjuz8jr8l.php on line 32

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  $result =\
    \ array_reverse($result);\n  for ($i = 0; $i < $length; $i++) {\n    $result[$i]\
    \ = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lbqdoir.php:35\n\
    Stack trace:\n#0 /tmp/tmp0lbqdoir.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0lbqdoir.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = str_replace(\n      range($min, $max),\n      range($i, $i + 1),\n      strval($arr[$i])\n\
    \    );\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_oxpfupk.php:40\n\
    Stack trace:\n#0 /tmp/tmp_oxpfupk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_oxpfupk.php\
    \ on line 40\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjgca8ge.php:37\n\
    Stack trace:\n#0 /tmp/tmpgjgca8ge.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgjgca8ge.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_pad($arr[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvnnl5ij.php:41\n\
    Stack trace:\n#0 /tmp/tmpyvnnl5ij.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyvnnl5ij.php\
    \ on line 41\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $digits = range($min, $max + 1);\n  $reversed = array_reverse($digits);\n\
    \  $result = array();\n  foreach ($digits as $digit) {\n    $result[] = str_replace(\n\
    \      array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),\n      array('',\
    \ '', '', '', '', '', '', '', '', ''),\n      ucfirst($reversed[$digit])\n   \
    \ );\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ for negative numbers, e.g. `by_length(array(2, -1, 4, 5, 8, 2, 3))` returns\
    \ `array(\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"\
    , \"One\")`\n<|/ c |>\n<| c |>\n: I added a version that handles negative numbers.\n\
    <|/ c |>\n<| c |>\n: I added a version that handles negative numbers.\n<|/ c |>\n\
    <| a tags=sorting,arrays,php |>\n<code>\n<?php\n$array = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\n$array = array_filter($array, function($value) {\n    return $value\
    \ >= 1 && $value <= 9;\n});\n$array = array_map('chr', array_reverse(array_unique($array)));\n\
    $array = array_map(function($value) {\n    return str_pad($value, 1, '0', STR_PAD_LEFT);\n\
    }, $array);\n$array = array_map(function($value) {\n    return str_pad($value,\
    \ 1, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($value) {\n\
    \    return str_pad($value, 1, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($value)\
    \ {\n    return str_pad($value, 1, '0', STR_PAD_LEFT);\n}, $array);\n$array =\
    \ array_map(function($value) {\n    return str_pad($value, 1, '0', STR_PAD_LEFT);\n\
    }, $array);\n$array = array_map(function($value) {\n    return str_pad($value,\
    \ 1, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($value) {\n\
    \    return str_pad($value, 1, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($value)\
    \ {\n    return str_pad($value, 1, '0', STR_PAD_LEFT);\n}, $array);\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpufyesvpj.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = sprintf('%s%s', $arr[$i], $i);\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly for me. However I prefer to use `array_map` instead of `foreach` loop.\
    \ Thanks again.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$array = array_map(function($v){\n    return $v == 1\
    \ ? $v : sprintf('%s%s', $v, $v);\n}, $array);\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $v == 'One' ? $v : sprintf('%s%s',\
    \ $v, $v);\n}, $array);\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array\
    \ = array_map(function($v){\n    return $v == 1 ? $v : sprintf('%s%s', $v, $v);\n\
    }, $array);\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return $v == 'One' ? $v : sprintf('%s%s', $v, $v);\n}, $array);\nprint_r($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$array = array_map(function($v){\n    return $v == 1\
    \ ? $v : sprintf('%s%s', $v, $v);\n}, $array);\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $v == 'One' ? $v : sprintf('%s%s',\
    \ $v, $v);\n}, $array);\nprint_r($array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6kdxhify.php on line 33

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max) {\n \
    \     $result[] = name_by_number($arr[$i]);\n    }\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmple9wi2f9.php:24\nStack trace:\n#0 /tmp/tmple9wi2f9.php(31): by_length(Array)\n\
    #1 /tmp/tmple9wi2f9.php(35): candidate(Array)\n#2 /tmp/tmple9wi2f9.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmple9wi2f9.php on line 24\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n\
    \    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but i need something\
    \ that can handle any array and any number of digits. I mean i don't know how\
    \ many digits will be there in array and i don't know how many digits will be\
    \ there in each number in array. Can you please help me with that?\n<|/ c |>\n\
    <| c |>\nI added a function that will handle any number of digits and any number\
    \ of elements in the array. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine but i need something that can handle any array\
    \ and any number of digits. I mean i don't know how many digits will be there\
    \ in array and i don't know how many digits will be there in each number in array.\
    \ Can you please help me with that?\n<|/ c |>\n<| c |>\nI added a function that\
    \ will handle any number of digits and any number of elements in the array. Hope\
    \ it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0q4dz397.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $min = min($min, $max);\n  $max = max($max, $min);\n \
    \ $len = max($len - 1, 1);\n  $digits = array_fill(0, $len, '');\n  foreach ($arr\
    \ as $i => $num) {\n    if ($num >= $min && $num <= $max) {\n      $digits[$len\
    \ - $i] = $num < $min ? 'One' : $num > $max ? 'Nine' : $num;\n    }\n  }\n  return\
    \ $digits;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp13pjvbp.php:41\n\
    Stack trace:\n#0 /tmp/tmpp13pjvbp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp13pjvbp.php\
    \ on line 41\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $sorted = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    $sorted[$i] = $arr[$i];\n  }\n  sort($sorted);\n  $reversed\
    \ = array_reverse($sorted);\n  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i]\
    \ = $reversed[$i];\n  }\n  $result = array();\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[] = array_search($sorted[$i], array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"));\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to do this without having to create a separate array for each\
    \ possible length. Maybe some kind of recursion?\n<|/ c |>\n<| c |>\nI added a\
    \ recursive solution that doesn't require creating a new array for each possible\
    \ length. Hope it helps.\n<|/ c |>\n<| c |>\nI added a recursive solution that\
    \ doesn't require creating a new array for each possible length. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution that doesn't require creating\
    \ a new array for each possible length. Hope it helps.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array();\n$array[] = array('one', 'two', 'three');\n$array[]\
    \ = array('four', 'five', 'six');\n$array[] = array('seven', 'eight', 'nine');\n\
    $array[] = array('ten', 'eleven', 'twelve');\n\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge($array);\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge($array);\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge($array);\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge($array);\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge($array);\n$array = array_merge($array);\n\
    $array = array_merge($array);\n$array = array_merge\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfqjqd5sd.php on line 37

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  $result =\
    \ array_reverse($result);\n  $result = array_map(function($value) {\n    return\
    \ array_key_exists($value, $arr) ? $arr[$value] : '';\n  }, $result);\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_key_exists() expects parameter 2 to be array, unknown\
    \ given in /tmp/tmpwkfaoqwx.php on line 25\n\nWarning: array_key_exists() expects\
    \ parameter 2 to be array, unknown given in /tmp/tmpwkfaoqwx.php on line 25\n\n\
    Warning: array_key_exists() expects parameter 2 to be array, unknown given in\
    \ /tmp/tmpwkfaoqwx.php on line 25\n\nWarning: array_key_exists() expects parameter\
    \ 2 to be array, unknown given in /tmp/tmpwkfaoqwx.php on line 25\n\nWarning:\
    \ array_key_exists() expects parameter 2 to be array, unknown given in /tmp/tmpwkfaoqwx.php\
    \ on line 25\n\nWarning: array_key_exists() expects parameter 2 to be array, unknown\
    \ given in /tmp/tmpwkfaoqwx.php on line 25\n\nWarning: array_key_exists() expects\
    \ parameter 2 to be array, unknown given in /tmp/tmpwkfaoqwx.php on line 25\n\n\
    Warning: array_key_exists() expects parameter 2 to be array, unknown given in\
    \ /tmp/tmpwkfaoqwx.php on line 25\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwkfaoqwx.php:35\nStack trace:\n#0 /tmp/tmpwkfaoqwx.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwkfaoqwx.php on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ $min);\n  $tens = array_fill(0, $len, $max);\n  $tens[$len - 1] = 1;\n  $ones[$len\
    \ - 1] = 10;\n  $result = array();\n  foreach ($ones as $key => $value) {\n  \
    \  $result[] = str_replace(array_keys($ones), $value, $arr[$key]);\n  }\n  foreach\
    \ ($tens as $key => $value) {\n    $result[] = str_replace(array_keys($tens),\
    \ $value, $arr[$key]);\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9wx2h46_.php on line 34

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array($item, \"One\");\n   \
    \ } elseif ($item >= 10 && $item <= 99) {\n      $result[] = array($item, \"Two\"\
    );\n    } elseif ($item >= 100 && $item <= 999) {\n      $result[] = array($item,\
    \ \"Three\");\n    } elseif ($item >= 1000 && $item <= 9999) {\n      $result[]\
    \ = array($item, \"Four\");\n    } elseif ($item >= 10000 && $item <= 99999) {\n\
    \      $result[] = array($item, \"Five\");\n    } elseif ($item >= 100000 && $item\
    \ <= 999999) {\n      $result[] = array($item, \"Six\");\n    } elseif ($item\
    \ >= 1000000 && $item <= 999999999) {\n      $result[] = array($item, \"Seven\"\
    );\n    } elseif ($item >= 10000000 && $item <= 99999999) {\n      $result[] =\
    \ array($item, \"Eight\");\n    } elseif ($item >= 100000000 && $item <= 99999999999)\
    \ {\n      $result[] = array($item, \"Nine\");\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc80k1p83.php:45\n\
    Stack trace:\n#0 /tmp/tmpc80k1p83.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpc80k1p83.php\
    \ on line 45\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine')[$item - 1];\n    }\n  }\n \
    \ return $result ? array_reverse($result) : array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6gvx599.php:29\n\
    Stack trace:\n#0 /tmp/tmpp6gvx599.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp6gvx599.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n    elseif\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max\
    \ - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3)\
    \ {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n  \
    \    $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i3j1hjq.php:61\n\
    Stack trace:\n#0 /tmp/tmp0i3j1hjq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp0i3j1hjq.php\
    \ on line 61\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $range = range($min, $max);\n  $reversed = array_reverse($range);\n\
    \  $result = array();\n  foreach ($reversed as $digit) {\n    $result[] = array_search($digit,\
    \ $range);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd53vpw4y.php:38\n\
    Stack trace:\n#0 /tmp/tmpd53vpw4y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd53vpw4y.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $arr =\
    \ array_reverse($arr);\n  $arr = array_map(function($n) {\n    return $n >= 1\
    \ && $n <= 9 ? $names[$n] : $n;\n  }, $arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e025o0k.php:30\n\
    Stack trace:\n#0 /tmp/tmp2e025o0k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2e025o0k.php\
    \ on line 30\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[] =\
    \ array($value, $key);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work. `by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3))` returns `array(array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"))`\n<|/ c |>\n<| c |>\nIt works fine for me. `by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))` returns `array(array(\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"))`\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my answer. Can you try it again?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ for me either. `by_length(array(2, 1, 1, 4, 5, 8, 2, 3))` returns `array(array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))`\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer. Can you try it again?\n<|/\
    \ c |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5jzu5_nj.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $arr2 = array();\n  for ($i = 0; $i < $len; $i++) {\n \
    \   $arr2[$i] = $arr[$i];\n  }\n  sort($arr2);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $arr2[$i] = $names[$arr2[$i]];\n  }\n  return $arr2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9f_66jf.php:40\n\
    Stack trace:\n#0 /tmp/tmpi9f_66jf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi9f_66jf.php\
    \ on line 40\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i] ==\
    \ $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = sprintf('%s%s',\
    \ $arr[$i], $i);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2\
    \ = array_reverse($arr);\n$arr3 = array_map(function($v){\n    return $v == 1\
    \ ? 'One' : $v == 2 ? 'Two' : $v == 3 ? 'Three' : $v == 4 ? 'Four' : $v == 5 ?\
    \ 'Five' : $v == 6 ? 'Six' : $v == 7 ? 'Seven' : $v == 8 ? 'Eight' : $v == 9 ?\
    \ 'Nine' : '';\n}, $arr2);\n$arr4 = array_map(function($v){\n    return $v ==\
    \ 1 ? 'One' : $v == 2 ? 'Two' : $v == 3 ? 'Three' : $v == 4 ? 'Four' : $v == 5\
    \ ? 'Five' : $v == 6 ? 'Six' : $v == 7 ? 'Seven' : $v == 8 ? 'Eight' : $v == 9\
    \ ? 'Nine' : '';\n}, $arr3);\n$arr5 = array_map(function($v){\n    return $v ==\
    \ 1 ? 'One' : $v == 2 ? 'Two' : $v == 3 ? 'Three' : $v == 4 ? 'Four' : $v == 5\
    \ ? 'Five' : $v == 6 ? 'Six' : $v == 7 ? 'Seven' : $v == 8 ? 'Eight' : $v == 9\
    \ ? 'Nine' : '';\n}, $arr4);\n$arr6 = array_map(function($v){\n    return $v ==\
    \ 1 ? 'One' : $v == 2 ? 'Two' : $v == 3 ? 'Three' : $v == 4 ? 'Four' : $v == 5\
    \ ? 'Five' : $v == 6 ? 'Six' : $v == 7 ? 'Seven' : $v == 8 ? 'Eight' : $v == 9\
    \ ? 'Nine' : '';\n}, $arr5);\n$arr7 = array_map(function($v){\n    return $v ==\
    \ 1 ? 'One' : $v == 2 ? 'Two' : $v == 3 ? 'Three' : $v == 4 \nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdek_2b3l.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = str_replace(range($min, $max), range(10, $len), $reversed[$i]);\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array = array_reverse($array);\n\
    $array = array_map(function($v){return str_replace(\"10\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"9\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"8\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"7\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"6\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"5\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"4\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"3\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"2\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"1\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"0\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"One\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"Two\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"Three\",\"\",$v);}, $array);\n\
    $array = array_map(function($v){return str_replace(\"Four\",\"\",$\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkez_r2kw.php on line 33

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $digits = range($min, $max);\n\
    \  $reversed = array_reverse($digits);\n  $result = array();\n  foreach ($digits\
    \ as $digit) {\n    $result[] = array_search($digit, $reversed);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufhurpuo.php:35\n\
    Stack trace:\n#0 /tmp/tmpufhurpuo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpufhurpuo.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  sort($result);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $result[$i] = $i < 9 ? $result[$i] : 'One';\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work if the array is empty. `array_key_exists` returns false for\
    \ an empty array.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c\
    \ |>\n<| c |>\n: It doesn't work for me in PHP 5.3.10. `array_key_exists` returns\
    \ false for an empty array.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and\
    \ PHP 5.3.8. Both work as expected.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.3.8. Both work as expected.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $array = array(\n    array('one', 'two', 'three'),\n    array('four', 'five',\
    \ 'six'),\n    array('seven', 'eight', 'nine'),\n    array('ten', 'eleven', 'twelve'),\n\
    \    array('thirteen', 'fourteen', 'fifteen')\n);\n\n$array = array_map(\n   \
    \ function($a) { return implode('', $a); },\n    array_map(\n        function($a)\
    \ { return array_slice($a, 0, -1); },\n        array_map(\n            function($a)\
    \ { return array_slice($a, -1); },\n            array_map(\n                function($a)\
    \ { return array_slice($a, 0, -1); },\n                array_map(\n          \
    \          function($a) { return array_slice($a, -1); },\n                   \
    \ array_map(\n                        function($a) { return array_slice($a, 0,\
    \ -1); },\n                        array_map(\n                            function($a)\
    \ { return array_slice($a, -1); },\n                            array_map(\n \
    \                               function($a) { return array_slice($a, 0, -1);\
    \ },\n                                array_map(\n                           \
    \         function($a) { return array_slice($a, -1); },\n                    \
    \                array_map(\n                                        function($a)\
    \ { return array_slice($a, 0, -1); },\n                                      \
    \  array_map(\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0mpuh6b8.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max) {\n      $result[]\
    \ = name_by_index($arr[$i]);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_index()\
    \ in /tmp/tmp7zg0u3un.php:22\nStack trace:\n#0 /tmp/tmp7zg0u3un.php(29): by_length(Array)\n\
    #1 /tmp/tmp7zg0u3un.php(33): candidate(Array)\n#2 /tmp/tmp7zg0u3un.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7zg0u3un.php on line 22\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_number($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmpq0kzil4n.php:28\nStack trace:\n#0 /tmp/tmpq0kzil4n.php(35): by_length(Array)\n\
    #1 /tmp/tmpq0kzil4n.php(39): candidate(Array)\n#2 /tmp/tmpq0kzil4n.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpq0kzil4n.php on line 28\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $sorted = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i] = $arr[$i];\n  }\n  sort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  $result = array();\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $result[] = str_replace(array_keys($reversed), array_values($reversed),\
    \ $arr[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcaahu6ma.php:40\n\
    Stack trace:\n#0 /tmp/tmpcaahu6ma.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpcaahu6ma.php\
    \ on line 40\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result\
    \ = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n\
    \      $result[] = 'One';\n    }\n    if ($arr[$i] == $max) {\n      $result[]\
    \ = 'Nine';\n    }\n    if ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n\
    \    }\n    if ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n \
    \   if ($arr[$i] == $min + 2) {\n      $result[] = 'Four';\n    }\n    if ($arr[$i]\
    \ == $max - 2) {\n      $result[] = 'Five';\n    }\n    if ($arr[$i] == $min +\
    \ 3) {\n      $result[] = 'Six';\n    }\n    if ($arr[$i] == $max - 3) {\n   \
    \   $result[] = 'Seven';\n    }\n    if ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    if ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution.\
    \ Very concise. Thank you!\n<|/ c |>\n<| c |>\nI like it too, but I wonder how\
    \ it performs compared to other solutions. I ran a test with 100,000 iterations\
    \ and it took about 3 seconds. I wonder if there is a faster way to do this.\n\
    <|/ c |>\n<| c |>\nI ran a test with 100,000 iterations and it took about 3 seconds.\
    \ I wonder if there is a faster way to do this.\n<|/ c |>\n<| c |>\nI ran a test\
    \ with 100,000 iterations and it took about 3 seconds. I wonder if there is a\
    \ faster way to do this.\n<|/ c |>\n<| c |>\nI ran a test with 100,000 iterations\
    \ and it took about 3 seconds. I wonder if there is a faster way to do this.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8,\
    \ 2, 3);\n$numbers = array_reverse($numbers);\n$numbers = array_map(function($v){\n\
    \    return $v == 1 ? $v : $v - 1;\n}, $number\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo6je631q.php on line 57

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $ones = array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n  $tens = array('Ten', 'Eleven',\
    \ 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen',\
    \ 'Nineteen');\n  $hundreds = array('Hundred');\n  $thousands = array('Thousand');\n\
    \  $millions = array('Million');\n  $billions = array('Billion');\n  $trillions\
    \ = array('Trillion');\n  $quadrillions = array('Quadrillion');\n  $quintillions\
    \ = array('Quintillion');\n  $sextillions = array('Sextillion');\n  $septillions\
    \ = array('Septillion');\n  $octillions = array('Octillion');\n  $nonillions =\
    \ array('Nonillion');\n  $decillions = array('Decillion');\n  $undecillions =\
    \ array('Undecillion');\n  $duodecillions = array('Duodecillion');\n  $tredecillions\
    \ = array('Tredecillion');\n  $quattuordecillions = array('Quattuordecillion');\n\
    \  $quindecillions = array('Quindecillion');\n  $sexdecillions = array('Sexdecillion');\n\
    \  $septendecillions = array('Septendecillion');\n  $octodecillions = array('Octodecillion');\n\
    \  $novemdecillions = array('Novendecillion');\n  $vigintillions = array('Vigintillion');\n\
    \  $unvigintillions = array('Unvigintillion');\n  $duovigintillions = array('Duovigintillion');\n\
    \  $trevigintillions = array('Trevigintillion');\n  $quattuorvigintillions = array('Quattuorvigintillion');\n\
    \  $quinvigintillions = array('Quinvigintillion');\n  $sexvigintillion\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_4prmetg.php on line 49

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = $min; $i\
    \ <= $max; $i++) {\n    $result[] = str_pad($i, 2, \"0\", STR_PAD_LEFT);\n  }\n\
    \  return array_reverse($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k0je2p5.php:32\n\
    Stack trace:\n#0 /tmp/tmp7k0je2p5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7k0je2p5.php\
    \ on line 32\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine')[$value - 1];\n   \
    \ }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array is empty. `array_filter` returns an empty array if\
    \ the array is empty.\n<|/ c |>\n<| c |>\n: Yes, I noticed that after I posted\
    \ my answer. I've updated my answer to include a check for empty arrays.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    1 => 'One',\n    2 => 'Two',\n\
    \    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7\
    \ => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine'\n);\n\n$array = array_flip($array);\n\
    $array = array_intersect_key($array, array_flip($array));\n$array = array_flip($array);\n\
    $array = array_map(function($v){return $v[1];}, $array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    1 => 'One',\n    2\
    \ => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n\
    \    7 => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine'\n);\n\n$array = array_flip($array);\n\
    $array = array_intersect_key($array, array_flip($array));\n$array = array_flip($array);\n\
    $array = array_map(function($v){return $v[1];}, $array);\n\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    1 =>\
    \ 'One',\n    2 => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n\
    \    6 => 'Six',\n    7 => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine'\n);\n\n\
    $array = array_flip($array);\n$array = array_intersect_key\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzyuw5ogm.php on line 23

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n    if\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Eight';\n    }\n    if ($arr[$i]\
    \ == $max - 2) {\n      $result[] = 'Seven';\n    }\n    if ($arr[$i] == $max\
    \ - 3) {\n      $result[] = 'Six';\n    }\n    if ($arr[$i] == $max - 4) {\n \
    \     $result[] = 'Five';\n    }\n    if ($arr[$i] == $max - 5) {\n      $result[]\
    \ = 'Four';\n    }\n    if ($arr[$i] == $max - 6) {\n      $result[] = 'Three';\n\
    \    }\n    if ($arr[$i] == $max - 7) {\n      $result[] = 'Two';\n    }\n   \
    \ if ($arr[$i] == $max - 8) {\n      $result[] = 'One';\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwj2879n.php:62\n\
    Stack trace:\n#0 /tmp/tmpwwj2879n.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpwwj2879n.php\
    \ on line 62\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i]\
    \ <= $max) {\n      $result[] = name_by_index($i, $arr);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_index()\
    \ in /tmp/tmpycc6hokl.php:28\nStack trace:\n#0 /tmp/tmpycc6hokl.php(35): by_length(Array)\n\
    #1 /tmp/tmpycc6hokl.php(39): candidate(Array)\n#2 /tmp/tmpycc6hokl.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpycc6hokl.php on line 28\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($min == $max) {\n      $result[] = $arr[$i];\n \
    \     continue;\n    }\n    $result[] = sprintf('%d', ($arr[$i] - $min) * ($max\
    \ - $min + 1));\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizsksshb.php:37\n\
    Stack trace:\n#0 /tmp/tmpizsksshb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpizsksshb.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = by_digit($arr[$i]);\n\
    \  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function by_digit() in\
    \ /tmp/tmpeghobo03.php:21\nStack trace:\n#0 /tmp/tmpeghobo03.php(27): by_length(Array)\n\
    #1 /tmp/tmpeghobo03.php(31): candidate(Array)\n#2 /tmp/tmpeghobo03.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeghobo03.php on line 21\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $num) {\n    $result[] = name_by_num($num);\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_num()\
    \ in /tmp/tmplg2ickby.php:25\nStack trace:\n#0 /tmp/tmplg2ickby.php(31): by_length(Array)\n\
    #1 /tmp/tmplg2ickby.php(35): candidate(Array)\n#2 /tmp/tmplg2ickby.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmplg2ickby.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  foreach ($reversed as $key => $value)\
    \ {\n    $reversed[$key] = $names[$value];\n  }\n  return $reversed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wv6z_8a.php:34\n\
    Stack trace:\n#0 /tmp/tmp_wv6z_8a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_wv6z_8a.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array($item);\n    }\n  }\n\
    \  if (count($result)) {\n    sort($result);\n    $result = array_reverse($result);\n\
    \    foreach ($result as $item) {\n      $result[$item[0]] = $item[1];\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work for me. `array_reverse` doesn't seem to work. `array_reverse`\
    \ returns an empty array.\n<|/ c |>\n<| c |>\n: It works for me. `array_reverse`\
    \ returns an empty array if the array is empty. `array_reverse` returns an array\
    \ with one element if the array has one element. `array_reverse` returns an array\
    \ with two elements if it has two elements. `array_reverse` returns an array with\
    \ three elements if it has three elements. `array_reverse` returns an array with\
    \ four elements if it has four elements. `array_reverse` returns an array with\
    \ five elements if it has five elements. `array_reverse` returns an array with\
    \ six elements if it has six elements. `array_reverse` returns an array with seven\
    \ elements if it has seven elements. `array_reverse` returns an array with eight\
    \ elements if it has eight elements. `array_reverse` returns an array with nine\
    \ elements if it has nine elements.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach($array\
    \ as $key => $value) {\n    if($value >= 1 && $value <= 9) {\n        $result[$value]\
    \ = $key;\n    }\n}\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpha2y0sby.php on line 30

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $names[$result[$i]];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchb1pi9n.php:35\n\
    Stack trace:\n#0 /tmp/tmpchb1pi9n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpchb1pi9n.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = array($value, $key);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThanks for your answer! I didn't know that `array_multisort` existed.\
    \ I was trying to use that to sort by length, but I couldn't get it to work. Your\
    \ solution works perfectly!\n<|/ c |>\n<| c |>\nI added a version that sorts by\
    \ length as well.\n<|/ c |>\n<| c |>\nI added a version that sorts by length as\
    \ well.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    array('name'\
    \ => 'One', 'length' => 2),\n    array('name' => 'Two', 'length' => 1),\n    array('name'\
    \ => 'Three', 'length' => 4),\n    array('name' => 'Four', 'length' => 5),\n \
    \   array('name' => 'Five', 'length' => 8),\n    array('name' => 'Six', 'length'\
    \ => 2),\n    array('name' => 'Seven', 'length' => 7),\n    array('name' => 'Eight',\
    \ 'length' => 8),\n    array('name' => 'Nine', 'length' => 9),\n    array('name'\
    \ => 'Ten', 'length' => 10),\n    array('name' => 'Eleven', 'length' => 11),\n\
    \    array('name' => 'Twelve', 'length' => 12),\n    array('name' => 'Thirteen',\
    \ 'length' => 13),\n    array('name' => 'Fourteen', 'length' => 14),\n    array('name'\
    \ => 'Fifteen', 'length' => 15),\n    array('name' => 'Sixteen', 'length' => 16),\n\
    \    array('name' => 'Seventeen', 'length' => 17),\n    array('name' => 'Eighteen',\
    \ 'length' => 18),\n    array('name' => 'Nineteen', 'length' => 19),\n    array('name'\
    \ => 'Twenty', 'length' => 20),\n    array('name' => 'Twenty-one', 'length' =>\
    \ 21),\n    array('name' => 'Twenty-two', 'length' => 22),\n    array('name' =>\
    \ 'Twenty-three', 'length' => 23),\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp75llcand.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n    elseif\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max\
    \ - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3)\
    \ {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n  \
    \    $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyozu0hxh.php:62\n\
    Stack trace:\n#0 /tmp/tmpyozu0hxh.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpyozu0hxh.php\
    \ on line 62\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $range = range($min, $max);\n  $reversed = array_reverse($range);\n\
    \  $result = array();\n  foreach ($reversed as $val) {\n    $result[] = name_by_length($val);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_length()\
    \ in /tmp/tmpbnibt5v4.php:28\nStack trace:\n#0 /tmp/tmpbnibt5v4.php(34): by_length(Array)\n\
    #1 /tmp/tmpbnibt5v4.php(38): candidate(Array)\n#2 /tmp/tmpbnibt5v4.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbnibt5v4.php on line 28\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $reversed[$i]\
    \ && $reversed[$i] <= $max) {\n      $result[] = name_by_number($reversed[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmphtx2ra31.php:23\nStack trace:\n#0 /tmp/tmphtx2ra31.php(30): by_length(Array)\n\
    #1 /tmp/tmphtx2ra31.php(34): candidate(Array)\n#2 /tmp/tmphtx2ra31.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmphtx2ra31.php on line 23\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n\
    \    }\n    elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n\
    \    elseif ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif\
    \ ($arr[$i] == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i]\
    \ == $max - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min\
    \ + 3) {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n\
    \      $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n    \
    \  $result[] = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[]\
    \ = 'Nine';\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $v == 'One' ? $v : $v == 'Nine' ?\
    \ $v : $v == 'Six' ? $v : $v == 'Five' ? $v : $v == 'Four' ? $v : $v == 'Three'\
    \ ? $v : $v == 'Two' ? $v : $v == 'One' ? $v : $v;\n}, $array);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\n$array = array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $v == 'One' ? $v : $v == 'Nine' ?\
    \ $v : $v == 'Six' ? $v : $v == 'Five' ? $v : $v == 'Four' ? $v\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplw5pi80y.php on line 56

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = sprintf('%u', ($arr[$i] - $min) * 10 + ($arr[$i] - $min));\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpruzyijy4.php:39\n\
    Stack trace:\n#0 /tmp/tmpruzyijy4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpruzyijy4.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $digits = range($min, $max);\n  $reversed = array_reverse($digits);\n\
    \  $names = array();\n  foreach ($reversed as $digit) {\n    $names[] = $names[count($names)\
    \ - 1] . ($digit < 10 ? \"One\" : \"Two\") . ($digit < 100 ? \"Three\" : \"Four\"\
    );\n  }\n  return $names;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much\
    \ for this. I used the code above and it works perfectly. Thanks again.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $result = array();\n$length = count($array);\nfor($i = 0; $i < $length; $i++)\
    \ {\n    $result[] = str_repeat('One', ($array[$i] - 1)%10).str_repeat('Two',\
    \ ($array[$i] - 1)/10);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much\
    \ for this. I used the code above and it works perfectly. Thanks again.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\n$length = count($array);\nfor($i = 0; $i < $length; $i++) {\n  \
    \  $result[] = str_repeat('One', ($array[$i] - 1)%10).str_repeat('Two', ($array[$i]\
    \ - 1)/10);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks so much for\
    \ this. I used the code above and it works perfectly. Thanks again.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\n$length = count($array);\nfor($i = 0; $i < $length; $i++) {\n  \
    \  $result[] = str_repeat('One', ($array[$i] - 1)%10).str_repeat('Two', ($array[$i]\
    \ - 1)/10);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for this.\
    \ I used the code above and it works perfectly. \nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyunkhvcb.php on line 32

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  if ($min == $max) {\n    return $arr;\n  }\n  $range = range($min, $max + 1);\n\
    \  foreach ($range as $key => $value) {\n    $arr[$key] = $value . '-' . str_repeat('Zero',\
    \ count($range) - $key - 1);\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfftx2fc.php:39\n\
    Stack trace:\n#0 /tmp/tmprfftx2fc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprfftx2fc.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $min = array_shift($arr);\n  $max\
    \ = array_shift($arr);\n  if ($min > $max) {\n    return array();\n  }\n  $result\
    \ = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[] = str_pad($i, $len\
    \ - 1, $i);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0tn7nby.php:39\n\
    Stack trace:\n#0 /tmp/tmpv0tn7nby.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv0tn7nby.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $arr =\
    \ array_reverse($arr);\n  $names = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n  $result = array();\n\
    \  foreach ($arr as $num) {\n    $result[] = $names[$num];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhpjbkgo.php:32\n\
    Stack trace:\n#0 /tmp/tmpvhpjbkgo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvhpjbkgo.php\
    \ on line 32\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  if ($min == $max) {\n    return array($min);\n  }\n  $result\
    \ = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[] = str_pad($i, $len\
    \ - 1, $arr[$i]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: str_pad(): Padding string cannot be empty in /tmp/tmpe5xypw1j.php\
    \ on line 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5xypw1j.php:39\n\
    Stack trace:\n#0 /tmp/tmpe5xypw1j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe5xypw1j.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  foreach ($reversed as $key => $value) {\n    if ($value < $min || $value >\
    \ $max) {\n      continue;\n    }\n    $result[$key] = $arr[$key];\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array\
    \ contains negative numbers. Try `by_length(array(2, -1, 4, 5, 8, 2, 3))`\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't care about negative numbers.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array contains negative numbers. Try\
    \ by_length(array(2, -1, 4, 5, 8, 2, 3))\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't care about negative numbers.\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't care about negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return $number >= 1 && $number <= 9;\n});\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_map(function($number) {\n    return\
    \ $number == 1 ? 'One' : $number == 2 ? 'Two' : $number == 3 ? 'Three' : $number\
    \ == 4 ? 'Four' : $number == 5 ? 'Five' : $number == 6 ? 'Six' : $number == 7\
    \ ? 'Seven' : $number == 8 ? 'Eight' : $number == 9 ? 'Nine' : '';\n}, $numbers);\n\
    $numbers = array_filter($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. Try by_length(array(2,\
    \ -1, 4, 5, 8, 2, 3))\n<|/ c |>\n<| c |>\nI added a version that doesn't care\
    \ about negative numbers.\n<|/ c |>\n<| c |>\nI added a version that doesn't care\
    \ about negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$numbers = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers, function(\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0uyasje7.php on line 34

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but\
    \ I really don't like that I have to write so much code just to get a simple task\
    \ to work. I'm sure there is a way to do it with less code, but I can't figure\
    \ it out.\n<|/ c |>\n<| c |>\nI agree with you that there should be a way to do\
    \ this with less code, but I couldn't find one. My solution was a little more\
    \ elegant, but still not as short as yours. I guess it comes down to personal\
    \ preference.\n<|/ c |>\n<| c |>\nI like your solution too, but I really don't\
    \ like that I have to write so much code just to get a simple task to work. I'm\
    \ sure there is a way to do it with less code, but I can't figure it out.\n<|/\
    \ c |>\n<| c |>\nI added a solution that is less code but still not as short as\
    \ yours.\n<|/ c |>\n<| c |>\nI like your solution, but I really don't like that\
    \ I have to write so much code just to get a simple task to work. I'm sure there\
    \ is a way to do it with less code, but I can't figure it out.\n<|/ c |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array\
    \ = array_filter($array, function($v){\n    return $v > 0 && $v < 10;\n});\n$array\
    \ = array_map(function($v){\n    return str_pad($v, 2, '0', STR_PAD_LEFT);\n},\
    \ $array);\n$array = array_reverse($array);\n$array = array_combine(range(1, 9),\
    \ $array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I really\
    \ don't like that I have to write so much code just to get a simple task to work.\
    \ I'm sure there is a way to do it with less code, but I can't figure it out.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr2aczgu6.php on line 33

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $result[] = array($arr[$i], $i);\n  }\n  usort($result,\
    \ function($a, $b) use ($min, $max) {\n    if ($a[0] > $max) {\n      return 1;\n\
    \    }\n    if ($b[0] > $max) {\n      return -1;\n    }\n    if ($a[0] < $min)\
    \ {\n      return -1;\n    }\n    if ($b[0] < $min) {\n      return 1;\n    }\n\
    \    return 0;\n  });\n  foreach ($result as $key => $value) {\n    $result[$key][0]\
    \ = str_replace(\n      array(\n        '0',\n        '1',\n        '2',\n   \
    \     '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n\
    \        '9',\n      ),\n      array(\n        'One',\n        'Two',\n      \
    \  'Three',\n        'Four',\n        'Five',\n        'Six',\n        'Seven',\n\
    \        'Eight',\n        'Nine',\n      ),\n      $result[$key][0]\n    );\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return $number > 0 && $number < 10;\n});\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, range(1, 9));\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($number) {\n    return $numbers[$number];\n}, $numbers);\n\
    print_r($numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return $number > 0 && $number < 10;\n});\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 2, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, range(1, 9));\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function(\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9i8ib5kb.php on line 70

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n   \
    \ } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n  \
    \    $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_osqmfa.php:37\n\
    Stack trace:\n#0 /tmp/tmp6_osqmfa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6_osqmfa.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  krsort($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $names[$value];\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuekub8l.php:36\n\
    Stack trace:\n#0 /tmp/tmpfuekub8l.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfuekub8l.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ if ($arr[$i] == $min) {\n      $result[] = 'One';\n    }\n    elseif ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    }\n    elseif ($arr[$i] == $min +\
    \ 1) {\n      $result[] = 'Two';\n    }\n    elseif ($arr[$i] == $max - 1) {\n\
    \      $result[] = 'Three';\n    }\n    elseif ($arr[$i] == $min + 2) {\n    \
    \  $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max - 2) {\n      $result[]\
    \ = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3) {\n      $result[] = 'Six';\n\
    \    }\n    elseif ($arr[$i] == $max - 3) {\n      $result[] = 'Seven';\n    }\n\
    \    elseif ($arr[$i] == $min + 4) {\n      $result[] = 'Eight';\n    }\n    elseif\
    \ ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0nft0uyk.php on line 59

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycbshgd9.php:39\n\
    Stack trace:\n#0 /tmp/tmpycbshgd9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpycbshgd9.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2m3i21k.php:37\n\
    Stack trace:\n#0 /tmp/tmpr2m3i21k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr2m3i21k.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $min_len = strlen($min);\n  $max_len = strlen($max);\n\
    \  $min_len = $min_len < $max_len ? $min_len : $max_len;\n  $digits = array();\n\
    \  for ($i = 0; $i < $min_len; $i++) {\n    $digits[] = $min[$i];\n  }\n  for\
    \ ($i = $min_len; $i < $max_len; $i++) {\n    $digits[] = $max[$i - $min_len];\n\
    \  }\n  return array_reverse($digits);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `by_length(array(2, -1, 4, 5, 8, 2, 3))`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. Try by_length(array(2,\
    \ -1, 4, 5, 8, 2, 3))\n<|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpim0gbd_m.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i]\
    \ && $arr[$i] <= $max) {\n      $result[] = name_by_index($i, $arr);\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_index()\
    \ in /tmp/tmpgzq8axi1.php:25\nStack trace:\n#0 /tmp/tmpgzq8axi1.php(32): by_length(Array)\n\
    #1 /tmp/tmpgzq8axi1.php(36): candidate(Array)\n#2 /tmp/tmpgzq8axi1.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgzq8axi1.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $len = strlen($min);\n  $arr = array_reverse($arr);\n \
    \ $arr = array_map(function($v) use ($len) {\n    return str_pad(base_convert($v,\
    \ 10, $len), $len, '0', STR_PAD_LEFT);\n  }, $arr);\n  return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nWarning: base_convert(): Invalid `to base' (1) in /tmp/tmpxp2ge6vb.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxp2ge6vb.php:37\n\
    Stack trace:\n#0 /tmp/tmpxp2ge6vb.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxp2ge6vb.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $digits = range($min, $max + 1);\n  $reversed = array_reverse($digits);\n\
    \  $result = array();\n  foreach ($digits as $digit) {\n    $result[] = name_by_digit($digit);\n\
    \  }\n  return array_merge($reversed, $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_digit()\
    \ in /tmp/tmpujwogdo1.php:28\nStack trace:\n#0 /tmp/tmpujwogdo1.php(34): by_length(Array)\n\
    #1 /tmp/tmpujwogdo1.php(38): candidate(Array)\n#2 /tmp/tmpujwogdo1.php(45): test()\n\
    #3 {main}\n  thrown in /tmp/tmpujwogdo1.php on line 28\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_index($i, $arr);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_index()\
    \ in /tmp/tmphupuxw56.php:28\nStack trace:\n#0 /tmp/tmphupuxw56.php(35): by_length(Array)\n\
    #1 /tmp/tmphupuxw56.php(39): candidate(Array)\n#2 /tmp/tmphupuxw56.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmphupuxw56.php on line 28\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_length($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_length()\
    \ in /tmp/tmpth33y8wc.php:24\nStack trace:\n#0 /tmp/tmpth33y8wc.php(31): by_length(Array)\n\
    #1 /tmp/tmpth33y8wc.php(35): candidate(Array)\n#2 /tmp/tmpth33y8wc.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpth33y8wc.php on line 24\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $sorted = array();\n\
    \  foreach ($arr as $key => $val) {\n    if ($val < 1 || $val > 9) {\n      continue;\n\
    \    }\n    $sorted[$val] = $arr[$key];\n  }\n  ksort($sorted);\n  $reversed =\
    \ array_reverse($sorted);\n  foreach ($reversed as $key => $val) {\n    $reversed[$key]\
    \ = $names[$val];\n  }\n  return $reversed;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6zuxdsq.php:42\n\
    Stack trace:\n#0 /tmp/tmpl6zuxdsq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl6zuxdsq.php\
    \ on line 42\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    $result[$key] = $value >= 1 && $value <= 9 ? $value :\
    \ '';\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    array(\n       \
    \ 'name' => 'One',\n        'value' => 1\n    ),\n    array(\n        'name' =>\
    \ 'Two',\n        'value' => 2\n    ),\n    array(\n        'name' => 'Three',\n\
    \        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n       \
    \ 'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n        'value'\
    \ => 5\n    ),\n    array(\n        'name' => 'Six',\n        'value' => 6\n \
    \   ),\n    array(\n        'name' => 'Seven',\n        'value' => 7\n    ),\n\
    \    array(\n        'name' => 'Eight',\n        'value' => 8\n    ),\n    array(\n\
    \        'name' => 'Nine',\n        'value' => 9\n    )\n);\n\n$array = array_map(function($v){\n\
    \    return $v['value'];\n}, $array);\n\n$array = array_unique($array);\n\n$array\
    \ = array_flip($array);\n\n$array = array_map(function($v){\n    return $v['name'];\n\
    }, $array);\n\n$array = array_values($array);\n\nvar_dump($array);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n\
    \    array(\n        'name' => 'One',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'Two',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'Three',\n        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n       \
    \ 'value' => 5\n    ),\n    array(\n        'name' => 'Six',\n        'value'\
    \ => 6\n    ),\n    array(\n        'name' => 'Seven',\n        'value' => 7\n\
    \    ),\n    array(\n        'name' => 'Eight',\n        'value' => 8\n    ),\n\
    \    array(\n        'name' => 'Nine',\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpeizs3kle.php on line 27

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array($arr[$i], $i);\n  }\n  usort($result, function($a, $b)\
    \ {\n    return $a[1] - $b[1];\n  });\n  foreach ($result as $key => $value) {\n\
    \    $result[$key][0] = str_replace(array('0', '1'), array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $result[$key][0]);\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8g17rr5.php:37\n\
    Stack trace:\n#0 /tmp/tmpz8g17rr5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz8g17rr5.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  if ($min == $max)\
    \ {\n    return array($arr[$min]);\n  }\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ep8ky2o.php:44\n\
    Stack trace:\n#0 /tmp/tmp3ep8ky2o.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3ep8ky2o.php\
    \ on line 44\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, array_keys($result));\n  foreach ($result as $key => $value) {\n\
    \    $result[$key] = $name[$value[0]];\n  }\n  return $result;\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\n    array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ),\n    array(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"),\n    array(\"\
    Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"Ten\", \"Eleven\", \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\"),\n    array(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"\
    Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\"),\n    array(\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"),\n   \
    \ array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"),\n    array(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\",\
    \ \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    ),\n    array(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"S\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu8qqgopq.php on line 30

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  sort($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = str_replace(range(1, 9),\
    \ array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\
    \ $value);\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\nforeach ($arr as $value) {\n    $result[] = array_key_exists($value,\
    \ $arr) ? $arr[$value] : '';\n}\nsort($result);\nforeach ($result as $key => $value)\
    \ {\n    $result[$key] = str_replace(range(1, 9), array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $value);\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>\n$arr = array(2, 1, 1,\
    \ 4, 5, 8, 2, 3);\n$result = array();\nforeach ($arr as $value) {\n    $result[]\
    \ = array_key_exists($value, $arr) ? $arr[$value] : '';\n}\nsort($result);\nforeach\
    \ ($result as $key => $value) {\n    $result[$key] = str_replace(range(1, 9),\
    \ array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\
    \ $value);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($arr as $value)\
    \ {\n    $result[] = array_key_exists($value, $arr) ? $arr[$value] : '';\n}\n\
    sort($result);\nforeach ($result as $key => $value) {\n    $result[$key] = str_replace(range(1,\
    \ 9), array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\
    \ $value);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm41jt8s9.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = strval($value);\n    }\n  }\n  return array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaaxz2rdi.php:32\n\
    Stack trace:\n#0 /tmp/tmpaaxz2rdi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaaxz2rdi.php\
    \ on line 32\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $names[$value]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvvyt1h7.php:29\n\
    Stack trace:\n#0 /tmp/tmpdvvyt1h7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdvvyt1h7.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array(\n      'name' => $arr[($i + 1)],\n      'value' => $arr[$i],\n\
    \    );\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  $length = count($arr);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $result[$i]['name'] = $names[$arr[$i]];\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work.\
    \ `by_length(array(2, 1, 1, 4, 5, 8, 2, 3))` returns `array(\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")` instead of `array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")`\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you\
    \ give me an example of an array that doesn't work?\n<|/ c |>\n<| c |>\nI added\
    \ a test case to my answer. Can you give me an example of an array that doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added a test case to my answer. Can you give me\
    \ an example of an array that doesn't work?\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my answer. Can you give me an example of an array that doesn't work?\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    array('name' =>\
    \ 'One', 'value' => 1),\n    array('name' => 'Two', 'value' => 2),\n    array('name'\
    \ => 'Three', 'value' => 3),\n    array('name' => 'Four', 'value' => 4),\n   \
    \ array('name' => 'Five', 'value' => 5),\n    array('name' => 'Six', 'value' =>\
    \ 6),\n    array('name' => 'Seven', 'value' => 7),\n    array('name' => 'Eight',\
    \ 'value' => 8),\n    array('name' => 'Nine', 'value' => 9),\n);\n\n$array = array_map(function($v){\n\
    \    return $v['name'];\n}, $array);\n\n$array = array_combine($array, $array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\n    array('name'\
    \ => 'One', 'value' => 1),\n    array('name' => '\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp42h3o79z.php on line 33

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len -\
    \ 1, 1);\n  $tens = array_fill(0, $len - 1, 10);\n  $arr = array_merge($ones,\
    \ $tens, $arr);\n  array_multisort($arr, $min, $max, $arr);\n  $arr = array_reverse($arr);\n\
    \  $arr = array_map(function ($v) { return $v == 1 ? $v : $v - 1; }, $arr);\n\
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Argument #3 is expected to be an array or\
    \ sorting flag that has not already been specified in /tmp/tmpdmprpz36.php on\
    \ line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmprpz36.php:35\n\
    Stack trace:\n#0 /tmp/tmpdmprpz36.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdmprpz36.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = sprintf('%s%s', $arr[$i], $len - $i - 1);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphps2y011.php:39\n\
    Stack trace:\n#0 /tmp/tmphps2y011.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphps2y011.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ $min);\n  $tens = array_fill(0, $len, $min + 10);\n  $hundreds = array_fill(0,\
    \ $len, $min + 100);\n  $thousands = array_fill(0, $len, $min + 1000);\n  $ten_thousands\
    \ = array_fill(0, $len, $min + 10000);\n  $hundred_thousands = array_fill(0, $len,\
    \ $min + 100000);\n  $millions = array_fill(0, $len, $min + 1000000);\n  $billions\
    \ = array_fill(0, $len, $min + 10000000);\n  $trillions = array_fill(0, $len,\
    \ $min + 100000000);\n  $quadrillions = array_fill(0, $len, $min + 1000000000);\n\
    \  $quintillions = array_fill(0, $len, $min + 10000000000);\n  $sextillions =\
    \ array_fill(0, $len, $min + 100000000000);\n  $septillions = array_fill(0, $len,\
    \ $min + 1000000000000);\n  $octillions = array_fill(0, $len, $min + 10000000000000);\n\
    \  $nonillions = array_fill(0, $len, $min + 100000000000000);\n  $decillions =\
    \ array_fill(0, $len, $min + 1000000000000000);\n  $undecillions = array_fill(0,\
    \ $len, $min + 1000000000000000000);\n  $arr2 = array();\n  foreach ($ones as\
    \ $key => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($tens as $key\
    \ => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($hundreds as $key =>\
    \ $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($thousands as $key =>\
    \ $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($ten_thousands as $key\
    \ => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($hundred_thousands\
    \ as $key => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($millions as\
    \ $key => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($billions as $key\
    \ => $value) {\n    $arr2[$key] = $value;\n  }\n  foreach ($trilli\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp18x5lbvd.php on line 64

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  return array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknkf4mwk.php:32\n\
    Stack trace:\n#0 /tmp/tmpknkf4mwk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpknkf4mwk.php\
    \ on line 32\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $sorted = array();\n\
    \  for ($i = 0; $i < $len; ++$i) {\n    $sorted[$i] = $arr[$i];\n  }\n  sort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  foreach ($reversed as $key => $value)\
    \ {\n    $reversed[$key] = $names[$value];\n  }\n  return $reversed;\n}\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0g63dtvc.php:38\n\
    Stack trace:\n#0 /tmp/tmp0g63dtvc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0g63dtvc.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($arr[$min]);\n  }\n  $arr = array_reverse($arr);\n  $arr = array_map(function($v)\
    \ use ($min, $max) {\n    return $min <= $v ? $min <= $v ? $min : $max : $max;\n\
    \  }, $arr);\n  return array_map(function($v) use ($min, $max) {\n    return $min\
    \ <= $v ? $min <= $v ? $min : $max : $max;\n  }, $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76qsbw5c.php:38\n\
    Stack trace:\n#0 /tmp/tmp76qsbw5c.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp76qsbw5c.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $num) {\n    if\
    \ ($num >= 1 && $num <= 9) {\n      $result[] = array($num, 'One', 'One');\n \
    \   }\n  }\n  foreach ($arr as $num) {\n    if ($num >= 10 && $num <= 99) {\n\
    \      $result[] = array($num, 'Two', 'Two');\n    }\n  }\n  foreach ($arr as\
    \ $num) {\n    if ($num >= 100 && $num <= 999) {\n      $result[] = array($num,\
    \ 'Three', 'Three');\n    }\n  }\n  foreach ($arr as $num) {\n    if ($num >=\
    \ 1000 && $num <= 9999) {\n      $result[] = array($num, 'Four', 'Four');\n  \
    \  }\n  }\n  foreach ($arr as $num) {\n    if ($num >= 10000 && $num <= 99999)\
    \ {\n      $result[] = array($num, 'Five', 'Five');\n    }\n  }\n  foreach ($arr\
    \ as $num) {\n    if ($num >= 100000 && $num <= 999999) {\n      $result[] = array($num,\
    \ 'Six', 'Six');\n    }\n  }\n  foreach ($arr as $num) {\n    if ($num >= 1000000\
    \ && $num <= 9999999) {\n      $result[] = array($num, 'Seven', 'Seven');\n  \
    \  }\n  }\n  foreach ($arr as $num) {\n    if ($num >= 10000000 && $num <= 99999999)\
    \ {\n      $result[] = array($num, 'Eight', 'Eight');\n    }\n  }\n  foreach ($arr\
    \ as $num) {\n    if ($num >= 100000000 && $num <= 999999999) {\n      $result[]\
    \ = array($num, 'Nine', 'Nine');\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k9iohit.php:69\n\
    Stack trace:\n#0 /tmp/tmp9k9iohit.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp9k9iohit.php\
    \ on line 69\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $val) {\n    $result[] = array_search($val, $range);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88mwmfvn.php:35\n\
    Stack trace:\n#0 /tmp/tmp88mwmfvn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp88mwmfvn.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $values[$value]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2ad2vym.php:29\n\
    Stack trace:\n#0 /tmp/tmps2ad2vym.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps2ad2vym.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  foreach ($reversed as $num) {\n    if ($num >= $min &&\
    \ $num <= $max) {\n      $result[] = name_by_number($num);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmplfcrfzky.php:25\nStack trace:\n#0 /tmp/tmplfcrfzky.php(32): by_length(Array)\n\
    #1 /tmp/tmplfcrfzky.php(36): candidate(Array)\n#2 /tmp/tmplfcrfzky.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmplfcrfzky.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, $arr);\n  foreach ($arr as $key => $value) {\n    $result[$key] =\
    \ $value >= 1 && $value <= 9 ? $value : 'One';\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpym1pph6l.php:36\n\
    Stack trace:\n#0 /tmp/tmpym1pph6l.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpym1pph6l.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  $result = array_reverse($result);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d187xdr.php:36\n\
    Stack trace:\n#0 /tmp/tmp2d187xdr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2d187xdr.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $result[] = str_replace(\n      array(\n        '0',\n        '1',\n    \
    \    '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n\
    \        '8',\n        '9',\n      ),\n      array(\n        'One',\n        'Two',\n\
    \        'Three',\n        'Four',\n        'Five',\n        'Six',\n        'Seven',\n\
    \        'Eight',\n        'Nine',\n      ),\n      str_pad($arr[$i], $len - $i,\
    \ 0, STR_PAD_LEFT));\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt21x6_cz.php:60\n\
    Stack trace:\n#0 /tmp/tmpt21x6_cz.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpt21x6_cz.php\
    \ on line 60\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $length = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($arr[$i] >= $min && $arr[$i] <=\
    \ $max) {\n      $result[] = name_by_number($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmphkb8t02h.php:24\nStack trace:\n#0 /tmp/tmphkb8t02h.php(31): by_length(Array)\n\
    #1 /tmp/tmphkb8t02h.php(35): candidate(Array)\n#2 /tmp/tmphkb8t02h.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmphkb8t02h.php on line 24\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $sorted = array();\n  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i]\
    \ = $arr[$i];\n  }\n  sort($sorted);\n  $reversed = array_reverse($sorted);\n\
    \  foreach ($reversed as $key => $value) {\n    $reversed[$key] = $names[$value];\n\
    \  }\n  return $reversed;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwtwoamz.php:36\n\
    Stack trace:\n#0 /tmp/tmptwtwoamz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptwtwoamz.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array();\n  $tens =\
    \ array();\n  $hundreds = array();\n  for ($i = 0; $i < $len; $i++) {\n    $num\
    \ = $arr[$i];\n    if ($num < $min) {\n      $ones[] = $num;\n    } else if ($num\
    \ < $max) {\n      $tens[] = $num;\n    } else {\n      $hundreds[] = $num;\n\
    \    }\n  }\n  $ones = array_reverse($ones);\n  $tens = array_reverse($tens);\n\
    \  $hundreds = array_reverse($hundreds);\n  $ones = array_map(function($x) {\n\
    \    return $x === 1 ? $ones[count($ones) - 1] : $names[$x];\n  }, $ones);\n \
    \ $tens = array_map(function($x) {\n    return $x === 1 ? $tens[count($tens) -\
    \ 1] : $names[$x];\n  }, $tens);\n  $hundreds = array_map(function($x) {\n   \
    \ return $x === 1 ? $hundreds[count($hundreds) - 1] : $names[$x];\n  }, $hundreds);\n\
    \  return array_merge($ones, $tens, $hundreds);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97zvul2x.php on line 41\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97zvul2x.php\
    \ on line 41\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97zvul2x.php:54\n\
    Stack trace:\n#0 /tmp/tmp97zvul2x.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp97zvul2x.php\
    \ on line 54\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $num) {\n    if\
    \ ($num >= 1 && $num <= 9) {\n      $result[] = array($num, $names[$num]);\n \
    \   }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6e34i2h.php:29\n\
    Stack trace:\n#0 /tmp/tmpp6e34i2h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp6e34i2h.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_number($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_number()\
    \ in /tmp/tmp_si19j6z.php:24\nStack trace:\n#0 /tmp/tmp_si19j6z.php(31): by_length(Array)\n\
    #1 /tmp/tmp_si19j6z.php(35): candidate(Array)\n#2 /tmp/tmp_si19j6z.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_si19j6z.php on line 24\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  ksort($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $names[$value];\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5sy9eva.php:36\n\
    Stack trace:\n#0 /tmp/tmpl5sy9eva.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl5sy9eva.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    , $value);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhx435ra.php:29\n\
    Stack trace:\n#0 /tmp/tmpqhx435ra.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqhx435ra.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $len = max($len, $max - $min\
    \ + 1);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = str_pad(1 + $i, $len - $i, $arr[$i], STR_PAD_LEFT);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9nwix8z.php:34\n\
    Stack trace:\n#0 /tmp/tmpf9nwix8z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf9nwix8z.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  foreach ($reversed as $key => $value)\
    \ {\n    $reversed[$key] = $names[$value];\n  }\n  return $reversed;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wv6z_8a.php:34\n\
    Stack trace:\n#0 /tmp/tmp_wv6z_8a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_wv6z_8a.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c2qsa0v.php:39\n\
    Stack trace:\n#0 /tmp/tmp1c2qsa0v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1c2qsa0v.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) {\n    return array();\n\
    \  }\n  $min = array_shift($arr);\n  $max = array_pop($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = array_key_exists($i,\
    \ $reversed) ? $reversed[$i] : $min;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxjtsyny.php:34\n\
    Stack trace:\n#0 /tmp/tmpvxjtsyny.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvxjtsyny.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n    if\
    \ ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = chr(64 + $arr[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf240amze.php:41\n\
    Stack trace:\n#0 /tmp/tmpf240amze.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpf240amze.php\
    \ on line 41\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ 'One');\n  $tens = array_fill(0, $len, 'Ten');\n  $ones_count = count($ones);\n\
    \  $tens_count = count($tens);\n  $result = array();\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max) {\n      $result[] =\
    \ $ones[$i];\n      $result[] = $tens[$i];\n      $result[] = $ones[$i];\n   \
    \   $result[] = $tens[$i];\n      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n\
    \      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n      $result[] =\
    \ $ones[$i];\n      $result[] = $tens[$i];\n      $result[] = $ones[$i];\n   \
    \   $result[] = $tens[$i];\n      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n\
    \      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n      $result[] =\
    \ $ones[$i];\n      $result[] = $tens[$i];\n      $result[] = $ones[$i];\n   \
    \   $result[] = $tens[$i];\n      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n\
    \      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n      $result[] =\
    \ $ones[$i];\n      $result[] = $tens[$i];\n      $result[] = $ones[$i];\n   \
    \   $result[] = $tens[$i];\n      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n\
    \      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n      $result[] =\
    \ $ones[$i];\n      $result[] = $tens[$i];\n      $result[] = $ones[$i];\n   \
    \   $result[] = $tens[$i];\n      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n\
    \      $result[] = $ones[$i];\n      $result[] = $tens[$i];\n      $result\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpasy9ti90.php on line 69

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $val) {\n    $result[] = array_search($val, $range);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88mwmfvn.php:35\n\
    Stack trace:\n#0 /tmp/tmp88mwmfvn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp88mwmfvn.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $num) {\n    if\
    \ ($num >= 1 && $num <= 9) {\n      $result[] = array($num);\n    }\n  }\n  if\
    \ (!empty($result)) {\n    sort($result);\n    foreach ($result as $num) {\n \
    \     $result[$num] = $names[$num];\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmp92vxvvwl.php on line 24\n\nWarning:\
    \ Illegal offset type in /tmp/tmp92vxvvwl.php on line 24\n\nWarning: Illegal offset\
    \ type in /tmp/tmp92vxvvwl.php on line 24\n\nWarning: Illegal offset type in /tmp/tmp92vxvvwl.php\
    \ on line 24\n\nWarning: Illegal offset type in /tmp/tmp92vxvvwl.php on line 24\n\
    \nWarning: Illegal offset type in /tmp/tmp92vxvvwl.php on line 24\n\nWarning:\
    \ Illegal offset type in /tmp/tmp92vxvvwl.php on line 24\n\nWarning: Illegal offset\
    \ type in /tmp/tmp92vxvvwl.php on line 24\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp92vxvvwl.php:35\nStack trace:\n#0 /tmp/tmp92vxvvwl.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp92vxvvwl.php on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $val) {\n    $result[] = str_replace(range(1,9), $val, $names[$val]);\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7ps1q2g.php:35\n\
    Stack trace:\n#0 /tmp/tmpt7ps1q2g.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt7ps1q2g.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i]\
    \ <= $max) {\n      $result[] = array(\n        'name' => $arr[$i],\n        'value'\
    \ => $arr[$i],\n      );\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $result = array();\n$min = min($array);\n$max = max($array);\n$reversed = array_reverse($array);\n\
    foreach($array as $key => $value) {\n    if($min <= $value && $value <= $max)\
    \ {\n        $result[] = array(\n            'name' => $value,\n            'value'\
    \ => $value\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$result\
    \ = array();\n$min = min($array);\n$max = max($array);\n$reversed = array_reverse($array);\n\
    foreach($array as $key => $value) {\n    if($min <= $value && $value <= $max)\
    \ {\n        $result[] = array(\n            'name' => $value,\n            'value'\
    \ => $value\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $result = array();\n$min = min($array);\n$max = max($array);\n$reversed = array_reverse($array);\n\
    foreach($array as $key => $value) {\n    if($min <= $value && $value <= $max)\
    \ {\n        $result[] = array(\n            'name' => $value,\n            'value'\
    \ => $value\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $result = array();\n$\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2oa1nbk0.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = str_replace(range(1,9), '', $result[$i]);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt9lh0xyu.php:35\n\
    Stack trace:\n#0 /tmp/tmpt9lh0xyu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt9lh0xyu.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n  \
    \  } else {\n      $result[] = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_1jddbs.php:39\n\
    Stack trace:\n#0 /tmp/tmpk_1jddbs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpk_1jddbs.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $names[$result[$i]];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchb1pi9n.php:35\n\
    Stack trace:\n#0 /tmp/tmpchb1pi9n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpchb1pi9n.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $value);\n    }\n  }\n  return empty($arr)\
    \ ? array() : array_reverse($result);\n}\n\nfunction candidate(...$args) {\n \
    \   return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4pd22jo.php:29\n\
    Stack trace:\n#0 /tmp/tmpi4pd22jo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi4pd22jo.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2m3i21k.php:37\n\
    Stack trace:\n#0 /tmp/tmpr2m3i21k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr2m3i21k.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n\
    \      $result[] = str_pad($arr[$i], 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_nyzlwi.php:39\n\
    Stack trace:\n#0 /tmp/tmp6_nyzlwi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6_nyzlwi.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!is_array($arr)) {\n    return array();\n  }\n  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  if ($min == $max) {\n    return array($min);\n  }\n  $mid\
    \ = $min + ($max - $min) / 2;\n  $result = array();\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    if ($arr[$i] == $mid) {\n      $result[] = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $i);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptizttq5t.php:42\n\
    Stack trace:\n#0 /tmp/tmptizttq5t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmptizttq5t.php\
    \ on line 42\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return array($min);\n\
    \  }\n  $result = array();\n  for ($i = $min; $i <= $max; $i++) {\n    $result[]\
    \ = str_pad($i, 2, \"0\", STR_PAD_LEFT);\n  }\n  return array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpva8b0ik3.php:35\n\
    Stack trace:\n#0 /tmp/tmpva8b0ik3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpva8b0ik3.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!is_array($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $item) {\n    if ($item >= 1 && $item <= 9) {\n\
    \      $result[] = array($item);\n    }\n  }\n  if (!empty($result)) {\n    sort($result);\n\
    \    foreach ($result as $item) {\n      $result[$item] = array($names[$item]);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmp1u59_mis.php on line 27\n\nWarning:\
    \ Illegal offset type in /tmp/tmp1u59_mis.php on line 27\n\nWarning: Illegal offset\
    \ type in /tmp/tmp1u59_mis.php on line 27\n\nWarning: Illegal offset type in /tmp/tmp1u59_mis.php\
    \ on line 27\n\nWarning: Illegal offset type in /tmp/tmp1u59_mis.php on line 27\n\
    \nWarning: Illegal offset type in /tmp/tmp1u59_mis.php on line 27\n\nWarning:\
    \ Illegal offset type in /tmp/tmp1u59_mis.php on line 27\n\nWarning: Illegal offset\
    \ type in /tmp/tmp1u59_mis.php on line 27\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1u59_mis.php:38\nStack trace:\n#0 /tmp/tmp1u59_mis.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1u59_mis.php on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  $result = array_reverse($result);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d187xdr.php:36\n\
    Stack trace:\n#0 /tmp/tmp2d187xdr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2d187xdr.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 1) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ 'One');\n  $tens = array_fill(0, $len, 'Ten');\n  $hundreds = array_fill(0,\
    \ $len, 'Hundred');\n  $thousands = array_fill(0, $len, 'Thousand');\n  $millions\
    \ = array_fill(0, $len, 'Million');\n  $billions = array_fill(0, $len, 'Billion');\n\
    \  $trillions = array_fill(0, $len, 'Trillion');\n  $quadrillions = array_fill(0,\
    \ $len, 'Quadrillion');\n  $quintillions = array_fill(0, $len, 'Quintillion');\n\
    \  $sextillions = array_fill(0, $len, 'Sextillion');\n  $septillions = array_fill(0,\
    \ $len, 'Septillion');\n  $octillions = array_fill(0, $len, 'Octillion');\n  $nonillions\
    \ = array_fill(0, $len, 'Nonillion');\n  $decillions = array_fill(0, $len, 'Decillion');\n\
    \  $undecillions = array_fill(0, $len, 'Undecillion');\n  $duodecillions = array_fill(0,\
    \ $len, 'Duodecillion');\n  $tredecillions = array_fill(0, $len, 'Tredecillion');\n\
    \  $quattuordecillions = array_fill(0, $len, 'Quattuordecillion');\n  $quindecillions\
    \ = array_fill(0, $len, 'Quindecillion');\n  $sexdecillions = array_fill(0, $len,\
    \ 'Sexdecillion');\n  $septendecillions = array_fill(0, $len, 'Septendecillion');\n\
    \  $octodecillions = array_fill(0, $len, 'Octodecillion');\n  $novemdecillions\
    \ = array_fill(0, $len, 'Novemdecillion');\n  $vigintillions = array_fill(0, $len,\
    \ 'Vigintillion');\n  $unvigintillions = array_fill(0, $len, 'Unvigintillion');\n\
    \  $duovigintillions = array_fill(0, $len, 'Duovigintillion');\n  $trevigintillions\
    \ = array_\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5hheknmx.php on line 48

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    $result[$key] = $value ? $names[$value] : $key;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7178l_3x.php:33\n\
    Stack trace:\n#0 /tmp/tmp7178l_3x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7178l_3x.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $range = range($min, $max);\n  $reversed = array_reverse($range);\n\
    \  foreach ($reversed as $key => $value) {\n    $reversed[$key] = $names[$value];\n\
    \  }\n  return $reversed;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n\
    $array = array_combine(range(1, 9), $array);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n\
    $array = array_combine(range(1, 9), $array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array\
    \ = array_reverse($array);\n$array = array_combine(range(1, 9), $array);\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n$array =\
    \ array_combine(range(1, 9), $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n\
    $array = array_combine(range(1, 9), $array);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,sorting |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $array = array_reverse($array);\n$array = array_combine(range(1, 9), $array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array =\
    \ array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n$array = array_combine(range(1,\
    \ 9), $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n\
    <code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_reverse($array);\n\
    $array = array_\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcw3k23_l.php on line 31

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    $result[$key] = $value ? $names[$value] : '?';\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like your\
    \ solution, but I still don't understand why my code doesn't work. Could you please\
    \ explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer, hope it helps.\n<|/ c |>\n<| c |>\nThank you very much! I understand\
    \ it now. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n$array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9s8sy7h6.php on line 27

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($min == $max) {\n      $result[] = sprintf('%d',\
    \ $min);\n      continue;\n    }\n    $result[] = sprintf('%d', ($arr[$i] - $min)\
    \ * ($max - $min) / $len);\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(2,1,1,4,5,8,2,3);\n\
    $array = array_map(function($v){\n    return $v < 9 ? $v : $v - 9;\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"One\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Two\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Three\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Four\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Five\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Six\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Seven\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Eight\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Nine\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Ten\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Eleven\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Twelve\";\n}, $array);\n\
    $array = array_map(function($v){\n    return $v < 10 ? $v : \"Thirteen\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpei9k2l23.php on line 31

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  foreach ($reversed as $key => $value)\
    \ {\n    $reversed[$key] = $arr[$key];\n  }\n  $result = array();\n  foreach ($reversed\
    \ as $key => $value) {\n    $result[] = array_search($value, $arr);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hy25pi0.php:38\n\
    Stack trace:\n#0 /tmp/tmp1hy25pi0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1hy25pi0.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n  \
    \  }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1za8xexf.php:29\n\
    Stack trace:\n#0 /tmp/tmp1za8xexf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1za8xexf.php\
    \ on line 29\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = array($value, $key);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9igeh5nu.php:35\n\
    Stack trace:\n#0 /tmp/tmp9igeh5nu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9igeh5nu.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len === 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $min = min($min, $max);\n  $max\
    \ = max($min, $max);\n  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n\
    \    $result[] = sprintf('%d', abs($i));\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo960lney.php:35\n\
    Stack trace:\n#0 /tmp/tmpo960lney.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo960lney.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[] =\
    \ array($value, $key);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdiy0k1l6.php:35\n\
    Stack trace:\n#0 /tmp/tmpdiy0k1l6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdiy0k1l6.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n  $reversed\
    \ = array_reverse($range);\n  $result = array();\n  foreach ($reversed as $val)\
    \ {\n    $result[] = strval($val);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6w7hbta.php:33\n\
    Stack trace:\n#0 /tmp/tmpq6w7hbta.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq6w7hbta.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $sorted = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i] = $arr[$i];\n  }\n  sort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  for ($i = 0; $i < $len; $i++) {\n  \
    \  $sorted[$i] = $reversed[$i];\n  }\n  $result = array();\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $result[] = array_search($sorted[$i], array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'));\n  }\n  return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n$i = 0;\nforeach ($array as $value)\
    \ {\n    if ($i < 9) {\n        $result[$i] .= $value;\n    }\n    $i++;\n}\n\
    $result = array_reverse($result);\nforeach ($result as $value) {\n    $result[$i]\
    \ = str_replace($value, 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine');\n}\nprint_r($result);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n$i\
    \ = 0;\nforeach ($array as $value) {\n    if ($i < 9) {\n        $result[$i] .=\
    \ $value;\n    }\n    $i++;\n}\n$result = array_reverse($result);\nforeach ($result\
    \ as $value) {\n    $result[$i] = str_replace($value, 'One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n}\nprint_r($result);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\n$result = array();\n$i = 0;\nforeach ($array as $value) {\n    if\
    \ ($i < 9) {\n        $result[$i] .= $value;\n    }\n    $i++;\n}\n$result = array_reverse($result);\n\
    foreach ($result as $value) {\n    $result[$i] = str_replace($value, 'One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpshgmtti7.php on line 37

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n    if\
    \ ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i] == $max)\
    \ {\n      $result[] = 'Nine';\n    } else {\n      $result[] = sprintf('%s%s',\
    \ $arr[$i], $i);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbe48ww3y.php:42\n\
    Stack trace:\n#0 /tmp/tmpbe48ww3y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbe48ww3y.php\
    \ on line 42\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n\
    \    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return array_reverse($result);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(2, 1, 1,\
    \ 4, 5, 8, 2, 3);\n$result = array();\n$length = count($numbers);\n$min = $numbers[0];\n\
    $max = $numbers[$length-1];\nfor($i = 0; $i < $length; $i++) {\n    if($numbers[$i]\
    \ == $min) {\n        $result[] = 'One';\n    }\n    elseif($numbers[$i] == $max)\
    \ {\n        $result[] = 'Nine';\n    }\n    else {\n        $result[] = str_pad($numbers[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n}\n$result = array_reverse($result);\nprint_r($result);\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdw8d6roy.php on line 36

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ 'One');\n  $tens = array_fill(0, $len, 'Ten');\n  $ones_count = count($ones);\n\
    \  $tens_count = count($tens);\n  $result = array();\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = $ones[$i];\n    } else\
    \ if ($arr[$i] == $max) {\n      $result[] = $tens[$i];\n    } else {\n      $result[]\
    \ = $arr[$i];\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ more efficient? It seems like it would be a lot more efficient to just loop\
    \ through the array once and add each element to a new array as you go.\n<|/ c\
    \ |>\n<| c |>\nI agree with you. My solution was just to show how it could be\
    \ done with minimal code. My solution was also not very efficient, since it had\
    \ to loop through the array twice. My solution also had a bug in it that would\
    \ cause it to fail if you passed it an array with negative numbers. I fixed that\
    \ bug and added a comment to explain how it works.\n<|/ c |>\n<| c |>\nI added\
    \ a more efficient solution that doesn't require looping through the array twice.\n\
    <|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require looping\
    \ through the array twice.\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require looping through the array twice.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n\n$result = array();\n\n\
    foreach ($array as $value) {\n    if ($value >= 1 && $value <= 9) {\n        $result[]\
    \ = str_repeat('One', count($result));\n    }\n    if ($value == 10) {\n     \
    \   $result[] = str_repeat('Ten', count($result));\n    }\n    $result[] = $value;\n\
    }\n\n$result = array_reverse($result);\n\nforeach ($result as $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n        $result[] = str_repeat('One', count($result));\n\
    \    }\n    if ($value == \nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkth1c4d7.php on line 37

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  sort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $value[1];\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\n    array('One', 1),\n    array('Two', 2),\n    array('Three',\
    \ 3),\n    array('Four', 4),\n    array('Five', 5),\n    array('Six', 6),\n  \
    \  array('Seven', 7),\n    array('Eight', 8),\n    array('Nine', 9),\n);\n\n$result\
    \ = array();\nforeach ($array as $value) {\n    $result[] = $value[0];\n}\narray_multisort($result,\
    \ SORT_DESC, $array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\n    array('One', 1),\n    array('Two', 2),\n    array('Three',\
    \ 3),\n    array('Four', 4),\n    array('Five', 5),\n    array('Six', 6),\n  \
    \  array('Seven', 7),\n    array('Eight', 8),\n    array('Nine', 9),\n);\n\n$result\
    \ = array();\nforeach ($array as $value) {\n    $result[] = $value[0];\n}\narray_multisort($result,\
    \ SORT_DESC, $array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    array('One', 1),\n    array('Two', 2),\n  \
    \  array('Three', 3),\n    array('Four', 4),\n    array('Five', 5),\n    array('Six',\
    \ 6),\n    array('Seven', 7),\n    array('Eight', 8),\n    array('Nine', 9),\n\
    );\n\n$result = array();\nforeach ($array as $value) {\n    $result[] = $value[0];\n\
    }\narray_multisort($result, SORT_DESC, $array);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\n    array('One', 1),\n    array('Two',\
    \ \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4w94jc6.php on line 30

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  sort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $value[1];\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda09_pqx.php:36\n\
    Stack trace:\n#0 /tmp/tmpda09_pqx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpda09_pqx.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $arr =\
    \ array_reverse($arr);\n  $arr = array_map(function($n) {\n    return $n == '-1'\
    \ ? 'One' : $n == '0' ? 'Zero' : $n == '1' ? 'One' : $n == '9' ? 'Nine' : $n ==\
    \ '10' ? 'Ten' : $n == '11' ? 'Eleven' : $n == '12' ? 'Twelve' : $n == '13' ?\
    \ 'Thirteen' : $n == '14' ? 'Fourteen' : $n == '15' ? 'Fifteen' : $n == '16' ?\
    \ 'Sixteen' : $n == '17' ? 'Seventeen' : $n == '18' ? 'Eighteen' : $n == '19'\
    \ ? 'Nineteen' : $n;\n  }, $arr);\n  return $arr;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8,\
    \ 2, 3);\n$arr = array_reverse($arr);\n$arr = array_map(function($n) {\n    return\
    \ $n == '-1' ? 'One' : $n == '0' ? 'Zero' : $n == '1' ? 'One' : $n == '9' ? 'Nine'\
    \ : $n == '10' ? 'Ten' : $n == '11' ? 'Eleven' : $n == '12' ? 'Twelve' : $n ==\
    \ '13' ? 'Thirteen' : $n == '14' ? 'Fourteen' : $n == '15' ? 'Fifteen' : $n ==\
    \ '16' ? 'Sixteen' : $n == '17' ? 'Seventeen' : $n == '18' ? 'Eighteen' : $n ==\
    \ '19' ? 'Nineteen' : $n;\n}, $arr);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$arr = array_reverse($arr);\n\
    $arr = array_map(function($n) {\n    return $n == '-1' ? 'One' : $n == '0' ? 'Zero'\
    \ : $n == '1' ? 'One' : $n == '9' ? 'Nine' : $n == '10' ? 'Ten' : $n == '11' ?\
    \ 'Eleven' : $n == '12' ? 'Twelve' : $n == '13' ? 'Thirteen' : $n == '14' ? 'Fourteen'\
    \ : $n == '15' ? 'Fifteen' : $n == '16' ? 'Sixteen' : $n == '17' ? 'Seventeen'\
    \ : $n == '18' \nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpipqd8cwx.php on line 24

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] >= $min && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_length($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_length()\
    \ in /tmp/tmpkcxct75d.php:24\nStack trace:\n#0 /tmp/tmpkcxct75d.php(31): by_length(Array)\n\
    #1 /tmp/tmpkcxct75d.php(35): candidate(Array)\n#2 /tmp/tmpkcxct75d.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkcxct75d.php on line 24\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  krsort($result);\n  foreach ($result as $key => $value) {\n   \
    \ $result[$key] = $value[1];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14rkdjoq.php:33\n\
    Stack trace:\n#0 /tmp/tmp14rkdjoq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp14rkdjoq.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) {\n    return array();\n\
    \  }\n  $result = array();\n  foreach ($arr as $key => $val) {\n    if ($val <\
    \ 1 || $val > 9) {\n      continue;\n    }\n    $result[$val] = $arr[$key];\n\
    \  }\n  return array_reverse($result);\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s_eedh9.php:34\n\
    Stack trace:\n#0 /tmp/tmp0s_eedh9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0s_eedh9.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    $result[$key] = $value ? $name[$value] : '?';\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq49hqr84.php:33\n\
    Stack trace:\n#0 /tmp/tmpq49hqr84.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq49hqr84.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if\
    \ ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = array($arr[$i] => \"One\"\
    );\n    }\n    if ($arr[$i] >= 10 && $arr[$i] <= 19) {\n      $result[] = array($arr[$i]\
    \ => \"Two\");\n    }\n    if ($arr[$i] >= 20 && $arr[$i] <= 99) {\n      $result[]\
    \ = array($arr[$i] => \"Three\");\n    }\n    if ($arr[$i] >= 100 && $arr[$i]\
    \ <= 999) {\n      $result[] = array($arr[$i] => \"Four\");\n    }\n    if ($arr[$i]\
    \ >= 1000 && $arr[$i] <= 9999) {\n      $result[] = array($arr[$i] => \"Five\"\
    );\n    }\n    if ($arr[$i] >= 10000 && $arr[$i] <= 99999) {\n      $result[]\
    \ = array($arr[$i] => \"Six\");\n    }\n    if ($arr[$i] >= 100000 && $arr[$i]\
    \ <= 999999) {\n      $result[] = array($arr[$i] => \"Seven\");\n    }\n    if\
    \ ($arr[$i] >= 1000000 && $arr[$i] <= 999999999) {\n      $result[] = array($arr[$i]\
    \ => \"Eight\");\n    }\n    if ($arr[$i] >= 10000000 && $arr[$i] <= 99999999)\
    \ {\n      $result[] = array($arr[$i] => \"Nine\");\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf73p2pr0.php:57\n\
    Stack trace:\n#0 /tmp/tmpf73p2pr0.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpf73p2pr0.php\
    \ on line 57\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n  \
    \  } else if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = chr($arr[$i]);\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| a dscore=2 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_map(function($a){\n\
    \    return $a < 10 ? 'One' : $a < 20 ? 'Two' : $a < 30 ? 'Three' : $a < 40 ?\
    \ 'Four' : $a < 50 ? 'Five' : $a < 60 ? 'Six' : $a < 70 ? 'Seven' : $a < 80 ?\
    \ 'Eight' : $a < 90 ? 'Nine' : '';\n}, $array);\n$array = array_reverse($array);\n\
    $array = array_map(function($a){\n    return $a == 'One' ? '1' : $a == 'Nine'\
    \ ? '9' : $a;\n}, $array);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_map(function($a){\n\
    \    return $a < 10 ? 'One' : $a < 20 ? 'Two' : $a < 30 ? 'Three' : $a < 40 ?\
    \ 'Four' : $a < 50 ? 'Five' : $a < 60 ? 'Six' : $a < 70 ? 'Seven' : $a < 80 ?\
    \ 'Eight' : $a < 90 ? 'Nine' : '';\n}, $array);\n$array = array_reverse($array);\n\
    $array = array_map(function($a){\n    return $a == 'One' ? '1' : $a == 'Nine'\
    \ ? '9' : $a;\n}, $array);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_map(function($a){\n\
    \    return $a < 10 ? 'One' : $a < 20 ? 'Two' : $a < 30 ? '\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpceljfvql.php on line 33

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  ksort($result);\n  foreach\
    \ ($result as $key => $value) {\n    $result[$key] = $names[$value];\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2yzhohtm.php:35\n\
    Stack trace:\n#0 /tmp/tmp2yzhohtm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2yzhohtm.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) return array();\n  $len = count($arr);\n  if\
    \ ($len < 2) return $arr;\n  $min = min($arr);\n  $max = max($arr);\n  $result\
    \ = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n\
    \      $result[] = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[]\
    \ = 'Nine';\n    } else {\n      $result[] = sprintf('%s%s', $arr[$i], $i < $len\
    \ - 1 ? 's' : '');\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8,\
    \ 2, 3);\n$result = array();\n$len = count($array);\n$min = min($array);\n$max\
    \ = max($array);\nfor ($i = 0; $i < $len; $i++) {\n    if ($array[$i] == $min)\
    \ {\n        $result[] = 'One';\n    } else if ($array[$i] == $max) {\n      \
    \  $result[] = 'Nine';\n    } else {\n        $result[] = sprintf('%s%s', $array[$i],\
    \ $i < $len - 1 ? 's' : '');\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\n$len = count($array);\n$min = min($array);\n$max = max($array);\n\
    for ($i = 0; $i < $len; $i++) {\n    if ($array[$i] == $min) {\n        $result[]\
    \ = 'One';\n    } else if ($array[$i] == $max) {\n        $result[] = 'Nine';\n\
    \    } else {\n        $result[] = sprintf('%s%s', $array[$i], $i < $len - 1 ?\
    \ 's' : '');\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\n$len = count($array);\n$min = min($array);\n$max = max($array);\n\
    for ($i = 0; $i < $len; $i++) {\n    if ($array[$i] == $min) {\n        $result[]\
    \ = 'One';\n    } else if ($array[$i] == $max) {\n        $result[] = 'Nine\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6e5qn0f5.php on line 32

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0txilt1.php:35\n\
    Stack trace:\n#0 /tmp/tmp_0txilt1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_0txilt1.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \ $tens = array(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\");\n  $hundreds\
    \ = array(\"Hundred\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"\
    Quadrillion\", \"Quintillion\", \"Quintillion\", \"Billion\", \"Million\", \"\
    Thousand\", \"Hundred\");\n  $thousands = array(\"Thousand\", \"Million\", \"\
    Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Quintillion\", \"\
    Billion\", \"Million\", \"Thousand\", \"Hundred\");\n  $millions = array(\"Million\"\
    , \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\", \"Quintillion\"\
    , \"Billion\", \"Million\", \"Thousand\", \"Hundred\");\n  $billions = array(\"\
    Billion\", \"Million\", \"Thousand\", \"Hundred\");\n  $trillions = array(\"Trillion\"\
    , \"Quadrillion\", \"Quintillion\", \"Billion\", \"Million\", \"Thousand\", \"\
    Hundred\");\n  $quadrillions = array(\"Quadrillion\", \"Quintillion\", \"Billion\"\
    , \"Million\", \"Thousand\", \"Hundred\");\n  $quintillions = array(\"Quintillion\"\
    , \"Billion\", \"Million\", \"Thousand\", \"Hundred\");\n  $hundredths = array(\"\
    Hundredth\", \"Thousandth\", \"Millionth\", \"Billionth\", \"Trillionth\", \"\
    Quadrillionth\", \"Quintillionth\", \"Quintillionth\", \"Billionth\", \"Millionth\"\
    , \"Hundredth\");\n  $thousandths = array(\"Thousandth\", \"Millionth\", \"Billionth\"\
    , \"Trillionth\", \"Quadrillionth\", \"Quintillionth\", \"Quintillionth\", \"\
    Billionth\", \"Millionth\", \"Hundredth\");\n  $millionths = array(\"Millionth\"\
    , \"Billionth\", \"\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_ur4wv04.php on line 38

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) return array();\n  $len = count($arr);\n  if\
    \ ($len < 2) return $arr;\n  $min = min($arr);\n  $max = max($arr);\n  $digits\
    \ = range($min, $max);\n  $reversed = array_reverse($digits);\n  $result = array();\n\
    \  foreach ($digits as $digit) {\n    $result[] = strpos($reversed, $digit) ?\
    \ $names[$digit] : $digit;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpr_5ws_6b.php\
    \ on line 24\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpr_5ws_6b.php on line 24\n\nWarning: strpos() expects parameter 1\
    \ to be string, array given in /tmp/tmpr_5ws_6b.php on line 24\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpr_5ws_6b.php on line\
    \ 24\n\nWarning: strpos() expects parameter 1 to be string, array given in /tmp/tmpr_5ws_6b.php\
    \ on line 24\n\nWarning: strpos() expects parameter 1 to be string, array given\
    \ in /tmp/tmpr_5ws_6b.php on line 24\n\nWarning: strpos() expects parameter 1\
    \ to be string, array given in /tmp/tmpr_5ws_6b.php on line 24\n\nWarning: strpos()\
    \ expects parameter 1 to be string, array given in /tmp/tmpr_5ws_6b.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_5ws_6b.php:34\n\
    Stack trace:\n#0 /tmp/tmpr_5ws_6b.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpr_5ws_6b.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $len = strlen($min);\n  $result = array();\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $result[] = str_replace(\n      array_keys($arr),\n\
    \      array_values($arr),\n      str_pad(\n        $arr[$i],\n        $len,\n\
    \        chr($i + ord('0'))\n      )\n    );\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$array = array(\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array\
    \ = array_reverse($array);\n$array = array_map(function($v){\n    return str_pad($v,\
    \ strlen($v), chr($v + ord('0')));\n}, $array);\n$array = array_combine($array,\
    \ array_fill(0, count($array), $array[0]));\nprint_r($array);\n</code>\n<|/ a\
    \ tags=arrays,php dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, strlen($v), chr($v + ord('0')));\n}, $array);\n$array\
    \ = array_combine($array, array_fill(0, count($array), $array[0]));\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, strlen($v), chr($v + ord('0')));\n}, $array);\n$array\
    \ = array_combine($array, array_fill(0, count($array), $array[0]));\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwzi0jil9.php on line 39

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n    elseif\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max\
    \ - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3)\
    \ {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n  \
    \    $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptk0h4ccf.php:66\n\
    Stack trace:\n#0 /tmp/tmptk0h4ccf.php(73): test()\n#1 {main}\n  thrown in /tmp/tmptk0h4ccf.php\
    \ on line 66\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $min =\
    \ min($arr);\n  $max = max($arr);\n  $len = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n  \
    \  } else if ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    } else if\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    } else if ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    } else if ($arr[$i] == $max -\
    \ 2) {\n      $result[] = 'Five';\n    } else if ($arr[$i] == $min + 3) {\n  \
    \    $result[] = 'Six';\n    } else if ($arr[$i] == $max - 3) {\n      $result[]\
    \ = 'Seven';\n    } else if ($arr[$i] == $min + 4) {\n      $result[] = 'Eight';\n\
    \    } else {\n      $result[] = 'Nine';\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidf4ex5p.php:53\n\
    Stack trace:\n#0 /tmp/tmpidf4ex5p.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpidf4ex5p.php\
    \ on line 53\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ if ($arr[$i] == $min) {\n      $result[] = 'One';\n    }\n    if ($arr[$i] ==\
    \ $max) {\n      $result[] = 'Nine';\n    }\n    if ($arr[$i] == $min + 1) {\n\
    \      $result[] = 'Two';\n    }\n    if ($arr[$i] == $max - 1) {\n      $result[]\
    \ = 'Three';\n    }\n    if ($arr[$i] == $min + 2) {\n      $result[] = 'Four';\n\
    \    }\n    if ($arr[$i] == $max - 2) {\n      $result[] = 'Five';\n    }\n  \
    \  if ($arr[$i] == $min + 3) {\n      $result[] = 'Six';\n    }\n    if ($arr[$i]\
    \ == $max - 3) {\n      $result[] = 'Seven';\n    }\n    if ($arr[$i] == $min\
    \ + 4) {\n      $result[] = 'Eight';\n    }\n    if ($arr[$i] == $max - 4) {\n\
    \      $result[] = 'Nine';\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. Try `by_length(array(2, 1, 1, 4, 5,\
    \ 8, 2, 3))`\n<|/ c |>\n<| c |>\nI added a test case to my answer.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers, function($number) {\n\
    \    return $number > 0 && $number < 10;\n});\n$numbers = array_map(function($number)\
    \ {\n    return $number < 10 ? 'One' : $number < 20 ? 'Two' : $number < 30 ? 'Three'\
    \ : $number < 40 ? 'Four' : $number < 50 ? 'Five' : $number < 60 ? 'Six' : $number\
    \ < 70 ? 'Seven' : $number < 80 ? 'Eight' : $number < 90 ? 'Nine' : '';\n}, $numbers);\n\
    $numbers = array_reverse($numbers);\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3oobevb5.php on line 59

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $val) {\n    $result[] = name_by_length($val, $len);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_length()\
    \ in /tmp/tmpc688tr7t.php:25\nStack trace:\n#0 /tmp/tmpc688tr7t.php(31): by_length(Array)\n\
    #1 /tmp/tmpc688tr7t.php(35): candidate(Array)\n#2 /tmp/tmpc688tr7t.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc688tr7t.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $arr = array_reverse($arr);\n  $arr = array_map(function($v)\
    \ use ($min, $max) {\n    return $min <= $v ? $v : $max - $v;\n  }, $arr);\n \
    \ return array_map(function($v) use ($min, $max) {\n    return $min <= $v ? $min\
    \ <= $v ? $min : $max : $max - $v;\n  }, $arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dchupgh.php:38\n\
    Stack trace:\n#0 /tmp/tmp4dchupgh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4dchupgh.php\
    \ on line 38\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $names[$result[$i]];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl_mu88h.php:35\n\
    Stack trace:\n#0 /tmp/tmppl_mu88h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppl_mu88h.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = array($item);\n    }\n  }\n\
    \  if (count($result)) {\n    sort($result);\n    foreach ($result as $item) {\n\
    \      $result[$item[0]] = $names[$item[0]];\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylh1ns74.php:34\n\
    Stack trace:\n#0 /tmp/tmpylh1ns74.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpylh1ns74.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = array_key_exists($key,\
    \ $arr) ? $arr[$key] : '';\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoky_ez84.php:35\n\
    Stack trace:\n#0 /tmp/tmpoky_ez84.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoky_ez84.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $result = array();\n  for ($i = 0; $i < $len; ++$i) {\n\
    \    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    }\n    if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    }\n    if ($arr[$i] >= 1 && $arr[$i]\
    \ <= 9) {\n      $result[] = chr($arr[$i]);\n    }\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14a4963e.php:44\n\
    Stack trace:\n#0 /tmp/tmp14a4963e.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp14a4963e.php\
    \ on line 44\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  if (empty($arr)) {\n    return $result;\n\
    \  }\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  $result = array_reverse($result);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y2yn9ad.php:36\n\
    Stack trace:\n#0 /tmp/tmp4y2yn9ad.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4y2yn9ad.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) return array();\n\
    \  if ($len == 1) return array($arr[0]);\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $arr = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min)\
    \ {\n      $arr[$i] = $min + 1;\n    } else if ($arr[$i] == $max) {\n      $arr[$i]\
    \ = $max - 1;\n    }\n  }\n  for ($i = 0; $i < $len; $i++) {\n    $arr[$i] = $names[$arr[$i]];\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6mgys9d.php:39\n\
    Stack trace:\n#0 /tmp/tmpj6mgys9d.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj6mgys9d.php\
    \ on line 39\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array_key_exists($i, $arr) ? $arr[$i] : '';\n  }\n  array_multisort($result,\
    \ SORT_DESC, $arr);\n  foreach ($arr as $key => $value) {\n    $result[$key] =\
    \ str_replace(array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'), array('', '', '', '', '', '', '', '', ''), $value);\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers, function($n){\n\
    \    return $n > 0 && $n < 10;\n});\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n},\
    \ $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($numbers),\
    \ 0));\n$numbers = array_map(function($n){\n    return str_pad($n, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, array_fill(0, count($number\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpex4ierw7.php on line 29

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len < 2) return array();\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n  $reversed\
    \ = array_reverse($range);\n  $result = array();\n  foreach ($reversed as $digit)\
    \ {\n    $result[] = strval($digit);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg4o49f7.php:33\n\
    Stack trace:\n#0 /tmp/tmppg4o49f7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppg4o49f7.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  return array_reverse($result);\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknkf4mwk.php:32\n\
    Stack trace:\n#0 /tmp/tmpknkf4mwk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpknkf4mwk.php\
    \ on line 32\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $names[$result[$i]];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchb1pi9n.php:35\n\
    Stack trace:\n#0 /tmp/tmpchb1pi9n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpchb1pi9n.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $len =\
    \ count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i]\
    \ = $arr[$i];\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    $result[$i] = $names[$i];\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f85f2bd.php:35\n\
    Stack trace:\n#0 /tmp/tmp9f85f2bd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9f85f2bd.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $num) {\n    $result[] = array_search($num, $range);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan5miqwv.php:35\n\
    Stack trace:\n#0 /tmp/tmpan5miqwv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpan5miqwv.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $ones = array_fill(0, $len,\
    \ 'One');\n  $tens = array_fill(0, $len, 'Ten');\n  $ones_count = count($ones);\n\
    \  $tens_count = count($tens);\n  $result = array();\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $result[$i] = $ones[$i];\n    if ($min <= $arr[$i] && $arr[$i]\
    \ <= $max) {\n      $result[$i] = $tens[$arr[$i] - $min];\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71ylzn0d.php:40\n\
    Stack trace:\n#0 /tmp/tmp71ylzn0d.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp71ylzn0d.php\
    \ on line 40\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $arr =\
    \ array_reverse($arr);\n  $result = array();\n  foreach ($arr as $num) {\n   \
    \ if ($num >= 1 && $num <= 9) {\n      $result[] = str_pad($num, 2, \"0\", STR_PAD_LEFT);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7xes0rzw.php:33\n\
    Stack trace:\n#0 /tmp/tmp7xes0rzw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7xes0rzw.php\
    \ on line 33\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, array_keys($result));\n  foreach ($result as $key => $value) {\n\
    \    $result[$key] = $names[$value[0]];\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlkkxfwu.php:36\n\
    Stack trace:\n#0 /tmp/tmpqlkkxfwu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqlkkxfwu.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) return array();\n  $len = count($arr);\n  if\
    \ ($len == 0) return array();\n  $min = min($arr);\n  $max = max($arr);\n  $range\
    \ = range($min, $max);\n  $reversed = array_reverse($range);\n  $result = array();\n\
    \  foreach ($reversed as $digit) {\n    $result[] = array_search($digit, $range);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q0kn7sf.php:34\n\
    Stack trace:\n#0 /tmp/tmp6q0kn7sf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6q0kn7sf.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $digit) {\n    $result[] = array_search($digit, $range);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn0vp8io0.php:35\n\
    Stack trace:\n#0 /tmp/tmpn0vp8io0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn0vp8io0.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    $result[$key] = $value >= 1 && $value <= 9 ? $value :\
    \ \"One\";\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    array('name'\
    \ => 'One', 'number' => 1),\n    array('name' => 'Two', 'number' => 2),\n    array('name'\
    \ => 'Three', 'number' => 3),\n    array('name' => 'Four', 'number' => 4),\n \
    \   array('name' => 'Five', 'number' => 5),\n    array('name' => 'Six', 'number'\
    \ => 6),\n    array('name' => 'Seven', 'number' => 7),\n    array('name' => 'Eight',\
    \ 'number' => 8),\n    array('name' => 'Nine', 'number' => 9),\n);\n\n$array =\
    \ array_map(function($item) {\n    return $item['number'];\n}, $array);\n\n$array\
    \ = array_combine(range(1, 10), $array);\n\nksort($array);\n\n$array = array_map(function($item)\
    \ {\n    return $item['name'];\n}, $array);\n\nprint_r($array);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n  \
    \  array('name' => 'One', 'number' => 1),\n    array('name' => 'Two', 'number'\
    \ => 2),\n    array('name' => 'Three', 'number' => 3),\n    array('name' => 'Four',\
    \ 'number' => 4),\n    array('name' => 'Five', 'number' => 5),\n    array('name'\
    \ => 'Six', 'number' => 6),\n    array('name' => 'Seven', 'number' => 7),\n  \
    \  array('name' => 'Eight', 'number' => 8),\n    array('name' => 'Nine', 'number'\
    \ => 9),\n);\n\n$array = array_map(function($item) {\n    return $item['number'];\n\
    }, $array);\n\n$array = array_combine(range(1, 10), $array);\n\nksort($array);\n\
    \n$array = array_map(function($item) {\n    return $item['name'];\n}, $array);\n\
    \nprint_r($array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnq29lurm.php on line 27

    '
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $result[] = array_key_exists($i, $arr) ? $arr[$i] : \"\";\n  }\n  sort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = str_replace(array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"), array(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\"), $value);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqxhh04z.php:35\n\
    Stack trace:\n#0 /tmp/tmprqxhh04z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprqxhh04z.php\
    \ on line 35\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph835kyxk.php:34\n\
    Stack trace:\n#0 /tmp/tmph835kyxk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmph835kyxk.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $value) {\n    $result[] = name_by_length($value, $len);\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function name_by_length()\
    \ in /tmp/tmpn61otyt_.php:25\nStack trace:\n#0 /tmp/tmpn61otyt_.php(31): by_length(Array)\n\
    #1 /tmp/tmpn61otyt_.php(35): candidate(Array)\n#2 /tmp/tmpn61otyt_.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn61otyt_.php on line 25\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return\
    \ array($min);\n  }\n  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n\
    \    $result[] = str_pad($i, $len - 1, $arr[$i]);\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: str_pad(): Padding string cannot be empty in /tmp/tmpwr5elivn.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr5elivn.php:36\n\
    Stack trace:\n#0 /tmp/tmpwr5elivn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwr5elivn.php\
    \ on line 36\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  $length = count($arr);\n  foreach ($arr as $key => $value) {\n\
    \    if ($value >= 1 && $value <= 9) {\n      $result[$key] = $value;\n    }\n\
    \  }\n  krsort($result);\n  foreach ($result as $key => $value) {\n    $result[$key]\
    \ = $names[$value];\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpal_peara.php:37\n\
    Stack trace:\n#0 /tmp/tmpal_peara.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpal_peara.php\
    \ on line 37\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $len = max($len - 1, 1);\n \
    \ $arr = array_reverse($arr);\n  $arr = array_map(function($v) use ($len) {\n\
    \    return $len == 1 ? $v : $len == $v ? $len : $v;\n  }, $arr);\n  return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgprgp0a4.php:34\n\
    Stack trace:\n#0 /tmp/tmpgprgp0a4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgprgp0a4.php\
    \ on line 34\n"
  timestamp: 1659730992
- exit_code: 255
  program: "<?php\n// Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
    // >>> by_length(array())\n// array()\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction\
    \ by_length($arr) {\n  if (!$arr) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i] <= $max) {\n \
    \     $result[] = str_replace(\n        array_keys($arr),\n        array_values($arr),\n\
    \        array_keys($reversed)\n      );\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpth5ejazt.php:43\n\
    Stack trace:\n#0 /tmp/tmpth5ejazt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpth5ejazt.php\
    \ on line 43\n"
  timestamp: 1659730992
