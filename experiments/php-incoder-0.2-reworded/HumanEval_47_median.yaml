name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the array l.\n// >>> median(array(3,\
  \ 1, 2, 4, 5))\n// 3\n// >>> median(array(-10, 4, 6, 1000, 10, 20))\n// 15.0\nfunction\
  \ median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}\n", "  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[(count($l)\
    \ / 2) - 1];\n    }\n    return ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n}",
  "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n \
    \ else {\n    $m = $n / 2;\n    return ($l[$m] + $l[$n - 1]) / 2;\n  }\n}\n",
  "  $l = array_values($l);\n  return $l[count($l)/2];\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    $l = array_filter($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n  \
    \  }\n    $m = $l[($n - 1) / 2];\n    if ($m == 0) {\n        return $l[0];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2) / 2];\n  }\n}\n", "  $n =\
    \ count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 1)\
    \ / 2] * 0.5);\n  }\n  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    $m = $l[$n / 2];\n    for ($i = 1; $i < $n; $i += 2) {\n      if\
    \ ($l[$i] > $m) {\n        $m = $l[$i];\n      }\n    }\n    return $m;\n  }\n\
    \  else {\n    $m = $l[$n / 2 - 1];\n    for ($i = 1; $i < $n; $i += 2) {\n  \
    \    if ($l[$i] > $m) {\n        $m = $l[$i];\n      }\n    }\n    return $m;\n\
    \  }\n}\n", "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n\
    \  }\n  sort($l);\n  return $l[count($l) / 2];\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2) / 2];\n  }\n}\n", "  sort($l);\n  return\
    \ $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2]; // median = (left + right)/2\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l)\
    \ / 2) - 1];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}", "    if (count($l) % 2 === 0) {\n        // even\n      \
    \  return $l[count($l) / 2 - 1];\n    }\n    else {\n        // odd\n        return\
    \ ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n    }\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median =\
    \ (left + right)/2\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}\n", "    $n = count($l);\n    if ($n % 2) {\n        return $l[($n\
    \ - 1) / 2]; // median = (left + right)/2\n    }\n    else {\n        $m = $n\
    \ / 2;\n        return ($l[$m] + $l[$n - 1]) / 2;\n    }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n\
    \ - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n\
    \  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n -\
    \ 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return $l[($n - 1) / 2];\n}\n", " \
    \   if (count($l) % 2 === 0) {\n        return $l[count($l) / 2 - 1];\n    }\n\
    \    $m = $l[count($l) / 2];\n    foreach ($l as $i => $e) {\n        if ($e <\
    \ $m) {\n            $l[$i] = $m;\n        } else {\n            $l[$i] = $e;\n\
    \        }\n    }\n    return $m;\n}", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}", "    $l = array_filter($l);\n    if (count($l) == 0) {\n\
    \        return null;\n    }\n    $l = array_values($l);\n    $l = array_slice($l,\
    \ count($l) / 2);\n    return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n + 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2 + 1]) / 2;\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[(count($l) / 2)];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "    sort($l);\n\
    \    return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n}", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    $m = $l[($n - 1) / 2];\n \
    \   return $m + ($m / 2);\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\n",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    \  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2)\
    \ / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n  \
    \  return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n  }\n}", "    sort($l);\n    return $l[count($l)/2];\n}\n",
  "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return\
    \ ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  if (count($l) % 2\
    \ === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  $l = array_reverse($l);\n\
    \  $l = array_slice($l, count($l) / 2);\n  return $l[count($l) / 2 - 1];\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $l = array_filter($l);\n  if (count($l)\
    \ == 0) {\n    return 0;\n  }\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n  }\n}\n", "  if (count($l) % 2 === 0) {\n    return $l[count($l)\
    \ / 2 - 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l) / 2 -\
    \ 1]) / 2;\n  }\n}", "  if (count($l) % 2 === 0) {\n    return $l[count($l) /\
    \ 2 - 1];\n  }\n  $m = $l[count($l) / 2];\n  foreach ($l as $n) {\n    if ($n\
    \ < $m) {\n      $m = $n;\n    }\n  }\n  return $m;\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $l =\
    \ array_values($l);\n  sort($l);\n  return $l[count($l) / 2 - 1];\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n  \
    \  }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2 + 1]) / 2;\n  }\n\
    }", "    $l = array_values($l);\n    $n = count($l);\n    if ($n % 2) {\n    \
    \    return $l[($n - 1) / 2];\n    }\n    $m = $l[($n - 1) / 2];\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        if ($l[$i] >= $m) {\n            $m = $l[$i];\n\
    \        }\n    }\n    return $m;\n}\n", "  if (count($l) % 2 === 0) {\n    return\
    \ $l[count($l) / 2 - 1];\n  }\n  $m = $l[count($l) / 2];\n  foreach ($l as $n)\
    \ {\n    if ($n < $m) {\n      $m = $n;\n    }\n  }\n  return $m;\n}\n", "   \
    \ $l = array_values($l);\n    sort($l);\n    $n = count($l);\n    if ($n % 2 ==\
    \ 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n}", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[($n\
    \ - 1) / 2] - $l[$n / 2]) / 2;\n  }\n}\n", "  $l = array_values($l);\n  sort($l);\n\
    \  return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n -\
    \ 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l)\
    \ / 2)];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}\n", "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n\
    \  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    \  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[(count($l)\
    \ / 2)];\n  }\n  else {\n    return ($l[($n - 1) / 2 + 1] + $l[($n - 1) / 2];\n\
    \  }\n}", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0)\
    \ {\n    return $l[($n - 1) / 2];\n  }\n  return ($l[($n - 1) / 2] + $l[($n -\
    \ 2) / 2]) / 2;\n}\n", "  $l = sort($l);\n  return $l[count($l)/2];\n}\n", " \
    \ sort($l);\n  return $l[count($l)/2];\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2 === 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n -\
    \ 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  if (count($l) % 2 == 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else\
    \ {\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", " \
    \ sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n  if ($n %\
    \ 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n  } else {\n    return $l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1];\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[(count($l)\
    \ / 2) - 1];\n  }\n  return ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n}\n",
  "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  sort($l);\n\
    \  return $l[count($l) / 2];\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work when you have negative numbers. Try median(array(3, 1, 2, 4, -5, 5))\n\
    <|/ c |>\n<| c |>\nI believe this fails when the array has only 1 element. Try\
    \ median(array(1))\n<|/ c |>\n<| c |>\nI believe this fails when the array has\
    \ only 1 element. Try median(array(1))\n<|/ c |>\n<| c |>\nThis fails when the\
    \ array has only 1 element. Try median(array(1))\n<|/ c |>\n<| c |>\nThis fails\
    \ when the array has only 1 element. Try median(array(1))\n<|/ c |>\n<| a tags=php,median\
    \ |>\n<code>", "  if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n\
    \  }\n  return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  sort($l);\n\
    \  return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n   \
    \ return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $l =\
    \ array_values($l);\n  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "   \
    \ sort($l);\n    $n = count($l);\n    if ($n % 2) {\n        return $l[(count($l)\
    \ / 2) - 1];\n    }\n    return ($l[($n - 1) / 2] - $l[$n / 2]) / 2;\n}\n", " \
    \ sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) /\
    \ 2] + ($l[($n - 1) / 2 + 1] / 2);\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n \
    \ if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  $n = count($l);\n\
    \  if ($n < 1) {\n    return NULL;\n  }\n  $l = array_reverse($l);\n  $m = $l[0];\n\
    \  for ($i = 1; $i < $n; ++$i) {\n    if ($l[$i] < $m) {\n      $m = $l[$i];\n\
    \    }\n  }\n  return $m;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] - $l[($n - 2) / 2];\n  }\n}\n", "  $l = array_reverse($l);\n  sort($l);\n\
    \  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n %\
    \ 2 == 0) {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  } else {\n\
    \    return $l[($n - 1) / 2];\n  }\n}", "  if (count($l) % 2 === 0) {\n    return\
    \ $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n}", "  $l = array_values($l);\n  $n = count($l);\n  if ($n % 2 ==\
    \ 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) /\
    \ 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = array_values($l);\n \
    \   sort($l);\n    return $l[count($l) / 2 - 1];\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  $n =\
    \ count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", " \
    \   if (count($l) % 2 === 0) {\n        $sorted = $l;\n    } else {\n        $sorted\
    \ = array_reverse($l);\n    }\n    sort($sorted);\n    return $sorted[count($sorted)\
    \ / 2 - 1];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2] + ($l[($n - 2) / 2] +\
    \ $l[($n - 1) / 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n   \
    \ }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
