language: php
name: HumanEval_56_correct_bracketing
results:
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n\
    \    if ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_n2ykco.php:35\n\
    Stack trace:\n#0 /tmp/tmpd_n2ykco.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd_n2ykco.php\
    \ on line 35\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ouuzua2.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ouuzua2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ouuzua2.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jabhren.php:23\n\
    Stack trace:\n#0 /tmp/tmp9jabhren.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9jabhren.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   if ($bracket != \"<\") {\n        return false;\n      }\n    } else {\n \
    \     if ($brackets[$i - 1] != \">\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphchpwxsv.php:34\n\
    Stack trace:\n#0 /tmp/tmphchpwxsv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphchpwxsv.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $bracket) {\n    if ($bracket != \">>\") {\n      $brackets[$key] = \">>\";\n\
    \    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwewxdhyq.php:31\n\
    Stack trace:\n#0 /tmp/tmpwewxdhyq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwewxdhyq.php\
    \ on line 31\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\">\", $brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works fine for me (PHP 5.3.8).\n<|/ c |>\n<| c |>\n: It doesn't work for me\
    \ in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works for me in\
    \ PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works for me in PHP\
    \ 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n\
    <code>\n$pattern = '~(<[^>]*>)~';\n$replacement = '$1';\n$str = '<<><>>';\necho\
    \ preg_replace($pattern, $replacement, $str);\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works\
    \ for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works for\
    \ me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works for me\
    \ in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It works for me in\
    \ PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    $str = '<<><>>';\n$str = preg_replace('/<([^>]*)>/', '<$1>', $str);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n\
    <| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c\
    \ |>\n: It works for me in PHP 5.3.8. Try it with `\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6nlyqses.php on line 21

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3w9fal4y.php:27\n\
    Stack trace:\n#0 /tmp/tmp3w9fal4y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3w9fal4y.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n    return $brackets === '<>';\n\
    }\n</code>\n<|/ a tags=php,regex,preg-match |>\n<| c |>\nThanks, this works great!\
    \ I added a little bit of code to make it more robust to different types of brackets.\n\
    <|/ c |>\n<| c |>\nI added a version that works with nested brackets.\n<|/ c |>\n\
    <| a tags=php,regex,preg-match |>\n<code>\n<?php\n$string = '( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5gfir8fh.php on line 17

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rpxjx1y.php:29\n\
    Stack trace:\n#0 /tmp/tmp7rpxjx1y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7rpxjx1y.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8kmsgda.php:26\n\
    Stack trace:\n#0 /tmp/tmpf8kmsgda.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf8kmsgda.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    $brackets = array_reverse($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzzx_3eu.php:25\n\
    Stack trace:\n#0 /tmp/tmphzzx_3eu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphzzx_3eu.php\
    \ on line 25\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value !== \"<\" && $value !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6a6isml.php:27\n\
    Stack trace:\n#0 /tmp/tmpl6a6isml.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl6a6isml.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpackdly89.php:28\n\
    Stack trace:\n#0 /tmp/tmpackdly89.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpackdly89.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5_uwh8h.php:29\n\
    Stack trace:\n#0 /tmp/tmpg5_uwh8h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg5_uwh8h.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if (!isset($closing_brackets[$value])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dismx2k.php:29\n\
    Stack trace:\n#0 /tmp/tmp6dismx2k.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6dismx2k.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph4oi4jcx.php on line 65

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key\
    \ => $bracket) {\n    if ($bracket != \"<\" && $bracket != \">\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppb8iy4n5.php:27\n\
    Stack trace:\n#0 /tmp/tmppb8iy4n5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppb8iy4n5.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"<\";\n    } else if ($bracket == \">\") {\n      $closing_brackets[] = \"\
    >\";\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjbq63hgl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjbq63hgl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjbq63hgl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjbq63hgl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpjbq63hgl.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbq63hgl.php:34\n\
    Stack trace:\n#0 /tmp/tmpjbq63hgl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjbq63hgl.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<>>\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $i => $b) {\n        if ($b == \"<\") {\n         \
    \   $brackets[$i] = \">\";\n        }\n    }\n    return implode(\"<<>>\", $brackets);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"<><>\"\
    ;\n$array = explode(\"<>\", $string);\n$array = array_reverse($array);\n$string\
    \ = implode(\"<>\", $array);\necho $string;\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjvlekv0b.php on line 22

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_282ku5.php:26\n\
    Stack trace:\n#0 /tmp/tmpq_282ku5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq_282ku5.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $b) {\n    if ($brackets[$i] == \">\") {\n    \
    \  if ($i < count($brackets) - 1) {\n        $brackets[$i + 1] = \"<\";\n    \
    \  }\n      else {\n        $brackets[$i] = \"<\";\n      }\n    }\n  }\n  return\
    \ implode(array_reverse($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3_42798.php:33\n\
    Stack trace:\n#0 /tmp/tmpl3_42798.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpl3_42798.php\
    \ on line 33\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8kmsgda.php:26\n\
    Stack trace:\n#0 /tmp/tmpf8kmsgda.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf8kmsgda.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2lr4h3t.php:24\n\
    Stack trace:\n#0 /tmp/tmpz2lr4h3t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz2lr4h3t.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"\";\n      }\n    }\n  }\n  return implode(\"\
    >\", $brackets) == $brackets;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6hx7g74.php:29\n\
    Stack trace:\n#0 /tmp/tmpf6hx7g74.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf6hx7g74.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu1v1nbgt.php on line 41

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jabhren.php:23\n\
    Stack trace:\n#0 /tmp/tmp9jabhren.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9jabhren.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_k7ajcv.php:28\n\
    Stack trace:\n#0 /tmp/tmp3_k7ajcv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3_k7ajcv.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  return array_diff($opening_brackets,\
    \ $closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycg8uu5r.php:23\n\
    Stack trace:\n#0 /tmp/tmpycg8uu5r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpycg8uu5r.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($el) {\n        return $el !=\
    \ \">\";\n    });\n    return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeqks_vre.php:26\n\
    Stack trace:\n#0 /tmp/tmpeqks_vre.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpeqks_vre.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  return\
    \ preg_match(\"/<[^<>]+>$/\", $brackets);\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuy2efyvi.php:22\n\
    Stack trace:\n#0 /tmp/tmpuy2efyvi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuy2efyvi.php\
    \ on line 22\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($item) {\n        return $item\
    \ !== \"\";\n    });\n    $brackets = array_reverse($brackets);\n    return count($brackets)\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa8f3vde.php:27\n\
    Stack trace:\n#0 /tmp/tmpxa8f3vde.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxa8f3vde.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\"\", array_reverse($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqebkfnq8.php:27\n\
    Stack trace:\n#0 /tmp/tmpqebkfnq8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqebkfnq8.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6n8u02ie.php on line 65

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $bracket) {\n    if ($bracket != \">>\") {\n      if ($key > 0) {\n        if\
    \ ($brackets[$key - 1] != $bracket) {\n          return false;\n        }\n  \
    \    }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6emrn7rf.php:32\n\
    Stack trace:\n#0 /tmp/tmp6emrn7rf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6emrn7rf.php\
    \ on line 32\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4uqs2s4.php:28\n\
    Stack trace:\n#0 /tmp/tmpr4uqs2s4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr4uqs2s4.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0h4fsmwq.php:28\n\
    Stack trace:\n#0 /tmp/tmp0h4fsmwq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0h4fsmwq.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets\
    \ = explode(\"<<>>\", $brackets);\n    foreach ($brackets as $bracket) {\n   \
    \     $opening_brackets[] = substr($bracket, 0, 1);\n        $closing_brackets[]\
    \ = substr($bracket, -1);\n    }\n    return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex,preg-match-all |>\n\
    <| c |>\nThanks for your answer. Unfortunately this doesn't work for me. I've\
    \ added some more examples to my original question.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to include a solution that should work for your new examples.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for me.\
    \ I've added some more examples to my original question.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to include a solution that should work for your new examples.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for\
    \ me. I've added some more examples to my original question.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis should work:\n<code>\npreg_match_all('/\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt1dbt_93.php on line 22

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n   \
    \ $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplequjwbc.php on line 43

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8odkz_lw.php:28\n\
    Stack trace:\n#0 /tmp/tmp8odkz_lw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8odkz_lw.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count(array_diff($brackets,\
    \ array_unique(array_map(\"trim\", $brackets)))) === 0;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have multiple nested brackets such as\
    \ `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsshi4xoc.php on line 18

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $b) {\n    if ($b == '<') {\n      $open_brackets[] = $b;\n    } else if\
    \ ($b == '>') {\n      $closed_brackets[] = $b;\n    }\n  }\n  return count($open_brackets)\
    \ == count($closed_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskfl59c5.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskfl59c5.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskfl59c5.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskfl59c5.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpskfl59c5.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskfl59c5.php:34\n\
    Stack trace:\n#0 /tmp/tmpskfl59c5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpskfl59c5.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem\
    \ to work when there are multiple nested brackets.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it out and see for yourself.\n<|/ c |>\n<| c |>\n: It works fine\
    \ for me. Try it out yourself.\n<|/ c |>\n<| c |>\n: It works fine for me. Try\
    \ it out yourself.\n<|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2zpzch26.php on line 16

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpackdly89.php:28\n\
    Stack trace:\n#0 /tmp/tmpackdly89.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpackdly89.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $opening_bracket) {\n    if\
    \ (!array_search($opening_bracket, $closing_brackets)) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpduk09el_.php:28\n\
    Stack trace:\n#0 /tmp/tmpduk09el_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpduk09el_.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp00_5q1hp.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n    unset($brackets[$key]);\n\
    \  }\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyrlfu_s.php:28\n\
    Stack trace:\n#0 /tmp/tmpkyrlfu_s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkyrlfu_s.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]*>$/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60zcmjko.php:23\n\
    Stack trace:\n#0 /tmp/tmp60zcmjko.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp60zcmjko.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q1q26em.php:28\n\
    Stack trace:\n#0 /tmp/tmp2q1q26em.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2q1q26em.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $key => $bracket) {\n        if ($bracket != \">\"\
    ) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xocxiut.php:28\n\
    Stack trace:\n#0 /tmp/tmp5xocxiut.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5xocxiut.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets as $key =>\
    \ $value) {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a0ajsqg.php:32\n\
    Stack trace:\n#0 /tmp/tmp5a0ajsqg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5a0ajsqg.php\
    \ on line 32\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rpxjx1y.php:29\n\
    Stack trace:\n#0 /tmp/tmp7rpxjx1y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7rpxjx1y.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] != \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20v_tnwr.php:30\n\
    Stack trace:\n#0 /tmp/tmp20v_tnwr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp20v_tnwr.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6n8u02ie.php on line 65

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets = explode(\"\
    >\", $brackets);\n  foreach ($open_brackets as $key => $value) {\n    if ($open_brackets[$key+1]\
    \ != $value) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4_q_46a.php:28\n\
    Stack trace:\n#0 /tmp/tmpp4_q_46a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpp4_q_46a.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $b)\
    \ {\n        if ($b !== \">\") {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqn0a2tyw.php:27\n\
    Stack trace:\n#0 /tmp/tmpqn0a2tyw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqn0a2tyw.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ouuzua2.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ouuzua2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ouuzua2.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ouuzua2.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ouuzua2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ouuzua2.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  $brackets = array_map(\"trim\"\
    , $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($b === \">\") {\n\
    \      $brackets[$i] = \"<\";\n    }\n  }\n  return implode(\"<<>>\", $brackets)\
    \ === $brackets;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzwll2x6.php:28\n\
    Stack trace:\n#0 /tmp/tmplzwll2x6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplzwll2x6.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n  return $brackets == \"<>\"\
    ;\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_oszokn.php:23\n\
    Stack trace:\n#0 /tmp/tmp3_oszokn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3_oszokn.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n  $closing_brackets\
    \ = array_filter($closing_brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0mkdxll.php:29\n\
    Stack trace:\n#0 /tmp/tmpy0mkdxll.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpy0mkdxll.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '<') {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == '>') {\n      $closing_brackets[] =\
    \ $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6k4qatbl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6k4qatbl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6k4qatbl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6k4qatbl.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp6k4qatbl.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6k4qatbl.php:34\n\
    Stack trace:\n#0 /tmp/tmp6k4qatbl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6k4qatbl.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($item) {\n        return $item\
    \ != \">\";\n    });\n    return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4m0e9_3r.php:26\n\
    Stack trace:\n#0 /tmp/tmp4m0e9_3r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4m0e9_3r.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbpj_jno.php:30\n\
    Stack trace:\n#0 /tmp/tmpbbpj_jno.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbbpj_jno.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"{\";\n      $closing_brackets[] = \"{\";\n    } else if ($bracket == \"\
    >\") {\n      $opening_brackets[] = \"}\";\n      $closing_brackets[] = \"}\"\
    ;\n    } else if ($bracket == \"{\") {\n      $opening_brackets[] = \"[\";\n \
    \     $closing_brackets[] = \"]\";\n    } else if ($bracket == \"]\") {\n    \
    \  $opening_brackets[] = \"]\";\n      $closing_brackets[] = \"[\";\n    } else\
    \ {\n      return false;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmphuah3xmt.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphuah3xmt.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphuah3xmt.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphuah3xmt.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphuah3xmt.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuah3xmt.php:44\n\
    Stack trace:\n#0 /tmp/tmphuah3xmt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmphuah3xmt.php\
    \ on line 44\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === \"<\")\
    \ {\n            $closing_brackets[] = $brackets[$i + 1];\n        }\n    }\n\
    \    if ($closing_brackets[0] !== \"<\") {\n        return false;\n    }\n   \
    \ for ($i = 1; $i < $brackets_count; $i++) {\n        if ($brackets[$i] !== \"\
    >\") {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpfty0hicd.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfty0hicd.php:38\nStack trace:\n#0 /tmp/tmpfty0hicd.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfty0hicd.php on line 38\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    foreach ($opening_brackets as $opening_bracket)\
    \ {\n        if ($closing_brackets[$closing_brackets - 1] != $opening_bracket)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it with `\"<><<><>>\"\
    `.\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp08l982tc.php on line 22

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i] != $brackets[$i - 1]) {\n    \
    \    return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sir4clx.php:29\n\
    Stack trace:\n#0 /tmp/tmp8sir4clx.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8sir4clx.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    $opening_brackets_count = count($opening_brackets);\n\
    \    $closing_brackets_count = count($closing_brackets);\n    $correct_bracketing\
    \ = false;\n    for ($i = 0; $i < $opening_brackets_count; $i++) {\n        if\
    \ ($opening_brackets[$i] == $closing_brackets[$i]) {\n            $correct_bracketing\
    \ = true;\n        }\n    }\n    return $correct_bracketing;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9dkd8we4.php:31\n\
    Stack trace:\n#0 /tmp/tmp9dkd8we4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9dkd8we4.php\
    \ on line 31\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa57o0o4j.php on line 59

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if ($closing_brackets[$value] === $key) {\n      $opening_brackets[$key]\
    \ = $value;\n    }\n  }\n  return $opening_brackets === array_keys($closing_brackets);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a PHP function to do\
    \ this, which I thought would be useful for others who find this question:\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph29195io.php on line 23

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  $opening_brackets_count = count($opening_brackets);\n  $closing_brackets_count\
    \ = count($closing_brackets);\n  for ($i = 0; $i < $opening_brackets_count; $i++)\
    \ {\n    if ($opening_brackets[$i] != $closing_brackets[$i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx91opi9j.php:30\n\
    Stack trace:\n#0 /tmp/tmpx91opi9j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx91opi9j.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ouuzua2.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ouuzua2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ouuzua2.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp00_5q1hp.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($val) {\n        return $val\
    \ != \">\";\n    });\n    return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpofhooilp.php:26\n\
    Stack trace:\n#0 /tmp/tmpofhooilp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpofhooilp.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2wh5w09.php:28\n\
    Stack trace:\n#0 /tmp/tmpq2wh5w09.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq2wh5w09.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/(<+)/', '<<<', $brackets);\n    $brackets\
    \ = preg_replace('/(>+)/', '>>>', $brackets);\n    $brackets = preg_replace('/(<+>+)/',\
    \ '<<<>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+)/', '<<<>>>', $brackets);\n\
    \    $brackets = preg_replace('/(>+>>+)/', '>>>>>>', $brackets);\n    $brackets\
    \ = preg_replace('/(<+>>+>+)/', '<<<>>>>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+>>+)/',\
    \ '<<<>>>>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpac9o232y.php on line 31

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+/', '', $brackets);\n  return\
    \ $brackets === '<>';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do this without using regular expressions?\n\
    <|/ c |>\n<| c |>\n: I added a non-regex solution that doesn't use regular expressions.\n\
    <|/ c |>\n<| a dscore=1 |>\nI came up with another solution that doesn't use regular\
    \ expressions:\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbls75jd3.php on line 18

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsx6e7vz_.php on line 43

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n  return $brackets == \"<>\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvr2g3cd.php:24\n\
    Stack trace:\n#0 /tmp/tmpjvr2g3cd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjvr2g3cd.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<([^<>]+)>/i',\
    \ $brackets, $matches);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ work for `<<><>>` - it returns `true` when it should be `false`.\n<|/ c |>\n\
    <| c |>\n: I fixed it by adding `<` and `>` into the character class (I thought\
    \ that was the point of the question).\n<|/ c |>\n<| c |>\n: I added a more complete\
    \ solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added a more\
    \ complete solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added\
    \ a more complete solution that should work for all cases.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = \"~<([^<>]+)>~\";\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfzbok0tu.php on line 16

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nohyi5q.php:28\n\
    Stack trace:\n#0 /tmp/tmp7nohyi5q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7nohyi5q.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($value) {\n        return $value\
    \ !== \"\";\n    });\n    return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllbsvl7z.php:26\n\
    Stack trace:\n#0 /tmp/tmpllbsvl7z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpllbsvl7z.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"{\";\n      $closing_brackets[] = \"{\";\n    } else if ($bracket == \"\
    >\") {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[] = \"}\"\
    ;\n    } else if ($bracket == \"{\") {\n      $opening_brackets[] = \"{\";\n \
    \     $closing_brackets[] = \"}\"; // this closing bracket is optional\n    }\
    \ else if ($bracket == \"}\") {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[]\
    \ = \"}\";\n    } else {\n      return false;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp84rq57rk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp84rq57rk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp84rq57rk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp84rq57rk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp84rq57rk.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84rq57rk.php:44\n\
    Stack trace:\n#0 /tmp/tmp84rq57rk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp84rq57rk.php\
    \ on line 44\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \">\") {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6a2y4wx.php:27\n\
    Stack trace:\n#0 /tmp/tmp_6a2y4wx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_6a2y4wx.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets as $key =>\
    \ $value) {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a0ajsqg.php:32\n\
    Stack trace:\n#0 /tmp/tmp5a0ajsqg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5a0ajsqg.php\
    \ on line 32\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return !array_diff($brackets,\
    \ $brackets);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, however\
    \ it fails for `<<><>>` which should return `true` but returns `false`.\n<|/ c\
    \ |>\n<| c |>\n: I fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern\
    \ = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis fails for `<<><>>` which\
    \ should return `true` but returns `false`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement =\
    \ '~>+~';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern\
    \ = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement =\
    \ '~>+~';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<<><>>\";\n\
    $pattern = '~<+~';\n$replacement = '~>+~';\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5hzljltb.php on line 18

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8xjvbdai.php on line 59

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<>>\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b[0] != \"<\") return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8_ttk00.php:29\n\
    Stack trace:\n#0 /tmp/tmpj8_ttk00.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj8_ttk00.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $i => $bracket) {\n        if ($bracket != \">\") {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it on `<<><>>`.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it on `<<><>>`.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '<<><>>';\n$pattern = '~<<<(.*?)>>>~';\npreg_match_all($pattern,\
    \ $string, $matches);\n$result = count($matches[0]);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it on `<<><>>`.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$string = '<<><>>';\n$pattern = '~<<<(.*?)>>>~';\npreg_match_all($pattern,\
    \ $string, $matches);\n$result = count($matches[0]);\necho $result;\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptl_vlh_p.php on line 22

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv173d969.php:24\n\
    Stack trace:\n#0 /tmp/tmpv173d969.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv173d969.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there\
    \ are multiple brackets inside each other. `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyxdv0eey.php on line 17

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp00_5q1hp.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ouuzua2.php:27\n\
    Stack trace:\n#0 /tmp/tmp0ouuzua2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0ouuzua2.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n\
    \    if ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  return\
    \ implode(\"\", array_reverse($brackets));\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlpzepfe.php:30\n\
    Stack trace:\n#0 /tmp/tmpnlpzepfe.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnlpzepfe.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem\
    \ to work when there are multiple brackets inside each other. For example, `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp71s3xecr.php on line 16

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = preg_split('/[<>]+/', $brackets);\n    $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n    foreach ($opening_brackets as $key\
    \ => $value) {\n        if ($value !== $closing_brackets[$key]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc30408ps.php on line 22

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjcn9xgg.php:29\n\
    Stack trace:\n#0 /tmp/tmpqjcn9xgg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqjcn9xgg.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  $brackets_count\
    \ = count($brackets);\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[]\
    \ = $brackets[$i];\n  }\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $closing_brackets[]\
    \ = $brackets[$i + 1];\n  }\n  $opening_brackets_count = count($opening_brackets);\n\
    \  $closing_brackets_count = count($closing_brackets);\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \"<\") {\n      return false;\n \
    \   }\n  }\n  for ($i = 0; $i < $closing_brackets_count; $i++) {\n    if ($closing_brackets[$i]\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsm52yx0a.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpsm52yx0a.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm52yx0a.php:43\n\
    Stack trace:\n#0 /tmp/tmpsm52yx0a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsm52yx0a.php\
    \ on line 43\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($value) {\n        return $value\
    \ !== \"\";\n    });\n    return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllbsvl7z.php:26\n\
    Stack trace:\n#0 /tmp/tmpllbsvl7z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpllbsvl7z.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  foreach ($brackets as $b) {\n    if ($b ==\
    \ \"<\") {\n      $opening_brackets[] = $b;\n    } else {\n      $closing_brackets[]\
    \ = $b;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgcz36t86.php:35\n\
    Stack trace:\n#0 /tmp/tmpgcz36t86.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgcz36t86.php\
    \ on line 35\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n\
    \    if ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  return\
    \ count(array_diff($brackets, array(\"<\", \"{\", \"}\"))) == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31zney0e.php:30\n\
    Stack trace:\n#0 /tmp/tmp31zney0e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp31zney0e.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    $b = trim($b);\n    if ($b === \"\") {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfswiuk7.php:28\n\
    Stack trace:\n#0 /tmp/tmpzfswiuk7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzfswiuk7.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[<>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[<>]/', $brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2uet6p6j.php:27\n\
    Stack trace:\n#0 /tmp/tmp2uet6p6j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2uet6p6j.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ != $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nohyi5q.php:28\n\
    Stack trace:\n#0 /tmp/tmp7nohyi5q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7nohyi5q.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_map(function($x) {\n        return str_repeat($x, 2);\n\
    \    }, $brackets);\n    $brackets = array_reverse($brackets);\n    return $brackets[0]\
    \ === $brackets[1];\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0915jtdw.php:27\n\
    Stack trace:\n#0 /tmp/tmp0915jtdw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0915jtdw.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_unique($brackets))\
    \ == count($brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg1cse62.php:24\n\
    Stack trace:\n#0 /tmp/tmpyg1cse62.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyg1cse62.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem\
    \ to work with the string `<<><>>`\n<|/ c |>\n<| c |>\n: It does, see my comment\
    \ on the question.\n<|/ c |>\n<| c |>\n: It does, see my comment on the question.\n\
    <|/ c |>\n<| c |>\n: It does, see my comment on the question.\n<|/ c |>\n<| c\
    \ |>\n: It does, see my comment on the question.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptjc4fmo0.php on line 16

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpackdly89.php:28\n\
    Stack trace:\n#0 /tmp/tmpackdly89.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpackdly89.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<<\", $brackets);\n    $brackets = explode(\">>\"\
    , $brackets);\n    $brackets = array_unique($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, $brackets);\n    $brackets = array_unique($brackets);\n\
    \    return count($brackets) == count($brackets[0]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: explode() expects parameter 2 to be string, array given in /tmp/tmp2m6gsw25.php
    on line 14


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 15


    Warning: array_reverse() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 16


    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmp2m6gsw25.php
    on line 17


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 18


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmp2m6gsw25.php on line 19


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmp2m6gsw25.php on line 19


    Warning: explode() expects parameter 2 to be string, array given in /tmp/tmp2m6gsw25.php
    on line 14


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 15


    Warning: array_reverse() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 16


    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmp2m6gsw25.php
    on line 17


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 18


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmp2m6gsw25.php on line 19


    Warning: count(): Parameter must be an array or an object that implements Countable
    in /tmp/tmp2m6gsw25.php on line 19


    Warning: explode() expects parameter 2 to be string, array given in /tmp/tmp2m6gsw25.php
    on line 14


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 15


    Warning: array_reverse() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 16


    Warning: array_merge(): Expected parameter 1 to be an array, null given in /tmp/tmp2m6gsw25.php
    on line 17


    Warning: array_unique() expects parameter 1 to be array, null given in /tmp/tmp2m6gsw25.php
    on line 18


    W'
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpackdly89.php:28\n\
    Stack trace:\n#0 /tmp/tmpackdly89.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpackdly89.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  $count = count($opening_brackets);\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    if ($opening_brackets[$i] != $closing_brackets[$i]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpkmk0b8.php:29\n\
    Stack trace:\n#0 /tmp/tmpcpkmk0b8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcpkmk0b8.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_diff($brackets,\
    \ array_unique(array_map(\"trim\", $brackets)))) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn816a0gg.php:28\n\
    Stack trace:\n#0 /tmp/tmpn816a0gg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn816a0gg.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n  return ($brackets == \"\
    <\" && $brackets == \"<\") ||\n    ($brackets == \"<\" && $brackets == \">\")\
    \ ||\n    ($brackets == \">\" && $brackets == \"<\") ||\n    ($brackets == \"\
    >\" && $brackets == \">\");\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzczv4r7.php:26\n\
    Stack trace:\n#0 /tmp/tmpqzczv4r7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqzczv4r7.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    foreach ($brackets as $key\
    \ => $value) {\n        if ($value != \"<\") {\n            $brackets[$key] =\
    \ \"</$value>\";\n        }\n    }\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of using an array, but\
    \ I feel like it would be more efficient to just loop through the string and count\
    \ the amount of \"<\" and \">\" characters. I feel like that would be more efficient\
    \ than using an array. I'm going to try this out and see how it works.\n<|/ c\
    \ |>\n<| c |>\nI tested this out and it works great! I really appreciate your\
    \ help and I learned a lot from your code. Thank you!\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzosjyoba.php on line 21

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8odkz_lw.php:28\n\
    Stack trace:\n#0 /tmp/tmp8odkz_lw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8odkz_lw.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_unique($brackets))\
    \ == count($brackets);\n}\n</code>\n<|/ a tags=php,regex,preg-match,preg-replace\
    \ |>\n<| c |>\nThis doesn't seem to work. `<<<` returns `true` but `<<<>>` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.10).\n<|/ c |>\n<| c\
    \ |>\n: I added a test case that shows it working for me.\n<|/ c |>\n<| c |>\n\
    : I added a test case that shows it working for me.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case that shows it working for me.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace\
    \ |>\n<code>\n$string = \"<<<\";\n$pattern = \"~<<<~\";\n$replacement = \"<\"\
    ;\n$result = preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work. `<<<` returns `true` but `<<<>>` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.10).\n<|/ c |>\n<| c\
    \ |>\n: I added a test case that shows it working for me.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace\
    \ |>\n<code>\n<?php\n$string = \"<<<\";\n$pattern = \"~<<<~\";\n$replacement =\
    \ \"<\";\n$result = preg_replace($pattern, $replacement, $string);\necho $result;\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvlhxuym7.php on line 18

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8odkz_lw.php:28\n\
    Stack trace:\n#0 /tmp/tmp8odkz_lw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8odkz_lw.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value === \"<\") {\n      if ($key === 0) {\n        return\
    \ false;\n      }\n      $brackets[$key] = \"</\" . $value . \">\";\n    }\n \
    \ }\n  return implode(\"<\", $brackets);\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3t86r47.php:30\n\
    Stack trace:\n#0 /tmp/tmpw3t86r47.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw3t86r47.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp00_5q1hp.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I still\
    \ think it would be better to use a regex. My solution will fail for `<<><>>`\
    \ but your solution will work for `<<<>>`\n<|/ c |>\n<| c |>\nI agree, your solution\
    \ is better. I just wanted to show how it could be done without regex.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nI like your solution, but I still think it would be better\
    \ to use a regex. My solution will fail for <<><>> but your solution will work\
    \ for <<<>>\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpapd8shcb.php on line 24

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_unique($brackets))\
    \ == count($brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg1cse62.php:24\n\
    Stack trace:\n#0 /tmp/tmpyg1cse62.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyg1cse62.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0h4fsmwq.php:28\n\
    Stack trace:\n#0 /tmp/tmp0h4fsmwq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0h4fsmwq.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\">\", $brackets);\n}\n</code>\n<|/ a tags=php,regex,preg-match-all\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works. I appreciate your help.\n<|/ c |>\n<| c |>\nI tested this out and it\
    \ works great. Thanks for your help.\n<|/ c |>\n<| a tags=php,regex,preg-match-all\
    \ |>\n<code>\n<?php\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgqoojl3n.php on line 21

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcjq2u1p.php:22\n\
    Stack trace:\n#0 /tmp/tmppcjq2u1p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppcjq2u1p.php\
    \ on line 22\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2wh5w09.php:28\n\
    Stack trace:\n#0 /tmp/tmpq2wh5w09.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq2wh5w09.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zxfalrd.php:24\n\
    Stack trace:\n#0 /tmp/tmp8zxfalrd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8zxfalrd.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<>>\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($x) {\n    return $x !== \"\"\
    ;\n  });\n  $brackets = array_reverse($brackets);\n  $brackets = array_filter($brackets,\
    \ function($x) {\n    return $x !== \"\";\n  });\n  return $brackets[0] === $brackets[1];\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cl86l4_.php:30\n\
    Stack trace:\n#0 /tmp/tmp1cl86l4_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1cl86l4_.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets,\
    \ array_unique($closing_brackets));\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match |>\n<| c |>\nI like\
    \ this solution, but I feel like it could be made more efficient by not using\
    \ preg_split and just using preg_match_all and array_diff. I'm going to try this\
    \ out and see how it goes.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nThis should work:\n\
    <code>\n$stringn\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvdjvwrnu.php on line 18

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   if ($bracket != \"<\") {\n        return false;\n      }\n    } else {\n \
    \     if ($brackets[$i + 1] != \"<\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedydn82g.php:34\n\
    Stack trace:\n#0 /tmp/tmpedydn82g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpedydn82g.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    $count = count($opening_brackets);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuzd7dur.php:29\n\
    Stack trace:\n#0 /tmp/tmpsuzd7dur.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsuzd7dur.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n  $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis looks promising, but I'm getting\
    \ a syntax error on line 6: `Parse error: syntax error, unexpected T_STRING, expecting\
    \ ',' or ';'`\n<|/ c |>\n<| c |>\nSorry, I forgot the quotes around `'<([^>]*)>'`.\
    \ I've edited my answer.\n<|/ c |>\n<| c |>\nThanks, that fixed that error, but\
    \ now I'm getting this error: `Parse error: syntax error, unexpected T_STRING,\
    \ expecting ',' or ';'`\n<|/ c |>\n<| c |>\nSorry, I forgot the quotes around\
    \ `'<([^>]*)>'`. I've edited my answer.\n<|/ c |>\n<| c |>\nThanks, that fixed\
    \ that error, but now I'm getting this error: `Parse error: syntax error, unexpected\
    \ T_STRING, expecting ',' or ';'`\n<|/ c |>\n<| a tags=php,regex |>\nThis should\
    \ work:\n<code>\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This looks promising, but I'm getting a syntax error on line 6: `Parse error:\
    \ syntax error, unexpected T_STRING, expecting ',' or ';'`\n<|/ c |>\n<| c |>\n\
    Sorry, I forgot the quotes around `'<([^>]*)>'`. I've edited my answer.\n<|/ c\
    \ |>\n<| c |>\nThanks, that fixed that error, but now I'm getting this error:\
    \ `Parse error: syntax error, unexpected T_STRING, expecting ',' or ';'`\n<|/\
    \ c |>\n<| c |>\nSorry, I forgot the quotes around `'<([^>]*)>'`. I've edited\
    \ my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = '<<><>>';\n\
    $pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiaekaoyn.php on line 17

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"<<\";\n   \
    \ }\n    if ($value == \">\") {\n      $brackets[$key] = \">>\";\n    }\n  }\n\
    \  return implode(\">\", $brackets) == $brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpov5m788i.php:30\n\
    Stack trace:\n#0 /tmp/tmpov5m788i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpov5m788i.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value !== \"<\" && $value !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6a6isml.php:27\n\
    Stack trace:\n#0 /tmp/tmpl6a6isml.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl6a6isml.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '<') {\n      $open_brackets[] = '<';\n\
    \    } else if ($bracket == '>') {\n      $closed_brackets[] = '>';\n    }\n \
    \ }\n  return count($open_brackets) == count($closed_brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp_7mi2rb2.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp_7mi2rb2.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp_7mi2rb2.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp_7mi2rb2.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp_7mi2rb2.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7mi2rb2.php:34\n\
    Stack trace:\n#0 /tmp/tmp_7mi2rb2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_7mi2rb2.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n  return ($brackets === '<>');\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgofq_05a.php:24\n\
    Stack trace:\n#0 /tmp/tmpgofq_05a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgofq_05a.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n\
    \  }\n  $brackets = implode(\">\", $brackets);\n  return $brackets == \"{<}\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2g00w_d.php:28\n\
    Stack trace:\n#0 /tmp/tmpn2g00w_d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn2g00w_d.php\
    \ on line 28\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] != \"<\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscw9l6og.php:33\n\
    Stack trace:\n#0 /tmp/tmpscw9l6og.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpscw9l6og.php\
    \ on line 33\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value === \"<\") {\n      if ($key === 0) {\n        return\
    \ false;\n      }\n      $brackets[$key - 1] = \"</\" . $brackets[$key - 1];\n\
    \    }\n  }\n  return count($brackets) === 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputsuwsqm.php:30\n\
    Stack trace:\n#0 /tmp/tmputsuwsqm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmputsuwsqm.php\
    \ on line 30\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $bracket) {\n    if ($bracket != \">\") {\n      $brackets[$key] = \">\";\n\
    \    }\n  }\n  $brackets = implode(\">\", $brackets);\n  return $brackets == $brackets;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1kwcshqn.php:32\n\
    Stack trace:\n#0 /tmp/tmp1kwcshqn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1kwcshqn.php\
    \ on line 32\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = preg_split('/[<>]+/', $brackets);\n  $closed_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  return count($open_brackets) == count($closed_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rp6_yo0.php:27\n\
    Stack trace:\n#0 /tmp/tmp6rp6_yo0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6rp6_yo0.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>$/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there is a way to make it work for nested brackets such as `<<<>>>` ?\n<|/ c\
    \ |>\n<| c |>\n: Yes, it can be done by adding another level of recursion.\n<|/\
    \ c |>\n<| c |>\n: I've added a recursive solution that works for nested brackets.\n\
    <|/ c |>\n<| c |>\n: I added a recursive solution that works for nested brackets.\n\
    <|/ c |>\n<| c |>\n: I added a recursive solution that works for nested brackets.\n\
    <|/ c |>\n<| a tags=php,regex |>\nI came up with this solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp__2tt2j5.php on line 17

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key + 1] == \"<\"\
    ) {\n        $brackets[$key + 1] = \"</>\";\n      }\n    }\n  }\n  return implode(\"\
    >\", $brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn3bcxpv.php:29\n\
    Stack trace:\n#0 /tmp/tmppn3bcxpv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppn3bcxpv.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1csttnie.php on line 41

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  return\
    \ (strlen($brackets) == strlen($brackets[0]));\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeck0cwk4.php:22\n\
    Stack trace:\n#0 /tmp/tmpeck0cwk4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeck0cwk4.php\
    \ on line 22\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2lr4h3t.php:24\n\
    Stack trace:\n#0 /tmp/tmpz2lr4h3t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz2lr4h3t.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_flip($opening_brackets);\n\
    \  $closing_brackets = array_flip($closing_brackets);\n  return array_diff_key($opening_brackets,\
    \ $closing_brackets) === 0;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ however it fails on `<<><>>` which should return `true` but returns `false`\n\
    <|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| c |>\nI like your solution, however it fails on `<<><>>` which should return\
    \ `true` but returns `false`\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, however it fails\
    \ on `<<><>>` which should return `true` but returns `false`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7eqmlj30.php on line 19

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($v) { return $v != \"\"; });\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsr853nmp.php:26\n\
    Stack trace:\n#0 /tmp/tmpsr853nmp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsr853nmp.php\
    \ on line 26\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnfse8qfk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnfse8qfk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnfse8qfk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnfse8qfk.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpnfse8qfk.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfse8qfk.php:34\n\
    Stack trace:\n#0 /tmp/tmpnfse8qfk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnfse8qfk.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe\
    \ it can be simplified a bit. `preg_match_all('/<[^<>]+>/', $brackets)` will match\
    \ any string that starts with `<` and ends with `>`, so `<` and `>` can be removed\
    \ from the brackets string. Also, `preg_replace('/<\\/?[^<>]+>/', '', $brackets)`\
    \ will remove any `<` or `>` that is followed by a `/`, so `<` and `>` can be\
    \ removed from the brackets string.\n<|/ c |>\n<| c |>\n: Yes, you're right. I\
    \ was thinking about `preg_replace('/<\\/?[^<>]+>/', '', $brackets)` but then\
    \ I realized that `preg_replace('/<[^<>]+>/', '', $brackets)` will also remove\
    \ `<` and `>` that are followed by a `/`. So I thought it would be better to keep\
    \ `preg_replace('/<\\/?[^<>]+>/', '', $brackets)`.\n<|/ c |>\n<| c |>\n: I added\
    \ your simplifications to the answer.\n<|/ c |>\n<| c |>\n: I added your simplifications\
    \ to the answer.\n<|/ c |>\n<| c |>\n: I added your simplifications to the answer.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6g5pij6h.php on line 16

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wv61c65.php:27\n\
    Stack trace:\n#0 /tmp/tmp1wv61c65.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1wv61c65.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] != $value) {\n\
    \        return false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rpxjx1y.php:29\n\
    Stack trace:\n#0 /tmp/tmp7rpxjx1y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7rpxjx1y.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b !== \"<\") {\n      if ($b !== \">\") {\n        return false;\n \
    \     }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg1vckv4.php:29\n\
    Stack trace:\n#0 /tmp/tmprg1vckv4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprg1vckv4.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\">\", $brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstydokvk.php:27\n\
    Stack trace:\n#0 /tmp/tmpstydokvk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpstydokvk.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zxfalrd.php:24\n\
    Stack trace:\n#0 /tmp/tmp8zxfalrd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8zxfalrd.php\
    \ on line 24\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    $brackets = array_reverse($brackets);\n\
    \    return count(array_diff($brackets, $brackets)) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqufiz06l.php:29\n\
    Stack trace:\n#0 /tmp/tmpqufiz06l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqufiz06l.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value !== \"<\") {\n      $brackets[$key] = \"</$value>\"\
    ;\n    }\n  }\n  return implode(\">\", $brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtm2p4r4.php:27\n\
    Stack trace:\n#0 /tmp/tmpxtm2p4r4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxtm2p4r4.php\
    \ on line 27\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbzeg7svt.php on line 48

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $opening_bracket => $closing_bracket) {\n    if ($closing_brackets[$opening_bracket]\
    \ != $opening_bracket) {\n      return false;\n    }\n  }\n  return true;\n}\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2yjav_1.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2yjav_1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp2yjav_1.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\",\
    \ $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket ==\
    \ $brackets[$key - 1]) {\n      unset($brackets[$key]);\n    }\n  }\n  return\
    \ count($brackets) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmphbm9tdtj.php\
    \ on line 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphbm9tdtj.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphbm9tdtj.php on line 20\n\nWarning: explode()\
    \ expects parameter 2 to be string, array given in /tmp/tmphbm9tdtj.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphbm9tdtj.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphbm9tdtj.php on line 20\n\nWarning: explode()\
    \ expects parameter 2 to be string, array given in /tmp/tmphbm9tdtj.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphbm9tdtj.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphbm9tdtj.php on line 20\n\nWarning: explode()\
    \ expects parameter 2 to be string, array given in /tmp/tmphbm9tdtj.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphbm9tdtj.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphbm9tdtj.php on line 20\n\nWarning: explode()\
    \ expects parameter 2 to be string, array given in /tmp/tmphbm9tdtj.php on line\
    \ 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmphbm9tdtj.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphbm9tdtj.php on line 20\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphbm9tdtj.php:32\nStack trace:\n#0 /tmp/tmphbm9tdtj.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphbm9tdtj.php on line 32\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    return $brackets === '<>';\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis works great, thank you! I added a\
    \ couple more tests to make sure it works correctly with nested brackets. I added\
    \ my final code to the original question. Thanks again!\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a function that checks if a string is balanced or not.\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2yur60vj.php on line 17

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jabhren.php:23\n\
    Stack trace:\n#0 /tmp/tmp9jabhren.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9jabhren.php\
    \ on line 23\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n\
    \  }\n  return $brackets == array_reverse($brackets);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for brackets\
    \ such as `<>`. I just tried it on `<<><>>` but it returns `false`. Do you know\
    \ why?\n<|/ c |>\n<| c |>\nI added a test case for that case.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Your code works perfectly for brackets such as `<>`.\
    \ I just tried it on `<<><>>` but it returns `false`. Do you know why?\n<|/ c\
    \ |>\n<| c |>\nI added a test case for that case.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for brackets such as `<>`. I just tried\
    \ it on `<<><>>` but it returns `false`. Do you know why?\n<|/ c |>\n<| a dscore=1\
    \ |>\nI wrote a recursive function which checks if a bracket is correctly closed:\n\
    <code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcodu5gxl.php on line 21

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $b) {\n    if ($b == '<') {\n      $opening_brackets[] = $b;\n\
    \    } else if ($b == '>') {\n      $closing_brackets[] = $b;\n    }\n  }\n  return\
    \ count($opening_brackets) == count($closing_brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpfhtb5xxa.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpfhtb5xxa.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpfhtb5xxa.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpfhtb5xxa.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpfhtb5xxa.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhtb5xxa.php:34\n\
    Stack trace:\n#0 /tmp/tmpfhtb5xxa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfhtb5xxa.php\
    \ on line 34\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    <>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<><>>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<<><><>><>><<><><<>>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<<<><>>>>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"><<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<<<\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\">\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<<>\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l0oym9d.php:29\n\
    Stack trace:\n#0 /tmp/tmp4l0oym9d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4l0oym9d.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b)\
    \ {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp97ihzm1t.php:29\n\
    Stack trace:\n#0 /tmp/tmp97ihzm1t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97ihzm1t.php\
    \ on line 29\n"
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiuypn66l.php on line 47

    '
  timestamp: 1659730921
- exit_code: 255
  program: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"<>\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<<<\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    >\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <<>\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    <><><<><>><>><<>\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"<><><<><>><>>><>\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8kmsgda.php:26\n\
    Stack trace:\n#0 /tmp/tmpf8kmsgda.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf8kmsgda.php\
    \ on line 26\n"
  timestamp: 1659730921
