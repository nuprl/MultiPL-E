name: HumanEval_29_filter_by_prefix
language: php
prompt: "<?php\n// Filter an input array of strings only for ones that start with\
  \ a given prefix.\n// >>> filter_by_prefix(array(), \"a\")\n// array()\n// >>> filter_by_prefix(array(\"\
  abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"array\")\nfunction\
  \ filter_by_prefix($strings, $prefix) {\n"
tests: "function candidate(...$args) {\n    return filter_by_prefix(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(), \"john\") !== array()) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"asd\",\
  \ \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\", \"xxxAAA\"\
  , \"xxx\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n", "  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very elegant and works well. However I prefer to use `array_filter` as it\
    \ is more readable. Thanks again!\n<|/ c |>\n<| a tags=arrays,php,filtering,arrays\
    \ |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string) {\n  \
    \  if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($s)\
    \ use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if the prefix is at the beginning\
    \ of the string. Try it with `array(\"abc\", \"bcd\", \"cde\", \"array\", \"ab\"\
    )`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(\"abc\", \"bcd\", \"\
    cde\", \"array\", \"ab\", \"ab\")`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it\
    \ with `array(\"abc\", \"bcd\", \"cde\", \"array\", \"ab\", \"ab\", \"ab\")`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(\"abc\", \"bcd\", \"cde\"\
    , \"array\", \"ab\", \"ab\", \"ab\", \"ab\")`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it with `array(\"abc\", \"bcd\", \"cde\", \"array\", \"ab\", \"ab\", \"\
    ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\",\
    \ \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\"\
    , \"ab\", \"ab\", \"", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    Thanks, this works great. Just a quick question, how would I go about adding another\
    \ condition to the function so that it only returns strings that start with \"\
    a\" AND \"b\"? I tried adding another condition to the if statement but that didn't\
    \ work.\n<|/ c |>\n<| c |>\n: Just add another condition to the `if` statement:\
    \ `if (strpos($string, $prefix) === 0 && strpos($string, \"b\") === 0) {`\n<|/\
    \ c |>\n<| c |>\nThanks, that worked great. One last question, how would I go\
    \ about adding another condition to the function so that it only returns strings\
    \ that start with \"a\" AND \"b\" AND \"c\"? I tried adding another condition\
    \ to the if statement but that didn't work.\n<|/ c |>\n<| c |>\n: Just add another\
    \ condition to the `if` statement: `if (strpos($string, $prefix) === 0 && strpos($string,\
    \ \"b\") === 0 && strpos($string, \"c\") === 0) {`\n<|/ c |>\n<| c |>\nThanks,\
    \ that worked great. One last question, how would I go about adding another condition\
    \ to the function so that it only returns strings that start with \"a\" AND \"\
    b\" AND \"c\" AND \"d\"? I tried adding another condition to the if statement\
    \ but that didn't work.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array = array_filter($array,\
    \ function($item) {\n    return strpos($item, 'a') === 0;\n});\nprint_r($array);\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nThanks, this works great. Just a quick question,\
    \ how would I go about adding another condition to the function so that it only\
    \ returns strings that start with \"a\" AND \"b\"? I tried adding another condition\
    \ to the if statement but that didn't work.\n<|/ c |>\n<| c |>\n: Just add another\
    \ condition to the `if` statement: `if (strpos($string, $prefix) === 0 && strpos($string,\
    \ \"b\") === 0) {`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array", "  return array_filter($strings, function($s)\
    \ use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThanks for your answer. Your solution is very\
    \ elegant and works perfectly. I'm going to accept this answer as soon as I can.\n\
    <|/ c |>\n<| c |>\nI added a more general solution that works with any number\
    \ of arguments and any number of prefixes. I hope it helps.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($item) use ($prefix) {\n   \
    \ return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThanks for your answer. Your solution is very elegant and works perfectly.\
    \ I'm going to accept this answer as soon as I can.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($item) use ($prefix) {\n   \
    \ return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"b", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strncmp($string, $prefix, strlen($prefix))\
    \ == 0;\n  });\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like your solution, but I prefer\
    \ to use `array_filter` as it's more flexible and more efficient.\n<|/ c |>\n\
    <| c |>\n: I agree, `array_filter` is more flexible and more efficient. I've added\
    \ a note about that to my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($v) use ($prefix) {\n    return strpos($v, $prefix)\
    \ === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like your solution,\
    \ but I prefer to use `array_filter` as it's more flexible and more efficient.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($v)\
    \ use ($prefix) {\n    return strpos($v, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nI like your solution, but I prefer to use `array_filter`\
    \ as it's more flexible and more efficient.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($v) use ($prefix) {\n    return strpos($v, $prefix)\
    \ === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($v) use ($prefix) {\n    return strpos($v, $prefix)\
    \ === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like your solution,\
    \ but I prefer to use `array_filter` as it's more flexible and more efficient.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result\
    \ = array_filter($array, function($item){\n    return strpos($item, 'a') === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php dscore=4 |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array,\
    \ function($item){\n    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$result = array_filter($array, function($item){\n    return\
    \ strpos($item, 'a') === 0;\n});\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array,\
    \ function($item){\n    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($item){\n\
    \    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array_filter($array, function($item){\n    return strpos($item, 'a') === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($item){\n\
    \    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$filtered = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$filtered = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$filtered = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function(",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I've tried your\
    \ solution and it works perfectly. I'm just wondering if there is a way to do\
    \ this without using any loops. I mean is there a way to do this using only array\
    \ functions?\n<|/ c |>\n<| c |>\n: I added a version that doesn't use any loops.\n\
    <|/ c |>\n<| c |>\nThanks again for your answer. I've tried your solution and\
    \ it works perfectly. I'm just wondering if there is a way to do this without\
    \ using any loops. I mean is there a way to do this using only array functions?\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't use any loops.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\",\
    \ \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nPlease add some explanation to\
    \ your answer such that others can learn from it\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$filtered = array_filter($array, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=arrays,php |>\n<code>\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strncmp($prefix, $string, strlen($prefix)) == 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like\
    \ this solution, but I believe it can be improved by using array_filter() instead\
    \ of array_map(). array_map() will create a new array and array_filter() will\
    \ modify the original array in place.\n<|/ c |>\n<| c |>\n: Yes, you're right.\
    \ I've updated my answer accordingly.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly and is very readable.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly and is very readable.\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value) use\
    \ ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=3 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php ", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, it does require that all strings\
    \ are of the same length. Is there a way to make it work with strings of different\
    \ lengths?\n<|/ c |>\n<| c |>\n: Yes, you can use the `strlen` function to get\
    \ the length of a string. I've updated my answer to show how this can be done.\n\
    <|/ c |>\n<| c |>\nI used this solution and it worked perfectly for me. Thank\
    \ you so much!\n<|/ c |>\n<| c |>\nI used this solution and it worked perfectly\
    \ for me. Thank you so much!\n<|/ c |>\n<| c |>\nI used this solution and it worked\
    \ perfectly for me. Thank you so much!\n<|/ c |>\n<| a dscore=5 |>\nI like to\
    \ use array_filter() for this kind of thing:\n<code>\n$filtered = array_filter($strings,\
    \ function($string) {\n    return strpos($string, 'a') === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional libraries. However, it does require that all strings\
    \ are of the same length. Is there a way to make it work with strings of different\
    \ lengths?\n<|/ c |>\n<| c |>\n: Yes, you can use the `strlen` function to get\
    \ the length of a string. I've updated my answer to show how this can be done.\n\
    <|/ c |>\n<| c |>\nI used this solution and it worked perfectly for me. Thank\
    \ you so much!\n<|/ c |>\n<| a dscore=5 |>\nI like to use array_filter() for this\
    \ kind of thing:\n<code>\n$filtered = array_filter($strings, function($string)\
    \ {\n    return strpos($string, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, it does require that all strings are of the same length.\
    \ Is there a way to make it work with strings of different lengths?\n<|/ c |>\n\
    <| c |>\n: Yes, you can use the `strlen` function to get the length of a string.\
    \ I've updated my ", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$array2 = array('abc', 'def', 'ghi', 'jkl');\n$array3 = array();\n\
    $array4 = array();\n$array5 = array();\n$array6 = array();\n$array7 = array();\n\
    $array8 = array();\n$array9 = array();\n$array10 = array();\n$array11 = array();\n\
    $array12 = array();\n$array13 = array();\n$array14 = array();\n$array15 = array();\n\
    $array16 = array();\n$array17 = array();\n$array18 = array();\n$array19 = array();\n\
    $array20 = array();\n$array21 = array();\n$array22 = array();\n$array23 = array();\n\
    $array24 = array();\n$array25 = array();\n$array26 = array();\n$array27 = array();\n\
    $array28 = array();\n$array29 = array();\n$array30 = array();\n$array31 = array();\n\
    $array32 = array();\n$array33 = array();\n$array34 = array();\n$array35 = array();\n\
    $array36 = array();\n$array37 = array();\n$array38 = array();\n$array39 = array();\n\
    $array40 = array();\n$array41 = array();\n$array42 = array();\n$array43 = array();\n\
    $array44 = array();\n$array45 = array();\n$array46 = array();\n$array47 = array();\n\
    $array48 = array();\n$array49 = array();\n$array50 = array();\n$array51 = array();\n\
    $array52 = array();\n$array53 = array();\n$array54 = array();\n$array55 = array();\n\
    $array56 = array();\n$array57 = array();\n$array58 = array();\n$array59 = array();\n\
    $array60 = array();\n$array61 = array();\n$array62 = array();\n$array63 = array();\n\
    $array64 = array();\n$array65 = array();\n$", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however it only works with strings. I need a solution that\
    \ works with arrays of strings and arrays of arrays of strings.\n<|/ c |>\n<|\
    \ c |>\n: I've added a solution that works with arrays of strings and arrays of\
    \ arrays of strings.\n<|/ c |>\n<| c |>\n: I've added a solution that works with\
    \ arrays of strings and arrays of arrays of strings.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n\n$filtered = array_filter($array, function($value) use ($prefix) {\n\
    \    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, however it only works with strings. I need a solution\
    \ that works with arrays of strings and arrays of arrays of strings.\n<|/ c |>\n\
    <| c |>\n: I've added a solution that works with arrays of strings and arrays\
    \ of arrays of strings.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n\n$filtered = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n\n$filtered = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n\n$filtered = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strncmp($string, $prefix, strlen($prefix))\
    \ == 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach\
    \ ($array as $key => $value) {\n    if (substr($value, 0, 3) == \"abc\") {\n \
    \       $array2[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $array2 = array();\nforeach ($array as $key => $value) {\n    if (substr($value,\
    \ 0, 3) == \"abc\") {\n        $array2[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$array2 = array();\nforeach ($array as $key => $value) {\n    if\
    \ (substr($value, 0, 3) == \"abc\") {\n        $array2[] = $value;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach ($array as $key =>\
    \ $value) {\n    if (substr($value, 0, 3) == \"abc\") {\n        $array2[] = $value;\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach\
    \ ($array as $key => $value) {\n    if (substr($value, 0, 3) == \"abc\") {\n \
    \       $array2[] = $value;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 =\
    \ array();\nforeach ($array as $key => $value) {\n    if (substr($value, 0, 3)\
    \ == \"abc\") {\n        $array2[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $array2 = array();\nforeach ($array ", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $array2 = array('abc', 'def', 'ghi', 'jkl');\n$array3 = array();\n$array4 = array();\n\
    $array5 = array();\n$array6 = array();\n\n$array3 = array_diff($array, $array2);\n\
    $array4 = array_diff($array, $array2);\n$array5 = array_diff($array, $array2);\n\
    $array6 = array_diff($array, $array2);\n\n$array4 = array_diff($array3, $array4);\n\
    $array5 = array_diff($array3, $array5);\n$array6 = array_diff($array3, $array6);\n\
    \n$array5 = array_diff($array4, $array5);\n$array6 = array_diff($array4, $array6);\n\
    \n$array6 = array_diff($array5, $array6);\n\nprint_r($array3);\nprint_r($array4);\n\
    print_r($array5);\nprint_r($array6);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array1 = array('abc', 'def', 'ghi', 'jkl');\n$array2 = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$array3 = array();\n$array4 = array();\n$array5 = array();\n\
    $array6 = array();\n\n$array3 = array_diff($array1, $array2);\n$array4 = array_diff($array1,\
    \ $array2);\n$array5 = array_diff($array1, $array2);\n$array6 = array_diff($array1,\
    \ $array2);\n\n$array4 = array_diff($array3, $array4);\n$array5 = array_diff($array3,\
    \ $array5);\n$array6 = array_diff($array3, $array6);\n\n$array5 = array_diff($array4,\
    \ $array5);\n$array6 = array_diff($array4, $array6);\n\n$array6 = array_diff($array5,\
    \ $array6);\n\nprint_r($array3);\nprint_r($array4);\nprint_r($array5);\nprint_r($array6);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array1 = array('abc', 'def',\
    \ 'ghi', 'jk", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ libraries. However, it does require PHP >= 5.3.0 because anonymous functions\
    \ were introduced in 5.3.0.\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any additional libraries. However, it does require\
    \ PHP >= 5.3.0 because anonymous functions were introduced in 5.3.0.\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. However, it does require PHP >= 5.3.0 because anonymous functions\
    \ were introduced in 5.3.0.\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any additional libraries. However, it does require\
    \ PHP >= 5.3.0 because anonymous functions were introduced in 5.3.0.\n<|/ c |>\n\
    <| c |>\nI like this solution as well, because it doesn't require any additional\
    \ libraries. However, it does require PHP >= 5.3.0 because anonymous functions\
    \ were introduced in 5.3.0.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do it without using any PHP\
    \ functions. I guess this would require a recursive function, but I haven't been\
    \ able to figure it out.\n<|/ c |>\n<| c |>\nI added a recursive function to the\
    \ answer.\n<|/ c |>\n<| c |>\nI added a recursive function to the answer.\n<|/\
    \ c |>\n<| c |>\nI added a recursive function to the answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\nHere's a recursive solution that doesn't use any PHP functions:\n<code>",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi');\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc', 'def', 'ghi');\n\
    $array = array_filter($array, function($value) {\n    return strpos($value, 'a')\
    \ === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi');\n$array = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n</code>\n<|/ a dscore=1 tags=arrays,php |>\n\
    <| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def', 'ghi');\n$array\
    \ = array_filter($array, function($value) {\n    return strpos($value, 'a') ===\
    \ 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi');\n$array = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi');\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi');\n$array = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi');\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi');\n$array = array_", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($string, $prefix, strlen($prefix))\
    \ == 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, although I prefer a\
    \ more generic solution that doesn't require a specific prefix length. I'll post\
    \ my own answer with my own solution. Thanks!\n<|/ c |>\n<| a dscore=1 |>\nI like\
    \ Martin's solution, but I prefer a more generic solution that doesn't require\
    \ a specific prefix length. Here's my own solution:\n<code>", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for the answer, but this doesn't seem to work. I've added the\
    \ code to the original question. Can you please take a look?\n<|/ c |>\n<| c |>\n\
    I added a working example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your help, but this doesn't seem to work. I've added the code to the original\
    \ question. Can you please take a look?\n<|/ c |>\n<| c |>\nI added a working\
    \ example to my answer. Hope it helps.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer,\
    \ but this doesn't seem to work. I've added the code to the original question.\
    \ Can you please take a look?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks for\
    \ the answer, but this doesn't seem to work. I've added the code to the original\
    \ question. Can you please take a look?\n<|/ c |>\n<| c |>\nI added a working\
    \ example to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks for\
    \ the answer, but this doesn't seem to work. I've added the code to the original\
    \ question. Can you please take a look?\n<|/ c |>\n<| c |>\nI added a working\
    \ example to my answer. Hope it helps.", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\",\
    \ \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php dscore=0 |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$search = \"a\"\
    ;\n$result = array_filter($array, function($item) use ($search) {\n    return\
    \ strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$search = \"a\";\n$result = array_filter($array, function($item) use ($search)\
    \ {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so much! I really appreciate your\
    \ help!\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array\
    \ = array();\n$array[] = array(\"name\" => \"John\", \"age\" => 25);\n$array[]\
    \ = array(\"name\" => \"Jane\", \"age\" => 26);\n$array[] = array(\"name\" =>\
    \ \"Jack\", \"age\" => 27);\n$array[] = array(\"name\" => \"Jill\", \"age\" =>\
    \ 28);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 29);\n$array[] = array(\"\
    name\" => \"Jill\", \"age\" => 30);\n\n$result = array();\nforeach ($array as\
    \ $key => $value) {\n    if ($value['name'] == 'Jack') {\n        $result[] =\
    \ $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array(\"name\" => \"John\", \"age\"\
    \ => 25);\n$array[] = array(\"name\" => \"Jane\", \"age\" => 26);\n$array[] =\
    \ array(\"name\" => \"Jack\", \"age\" => 27);\n$array[] = array(\"name\" => \"\
    Jill\", \"age\" => 28);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 29);\n\
    $array[] = array(\"name\" => \"Jill\", \"age\" => 30);\n\n$result = array();\n\
    foreach ($array as $key => $value) {\n    if ($value['name'] == 'Jack') {\n  \
    \      $result[] = $value;\n    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n\
    $array[] = array(\"name\" => \"John\", \"age\" => 25);\n$array[] = array(\"name\"\
    \ => \"Jane\", \"age\" => 26);\n$array[] = array(\"name\" => \"Jack\", \"age\"\
    \ => 27);\n$array[] = array(\"name\" ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php,multidimensional-array |>\n<| a tags=arrays,php,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, 'a') === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer. Simple, concise and effective.\n<|/\
    \ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise and effective.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Simple, concise and effective.\n\
    <|/ c |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$array = array_filter($array, function($var) {\n    return strpos($var, 'a')\
    \ === 0;\n});\n</code>\n<|/ a tags=php,arrays dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer. Simple, concise and effective.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Simple, concise and effective.\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Simple, concise and effective.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\",\
    \ \"array\");\n$array = array_filter($array, function($var) {\n    return strpos($var,\
    \ 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis should be\
    \ the accepted answer. Simple, concise and effective.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array =\
    \ array_filter($array, function($var) {\n    return strpos($", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array();\nforeach($array\
    \ as $value){\n    if(strpos($value, 'a') !== false){\n        $result[] = $value;\n\
    \    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$result = array();\nforeach($array as $value){\n\
    \    if(strpos($value, 'a') !== false){\n        $result[] = $value;\n    }\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array();\n\
    foreach($array as $value){\n    if(strpos($value, 'a') !== false){\n        $result[]\
    \ = $value;\n    }\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array();\nforeach($array as $value){\n    if(strpos($value, 'a') !== false){\n\
    \        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array();\nforeach($array as $value){\n    if(strpos($value, 'a') !== false){\n\
    \        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array();\nforeach($array as $value){\n    if(strpos($value, 'a') !== false){\n\
    \        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"abc\", \"", " \
    \ return array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer as\
    \ it is the most efficient solution. Using `array_filter` will loop through every\
    \ element in the array and compare it with the `$prefix` variable. Using `array_map`\
    \ will loop through every element in the array and compare it with the `$prefix`\
    \ variable. Using `array_search` will loop through every element in the array\
    \ and compare it with the `$prefix` variable. Using `strpos` will loop through\
    \ every element in the array and compare it with the `$prefix` variable. Using\
    \ `preg_match` will loop through every element in the array and compare it with\
    \ the `$prefix` variable. Using `foreach` will loop through every element in the\
    \ array and compare it with the `$prefix` variable.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, this is definitely the most efficient solution. However I find it\
    \ a bit hard to read and understand for someone who is new to PHP. That's why\
    \ I wrote my own answer with some explanation.\n<|/ c |>\n<| c |>\nI agree with\
    \ you and I upvoted your answer. I just wanted to add that `array_filter` will\
    \ also loop through every element in the array and compare it with the `$prefix`\
    \ variable. `array_map` will loop through every element in the array and compare\
    \ it with the `$prefix` variable. `array_search` will loop through every element\
    \ in the array and compare it with the `$prefix` variable. `strpos` will loop\
    \ through every element in the array and compare it with the `$prefix` variable.\
    \ `preg_match` will loop through every element in the array and compare it with\
    \ the `$prefix` variable. `foreach` will loop through every element in the array\
    \ and compare it with the `$prefix` variable.\n<|/ c |>\n<| c |>\nI agree with\
    \ you and I upvoted your answer. I just wanted to add that `array_filter` will\
    \ also loop through every element in the array and compare it with the `$prefix`\
    \ variable. `array_map` will loop through every element in the array and compare\
    \ it with the `$prefix` variable. `array_search` will loop through every element\
    \ in the array and compare it with the `$prefix` variable. `strpos` will loop\
    \ through every element in the array and compare it with the `$prefix` variable.\
    \ `preg_match` will loop through ", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Thanks so much for your help. I really appreciate it. I tried the code you provided\
    \ and it worked perfectly. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a |>\n<code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=0\
    \ tags=arrays,php |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings =\
    \ array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered =\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$strings =\
    \ array(\"abc\", \"bcd\", \"c", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nI like your answer but I think it would be\
    \ better to use a `foreach` loop instead of `array_filter()`\n<|/ c |>\n<| c |>\n\
    : I agree, `foreach` is more readable and probably more efficient.\n<|/ c |>\n\
    <| c |>\nI agree, `foreach` is more readable and probably more efficient.\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array();\nforeach($array as $value){\n\
    \    if(strpos($value, $prefix) === 0){\n        $result[] = $value;\n    }\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array();\nforeach($array\
    \ as $value){\n    if(strpos($value, $prefix) === 0){\n        $result[] = $value;\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=3 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array();\nforeach($array as $value){\n    if(strpos($value, $prefix) === 0){\n\
    \        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array();\nforeach($array as $value){\n    if(strpos($value,\
    \ $prefix) === 0){\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array();\nforeach($array as $value){\n    if(strpos($value,\
    \ $prefix) === 0){\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$array = array(\"abc\", \"", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($prefix, $string, strlen($prefix))\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple strings that start with $prefix. For example,\
    \ `filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")` returns\
    \ `array(\"abc\", \"array\")` instead of `array(\"abc\", \"bcd\", \"cde\")`.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with multiple strings that start\
    \ with the given prefix.\n<|/ c |>\n<| c |>\nI see that your solution works. I\
    \ guess my question was more about how to do this without looping through each\
    \ string. Thanks for your help!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThis\
    \ doesn't seem to work when there are multiple strings that start with $prefix.\
    \ For example, `filter_by_prefix(array(\"abc\", \"bcd\", \"cde\", \"array\"),\
    \ \"a\")` returns `array(\"abc\", \"array\")` instead of `array(\"abc\", \"bcd\"\
    , \"cde\")`.\n<|/ c |>\n<| c |>\n: I added a version that works with multiple\
    \ strings that start with the given prefix.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays,string |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = ", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to make it more efficient? I feel\
    \ like it would be more efficient to just loop through the array and check each\
    \ element against the prefix before adding it to the new array. I'm just not sure\
    \ how to do that in PHP. Thanks!\n<|/ c |>\n<| c |>\n: Yes, it would be more efficient\
    \ to loop through the array and check each element against the prefix before adding\
    \ it to the new array. I'm just not sure how to do that in PHP. Thanks!\n<|/ c\
    \ |>\n<| c |>\n: I added a solution that uses `array_filter()`.\n<|/ c |>\n<|\
    \ c |>\n: I added a solution that uses `array_filter()`.\n<|/ c |>\n<| c |>\n\
    : I added a solution that uses `array_filter()`.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value, $prefix)\
    \ === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to make it\
    \ more efficient? I feel like it would be more efficient to just loop through\
    \ the array and check each element against the prefix before adding it to the\
    \ new array. I'm just not sure how to do that in PHP. Thanks!\n<|/ c |>\n<| c\
    \ |>\n: Yes, it would be more efficient to loop through the array and check each\
    \ element against the prefix before adding it to the new array. I'm just not sure\
    \ how to do that in PHP. Thanks!\n<|/ c |>\n<| c |>\n: I added a solution that\
    \ uses `array_filter()`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array();\nforeach\
    \ ($array as $value) {\n    if (strpos($value, $prefix) === 0) {\n        $result[]\
    \ = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to make it more ", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like this solution, however I\
    \ believe it would be better to use a foreach loop instead of array_filter. array_filter\
    \ will create a new array and copy the values from the original array to the new\
    \ array. foreach will just iterate through the original array and add each value\
    \ to the new array if it starts with the prefix.\n<|/ c |>\n<| c |>\nI agree with\
    \ you on that one. I've edited my answer to include a foreach loop instead.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\",\
    \ \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php dscore=3 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"", "  $filtered = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array['one'] = array('one','two','three');\n\
    $array['two'] = array('four','five','six');\n$array['three'] = array('seven','eight','nine');\n\
    $array['four'] = array('ten','eleven','twelve');\n$array['five'] = array('thirteen','fourteen','fifteen');\n\
    $array['six'] = array('sixteen','seventeen','eighteen');\n$array['seven'] = array('nineteen','twenty','thirty');\n\
    $array['eight'] = array('fourty','fifty','sixty');\n$array['nine'] = array('seventy','eighty','ninety');\n\
    $array['ten'] = array('hundred','thousand','million');\n$array['eleven'] = array('eleven','twelve','thirteen');\n\
    $array['twelve'] = array('fourteen','fifteen','sixteen');\n$array['thirteen']\
    \ = array('seventeen','eighteen','nineteen');\n$array['fourteen'] = array('ten','eleven','twelve');\n\
    $array['fifteen'] = array('thirteen','fourteen','fifteen');\n$array['sixteen']\
    \ = array('sixteen','seventeen','eighteen');\n$array['seventeen'] = array('nineteen','twenty','thirty');\n\
    $array['eighteen'] = array('fourty','fifty','sixty');\n$array['nineteen'] = array('seventy','eighty','ninety');\n\
    $array['twenty'] = array('twenty','thirty','forty');\n$array['thirty'] = array('thirty','forty','fifty');\n\
    $array['forty'] = array('forty','fifty','sixty');\n$array['fifty'] = array('fifty','sixty','seventy');\n\
    $array['sixty'] = array('sixty','seventy','eighty');", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this\
    \ solution, although I prefer `strpos` over `strstr` because `strstr` will match\
    \ partial strings. `strpos` will match anywhere in the string.\n<|/ c |>\n<| c\
    \ |>\nI agree, `strpos` would be better. I've edited my answer to include `strpos`.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return str", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($s) use ($prefix) {\n    return strpos($s,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your\
    \ solution, but I believe that `array_filter` will create a new array and copy\
    \ the filtered elements into it. That will take more memory than just iterating\
    \ over the array and checking if the element starts with the prefix.\n<|/ c |>\n\
    <| c |>\n: Yes, it will. That's why I added the comment \"// Filter an input array\
    \ of strings only for ones that start with a given prefix.\"\n<|/ c |>\n<| c |>\n\
    : I added a version that does not create a new array. Not sure if it will perform\
    \ better though.\n<|/ c |>\n<| c |>\n: I added a version that does not create\
    \ a new array. Not sure if it will perform better though.\n<|/ c |>\n<| c |>\n\
    : I added a version that does not create a new array. Not sure if it will perform\
    \ better though.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks, I didn't know about `array_filter()`. But\
    \ I still don't understand why my code doesn't work. Could you please explain\
    \ why my code doesn't work?\n<|/ c |>\n<| c |>\n: Your code doesn't work because\
    \ you didn't understand how `array_filter()` works. You were trying to filter\
    \ out all strings that don't start with the prefix you were looking for, but you\
    \ were doing it wrong. `array_filter()` takes a callback function and an array,\
    \ and returns an array containing all the elements of the original array for which\
    \ the callback function returned true. Your code was trying to filter out all\
    \ strings that don't start with the prefix you were looking for, but you were\
    \ doing it wrong. `array_filter()` takes a callback function and an array, and\
    \ returns an array containing all the elements of the original array for which\
    \ the callback function returned true.\n<|/ c |>\n<| c |>\n: I added an explanation\
    \ to my answer.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array_filter($array, function($value) use ($prefix) {\n    return\
    \ strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"\
    cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"\
    abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"\
    array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\"\
    , \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"\
    ),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n   \
    \ array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"\
    cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"\
    abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"\
    array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\"\
    , \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"\
    ),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n   \
    \ array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"\
    cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"\
    abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"\
    array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"),\n    array(\"abc\"\
    , \"bcd\", \"cde\", \"array\"),\n    array(\"abc\", \"bcd\", \"cde\", \"array\"\
    ),\n    array(\"abc\", \"b", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it only works with\
    \ strings. I need a solution that works with arrays of any type.\n<|/ c |>\n<|\
    \ c |>\nI added a version that works with arrays of any type.\n<|/ c |>\n<| c\
    \ |>\nI added a version that works with arrays of any type.\n<|/ c |>\n<| c |>\n\
    I added a version that works with arrays of any type.\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with arrays of any type.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array_filter($array, function($value) use ($prefix) {\n    return\
    \ strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($value) use ($prefix) {\n  \
    \  return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I did try to use this but couldn't get it to work. I'm new to PHP and am\
    \ trying to learn as I go. I'm sure this will be a good learning experience for\
    \ me. Thanks again!\n<|/ c |>\n<| c |>\nI added a more detailed explanation of\
    \ how to use this function\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate\
    \ it! I really appreciate your help!\n<|/ c |>\n<| c |>\nNo problem! If this answer\
    \ solved your problem, please mark it as accepted by clicking the check mark next\
    \ to it.\n<|/ c |>\n<| c |>\nI did mark it as accepted but I'm new and don't have\
    \ enough reputation points to upvote it yet. Thanks again for your help!\n<|/\
    \ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($var)\
    \ use ($prefix) {\n    return strpos($var, $prefix) === 0;\n});\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it! I did try to use this but couldn't get it to work. I'm new to PHP and am\
    \ trying to learn as I go. I'm sure this will be a good learning experience for\
    \ me. Thanks again!\n<|/ c |>\n<| c |>\nI added a more detailed explanation of\
    \ how to use this function\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($var) use ($prefix) {\n    return strpos($var,\
    \ $prefix) === 0;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I did try to use this but couldn't\
    \ get it to work. I'm new to PHP and am trying to learn as I go. I'm sure this\
    \ will be a ", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search\
    \ = 'a';\n$result = array_filter($array, function($item) use ($search) {\n   \
    \ return strpos($item, $search) === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    $search = 'a';\n$result = array_filter($array, function($item) use ($search) {\n\
    \    return strpos($item, $search) === 0;\n});\n", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/\
    \ a tags=php,arrays,string |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 tags=php,arrays,string |>\n<|\
    \ a tags=php,arrays,string |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $strings = array(\"abc\", \"bcd", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, however it only works with strings.\
    \ If you have an array of objects, it will not work. Do you know of a way to make\
    \ it work with objects?\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ objects as well.\n<|/ c |>\n<| c |>\n: I added a version that works with objects\
    \ as well.\n<|/ c |>\n<| c |>\n: I added a version that works with objects as\
    \ well.\n<|/ c |>\n<| c |>\n: I added a version that works with objects as well.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n\
    $array2 = array('a', 'b', 'c', 'd', 'e');\n\n$array3 = array_diff($array2, $array);\n\
    print_r($array3);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work\
    \ if you have duplicate elements in the array. `array_diff` will remove all duplicates.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have duplicate elements in the array.\
    \ `array_diff` will remove all duplicates.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have duplicate elements in the array. `array_diff` will remove all duplicates.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have duplicate elements in the array.\
    \ `array_diff` will remove all duplicates.\n<|/ c |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array2 = array('a', 'b', 'c',\
    \ 'd', 'e');\n\n$array3 = array_diff($array2, $array);\nprint_r($array3);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have duplicate elements in\
    \ the array. `array_diff` will remove all duplicates.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array1 = array(\"a\",\"b\",\"c\",\"d\",\"e\");\n$array2 = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\");\n\n$array3 = array_diff($array2, $array1);\nprint_r($array3);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=2 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array_filter($array, function($item) use ($prefix) {\n    return\
    \ strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($item) use ($prefix) {\n   \
    \ return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n\
    <| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($array, function($item) use ($prefix) {\n \
    \   return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a d", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($prefix, $string, strlen($prefix))\
    \ == 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I added some more\
    \ information to my question. Could you please take a look at it?\n<|/ c |>\n\
    <| c |>\nI added some more information to my question. Could you please take a\
    \ look at it?\n<|/ c |>\n<| c |>\n: I added some more information to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n$array[]\
    \ = array('name' => 'Jane', 'age' => '28');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '29');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '29');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '30');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '29');\n$array[] = array('name' => 'Jill', 'age' => '30');\n$array[]\
    \ = array('", "  return array_filter($strings, function($s) use ($prefix) {\n\
    \    return strpos($s, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n   \
    \ }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,string dscore=2 |>\n<|\
    \ a tags=php,arrays,string |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=php,arrays,string ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks for your answer,\
    \ but this doesn't work if there are multiple occurrences of the same prefix.\
    \ For example, if I input `array(\"abc\", \"bcd\", \"cde\", \"array\", \"abc\"\
    , \"bcd\", \"cde\", \"array\")`, then `array(\"abc\", \"array\")` should be returned.\n\
    <|/ c |>\n<| c |>\n: I added a version that does that.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it works, but it takes too long to process\
    \ a large array. I've tried it on a small array and it took about 2 seconds to\
    \ process. Do you know how I can speed it up?\n<|/ c |>\n<| c |>\n: I added a\
    \ version that does that in about half a second.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I've tried it and it works, but it takes too long to process a\
    \ large array. I've tried it on a small array and it took about 2 seconds to process.\
    \ Do you know how I can speed it up?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\", \"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$result = array();\nforeach($array as $key => $value)\
    \ {\n    if(strpos($value, $prefix) === 0) {\n        $result[] = $value;\n  \
    \  }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't work if there are multiple\
    \ occurrences of the same prefix. For example, if I input `array(\"abc\", \"bcd\"\
    , \"cde\", \"array\", \"abc\", \"bcd\", \"cde\", \"array\")`, then `array(\"abc\"\
    , \"array\")` should be returned.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ does that.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried it and it\
    \ works, but it takes too long to process a large array. I've tried it on a small\
    \ array and it took about 2 seconds to process. Do you know how I can speed it\
    \ up?\n<|/ c |>\n<| a tags=php,array", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value,\
    \ \"a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value,\
    \ \"a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value, \"\
    a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value,\
    \ \"a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value, \"\
    a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value, \"\
    a\") === 0) {\n        $result[] = $value;\n    }\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$result = array();\nforeach ($array as $value) {\n    if (strpos($value, \"\
    a\") === 0) {\n        $result[] = $", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$result = array_filter($array, function($value) use ($prefix) {\n  \
    \  return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '25');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '35');\n$array[] = array('name' => 'Jill', 'age' => '40');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n$array[] = array('name' => 'Jack', 'age' => '35');\n\
    $array[] = array('name' => 'Jill', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '35');\n$array[] = array('name' => 'Jill', 'age' => '40');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n$array[] = array('name' => 'Jack', 'age' => '35');\n\
    $array[] = array('name' => 'Jill', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '35');\n$array[] = array('name' => 'Jill', 'age' => '40');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n$array[] = array('name' => 'Jack', 'age' => '35');\n\
    $array[] = array('name' => 'Jill', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '35');\n$array[] = array('name' => 'Jill', 'age' => '40');\n\
    $array[] = array('name' => 'Jack', 'age' => '35');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '40');\n$array[] = array('name' => 'Jack', 'age' => '35');\n\
    $array[] = array('name' => 'Jill', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '35');\n$array", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like\
    \ your solution, however it only works if you know the prefix beforehand. Is there\
    \ a way to make it work without knowing the prefix?\n<|/ c |>\n<| c |>\nYes, you\
    \ can use a regex to match any string that starts with the prefix. I've updated\
    \ my answer to show how this can be done.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI like this solution. Very concise. Thanks!\n<|/ c |>\n<| c |>\n\
    This solution doesn't work if you want to filter by multiple prefixes. For example,\
    \ if you wanted to filter by `abc` and `def`, you would need to use `array_filter($strings,\
    \ function($string) use ($prefix1, $prefix2) {return strpos($string, $prefix1)\
    \ === 0 && strpos($string, $prefix2) === 0;});`\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post - you can always\
    \ comment on your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nI believe this answers the question. He asked how to filter\
    \ an array by its keys. I provided an example on how to do that. He also asked\
    \ how to filter an array by its values. I provided an example on how to do that.\
    \ He also asked how to filter an array by its values that start with a given prefix.\
    \ I provided an example on how to do that. He also asked how to filter an array\
    \ by its values that end with a given suffix. I provided an example on how to\
    \ do that. He also asked how to filter an array by its values that contain a given\
    \ substring. I provided an example on how to do that. He also asked how to filter\
    \ an array by its values that match a given regular expression. I provided an\
    \ example on how to do that. He also asked how to filter an array by its values\
    \ that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular expression AND that match a given regular expression\
    \ AND that match a given regular ", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like this solution, but I wonder if there's a way to do this without having\
    \ to use an anonymous function? I feel like it would be more readable to just\
    \ use a regular function and pass it a variable instead of an anonymous function.\n\
    <|/ c |>\n<| c |>\nI agree with you, anonymous functions are a little bit more\
    \ readable, but I prefer them because they allow me to reuse the same function\
    \ with different parameters. I agree with you that it's more readable to use a\
    \ regular function and pass it a variable, but I find that anonymous functions\
    \ allow me to reuse the same function with different parameters. I find that anonymous\
    \ functions make code more readable and easier to maintain.\n<|/ c |>\n<| c |>\n\
    I agree with you on that point. I think I prefer them because they allow me to\
    \ reuse the same function with different parameters. I agree with you that it's\
    \ more readable to use a regular function and pass it a variable, but I find that\
    \ anonymous functions allow me to reuse the same function with different parameters.\
    \ I find that anonymous functions make code more readable and easier to maintain.\n\
    <|/ c |>\n<| c |>\nI agree with you on that point. I think I prefer them because\
    \ they allow me to reuse the same function with different parameters. I agree\
    \ with you that it's more readable to use a regular function and pass it a variable,\
    \ but I find that anonymous functions allow me to reuse the same function with\
    \ different parameters. I find that anonymous functions make code more readable\
    \ and easier to maintain.\n<|/ c |>\n<| c |>\nI agree with you on that point.\
    \ I think I prefer them because they allow me to reuse the same function with\
    \ different parameters. I agree with you that it's more readable to use a regular\
    \ function and pass it a variable, but I find that anonymous functions allow me\
    \ to reuse the same function with different parameters. I find that anonymous\
    \ functions make code more readable and easier to maintain.\n<|/ c |>\n<| a tags=php,arrays,function\
    \ |>\nI like to use array_filter for this. It allows you to specify a callback\
    \ function which can return true or false to determine whether to keep or remove\
    \ the element.\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $filtered = array_filter($array, function($value) {\n    return ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI like your solution, but\
    \ I prefer `array_filter` over `array_map` because `array_map` will create a new\
    \ array and `array_filter` will modify the existing array. Also, I think `array_filter`\
    \ would be more efficient than `array_map` because it doesn't need to create a\
    \ new array.\n<|/ c |>\n<| c |>\nYes, I agree with you. `array_map` will create\
    \ a new array and `array_filter` will modify the existing array. `array_filter`\
    \ would be more efficient because `array_filter` doesn't need to create a new\
    \ array.\n<|/ c |>\n<| c |>\nI agree with you too. `array_map` will create a new\
    \ array and `array_filter` will modify the existing array. `array_filter` would\
    \ be more efficient because `array_filter` doesn't need to create a new array.\n\
    <|/ c |>\n<| c |>\nI agree with you too. `array_map` will create a new array and\
    \ `array_filter` will modify the existing array. `array_filter` would be more\
    \ efficient because `array_filter` doesn't need to create a new array.\n<|/ c\
    \ |>\n<| c |>\nI agree with you too. `array_map` will create a new array and `array_filter`\
    \ will modify the existing array. `array_filter` would be more efficient because\
    \ `array_filter` doesn't need to create a new array.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\");\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, \"a\") === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis should be the accepted answer. Much more\
    \ concise and readable than the other answers.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more concise and readable than the other answers.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and readable\
    \ than the other answers.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and readable than the other answers.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much more concise and readable than the other\
    \ answers.\n<|/ c |>", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strncmp($string, $prefix, strlen($prefix)) == 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strncmp($prefix, $string, strlen($prefix))\
    \ == 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like your solution, but I prefer\
    \ a solution without loops. I added my own answer that uses array_filter and a\
    \ custom callback.\n<|/ c |>\n<| a dscore=2 |>\nI like solution, but I prefer\
    \ a solution without loops. I added my own answer that uses array_filter and a\
    \ custom callback.\n<code>", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n\
    $array = array_filter($array, function($var) use ($string) {\n    return strpos($var,\
    \ $string) === 0;\n});\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=0\
    \ |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def', 'ghi');\n$array =\
    \ array_filter($array, function($var) use ($string) {\n    return strpos($var,\
    \ $string) === 0;\n});\n</code>\n<|/ a tags=arrays,php,string |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php\n$string = 'abc';\n$array = array('abc', 'def',\
    \ 'ghi');\n$array = array_filter($array, function($var) use ($string) {\n    return\
    \ strpos($var, $string) === 0;\n});\n</code>\n<|/ a tags=arrays,php,string dscore=0\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n<?php\n$string = 'abc';\n$array\
    \ = array('abc', 'def', 'ghi');\n$array = array_filter($array, function($var)\
    \ use ($string) {\n    return strpos($var, $string) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'abc';\n$array\
    \ = array('abc', 'def', 'ghi');\n$array = array_filter($array, function($var)\
    \ use ($string) {\n    return strpos($var, $string) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'def', 'ghi');\n$array = array_filter($array, function($var) use ($string) {\n\
    \    return strpos($var, $string) === 0;\n});\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n$array = array('abc', 'def',\
    \ '", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\"\
    ;\n$result = array_filter($array, function($string) use ($prefix) {\n    return\
    \ strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't post only code as an answer, but also provide an explanation of what\
    \ your code does and how it solves the problem of the question. Answers with an\
    \ explanation are usually more helpful and of better quality, and are more likely\
    \ to attract upvotes\n<|/ c ", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for the answer. I've tried it and it works great. I'm going to accept it as\
    \ the answer since it is the most elegant solution. Thanks again!\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays,string |>\n<| c |>\nThanks for the answer. I've tried it and\
    \ it works great. I'm going to accept it as the answer since it is the most elegant\
    \ solution. Thanks again!\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer.\
    \ I've tried it and it works great. I'm going to accept it as the answer since\
    \ it is the most elegant solution. Thanks again!\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the answer. I've tried it and it works great. I'm going\
    \ to accept it as the answer since it is the most elegant solution. Thanks again!\n\
    <|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and easy to understand.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer. Much more concise and easy to understand.\n<|/ c |>\n<|\
    \ c |>\nThis should be the accepted answer. Much more concise and easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and easy\
    \ to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more concise and easy to understand.\n<|/ c |>\n<| a tags=php,arrays,filter\
    \ |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string) {\n  \
    \  if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array =\
    \ array_filter($array, function($var) {\n    return strpos($var, \"a\") === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$array = array_filter($array, function($var) {\n    return strpos($var, \"\
    a\") === 0;\n});\n</code>\n<|/ a tags=php,arrays dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array = array_filter($array,\
    \ function($var) {\n    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$array = array_filter($array, function($var) {\n    return strpos($var,\
    \ \"a\") === 0;\n});\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array =\
    \ array_filter($array, function($var) {\n    return strpos($var, \"a\") === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$array = array_filter($array, function($var)\
    \ {\n    return strpos($var, \"a\") === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$array = array_filter($array, function($var) {\n    return strpo", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$search =\
    \ \"a\";\n$result = array_filter($array, function($value) use ($search) {\n  \
    \  return strpos($value, $search) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) === 0;\n});\n</code>\n<|/\
    \ a d", "  return array_filter($strings, function($string) use ($prefix) {\n \
    \   return strpos($string, $prefix) === 0;\n  });\n}", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution, however\
    \ I believe it can be simplified by using array_filter() instead of array_map().\
    \ Also the array_filter() callback function can take an optional third argument\
    \ that is the array to be filtered on. So in total it can be reduced to `return\
    \ array_filter($strings, function($string) use ($prefix) { return strpos($string,\
    \ $prefix) === 0; });`\n<|/ c |>\n<| c |>\n: Yes, you're right. I've edited my\
    \ answer to include your suggestion.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ however I believe it can be simplified by using array_filter() instead of array_map().\
    \ Also the array_filter() callback function can take an optional third argument\
    \ that is the array to be filtered on. So in total it can be reduced to `return\
    \ array_filter($strings, function($string) use ($prefix) { return strpos($string,\
    \ $prefix) === 0; });`\n<|/ c |>\n<| c |>\n: Yes, you're right. I've edited my\
    \ answer to include your suggestion.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ however I believe it can be simplified by using array_filter() instead of array_map().\
    \ Also the array_filter() callback function can take an optional third argument\
    \ that is the array to be filtered on. So in total it can be reduced to `return\
    \ array_filter($strings, function($string) use ($prefix) { return strpos($string,\
    \ $prefix) === 0; });`\n<|/ c |>\n<| a dscore=5 |>\nI like using array_filter()\
    \ for this kind of thing.\n<code>", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => '25'),\n \
    \   array('name' => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age'\
    \ => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name' =>\
    \ 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name'\
    \ => 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n  \
    \  array('name' => 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age'\
    \ => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n    array('name' =>\
    \ 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n    array('name'\
    \ => 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n  \
    \  array('name' => 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age'\
    \ => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name' =>\
    \ 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name'\
    \ => 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n  \
    \  array('name' => 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age'\
    \ => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n    array('name' =>\
    \ 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n    array('name'\
    \ => 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age' => '28'),\n  \
    \  array('name' => 'Jill', 'age' => '30'),\n    array('name' => 'Jack', 'age'\
    \ => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name' =>\
    \ 'Jack', 'age' => '28'),\n    array('name' => 'Jill', 'age' => '30'),\n    array('name'\
    \ => 'Jack", "  return array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$result = array_filter($array, function($item) use ($prefix)\
    \ {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\"\
    , \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($prefix) {\n    return strpos($item, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($prefix) {\n    return strpos($item, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays,multidimensional-array |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, because it doesn't require any additional libraries and is very easy\
    \ to understand.\n<|/ c |>\n<| c |>\nI like this solution as well, because it\
    \ doesn't require any additional libraries and is very easy to understand.\n<|/\
    \ c |>\n<| c |>\nI like this solution as well, because it doesn't require any\
    \ additional libraries and is very easy to understand.\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, because it doesn't require any additional libraries and\
    \ is very easy to understand.\n<|/ c |>\n<| c |>\nI like this solution as well,\
    \ because it doesn't require any additional libraries and is very easy to understand.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"\
    cde\", \"array\");\n$result = array_filter($array, function($value){\n    return\
    \ strpos($value, \"a\") === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer since it uses PHP's native `array_filter` function\
    \ and doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer since it uses PHP's native `array_filter` function and\
    \ doesn't require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer since it uses PHP's native `array_filter` function and doesn't\
    \ require any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer since it uses PHP's native `array_filter` function and doesn't require\
    \ any additional libraries.\n<|/ c |>\n<| c |>\nThis should be the accepted answer\
    \ since it uses PHP's native `array_filter` function and doesn't require any additional\
    \ libraries.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($value){\n\
    \    return strpos($value, \"a\") === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis should be the accepted answer since it uses PHP's native `array_filter`\
    \ function and doesn't require any additional libraries.\n<|/ c |>\n<|", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n$search = 'a';\n$result\
    \ = array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    $array = array('abc', 'def', 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array('abc', 'def', 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) === 0;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that\
    \ others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) === 0;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n$search = 'a';\n$result = array_filter($", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution. Very elegant. Thanks!\n\
    <|/ c |>\n<| c |>\nI like this solution as well. Very elegant. Thanks!\n<|/ c\
    \ |>\n<| c |>\nI like this solution as well. Very elegant. Thanks!\n<|/ c |>\n\
    <| c |>\nI like this solution as well. Very elegant. Thanks!\n<|/ c |>\n<| c |>\n\
    I like this solution as well. Very elegant. Thanks!\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$filtered\
    \ = array_filter($array, function($value) {\n    return strpos($value, \"a\")\
    \ === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant than my solution.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more elegant than my solution.\n<|/ c |>\n<| c\
    \ |>\nThis should be the accepted answer. Much more elegant than my solution.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ my solution.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more\
    \ elegant than my solution.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$filtered = array_filter($array,\
    \ function($value) {\n    return strpos($value, \"a\") === 0;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than my solution.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more elegant than my solution.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array =\
    \ array(\"abc\", \"bcd\", \"cde\", \"array\");", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see how it\
    \ goes. I appreciate it.\n<|/ c |>\n<| c |>\nI ended up using this solution. Thanks\
    \ again!\n<|/ c |>\n<| a |>\n<code>\n$array = array();\n$array[] = array(\"name\"\
    \ => \"John\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jane\", \"age\"\
    \ => 30);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"\
    age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[]\
    \ = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"\
    Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n\
    $array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\"\
    \ => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" =>\
    \ 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\"\
    \ => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\"\
    \ => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jim\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jim\", \"age\"\
    \ => 25);\n$array[] = array(\"name\" => \"Jim\", \"age", "  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n\n$array = array_filter($array, function($value) {\n\
    \    return strpos($value, 'a') === 0;\n});\n\nprint_r($array);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc',\
    \ 'def', 'ghi', 'jkl');\n\n$array = array_filter($array, function($value) {\n\
    \    return strpos($value, 'a') === 0;\n});\n\nprint_r($array);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'def', 'ghi',\
    \ 'jkl');\n\n$array = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\n\
    $array = array_filter($array, function($value) {\n    return strpos($value, 'a')\
    \ === 0;\n});\n\nprint_r($array);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\n$array = array_filter($array,\
    \ function($value) {\n    return strpos($value, 'a') === 0;\n});\n\nprint_r($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array('abc', 'def',\
    \ 'ghi', 'jkl');\n\n$array = array_filter($array, function($value) {\n    return\
    \ strpos($value, 'a') === 0;\n});\n\nprint_r($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array('abc', 'def', 'ghi', 'jkl');\n\
    \n$array = array_filter($array, function($value) {\n    return strpos($value,\
    \ 'a') === 0;\n});\n\nprint_r($array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array('abc', 'def', 'gh", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"\
    a\";\n$filtered = array_filter($strings, function($string) use ($prefix) {\n \
    \   return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string) use\
    \ ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a\
    \ tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";", "  return array_filter($strings,\
    \ function($s) use ($prefix) {\n    return strpos($s, $prefix) === 0;\n  });\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a quick note, if you use `$strings` instead of `$string` inside\
    \ the anonymous function, you'll need to use `use($strings)` inside the function\
    \ declaration.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a quick note, if you use $strings instead of $string inside\
    \ the anonymous function, you'll need to use use($strings) inside the function\
    \ declaration.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a quick note, if you use $strings instead of $string inside\
    \ the anonymous function, you'll need to use use($strings) inside the function\
    \ declaration.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a quick note, if you use $strings instead of $string inside\
    \ the anonymous function, you'll need to use use($strings) inside the function\
    \ declaration.\n<|/ c |>\n<| c |>\nI like this one the best. No need to reinvent\
    \ the wheel. Just a quick note, if you use $strings instead of $string inside\
    \ the anonymous function, you'll need to use use($strings) inside the function\
    \ declaration.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($value)\
    \ {\n    return strpos($value, 'a') === 0;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Much more concise and readable than\
    \ the other answers.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much\
    \ more concise and readable than the other answers.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Much more concise and readable than the other answers.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more concise and readable\
    \ than the other answers.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more concise and readable than the other answers.\n<|/ c |>\n<| a |>",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strncmp($prefix,\
    \ $string, strlen($prefix)) == 0) {\n      $filtered[] = $string;\n    }\n  }\n\
    \  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n\
    <|/ c |>\n<| c |>\nI like this answer because it doesn't require any additional\
    \ libraries. However, I do have a question about it: why does it require a closure?\
    \ Why can't it just be `return strpos($string, $prefix) === 0;`?\n<|/ c |>\n<|\
    \ c |>\nBecause `strpos` doesn't return an array, it returns a boolean.\n<|/ c\
    \ |>\n<| c |>\nI like this answer because it doesn't require any additional libraries.\
    \ However, I do have a question about it: why does it require a closure? Why can't\
    \ it just be `return strpos($string, $prefix) === 0;`?\n<|/ c |>\n<| c |>\nBecause\
    \ `strpos` doesn't return an array, it returns a boolean.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis should be the accepted answer. Simple and elegant.\n<|/ c\
    \ |>\n<| c |>\nI like this answer because it doesn't require any additional libraries.\
    \ However, I do have a question about it: why does it require a closure? Why can't\
    \ it just be `return strpos($string, $prefix) === 0;`?\n<|/ c |>\n<| c |>\nBecause\
    \ `strpos` doesn't return an array, it returns a boolean.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Simple and elegant.\n<|/ c |>\n<| c |>\nI\
    \ like this answer because it doesn't require any additional libraries. However,\
    \ I do have a question about it: why does it require a closure? Why can't it just\
    \ be `return strpos($string, $prefix) === 0;`?\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n\n\
    $filtered = array_filter($strings, function($string) use ($prefix) {\n    return\
    \ str", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks so\
    \ much for this. I ended up using array_filter() but this was very helpful.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array[] = array('name'\
    \ => 'John', 'age' => 25);\n$array[] = array('name' => 'Jane', 'age' => 30);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\
    $array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks for your answer. Your code\
    \ works great but i want to filter out all strings that don't start with a given\
    \ prefix. Your code returns all strings that start with a given prefix.\n<|/ c\
    \ |>\n<| c |>\n: I updated my answer to show how you can filter out all strings\
    \ that don't start with a given prefix.\n<|/ c |>\n<| c |>\nThanks again for your\
    \ answer. Your code works great but i want to filter out all strings that don't\
    \ start with a given prefix. Your code returns all strings that start with a given\
    \ prefix.\n<|/ c |>\n<| c |>\n: I updated my answer to show how you can filter\
    \ out all strings that don't start with a given prefix.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix =\
    \ \"a\";\n$filtered = array_filter($array, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThanks for your answer. Your code works great but i want to filter\
    \ out all strings that don't start with a given prefix. Your code returns all\
    \ strings that start with a given prefix.\n<|/ c |>\n<| c |>\n: I updated my answer\
    \ to show how you can filter out all strings that don't start with a given prefix.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\",\
    \ \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($array,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"\
    bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach ($array as $key => $value)\
    \ {\n    if (substr($value, 0, 2) == \"ab\") {\n        $array2[] = $value;\n\
    \    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach\
    \ ($array as $key => $value) {\n    if (substr($value, 0, 2) == \"ab\") {\n  \
    \      $array2[] = $value;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 =\
    \ array();\nforeach ($array as $key => $value) {\n    if (substr($value, 0, 2)\
    \ == \"ab\") {\n        $array2[] = $value;\n    }\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$array2 = array();\nforeach ($array as $key => $value) {\n    if\
    \ (substr($value, 0, 2) == \"ab\") {\n        $array2[] = $value;\n    }\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach ($array as $key =>\
    \ $value) {\n    if (substr($value, 0, 2) == \"ab\") {\n        $array2[] = $value;\n\
    \    }\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 = array();\nforeach\
    \ ($array as $key => $value) {\n    if (substr($value, 0, 2) == \"ab\") {\n  \
    \      $array2[] = $value;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$array2 =\
    \ array();\nforeach ($array as $", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php,filter |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and readable\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and readable than other solutions.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a tags=arrays,php,filter |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and readable than other solutions.\n<|/ c ", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $prefix) === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($prefix) {\n   \
    \ return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n\
    $prefix = \"a\";\n$result = array_filter($array, function($value) use ($prefix)\
    \ {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($prefix) {\n    return strpos($value, $prefix) === 0;\n});\n</code>\n<|/\
    \ a dscore=1 tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($prefix) {\n    return strpos($value, $prefix) === 0;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result =\
    \ array_filter($array, function($value) use ($prefix) {\n    return strpos($value,\
    \ $prefix) === 0;\n});\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($item){\n\
    \    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array_filter($array, function($item){\n    return strpos($item, 'a') === 0;\n\
    });\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($item){\n\
    \    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"\
    array\");\n$result = array_filter($array, function($item){\n    return strpos($item,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result = array_filter($array,\
    \ function($item){\n    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$result = array_filter($array, function($item){\n    return strpos($item,\
    \ 'a') === 0;\n});\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$result =\
    \ array_filter($array, function($item){\n    return strpos($item, 'a') === 0;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n<code>\n$array = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$result = array_filter($array, function($item){\n\
    \    return strpos($item, 'a') === 0;\n});\n</code>\n<|/ a tags=php,", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n  });\n}", "  return\
    \ array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    $strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$result = array_filter($strings, function($string) use ($prefix) {\n\
    \    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\"\
    );\n$prefix = \"a\";\n$result = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\"\
    , \"array\");\n$prefix = \"a\";\n$result = array_filter($strings, function($string)\
    \ use ($prefix) {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"abc\",\
    \ \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"\
    abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like\
    \ this solution, however it only works if you know that `$prefix` will always\
    \ be a string and never an array.\n<|/ c |>\n<| c |>\nYes, that's true. That's\
    \ why I added the comment \"// Filter an input array of strings only for ones\
    \ that start with a given prefix.\"\n<|/ c |>\n<| c |>\nI see what you mean. Yes,\
    \ I agree that it's important to note that the OP should know that `$prefix` will\
    \ always be a string and never an array. That's why I added the comment \"// Filter\
    \ an input array of strings only for ones that start with a given prefix.\"\n\
    <|/ c |>\n<| c |>\nI added a note about that to the answer.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I prefer to use `array_filter` instead of `array_map`\
    \ because `array_map` will create a new array and `array_filter` will modify the\
    \ existing array. `array_map` also has the advantage of not needing to declare\
    \ a variable for the return value.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$result\
    \ = array_filter($array, function($item) use ($prefix) {\n    return strpos($item,\
    \ $prefix) === 0;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ however it only works if you know that `$prefix` will always be a string and\
    \ never an array.\n<|/ c |>\n<| c |>\nYes, that's true. That's why I added the\
    \ comment \"// Filter an input array of strings only for ones that start with\
    \ a given prefix.\"\n<|/ c |>\n<| c |>\nI added a note about that to the answer.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I prefer to use `array_filter` instead\
    \ of `array_map` because `array_map` will create a new array and `array_filter`\
    \ will modify the existing array. `array_map` also has the advantage of not needing\
    \ to declare a variable for the return value.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I prefer to use `array_filter` instead of `array_map` because\
    \ `array_map` will create a new array and ", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $prefix) === 0) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $prefix)\
    \ === 0) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}",
  "  return array_filter($strings, function($string) use ($prefix) {\n    return strpos($string,\
    \ $prefix) === 0;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I am not very familiar with PHP and I do not understand how to use this\
    \ code. Could you please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not very familiar with PHP and I do not understand how to use this\
    \ code. Could you please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added\
    \ some comments to the code. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not very familiar with PHP and I do not understand how to use this\
    \ code. Could you please explain it a little bit more?\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$strings = array(\"abc\", \"bcd\", \"cde\", \"array\");\n$prefix\
    \ = \"a\";\n$filtered = array_filter($strings, function($string) use ($prefix)\
    \ {\n    return strpos($string, $prefix) === 0;\n});\n</code>\n<|/ a tags=php,arrays,filter\
    \ |>\n<| c |>\nThanks for your answer. I am not very familiar with PHP and I do\
    \ not understand how to use this code. Could you please explain it a little bit\
    \ more?\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| a tags=php,arrays,filter |>\n<code>\n<?php\n$strings = array(\"abc\"\
    , \"bcd\", \"cde\", \"array\");\n$prefix = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not very\
    \ familiar with PHP and I do not understand how to use this code. Could you please\
    \ explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code. Hope it helps.\n<|/ c |>\n<| a tags=php,arrays,filter |>\n<code>\n<?php\n\
    $strings = array(\"abc\", \"b", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $prefix) === 0) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  return array_filter($strings,\
    \ function($string) use ($prefix) {\n    return strpos($string, $prefix) === 0;\n\
    \  });\n}\n", "  $filtered = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $prefix) === 0) {\n      $filtered[] = $string;\n    }\n\
    \  }\n  return $filtered;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
