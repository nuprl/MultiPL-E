name: HumanEval_101_words_string
language: php
prompt: "<?php\n// You will be given a string of words separated by commas or spaces.\
  \ Your task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// >>> words_string(\"Hi, my name is John\")\n// array(\"Hi\",\
  \ \"my\", \"name\", \"is\", \"John\")\n// >>> words_string(\"One, two, three, four,\
  \ five, six\")\n// array(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  )\nfunction words_string($s) {\n"
tests: "function candidate(...$args) {\n    return words_string(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"Hi, my name is John\") !== array(\"\
  Hi\", \"my\", \"name\", \"is\", \"John\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"One, two, three, four, five, six\") !== array(\"One\"\
  , \"two\", \"three\", \"four\", \"five\", \"six\")) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hi, my name\") !== array(\"Hi\", \"my\", \"\
  name\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"One,, two,\
  \ three, four, five, six,\") !== array(\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  ahmed     , gamal\") !== array(\"ahmed\", \"gamal\")) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $words = explode(\",\", $s);\n  return $words;\n}\n", "  $words =\
    \ explode(',', $s);\n  return $words;\n}\n", "  return explode(\",\", $s);\n}",
  "  return explode(\",\", $s);\n}\n", "  return explode(\",\", $s);\n}\n", "  return\
    \ explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}", "  return explode(\"\
    ,\", $s);\n}", "  $words = explode(\",\", $s);\n  return $words;\n}\n", "  return\
    \ explode(\",\", $s);\n}\n", "  return explode(\" \", $s);\n}", "    $words =\
    \ explode(\",\", $s);\n    return $words;\n}\n", "  return explode(\",\", $s);\n\
    }\n", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}", " \
    \ return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}", "  return\
    \ explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}\n", "  return explode(\"\
    \ \", $s);\n}", "  return explode(\" \", $s);\n}\n", "  return explode(\" \",\
    \ $s);\n}", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n\
    }", "  return explode(\",\", $s);\n}\n", "  return explode(\",\", $s);\n}\n",
  "  $words = explode(\",\", $s);\n  return $words;\n}", "  return explode(\",\",\
    \ $s);\n}", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n\
    }", "  return explode(\",\", $s);\n}", "  $words = explode(\" \", $s);\n  return\
    \ $words;\n}", "  return explode(\",\", $s);\n}", "  $words = explode(\",\", $s);\n\
    \  return $words;\n}\n", "  return explode(\",\", $s);\n}\n", "    $words = explode(\"\
    ,\", $s);\n    return $words;\n}\n", "    return explode(\",\", $s);\n}", "  $words\
    \ = explode(\",\", $s);\n  return $words;\n}\n", "  return explode(\",\", $s);\n\
    }", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}", "  \
    \  $words = explode(\",\", $s);\n    return $words;\n}", "  return explode(\"\
    ,\", $s);\n}", "  return explode(\",\", $s);\n}\n", "  return explode(\",\", $s);\n\
    }\n", "    $words = explode(\" \", $s);\n    return $words;\n}\n", "  $words =\
    \ explode(',', $s);\n  return $words;\n}\n", "  return explode(\",\", $s);\n}",
  "  return explode(\",\", $s);\n}", "  $words = explode(\" \", $s);\n  return $words;\n\
    }", "  return explode(\",\", $s);\n}", "  $words = explode(\",\", $s);\n  return\
    \ $words;\n}\n", "  return explode(\" \", $s);\n}\n", "    return explode(\",\"\
    , $s);\n}\n", "  return explode(\",\", $s);\n}", "    $words = explode(\",\",\
    \ $s);\n    return $words;\n}\n", "  return explode(\",\", $s);\n}", "  return\
    \ explode(\",\", $s);\n}", "  $words = explode(\",\", $s);\n  return $words;\n\
    }\n", "  return explode(\" \", $s);\n}", "  return explode(\",\", $s);\n}", " \
    \ return explode(\" \", $s);\n}", "    return explode(\",\", $s);\n}\n", "  return\
    \ explode(\" \", $s);\n}\n", "  return explode(\",\", $s);\n}", "    $words =\
    \ explode(',', $s);\n    return array_map('trim', $words);\n}\n", "  $words =\
    \ explode(\",\", $s);\n  return $words;\n}\n", "  $words = explode(\" \", $s);\n\
    \  return $words;\n}", "  $words = explode(\",\", $s);\n  return $words;\n}\n",
  "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n}", "  $words\
    \ = explode(\",\", $s);\n  return $words;\n}", "  return explode(', ', $s);\n}",
  "  return explode(',', $s);\n}", "    $words = explode(\",\", $s);\n    return $words;\n\
    }\n", "    $words = explode(\",\", $s);\n    return $words;\n}\n", "  return explode(\"\
    ,\", $s);\n}", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n\
    }\n", "  return explode(\",\", $s);\n}\n", "  return explode(',', $s);\n}", " \
    \ return explode(\" \", $s);\n}", "  return explode(\" \", $s);\n}", "  $words\
    \ = explode(\" \", $s);\n  return $words;\n}", "  return explode(\",\", $s);\n\
    }", "  return explode(\",\", $s);\n}\n", "  return explode(\",\", $s);\n}", " \
    \ return explode(',', trim($s));\n}\n", "  $words = explode(\" \", $s);\n  return\
    \ $words;\n}\n", "  return explode(\" \", $s);\n}\n", "  return explode(\" \"\
    , $s);\n}", "  return explode(\" \", $s);\n}", "  $words = explode(\",\", $s);\n\
    \  return $words;\n}\n", "  return explode(\",\", $s);\n}", "  return explode(\"\
    ,\", $s);\n}\n", "  return explode(\",\", $s);\n}", "  return explode(\",\", $s);\n\
    }", "  return explode(\",\", $s);\n}\n", "  return explode(\",\", $s);\n}", " \
    \ return explode(\" \", $s);\n}", "  return explode(\",\", $s);\n}", "  return\
    \ explode(', ', $s);\n}", "  $words = explode(',', $s);\n  return $words;\n}\n",
  "  return explode(\",\", $s);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
