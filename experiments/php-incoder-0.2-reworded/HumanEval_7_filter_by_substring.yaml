name: HumanEval_7_filter_by_substring
language: php
prompt: "<?php\n// Filter an input array of strings only for ones that contain given\
  \ substring\n// >>> filter_by_substring(array(), \"a\")\n// array()\n// >>> filter_by_substring(array(\"\
  abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n// array(\"abc\", \"bacd\", \"array\"\
  )\nfunction filter_by_substring($strings, $substring) {\n"
tests: "function candidate(...$args) {\n    return filter_by_substring(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(), \"john\") !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"xxx\", \"\
  asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xxx\") !== array(\"xxx\",\
  \ \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"), \"xx\") !== array(\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"grunt\", \"trumpet\", \"prune\", \"gruesome\"),\
  \ \"run\") !== array(\"grunt\", \"prune\")) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n", "  return array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution, but I wanted to add that you can\
    \ also use array_filter with a closure. `array_filter($strings, function($string)\
    \ use ($substring) { return strpos($string, $substring) !== false; });`\n<|/ c\
    \ |>\n<| c |>\nI like this solution, but I wanted to add that you can also use\
    \ array_filter with a closure. `array_filter($strings, function($string) use ($substring)\
    \ { return strpos($string, $substring) !== false; });`\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant than other solutions.\n<|/\
    \ c |>\n<| c |>\nI like this solution, but I wanted to add that you can also use\
    \ array_filter with a closure. `array_filter($strings, function($string) use ($substring)\
    \ { return strpos($string, $substring) !== false; });`\n<|/ c |>\n<| c |>\nI like\
    \ this solution, but I wanted to add that you can also use array_filter with a\
    \ closure. `array_filter($strings, function($string) use ($substring) { return\
    \ strpos($string, $substring) !== false; });`\n<|/ c |>\n<| a |>\n<code>", " \
    \ $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string that contains a substring\
    \ that matches a substring in the array (ex. `array(\"abc\", \"bacd\", \"cde\"\
    , \"array\", \"abca\")`). You would need to use `strpos($string, $substring) !==\
    \ false` instead of `strpos($string, $substring) !== false`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've updated the answer to fix it.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\", \"abca\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string that contains\
    \ a substring that matches a substring in the array (ex. `array(\"abc\", \"bacd\"\
    , \"cde\", \"array\", \"abca\")`). You would need to use `strpos($value, $search)\
    \ !== false` instead of `strpos($value, $search) !== false`.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\", \"abca\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work if you have a string that contains a substring that\
    \ matches a substring in the array (ex. `array(\"abc\", \"bacd\", \"cde\", \"\
    array\", \"abca\")`). You would need to use `strpos($value, $search) !== false`\
    \ instead of `strpos($value, $search) !== false`.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly.\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a |>\n<code>\n$array = array();\n$array[] = array(\"name\" => \"John\"\
    , \"age\" => 25);\n$array[] = array(\"name\" => \"Jane\", \"age\" => 30);\n$array[]\
    \ = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" =>\
    \ \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" =>\
    \ 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"\
    age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[]\
    \ = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" =>\
    \ \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" =>\
    \ 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"\
    age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[]\
    \ = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" =>\
    \ \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" =>\
    \ 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"\
    name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"\
    age\" => 25);\n$array[] = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[]\
    \ = array(\"name\" => \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" =>\
    \ \"Jack\", \"age\" => 25);\n$array[] = array(\"name\" ", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "    return\
    \ array_filter($strings, function($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,arrays |>\n<code>", "  $result = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $result[]\
    \ = $string;\n    }\n  }\n  return $result;\n}\n", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  return array_filter($strings, function($string) use ($substring) {\n\
    \    return strpos($string, $substring) !== FALSE;\n  });\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nI like your solution, but I prefer `strpos` over `strstr` because\
    \ `strstr` will search for the entire string and `strpos` will search for a substring.\n\
    <|/ c |>\n<| c |>\nI agree with you, `strpos` will search for the entire string.\
    \ `strstr` will search for a substring and `strpos` will search for the entire\
    \ string. `strpos` will search for the entire string and `strstr` will search\
    \ for a substring and `strpos` will search for the entire string.\n<|/ c |>\n\
    <| c |>\nI agree with you, `strpos` will search for the entire string. `strstr`\
    \ will search for a substring and `strpos` will search for the entire string.\
    \ `strpos` will search for the entire string and `strstr` will search for a substring\
    \ and `strpos` will search for the entire string.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, `strpos` will search for the entire string. `strstr` will search for\
    \ a substring and `strpos` will search for the entire string. `strpos` will search\
    \ for the entire string and `strstr` will search for a substring and `strpos`\
    \ will search for the entire string.\n<|/ c |>\n<| c |>\nI agree with you, `strpos`\
    \ will search for the entire string. `strstr` will search for a substring and\
    \ `strpos` will search for the entire string. `strpos` will search for the entire\
    \ string and `strstr` will search for a substring and `strpos` will search for\
    \ the entire string.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  \
    \  $filtered = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $filtered[] = $string;\n        }\n  \
    \  }\n    return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$substring\
    \ = \"a\";\n$filtered = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n});\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,string |>\n<code>\n$strings = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$substring = \"a\";\n$filtered = array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n});\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$substring =\
    \ \"a\";\n$filtered = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n});\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$substring = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n\
    $strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$substring = \"a\";\n\
    $filtered = array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n});\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$substring = \"a\";\n$filtered = array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n});\n\
    </code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=0 |>\n<code>\n$strings =\
    \ array(\"abc\", \"bacd\", \"cde", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\n\
    Thanks for your answer. I'm going to try this out and see if it works. I appreciate\
    \ it.\n<|/ c |>\n<| c |>\nI added an example to my question to show how it works.\n\
    <|/ c |>\n<| c |>\nI added an example to my question to show how it works.\n<|/\
    \ c |>\n<| c |>\nI added an example to my question to show how it works.\n<|/\
    \ c |>\n<| c |>\nI added an example to my question to show how it works.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n$array1 = array(\"abc\", \"bacd\", \"cde\",\
    \ \"array\");\n$array2 = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array3\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array4 = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$array5 = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$array6 = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array7 = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$array8 = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n$array9 = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array10\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array11 = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$array12 = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$array13 = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array14\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array15 = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$array16 = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$array17 = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array18\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$array19 = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$array20 = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$array21 = ", "  return array_filter($strings, function($string) use\
    \ ($substring) {\n    return strpos($string, $substring) !== FALSE;\n  });\n}\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($v)\
    \ use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n</code>\n<|/\
    \ a tags=arrays,php dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\",\
    \ \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $search) !== FALSE;\n});\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($v) use ($search) {\n    return strpos($v, $", "    $filtered = array();\n\
    \    foreach ($strings as $string) {\n        if (strpos($string, $substring)\
    \ !== false) {\n            $filtered[] = $string;\n        }\n    }\n    return\
    \ $filtered;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$string =\
    \ \"Hello World\";\n$search = \"World\";\n$pos = strpos($string, $search);\nif\
    \ ($pos === false) {\n    echo \"The string '$search' was not found in the string\
    \ '$string'\";\n} else {\n    echo \"The string '$search' was found in the string\
    \ '$string'\";\n    echo \" and exists at position $pos\";\n}", "  $filtered =\
    \ array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "    return array_filter($strings, function($string) use ($substring) {\n\
    \        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$string\
    \ = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$result\
    \ = array_filter($array, function($v) use ($string) {\n    return strpos($v, $string)\
    \ !== false;\n});\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$string\
    \ = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$result\
    \ = array_filter($array, function($v) use ($string) {\n    return strpos($v, $string)\
    \ !== false;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a dscore=4 |>\n\
    <code>\n$string = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$result = array_filter($array, function($v) use ($string) {\n    return strpos($v,\
    \ $string) !== false;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$result = array_filter($array, function($v) use ($string) {\n    return\
    \ strpos($v, $string) !== false;\n});\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$result = array_filter($array, function($v) use ($string) {\n    return\
    \ strpos($v, $string) !== false;\n});\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\n$string = \"abc\";\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$result = array_filter($array, function($v) use ($string) {\n    return\
    \ strpos($v, $string) !== false;\n});\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| a dscore=2 |>\n<code>\n$string = \"abc\";\n$array = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$result = array_filter($array, function($v) use ($string)\
    \ {", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,search\
    \ |>\n<code>", "  $filtered = array();\n  foreach ($strings as $string) {\n  \
    \  if (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = 'Hello World';\n$search = 'World';\n$pos = strpos($string, $search);\n\
    $string[$pos]; // 'o'\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to get the first occurrence of a substring in\
    \ a string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n\
    $search = 'World';\n$pos = strpos($string, $search);\n$string[$pos]; // 'o'\n\
    </code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to get the first occurrence of a substring in a string.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n$search = 'World';\n\
    $pos = strpos($string, $search);\n$string[$pos]; // 'o'\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n$search = 'World';\n\
    $pos = strpos($string, $search);\n$string[$pos]; // 'o'\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n$search = 'World';\n\
    $pos = strpos($string, $search);\n$string[$pos]; // 'o'\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n$search = 'World';\n\
    $pos = strpos($string, $search);\n$string[$pos]; // 'o'\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\n<code>\n<?php\n$string = 'Hello World';\n$search\
    \ = 'World';\n$pos = strpos($string, $search);\n$string[$pos]; // 'o'\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'Hello World';\n\
    $search = 'World';", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like\
    \ the idea of using array_filter, but I believe it would be more efficient to\
    \ just use strpos() to find the substring and only add the string if it is not\
    \ false. Also, strpos() returns false if the substring is not found, so the if\
    \ statement would need to be `if (strpos($string, $substring) !== false)`\n<|/\
    \ c |>\n<| c |>\n: I agree, `strpos` would be more efficient. I've updated my\
    \ answer.\n<|/ c |>\n<| c |>\n: I added a more efficient solution that uses `strpos`.\n\
    <|/ c |>\n<| a |>\n<code>", "    $filtered = array();\n    foreach ($strings as\
    \ $string) {\n        if (strpos($string, $substring) !== false) {\n         \
    \   $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n", " \
    \ return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  \
    \  return array_filter($strings, function($string) use ($substring) {\n      \
    \  return strpos($string, $substring) !== false;\n    });\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I wonder if it would be more efficient to run `strpos` once and store the\
    \ result in a variable?\n<|/ c |>\n<| c |>\nI doubt that would make much of a\
    \ difference, since `strpos` has to search the string multiple times. But I guess\
    \ it would be more efficient to store the result in a variable and use that variable\
    \ in the `array_filter` callback.\n<|/ c |>\n<| c |>\nI did some benchmarking\
    \ and the difference is negligible. `strpos` takes about 0.2 microseconds to complete\
    \ on my machine.\n<|/ c |>\n<| c |>\nI tested this with PHP 5.3.10 and it took\
    \ about 0.2 microseconds to complete. On my machine it took about 0.1 microseconds.\
    \ So it seems that `strpos` does indeed take about 0.2 microseconds to complete.\n\
    <|/ c |>\n<| c |>\nI tested this with PHP 5.3.10 and it took about 0.2 microseconds\
    \ to complete. On my machine it took about 0.1 microseconds. So it seems that\
    \ `strpos` does indeed take about 0.2 microseconds to complete.\n<|/ c |>\n<|\
    \ a tags=arrays,php,string |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ with anonymous functions is much more readable than `array_map` with anonymous\
    \ functions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ with anonymous functions is much more readable than `array_map` with anonymous\
    \ functions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ with anonymous functions is much more readable than `array_map` with anonymous\
    \ functions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `array_filter`\
    \ with anonymous functions is much more readable than `array_map` with anonymo",
  "  return array_filter($strings, function($string) use ($substring) {\n    return\
    \ strpos($string, $substring) !== false;\n  });\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays,multidimensional-array |>\n<code>\n$array = array();\n$array[]\
    \ = array('name' => 'John', 'age' => '20');\n$array[] = array('name' => 'Jane',\
    \ 'age' => '30');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack',\
    \ 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n$array[]\
    \ = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill',\
    \ 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '40');\n$array[]\
    \ = array('name' => 'Jill', 'age' => '50');\n$array[] = array('", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  return array_filter($strings, function($string) use ($substring) {\n  \
    \  return strpos($string, $substring) !== false;\n  });\n}\n", "    $filtered\
    \ = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $filtered[] = $string;\n        }\n  \
    \  }\n    return $filtered;\n}\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,php,multidimensional-array |>\n<| c |>\n\
    I like this solution, it's simple and easy to understand.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThanks, this\
    \ was very helpful.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$string = \"a\";\n$result =\
    \ array_filter($array, function($var) use ($string) {\n    return strpos($var,\
    \ $string) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the accepted answer. Works perfectly.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$string = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($string) {\n    return strpos($var, $string) !== false;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$string = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($string) {\n    return strpos($var, $string) !== false;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly.\n<|/ c |>\n<| a tags=php,arrays,string |>\n<code>\n$array =\
    \ array(\"abc\", \"bacd\", \"cde\", \"array\");\n$string = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($string) {\n    return ", "    $filtered = array();\n  \
    \  foreach ($strings as $string) {\n        if (strpos($string, $substring) !==\
    \ false) {\n            $filtered[] = $string;\n        }\n    }\n    return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThis doesn't work if you have multiple occurrences of the substring\
    \ in the string. For example, if `$strings = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\", \"abcabc\");` then `filter_by_substring($strings, \"a\")` returns\
    \ `array(\"abc\", \"bacd\", \"array\", \"abcabc\")` instead of `array(\"abc\"\
    , \"bacd\", \"array\")`.\n<|/ c |>\n<| c |>\nI fixed the problem by changing the\
    \ `strpos` line to `return strpos($string, $substring) !== false && strpos($string,\
    \ $substring) !== false;`\n<|/ c |>\n<| c |>\nThis doesn't work if you have multiple\
    \ occurrences of the substring in the string. For example, if `$strings = array(\"\
    abc\", \"bacd\", \"cde\", \"array\", \"abcabc\");` then `filter_by_substring($strings,\
    \ \"a\")` returns `array(\"abc\", \"bacd\", \"array\", \"abcabc\")` instead of\
    \ `array(\"abc\", \"bacd\", \"array\")`.\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ by changing the `strpos` line to `return strpos($string, $substring) !== false\
    \ && strpos($string, $substring) !== false;`\n<|/ c |>\n<| a dscore=5 tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($item) use ($search) {\n \
    \   return strpos($item, $search) !== false;\n});\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if you have multiple occurrences of the substring in the string.\
    \ For example, if `$array = array(\"abc\", \"bacd\", \"cde\", \"array\", \"abcabc\"\
    );` then `filter_by_substring($array, \"a\")` returns `array(\"abc\", \"bacd\"\
    , \"array\", \"abcabc\")` instead of `array(\"abc\", \"bacd\", \"array\")`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have multiple occurrences of the substring\
    \ in the string. For example, if `$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\", \"abcabc\");` then `filter_by_substring($array, \"a\")` returns `array(\"\
    abc\", \"bacd\", \"array\", \"", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThanks for\
    \ your answer. I'm going to try this out and see how it goes.\n<|/ c |>\n<| c\
    \ |>\nI got this error when trying your code: `Parse error: syntax error, unexpected\
    \ 'function' (T_FUNCTION), expecting ')'`\n<|/ c |>\n<| c |>\nI forgot the `use`\
    \ keyword. Try now.\n<|/ c |>\n<| c |>\nI got this error when trying your code:\
    \ `Parse error: syntax error, unexpected 'function' (T_FUNCTION), expecting ')'`\n\
    <|/ c |>\n<| c |>\nI forgot the `use` keyword. Try now.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => '20');\n\
    $array[] = array('name' => 'Jane', 'age' => '30');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '40');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jack', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't seem to\
    \ work. `filter_by_substring` returns an empty array.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added an example to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ a working example to my answer.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an empty array.\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ an example to my answer.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result =\
    \ array_filter($array, function($item) use ($search) {\n    return strpos($item,\
    \ $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ seem to work. `filter_by_substring` returns an empty array.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works. I added an example to my answer.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. `filter_by_substring` returns an empty array.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added an example to my answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns an empty array.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bacd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't seem to work. `filter_by_substring` returns\
    \ an empty array.\n<|/ c |>\n<| c |>\nI tested it and it works. I added an example\
    \ to my answer.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring` returns\
    \ an empty array.\n<|/ c |>\n<| c |>\nThis doesn't work. `filter_by_substring`\
    \ returns an empty array.\n<|/ c |>\n<| a |>\n<code>\n$array = array", "    return\
    \ array_filter($strings, function($string) use ($substring) {\n        return\
    \ strpos($string, $substring) !== false;\n    });\n}\n", "  return array_filter($strings,\
    \ function($string) use ($substring) {\n    return strpos($string, $substring)\
    \ !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '20');\n$array[] = array('name' => 'Jane', 'age' => '30');\n\
    $array[] = array('name' => 'Jack', 'age' => '40');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jack', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('name' => 'Jill', 'age' => '50');\n\
    $array[] = array('name' => 'Jill', 'age' => '50');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '50');\n$array[] = array('", "    $result = array();\n    foreach\
    \ ($strings as $string) {\n        if (strpos($string, $substring) !== false)\
    \ {\n            $result[] = $string;\n        }\n    }\n    return $result;\n\
    }\n", "    return array_filter($strings, function($string) use ($substring) {\n\
    \        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you have a string that\
    \ starts with `a` and ends with `a`\n<|/ c |>\n<| c |>\nYes, it does. `filter_by_substring`\
    \ will remove all strings that don't contain `$substring`.\n<|/ c |>\n<| c |>\n\
    Yes, but if you have `a` at the start and `a` at the end of a string, it will\
    \ remove both of them\n<|/ c |>\n<| c |>\nYes, that's why I wrote \"contains\"\
    . `filter_by_substring` will remove all strings that don't contain `$substring`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. Yes, it does remove both of them. My bad.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you have a string that\
    \ starts with `a` and ends with `a`\n<|/ c |>\n<| c |>\nYes, it does. `filter_by_substring`\
    \ will remove all strings that don't contain `$substring`.\n<|/ c |>\n<| c |>\n\
    Yes, but if you have `a` at the start and `a` at the end of a string, it will\
    \ remove both of them\n<|/ c |>\n<| c |>\nYes, that's why I wrote \"contains\"\
    . `filter_by_substring` will remove all strings that don't contain `$substring`.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bacd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have a string that starts\
    \ with `a` and ends with `a`\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bacd", "  $result = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $substring) !== false) {\n      $result[] = $string;\n \
    \   }\n  }\n  return $result;\n}\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer, but this\
    \ doesn't seem to work. I'm getting a syntax error on the `function($string) use\
    \ ($substring)` line. I'm running PHP 5.3.10\n<|/ c |>\n<| c |>\nOh, I see. That's\
    \ because you're using PHP 5.3. I'll update my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for the update. I'm still getting a syntax error on the `function($string) use\
    \ ($substring)` line. I'm running PHP 5.3.10\n<|/ c |>\n<| c |>\nOh, I see. That's\
    \ because you're using PHP 5.3. I'll update my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for the update. I'm still getting a syntax error on the `function($string) use\
    \ ($substring)` line. I'm running PHP 5.3.10\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$strings = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$substring =\
    \ \"a\";\n$filtered = array_filter($strings, function($string) use ($substring)\
    \ {\n    return strpos($string, $substring) !== false;\n});\nprint_r($filtered);",
  "    return array_filter($strings, function($string) use ($substring) {\n      \
    \  return strpos($string, $substring) !== false;\n    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| c |>\nThanks, this works perfectly! I didn't know about array_filter.\
    \ Thanks again!\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n\
    $array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n$array[]\
    \ = array('name' => 'Jane', 'age' => 30);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n$array[] =\
    \ array('name' => 'Jack', 'age' => 25);\n$array[] = array('name' => 'Jill', 'age'\
    \ => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n$array[] = array('name'\
    \ => 'Jill', 'age' => 25);\n$array[] = array('name' => 'Jack', 'age' => 25);\n\
    $array[] = array('name' => 'Jill', 'age' => 25);\n$array[]", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered = array();\n \
    \ foreach ($strings as $string) {\n    if (strpos($string, $substring) !== false)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array();\n$array[] = array('name' =>\
    \ 'John', 'age' => '25');\n$array[] = array('name' => 'Jane', 'age' => '28');\n\
    $array[] = array('name' => 'Jack', 'age' => '26');\n$array[] = array('name' =>\
    \ 'Jill', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('name' => 'Jack', 'age' => '25');\n\
    $array[] = array('name' => 'Jack', 'age' => '25');\n$array[] = array('name' =>\
    \ 'Jack', 'age' => '25');\n$array[] = array('", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n", "  $filtered_strings = array();\n  foreach ($strings as $string) {\n   \
    \ if (strpos($string, $substring) !== FALSE) {\n      $filtered_strings[] = $string;\n\
    \    }\n  }\n  return $filtered_strings;\n}", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "    return array_filter($strings, function($string) use ($substring) {\n\
    \        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,string |>\n<code>\n<?php\n$string = \"\
    Hello World\";\n$array = array(\"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello\
    \ World\", \"Hello World\", \"Hello World\", \"Hello World\", \"Hello World\"\
    , \"Hello World\", \"Hello World\", \"Hello ", "  $filtered = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}\n", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    return array_filter($strings, function($string) use ($substring)\
    \ {\n        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bacd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer since it uses `array_filter`\
    \ which is available since PHP 5.3\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer since it uses `array_filter` which is available since PHP 5.3\n<|/ c\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\"\
    , \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"abc\", \"\
    bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=4 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php dscore=3 |>\n<| a |>\n", "  $filtered = array();\n\
    \  foreach ($strings as $string) {\n    if (strpos($string, $substring) !== FALSE)\
    \ {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n}", "  $filtered\
    \ = array();\n  foreach ($strings as $string) {\n    if (strpos($string, $substring)\
    \ !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return $filtered;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}\n", "    return array_filter($strings, function($string) use ($substring)\
    \ {\n        return strpos($string, $substring) !== false;\n    });\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,php,multidimensional-array |>\n<code>\n$array\
    \ = array(\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\"\
    , \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"\
    ),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"bacd\", \"cde\", \"array\"),\n  \
    \  array(\"abc\", \"bacd\", \"cde\", \"array\"),\n    array(\"abc\", \"bacd\"\
    , \"cde\", \"array\"),\n    array(\"abc\", \"ba", "  $result = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $result[] = $string;\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\", \"bacd\"\
    , \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($item)\
    \ use ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return str", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n$array\
    \ = array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n$string = 'abc';\n$array = array('abc',\
    \ 'bacd', 'cde', 'array');\n$array = array_filter($array, function($string) use\
    \ ($string) {\n    return strpos($string, $string) !== false;\n});\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = 'abc';\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$array = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) !== false;\n\
    });\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = 'abc';\n$array = array('abc', 'bacd', 'cde', 'array');\n\
    $array = array_filter($array, function($string) use ($string) {\n    return strpos($string,\
    \ $string) !== false;\n});\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string\
    \ |>\n<| a tags=arrays,php,string |>\n<code>\n<?php\n$string = 'abc';\n$array\
    \ = array('abc', 'bacd', 'cde', 'array');\n$array = array_filter($array, function($string)\
    \ use ($string) {\n    return strpos($string, $string) !== false;\n});\nprint_r($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = 'abc';\n\
    $array = array('abc', 'bacd', 'cde', 'array');\n$array = array_filter($array,\
    \ function($string) use ($string) {\n    return strpos($string, $string) !== false;\n\
    });\nprint_r($array);\n</code>\n<|/ a tags=arrays,php,string |>\n<| a ", "  return\
    \ array_filter($strings, function($string) use ($substring) {\n    return strpos($string,\
    \ $substring) !== false;\n  });\n}\n", "  $filtered_strings = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to do it without looping through the array twice.\
    \ Maybe with array_filter?\n<|/ c |>\n<| c |>\n: Yes, `array_filter` would work,\
    \ but you'd have to write your own custom callback function instead of `strpos`.\
    \  It would look something like `array_filter($strings, function($string) { return\
    \ strpos($string, $substring) !== false; });`\n<|/ c |>\n<| c |>\n: I added a\
    \ custom callback function to the answer.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($item) use ($search) {\n \
    \   return strpos($item, $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ looping through the array twice. Maybe with array_filter?\n<|/ c |>\n<| c |>\n\
    : Yes, `array_filter` would work, but you'd have to write your own custom callback\
    \ function instead of `strpos`.  It would look something like `array_filter($strings,\
    \ function($string) { return strpos($string, $substring) !== false; });`\n<|/\
    \ c |>\n<| c |>\n: I added a custom callback function to the answer.\n<|/ c |>\n\
    <| c |>\n: I added a custom callback function to the answer.\n<|/ c |>\n<| c |>\n\
    : I added a custom callback function to the answer.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($item) use ($search) {\n \
    \   return strpos($item, $search) !== false;\n});\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ looping through the array twice. Maybe with array_filter?\n<|/ c |>\n<| c |>\n\
    : Yes, `array_filter` would work", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result =\
    \ array_filter($array, function($value) use ($search) {\n    return strpos($value,\
    \ $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($value) use ($search) {\n\
    \    return strpos($value, $search) !== false;\n});\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$search = \"a\";\n$result = array_filter($array, function($value) use ($search)\
    \ {\n    return strpos($value, $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$search = \"a\";\n$result = array_filter($array, function($value) use\
    \ ($search) {\n    return strpos($value, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a |>\n<code>\n$array = array(\"abc\", \"bacd\", \"\
    cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array, function($value)\
    \ use ($search) {\n    return strpos($value, $search) !== false;\n});\n</code>\n\
    <|/ a tags=arrays,php dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($value) use ($search) {\n    return strpos($value, $search) !== false;\n\
    });\n</code>", "  $result = array();\n  foreach ($strings as $string) {\n    if\
    \ (strpos($string, $substring) !== false) {\n      $result[] = $string;\n    }\n\
    \  }\n  return $result;\n}\n", "  $filtered = array();\n  foreach ($strings as\
    \ $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks, this helped me a lot!\n<|/ c |>\n<| a dscore=2 |>\nI wrote a\
    \ little function to do this:\n<code>", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I feel like it would be better to use the `===` operator instead of `!==`\
    \ because `strpos` returns false if the substring is not found at the beginning.\n\
    <|/ c |>\n<| c |>\nI agree with you, `===` would be better. I've edited my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nI like this solution, but I feel like it would\
    \ be better to use the `===` operator instead of `!==` because `strpos` returns\
    \ false if the substring is not found at the beginning.\n<|/ c |>\n<| c |>\nI\
    \ like this solution, but I feel like it would be better to use the `===` operator\
    \ instead of `!==` because `strpos` returns false if the substring is not found\
    \ at the beginning.\n<|/ c |>\n<| c |>\nI like this solution, but I feel like\
    \ it would be better to use the `===` operator instead of `!==` because `strpos`\
    \ returns false if the substring is not found at the beginning.\n<|/ c |>\n<|\
    \ a tags=php,arrays,string |>\n<code>", "  $filtered_strings = array();\n  foreach\
    \ ($strings as $string) {\n    if (strpos($string, $substring) !== false) {\n\
    \      $filtered_strings[] = $string;\n    }\n  }\n  return $filtered_strings;\n\
    }\n", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\n\
    This doesn't seem to work. `filter_by_substring` returns an empty array.\n<|/\
    \ c |>\n<| c |>\nIt works fine for me. Can you post the code you're using?\n<|/\
    \ c |>\n<| c |>\nI added the code to the original question. Thanks for your help.\n\
    <|/ c |>\n<| c |>\nI added a working example to my answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nThanks for your help. I added the code to the original question.\
    \ Thanks for your help.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jane', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[]\
    \ = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n$array[] = array('name'\
    \ => 'Jack', 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill',\
    \ 'age' => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age'\
    \ => 25, 'city' => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 25,\
    \ 'city' => 'New York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city'\
    \ => 'New York');\n$array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New\
    \ York');\n$array[] = array('name' => 'Jack', 'age' => 25, 'city' => 'New York');\n\
    $array[] = array('name' => 'Jill', 'age' => 25, 'city' => 'New York');\n$array",
  "    $filtered = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $filtered[] = $string;\n        }\n  \
    \  }\n    return $filtered;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a\
    \ tags=php,arrays,string |>\n<code>", "    $filtered = array();\n    foreach ($strings\
    \ as $string) {\n        if (strpos($string, $substring) !== false) {\n      \
    \      $filtered[] = $string;\n        }\n    }\n    return $filtered;\n}\n",
  "    $result = array();\n    foreach ($strings as $string) {\n        if (strpos($string,\
    \ $substring) !== false) {\n            $result[] = $string;\n        }\n    }\n\
    \    return $result;\n}\n", "  $filtered = array();\n  foreach ($strings as $string)\
    \ {\n    if (strpos($string, $substring) !== FALSE) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n", "  $filtered = array();\n  foreach ($strings\
    \ as $string) {\n    if (strpos($string, $substring) !== false) {\n      $filtered[]\
    \ = $string;\n    }\n  }\n  return $filtered;\n}\n", "    return array_filter($strings,\
    \ function($string) use ($substring) {\n        return strpos($string, $substring)\
    \ !== false;\n    });\n}\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your answer but I'm getting\
    \ this error `Warning: array_filter() expects parameter 2 to be a valid callback,\
    \ function 'filter_by_substring' not found or invalid function name`\n<|/ c |>\n\
    <| c |>\nI added the function to the top of my answer - I forgot to add it to\
    \ the `use` statement. Try it now.\n<|/ c |>\n<| c |>\nI added the function to\
    \ the top of my answer - I forgot to add it to the `use` statement. Try it now.\n\
    <|/ c |>\n<| c |>\nI added the function to the top of my answer - I forgot to\
    \ add it to the `use` statement. Try it now.\n<|/ c |>\n<| c |>\nI added the function\
    \ to the top of my answer - I forgot to add it to the `use` statement. Try it\
    \ now.\n<|/ c |>\n<| a dscore=1 |>\nI like your answer but I'm getting this error\
    \ Warning: array_filter() expects parameter 2 to be a valid callback, function\
    \ 'filter_by_substring' not found or invalid function name\n\nThe function filter_by_substring\
    \ is not defined in the scope of the function filter_by_substring. \nThe function\
    \ filter_by_substring is a closure and needs to be defined in the scope of the\
    \ function filter_by_substring - either by using the use statement or by defining\
    \ the function before you use it.\n<code>", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you have multiple\
    \ occurrences of the substring in the string. For example, if `$strings = array(\"\
    abc abc abc\", \"abc abc\", \"abc abc abc abc\");` then `$substring = \"abc\"\
    ` then this returns `array(\"abc abc abc\", \"abc abc\", \"abc abc abc abc\")`\
    \ instead of `array(\"abc abc abc\")`.\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I wrote \"filter an input array of strings only for ones that contain given\
    \ substring\"\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"filter an\
    \ input array of strings only for ones that contain given substring\"\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array();\n$array[] = array('name' => 'John', 'age' => 25);\n\
    $array[] = array('name' => 'Jane', 'age' => 25);\n$array[] = array('name' => 'Jack',\
    \ 'age' => 25);\n$array[] = array('name' => 'Jill', 'age' => 25);\n\n$array =\
    \ array_filter($array, 'filter');\n", "    return array_filter($strings, function($string)\
    \ use ($substring) {\n        return strpos($string, $substring) !== false;\n\
    \    });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution. Very clean\
    \ and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution as well. Very\
    \ clean and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Very clean and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well. Very clean and easy to understand.\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well. Very clean and easy to understand.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($var) use ($search) {\n  \
    \  return strpos($var, $search) !== false;\n});\n</code>\n<|/ a tags=arrays,php,search\
    \ |>\n<| c |>\nThis should be the accepted answer. Much cleaner and easier to\
    \ understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much cleaner\
    \ and easier to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much cleaner and easier to understand.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Much cleaner and easier to understand.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Much cleaner and easier to understand.\n<|/\
    \ c |>\n<| a dscore=5 tags=arrays,php,search |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($var) use ($search) {\n    return strpos($var, $search) !== false;\n\
    });\n</code>\n<|/ a |>\n<| c |>\nThis should be the accepted answer. Much cleaner\
    \ and easier to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much cleaner and easier to understand.\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Much cleaner and easier to understand.\n<|/ c |>\n<| a |>\n\
    <code>\n$array = array(\"abc\", \"bacd", "  return array_filter($strings, function($string)\
    \ use ($substring) {\n    return strpos($string, $substring) !== false;\n  });\n\
    }", "  $filtered = array();\n  foreach ($strings as $string) {\n    if (strpos($string,\
    \ $substring) !== false) {\n      $filtered[] = $string;\n    }\n  }\n  return\
    \ $filtered;\n}", "  $filtered = array();\n  foreach ($strings as $string) {\n\
    \    if (strpos($string, $substring) !== false) {\n      $filtered[] = $string;\n\
    \    }\n  }\n  return $filtered;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\");\n$search\
    \ = \"a\";\n$result = array_filter($array, function($item) use ($search) {\n \
    \   return strpos($item, $search) !== false;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"array\"\
    );\n$search = \"a\";\n$result = array_filter($array, function($item) use ($search)\
    \ {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\", \"bacd\", \"cde\", \"\
    array\");\n$search = \"a\";\n$result = array_filter($array, function($item) use\
    \ ($search) {\n    return strpos($item, $search) !== false;\n});\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    abc\", \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n    return strpos($item, $search) !== false;\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"abc\"\
    , \"bacd\", \"cde\", \"array\");\n$search = \"a\";\n$result = array_filter($array,\
    \ function($item) use ($search) {\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
