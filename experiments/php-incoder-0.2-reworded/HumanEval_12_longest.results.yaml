language: php
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmphhko9og3.php on line 18\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmphhko9og3.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphhko9og3.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmphhko9og3.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphhko9og3.php on line 18\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmphhko9og3.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmphhko9og3.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphhko9og3.php:33\nStack trace:\n#0 /tmp/tmphhko9og3.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphhko9og3.php on line 33\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return strlen($string) > strlen($result) ? $string : $result;\n\
    \    });\n\n    return empty($longest) ? null : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map('strlen', $strings);\n    foreach ($lengths as $length) {\n      \
    \  if ($length > strlen($longest)) {\n            $longest = $length;\n      \
    \  }\n    }\n    return $longest ? $strings[$longest] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61os0of_.php:27\n\
    Stack trace:\n#0 /tmp/tmp61os0of_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp61os0of_.php\
    \ on line 27\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    Thanks so much! This worked perfectly. I was trying to use array_count_values()\
    \ but couldn't get it to work. Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"\
    x\", \"y\", \"z\");\n\n$array = array_count_values($array);\n$array = array_filter($array);\n\
    $array = array_keys($array);\n\n$longest = array_shift($array);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n$array = array_filter($array);\n\
    $array = array_keys($array);\n$longest = array_shift($array);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\");\n$array = array_count_values($array);\n$array = array_filter($array);\n\
    $array = array_keys($array);\n$longest = array_shift($array);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\", \"\
    c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"\
    y\", \"z\");\n$array = array_count_values($array);\n$array = array_filter($array);\n\
    $array = array_keys($array);\n$longest = array_shift($array\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1p5sw8k0.php on line 21

    '
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = max($length, strlen($string));\n\
    \        if ($longest === null || strlen($string) > $length) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest ?: null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpciyb9zvn.php:29\n\
    Stack trace:\n#0 /tmp/tmpciyb9zvn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpciyb9zvn.php\
    \ on line 29\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $item) {\n        return strlen($carry) > strlen($item) ? $carry : $item;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpteop5vg1.php:26\n\
    Stack trace:\n#0 /tmp/tmpteop5vg1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpteop5vg1.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $length)\
    \ {\n            $longest = $string;\n            $length  = strlen($string);\n\
    \        }\n    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try it out and see how it\
    \ goes. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a test case to my\
    \ original question to show how this doesn't work. I'm going to try and figure\
    \ out why.\n<|/ c |>\n<| c |>\nI updated my answer with a new solution that should\
    \ work. Let me know if it doesn't.\n<|/ c |>\n<| c |>\nI updated my question with\
    \ a test case that doesn't work. I'm going to try and figure out why.\n<|/ c |>\n\
    <| c |>\nI updated my answer with a new solution that should work. Let me know\
    \ if it doesn't.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e');\n$array = array_count_values($array);\narsort($array);\n$array\
    \ = array_keys($array);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work. I'm going to try and figure out why.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work. I'm going to try and figure out why.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work. I'm going\
    \ to try and figure out why.\n<|/ c |>\n<| c |>\nThis doesn't work. I'm going\
    \ to try and figure out why.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n$array = array_count_values($array);\narsort($array);\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj553x8hr.php on line 21

    '
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $item) {\n        return strlen($carry) > strlen($item) ? $carry : $item;\n\
    \    });\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49c8m1yy.php:28\n\
    Stack trace:\n#0 /tmp/tmp49c8m1yy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp49c8m1yy.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return strlen($string) > strlen($result) ? $string : $result;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = max($length, strlen($string));\n\
    \        if ($longest === null || $length < strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest ?: null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb16rzne8.php:29\n\
    Stack trace:\n#0 /tmp/tmpb16rzne8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb16rzne8.php\
    \ on line 29\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[array_search($longest, $strings)]\
    \ : null;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, however\
    \ it fails if you have an empty array and you want the longest string to be null.\
    \ Instead of returning null, it returns an empty string.\n<|/ c |>\n<| c |>\n\
    I added a fix for that case\n<|/ c |>\n<| c |>\nThis solution works great for\
    \ me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$longest = array_reduce($array, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution\
    \ works great for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for\
    \ me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n\
    <|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This solution works great for me. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $longest = array_reduce($array, function($a, $b) {\n    return strlen($a) > strlen($b)\
    \ ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis solution works\
    \ great for me. Thanks!\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$longest =\
    \ array_reduce($array, function($a, $b) {\n    return strlen($a) > strlen($b)\
    \ ? $a : $b;\n});\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution works great\
    \ for me. Thanks!\n<|/ c |>\n<| a |>\n<code>\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp54nbepwe.php on line 17

    '
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (empty($longest) || $length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map('strlen', $strings);\n    foreach ($lengths as $length) {\n      \
    \  if ($longest === null || $length >= $longest) {\n            $longest = $length;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4cm1oic.php:27\n\
    Stack trace:\n#0 /tmp/tmpy4cm1oic.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy4cm1oic.php\
    \ on line 27\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($longest ===\
    \ null || $length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[array_search(max($longest),\
    \ $strings)] : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpi0pxgf97.php on line 15\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpi0pxgf97.php on line 15\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpi0pxgf97.php:25\nStack trace:\n\
    #0 /tmp/tmpi0pxgf97.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi0pxgf97.php\
    \ on line 25\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\", \"b\"\
    , \"c\", \"d\", \"e\");\n$longest = array_reduce($array, function($a, $b) {\n\
    \    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\");\n$longest = array_reduce($array, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\"\
    , \"c\", \"d\", \"e\");\n$longest = array_reduce($array, function($a, $b) {\n\
    \    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\");\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprgxkpqsj.php on line 21

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[0] : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph001rs8o.php:25\n\
    Stack trace:\n#0 /tmp/tmph001rs8o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph001rs8o.php\
    \ on line 25\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array_reduce($strings, function ($result, $string)\
    \ {\n        return strlen($result) > strlen($string) ? $result : $string;\n \
    \   });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr_swc5n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmr_swc5n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmr_swc5n.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    $lengths = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        $lengths[$length]\
    \ = $length;\n        $longest[$length] = $string;\n    }\n    asort($lengths);\n\
    \    $longest = array_keys($longest, $lengths);\n    return $longest[0];\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ijo71ks.php:32\n\
    Stack trace:\n#0 /tmp/tmp8ijo71ks.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8ijo71ks.php\
    \ on line 32\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return max($carry, strlen($string));\n    });\n    return\
    \ $strings[array_search($longest, $strings)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxawzkot.php:27\n\
    Stack trace:\n#0 /tmp/tmpbxawzkot.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbxawzkot.php\
    \ on line 27\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($longest ===\
    \ null || $length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map(function($s) { return strlen($s); }, $strings);\n    sort($lengths);\n\
    \    if (count($lengths) > 0) {\n        $longest = array_pop($lengths);\n   \
    \ }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3kwqpdu.php:26\n\
    Stack trace:\n#0 /tmp/tmpv3kwqpdu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv3kwqpdu.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return strlen($string) > strlen($result) ? $string : $result;\n\
    \    });\n    return $longest === null ? null : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array();\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > count($longest)) {\n\
    \            $longest = array();\n        }\n        if ($length > count($longest))\
    \ {\n            $longest = array();\n        }\n        $longest[] = $string;\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gkcprk0.php:34\n\
    Stack trace:\n#0 /tmp/tmp5gkcprk0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5gkcprk0.php\
    \ on line 34\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $item) {\n        return strlen($carry) > strlen($item) ? $carry : $item;\n\
    \    });\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49c8m1yy.php:28\n\
    Stack trace:\n#0 /tmp/tmp49c8m1yy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp49c8m1yy.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqahv9x3q.php:28\n\
    Stack trace:\n#0 /tmp/tmpqahv9x3q.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqahv9x3q.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = count($strings) > 0 ? $strings[0] : null;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $item) {\n        return strlen($carry) > strlen($item) ? $carry : $item;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpteop5vg1.php:26\n\
    Stack trace:\n#0 /tmp/tmpteop5vg1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpteop5vg1.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return max($carry, strlen($string));\n    });\n    return\
    \ $strings[array_search(max($strings), $strings)];\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length.\
    \ `longest` will return the first string in the array that is the longest.\n<|/\
    \ c |>\n<| c |>\nI fixed it by adding `array_search` after `max` call.\n<|/ c\
    \ |>\n<| c |>\nI added a version that doesn't require `array_search`.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvz9ruh9l.php on line 19

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $length)\
    \ {\n            $longest = $string;\n            $length = strlen($string);\n\
    \        }\n    }\n    return $longest ?: null;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis works great for me. Thank you!\n<|/ c |>\n<| a |>\n<code>\n\
    $array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"\
    k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"\
    x\",\"y\",\"z\");\n$array = array_unique($array);\n$array = array_filter($array);\n\
    $array = array_values($array);\n$array = array_slice($array,0,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_slice($array,count($array)/2,count($array));\n\
    $array = array_slice($array,0,count($array)/2);\n$array = array_\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxfwc8p3z.php on line 21

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            if ($length < $longest[$length]) {\n             \
    \   $longest[$length] = $string;\n            }\n        } else {\n          \
    \  $longest[$length] = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nI like this solution, although I prefer\
    \ a solution using array_count_values() because it's more concise and easier to\
    \ read. Thanks!\n<|/ c |>\n<| c |>\nI agree, array_count_values is more concise\
    \ and easier to read. I've added it to my answer.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis solution is more concise and easier to read. Thanks!\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\
    $array = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\",\
    \ \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwrsztqxu.php on line 27

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array();\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > count($longest)) {\n\
    \            $longest = array($string);\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return count($longest)\
    \ > 1 ? $longest[0] : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxf9owxi.php:33\n\
    Stack trace:\n#0 /tmp/tmpzxf9owxi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzxf9owxi.php\
    \ on line 33\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"a\", \"\
    b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry, $string)\
    \ {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"a\", \"\
    b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry, $string)\
    \ {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"a\", \"b\", \"\
    c\", \"d\");\n$longest = array_reduce($strings, function($carry, $string) {\n\
    \    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"\
    a\", \"b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"\
    a\", \"b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"\
    a\", \"b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"\
    a\", \"b\", \"c\", \"d\");\n$longest = array_reduce($strings, function($carry,\
    \ $string) {\n    return strlen($carry) > strlen($string) ? $carry : $string;\n\
    });\n</code>\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8crfusrh.php on line 22

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return strlen($result) > strlen($string) ? $result : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj6h1ivy.php:26\n\
    Stack trace:\n#0 /tmp/tmpuj6h1ivy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuj6h1ivy.php\
    \ on line 26\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($longest ===\
    \ null || $length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$strings = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    <code>\n$strings = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n\
    $strings = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n\
    $strings = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n\
    <code>\n$strings = array(\"aaa\",\"bbb\",\"ccc\",\"ddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array(\"aaa\",\"\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5rztw5q3.php on line 21

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = array_reduce($strings, function ($carry, $string)\
    \ {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n   \
    \ });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqamzn2fs.php:26\n\
    Stack trace:\n#0 /tmp/tmpqamzn2fs.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqamzn2fs.php\
    \ on line 26\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[0] : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph001rs8o.php:25\n\
    Stack trace:\n#0 /tmp/tmph001rs8o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph001rs8o.php\
    \ on line 25\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map(function($s) { return strlen($s); }, $strings);\n    sort($lengths);\n\
    \    if (count($lengths) > 0) {\n        $longest = array_pop($lengths);\n   \
    \ }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3kwqpdu.php:26\n\
    Stack trace:\n#0 /tmp/tmpv3kwqpdu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv3kwqpdu.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqahv9x3q.php:28\n\
    Stack trace:\n#0 /tmp/tmpqahv9x3q.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqahv9x3q.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    $longestLength = -1;\n   \
    \ foreach ($strings as $string) {\n        $length = strlen($string);\n      \
    \  if ($length > $longestLength) {\n            $longest = $string;\n        \
    \    $longestLength = $length;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($longest ===\
    \ null || $length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = null;\n    $length = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $length)\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphl26y85.php:31\n\
    Stack trace:\n#0 /tmp/tmpphl26y85.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpphl26y85.php\
    \ on line 31\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = null;\n    foreach ($strings as $string) {\n  \
    \      if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? array_shift($strings) : null;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah5z7y_v.php:25\n\
    Stack trace:\n#0 /tmp/tmpah5z7y_v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpah5z7y_v.php\
    \ on line 25\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I believe it\
    \ would be better to return null instead of an empty string if the array is empty.\n\
    <|/ c |>\n<| c |>\n: I agree. I've added a comment to the code explaining why.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprit57apk.php on line 23

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw1dki6i.php:26\n\
    Stack trace:\n#0 /tmp/tmpiw1dki6i.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiw1dki6i.php\
    \ on line 26\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqahv9x3q.php:28\n\
    Stack trace:\n#0 /tmp/tmpqahv9x3q.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqahv9x3q.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = array($string);\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpit71b7kv.php:32\n\
    Stack trace:\n#0 /tmp/tmpit71b7kv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpit71b7kv.php\
    \ on line 32\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = count($strings) > 0 ? $strings[0] : null;\n   \
    \ foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $longest) {\n            $longest = strlen($string);\n        }\n    }\n \
    \   return $longest > 0 ? $strings[0] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1ym476j.php:30\n\
    Stack trace:\n#0 /tmp/tmpr1ym476j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr1ym476j.php\
    \ on line 30\n"
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = count($strings) > 0 ? $strings[0] : null;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpo805t2n0.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpo805t2n0.php on line 17\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpo805t2n0.php:31\nStack trace:\n#0 /tmp/tmpo805t2n0.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo805t2n0.php on line 31\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $longest) {\n            $longest = strlen($string);\n        }\n    }\n \
    \   return $longest ? $strings[$longest] : null;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvruaunqu.php:29\n\
    Stack trace:\n#0 /tmp/tmpvruaunqu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvruaunqu.php\
    \ on line 29\n"
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4pi2hwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpx4pi2hwf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx4pi2hwf.php\
    \ on line 28\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, but I believe it\
    \ can be improved a little bit by adding `return $longest;` at the end of the\
    \ `foreach` loop. Otherwise it will return the first string in the array if there\
    \ are multiple strings of the same length.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I added this to the answer. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwqy_m7su.php on line 19

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"d\", \"e\");\n$longest = array_reduce($array,\
    \ function(\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcfjtjlyq.php on line 21

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks so much! This worked perfectly for me.\
    \ I'm still learning PHP and this was a great learning experience.\n<|/ c |>\n\
    <| c |>\nGlad I could help! Feel free to [accept my answer](http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work)\
    \ if you feel it was useful to you. :)\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"\
    l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"\
    y\",\"z\");\n$longest = array();\n$longest = array_shift($array);\n$longest =\
    \ array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $longest = array_shift($array);\n$longest = array_shift($array);\n$longest = array_shift($array);\n\
    $\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprdfkp3ch.php on line 22

    '
  timestamp: 1659730940
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = array($string);\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return count($longest)\
    \ > 1 ? $longest[0] : null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s9wllix.php:33\n\
    Stack trace:\n#0 /tmp/tmp1s9wllix.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1s9wllix.php\
    \ on line 33\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = count($strings) > 0 ? max(array_map('strlen',\
    \ $strings)) : 0;\n    return $longest > 0 ? $strings[0] : null;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph001rs8o.php:25\n\
    Stack trace:\n#0 /tmp/tmph001rs8o.php(28): test()\n#1 {main}\n  thrown in /tmp/tmph001rs8o.php\
    \ on line 25\n"
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_reduce($strings, function ($result,\
    \ $string) {\n        return strlen($string) > strlen($result) ? $string : $result;\n\
    \    });\n\n    return empty($longest) ? null : $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map('strlen', $strings);\n    foreach ($lengths as $length) {\n      \
    \  if ($length > strlen($longest)) {\n            $longest = $length;\n      \
    \  }\n    }\n    return $longest ? $strings[$lengths[$longest]] : null;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work. `longest(array(\"\
    a\", \"bb\", \"ccc\"))` returns `\"ccc\"` instead of `\"bb\"`.\n<|/ c |>\n<| c\
    \ |>\n: Yes, it does. I tested it before posting it. I just added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Maybe\
    \ you didn't copy the code correctly.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Maybe you didn't copy the code correctly.\n<|/ c |>\n<| c |>\n\
    : I added a test case to my answer. Maybe you didn't copy the code correctly.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps7d7f22_.php on line 20

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $lengths =\
    \ array_map(function($s) { return strlen($s); }, $strings);\n    asort($lengths);\n\
    \    foreach ($lengths as $i => $length) {\n        if ($longest === null || $length\
    \ < $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nI used this solution:\n<code>\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb5bi4pow.php on line 21

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = count($strings) > 0 ? $strings[0] : null;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n\
    $strings = array(\"a\", \"bb\", \"ccc\", \"dddd\");\n$longest = array_reduce($strings,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding how and/or why\
    \ it solves the problem would improve the answer's long-term value.\n<|/ c |>\n\
    <| a |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\");\n$longest\
    \ = array_reduce($strings, function($carry, $string) {\n    return strlen($carry)\
    \ > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a dscore=0 tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\"\
    );\n$longest = array_reduce($strings, function($carry, $string) {\n    return\
    \ strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=0 |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\", \"dddd\"\
    );\n$longest = array_reduce($strings, function($carry, $string) {\n    return\
    \ strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n$strings = array(\"a\", \"bb\", \"ccc\"\
    , \"dddd\");\n$longest = array_reduce($strings, function($carry, $string) {\n\
    \    return strlen($carry) > strlen($string) ? $carry : $string;\n});\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfm4uu78v.php on line 21

    '
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730872
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            $longest[$length] = max($longest[$length], $string);\n\
    \        } else {\n            $longest[$length] = $string;\n        }\n    }\n\
    \    return $longest[max(array_keys($longest))];\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhypdu24.php:32\n\
    Stack trace:\n#0 /tmp/tmpqhypdu24.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqhypdu24.php\
    \ on line 32\n"
  timestamp: 1659730940
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730939
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return strlen($carry) > strlen($string) ? $carry : $string;\n\
    \    });\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n\necho $longest;\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n\necho $longest;\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\n\necho $longest;\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$longest = array_reduce($array,\
    \ function($carry, $string) {\n    return strlen($carry) > strlen($string) ? $carry\
    \ : $string;\n});\necho $longest;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuiucy1ba.php on line 19

    '
  timestamp: 1659730940
