name: HumanEval_134_check_if_last_char_is_a_letter
language: php
prompt: "<?php\n// Create a function that returns true if the last character\n// of\
  \ a given string is an alphabetical character and is not\n// a part of a word, and\
  \ false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n\
  // Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n//\
  \ >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"\
  apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\n\
  function check_if_last_char_is_a_letter($txt) {\n"
tests: "function candidate(...$args) {\n    return check_if_last_char_is_a_letter(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"apple\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"apple pi e\") !== true) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eeeee\") !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"A\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin pie \"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Pumpkin\
  \ pie 1\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  eeeee e \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pie\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  apple pi e \") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $txt = trim($txt);\n    $last_char = substr($txt, -1, 1);\n   \
    \ return preg_match('/[a-z]$/i', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = str_replace(\" \", \"\", $txt);\n    $txt = substr($txt, -1);\n  \
    \  return preg_match(\"/^[a-z]+$/i\", $txt);\n}\n", "    $last_char = substr($txt,\
    \ -1);\n    if ($last_char == ' ' || $last_char == '.' || $last_char == '-' ||\
    \ $last_char == '_' || $last_char == '/' || $last_char == '\\\\') {\n        return\
    \ false;\n    } else {\n        return true;\n    }\n}\n", "    $txt = trim($txt);\n\
    \    $last_char = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i', $last_char);\n\
    }\n", "    if ($txt != \"\") {\n        $txt = strtolower($txt);\n        $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = trim($txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n        $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n        $txt = preg_replace('/\\s+/', ' ', $txt);\n        $txt\
    \ = preg_replace('/\\s+/', ' ', $", "  return preg_match('/[^a-z]$/i', $txt);\n\
    }", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    return substr($txt, -1, 1) != ' ' &&\n           substr($txt, -1, 1) != '.'\
    \ &&\n           substr($txt, -1, 1) != '!' &&\n           substr($txt, -1, 1)\
    \ != '?' &&\n           substr($txt, -1, 1) != '-' &&\n           substr($txt,\
    \ -1, 1) != '_' &&\n           substr($txt, -1, 1) != '*' &&\n           substr($txt,\
    \ -1, 1) != '/' &&\n           substr($txt, -1, 1) != '\\\\' &&\n           substr($txt,\
    \ -1, 1) != ':' &&\n           substr($txt, -1, 1) != '\"' &&\n           substr($txt,\
    \ -1, 1) != '|' &&\n           substr($txt, -1, 1) != '<' &&\n           substr($txt,\
    \ -1, 1) != '>' &&\n           substr($txt, -1, 1) != '[' &&\n           substr($txt,\
    \ -1, 1) != ']' &&\n           substr($txt, -1, 1) != '{' &&\n           substr($txt,\
    \ -1, 1) != '}' &&\n           substr($txt, -1, 1) != '|' &&\n           substr($txt,\
    \ -1, 1) != '<' &&\n           substr($txt, -1, 1) != '>' &&\n           substr($txt,\
    \ -1, 1) != '[' &&\n           substr($txt, -1, 1) != ']' &&\n           substr($txt,\
    \ -1, 1) != '{' &&\n           substr($txt, -1, 1) != '}';\n}\n", "    $txt =\
    \ trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n    }\n  \
    \  $last_char = substr($txt, -1, 1);\n    return preg_match('/^[a-z]+$/i', $last_char);\n\
    }\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    return preg_match('/[a-z]$/i',\
    \ $txt);\n}\n", "  $txt = trim($txt);\n  if (empty($txt)) {\n    return false;\n\
    \  }\n  $last_char = substr($txt, -1, 1);\n  if (ctype_alpha($last_char)) {\n\
    \    return false;\n  }\n  return true;\n}\n", "    $txt = trim($txt);\n    $txt\
    \ = preg_replace('/[^a-zA-Z ]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "    $txt = trim($txt);\n    $txt = str_replace(\" \", \"\
    \", $txt);\n    $txt = substr($txt, 0, -1);\n    return preg_match(\"/^[a-zA-Z]+$/\"\
    , $txt);\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '' && $txt[strlen($txt) - 1] != ' ';\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis does not work if the string ends with a\
    \ space. Try it with `\"apple pi e \"`.\n<|/ c |>\n<| c |>\nYes, I know. I just\
    \ wanted to point out that `preg_replace` can be used for this purpose.\n<|/ c\
    \ |>\n<| c |>\nI didn't downvote, but I suspect it's because you didn't explain\
    \ what was wrong with OP's code. Maybe you could add some explanation about why\
    \ you think this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n\
    <| c |>\nI didn't downvote either, but your answer doesn't explain why OP's code\
    \ doesn't work. Maybe you could add some explanation about why you think this\
    \ works?\n<|/ c |>\n<| a |>\n<code>\n$string = 'apple pi e ';\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n</code>\n<|/ a tags=php,regex dscore=1 |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = 'apple pi e ';\n$string = preg_replace('/[^a-z]/', '',\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = 'apple\
    \ pi e ';\n$string = preg_replace('/[^a-z]/', '', $string);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = 'apple pi e ';\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=1 |>\n<code>\n\
    $string = 'apple pi e ';\n$string = preg_replace('/[^a-z]/', '', $string);\n</code>\n\
    <|/ a tags=php,regex |>\n<| a dscore=1 |>\n<code>\n$string = 'apple pi e ';\n\
    $string = preg_replace('/[^a-z]/', '', $string);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a tags=php,regex |>\n<code>\n$string = 'apple pi", "    $txt = trim($txt);\n\
    \    $last_char = substr($txt, -1);\n    if ($last_char == ' ') {\n        $last_char\
    \ = substr($txt, -2);\n    }\n    if (ctype_alpha($last_char)) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "  return substr($txt, -1, 1) != ' '\
    \ && preg_match('/[^a-z]+$/i', $txt);\n}", "    if (strlen($txt) == 0) {\n   \
    \     return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    return\
    \ substr($txt, -1, 1) != ' ' &&\n           preg_match('/[^a-z]$/i', $txt);\n\
    }\n", "    $txt = trim($txt);\n    $txt = str_replace(\" \", \"\", $txt);\n  \
    \  $txt = substr($txt, 0, -1);\n    return preg_match(\"/^[a-zA-Z]+$/\", $txt);\n\
    }\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt != '' && $txt != ' ';\n}\n", "    if (strlen($txt) == 0) {\n\
    \        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if (preg_match('/[a-z]$/i',\
    \ $last_char)) {\n        return false;\n    }\n    return true;\n}\n", "    $last_char\
    \ = $txt[strlen($txt)-1];\n    return !preg_match('/[^A-Za-z]$/', $last_char);\n\
    }\n", "  return substr($txt, -1, 1) != ' ';\n}", "  $last_char = substr($txt,\
    \ -1, 1);\n  return preg_match('/[a-z]$/i', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1);\n    if (preg_match('/[^a-z]$/i', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n   \
    \ return preg_match('/[a-z]$/i', $last_char);\n}", "    $txt = trim($txt);\n \
    \   $last_char = substr($txt, -1, 1);\n    $is_letter = preg_match('/^[A-Za-z]$/',\
    \ $last_char);\n    return $is_letter;\n}\n", "    $txt = trim($txt);\n    $last_char\
    \ = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i', $last_char);\n}\n",
  "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n\
    \    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char)) {\n \
    \       return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt[strlen($txt) - 1] === ' ';\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if the\
    \ last character is a space or punctuation mark. For example, \"apple pi e \"\
    \ returns true.\n<|/ c |>\n<| c |>\nI added a version that checks for punctuation\
    \ marks and spaces.\n<|/ c |>\n<| c |>\nThis doesn't work if the last character\
    \ is a space or punctuation mark. For example, \"apple pi e \" returns true.\n\
    <|/ c |>\n<| c |>\nI added a version that checks for punctuation marks and spaces.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the last character is a space or punctuation\
    \ mark. For example, \"apple pi e \" returns true.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"apple pi e\";\n$string = preg_replace('/[^a-zA-Z]+/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+$/', '', $string);\necho $string;", "  return substr($txt, -1, 1) != ' ';\n}",
  "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n \
    \   }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $last_char = $txt[strlen($txt)-1];\n\
    \    return !preg_match('/[^A-Za-z]/', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    return substr($txt, -1, 1) != ' ' &&\n           substr($txt, -1, 1) != '.'\
    \ &&\n           substr($txt, -1, 1) != '!' &&\n           substr($txt, -1, 1)\
    \ != '?' &&\n           substr($txt, -1, 1) != '-' &&\n           substr($txt,\
    \ -1, 1) != '_' &&\n           substr($txt, -1, 1) != '*' &&\n           substr($txt,\
    \ -1, 1) != '&' &&\n           substr($txt, -1, 1) != '%' &&\n           substr($txt,\
    \ -1, 1) != '@' &&\n           substr($txt, -1, 1) != '#' &&\n           substr($txt,\
    \ -1, 1) != '$' &&\n           substr($txt, -1, 1) != '%' &&\n           substr($txt,\
    \ -1, 1) != '^' &&\n           substr($txt, -1, 1) != '&' &&\n           substr($txt,\
    \ -1, 1) != '*' &&\n           substr($txt, -1, 1) != '(';\n}", "    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !empty($txt);\n}\n", "  return preg_match('/[^A-Za-z]$/', $txt);\n\
    }\n", "    $txt = trim($txt);\n    if ($txt === '') {\n        return false;\n\
    \    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return $txt[strlen($txt) - 1] === ' ';\n}\n", "    $txt = strtolower($txt);\n\
    \    $last = substr($txt, -1);\n    $words = explode(\" \", $txt);\n    $last_char\
    \ = substr($last, 0, 1);\n    foreach ($words as $word) {\n        if (substr($word,\
    \ 0, 1) == $last_char) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "  $last_char = substr($txt, -1);\n  $last_char_lower = strtolower($last_char);\n\
    \  $last_char_upper = strtoupper($last_char);\n  $last_char_lower = preg_replace('/[^a-z]/',\
    \ '', $last_char_lower);\n  $last_char_upper = preg_replace('/[^A-Z]/', '', $last_char_upper);\n\
    \  $last_char_lower = preg_replace('/\\s+/', '', $last_char_lower);\n  $last_char_upper\
    \ = preg_replace('/\\s+/', '', $last_char_upper);\n  return ($last_char_lower\
    \ == $last_char_upper);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n\
    \        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/\\s+/', '', $txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1);\n    if\
    \ (preg_match('/[a-z]+$/i', $last_char)) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (preg_match('/^[a-z]+$/i', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "    return preg_match('/[^a-z]$/i', $txt);\n\
    }\n", "  $last_char = $txt[strlen($txt)-1];\n  return !preg_match('/[^A-Za-z]$/',\
    \ $last_char);\n}", "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n  \
    \      return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if (preg_match('/^[a-z]+$/i',\
    \ $last_char)) {\n        return false;\n    }\n    return true;\n}\n", "    $txt\
    \ = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1, 1);\n    $words = explode('\
    \ ', $txt);\n    foreach ($words as $word) {\n        if (substr($word, 0, -1)\
    \ == $last_char) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1, 1);\n    if ($last_char != ' ') {\n\
    \        return is_alpha($last_char);\n    }\n    $words = explode(' ', $txt);\n\
    \    foreach ($words as $word) {\n        $last_char = substr($word, -1, 1);\n\
    \        if ($last_char != ' ') {\n            return is_alpha($last_char);\n\
    \        }\n    }\n    return false;\n}\n", "    $txt = strtolower($txt);\n  \
    \  $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $last_char = substr($txt, -1);\n    $is_letter = preg_match('/^[a-z]+$/i',\
    \ $last_char);\n    return $is_letter;\n}\n", "    $txt = trim($txt);\n    $last_char\
    \ = substr($txt, -1, 1);\n    $words = explode(\" \", $txt);\n    foreach ($words\
    \ as $word) {\n        if (substr($word, 0, -1) == $last_char) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt[strlen($txt)\
    \ - 1] === ' ';\n}\n", "    $last_char = $txt[strlen($txt)-1];\n    return ($last_char\
    \ >= 'a' && $last_char <= 'z') ||\n           ($last_char >= 'A' && $last_char\
    \ <= 'Z');\n}", "    if (strlen($txt) == 0) {\n        return false;\n    }\n\
    \    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char)) {\n \
    \       return false;\n    }\n    $words = explode(\" \", $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  return substr($txt, -1, 1) != '\
    \ ' &&\n         substr($txt, -1, 1) != '.' &&\n         substr($txt, -1, 1) !=\
    \ '!' &&\n         substr($txt, -1, 1) != '?' &&\n         substr($txt, -1, 1)\
    \ != '-' &&\n         substr($txt, -1, 1) != '_' &&\n         substr($txt, -1,\
    \ 1) != '*' &&\n         substr($txt, -1, 1) != '&' &&\n         substr($txt,\
    \ -1, 1) != '%' &&\n         substr($txt, -1, 1) != '@' &&\n         substr($txt,\
    \ -1, 1) != '$' &&\n         substr($txt, -1, 1) != '#' &&\n         substr($txt,\
    \ -1, 1) != '[' &&\n         substr($txt, -1, 1) != ']' &&\n         substr($txt,\
    \ -1, 1) != '(' && substr($txt, -1, 1) != ')' &&\n         substr($txt, -1, 1)\
    \ != '|' &&\n         substr($txt, -1, 1) != '~' &&\n         substr($txt, -1,\
    \ 1) != '-' &&\n         substr($txt, -1, 1) != '_' &&\n         substr($txt,\
    \ -1, 1) != '*' &&\n         substr($txt, -1, 1) != '&' &&\n         substr($txt,\
    \ -1, 1) != '%' &&\n         substr($txt, -1, 1) != '@' &&\n         substr($txt,\
    \ -1, 1) != '$' &&\n         substr($txt, -1, 1) != '#' &&\n         substr($txt,\
    \ -1, 1) != '[' &&\n         substr($txt, -1, 1) != ']' &&\n         substr($txt,\
    \ -1, 1) != '(' && substr($txt, -1, 1) != ')' &&\n         substr($txt, -1, 1)\
    \ != '|' &&\n         substr($txt, -1, 1) != '~';\n}\n", "    return substr($txt,\
    \ -1, 1) != ' ' && preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    $txt = str_replace(\" \", \"\", $txt);\n    $txt = substr($txt, 0, -1);\n\
    \    return preg_match(\"/^[a-zA-Z]+$/\", $txt);\n}\n", "  $txt = trim($txt);\n\
    \  if (empty($txt)) {\n    return false;\n  }\n  return ctype_alpha($txt[strlen($txt)\
    \ - 1]);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt[strlen($txt) - 1] != ' ';\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]+/i', '', $txt);\n    return $txt != '';\n}\n",
  "  return preg_match('/[a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt) && $txt[strlen($txt)\
    \ - 1] == ' ';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}", "  return\
    \ preg_match('/[a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt) && $txt[strlen($txt) - 1] == ' ';\n}\n",
  "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt[strlen($txt) - 1] === ' ';\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    return substr($txt,\
    \ -1, 1) != ' ' &&\n           preg_match('/[^a-z]$/i', $txt);\n}\n", "  return\
    \ preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    if (strlen($txt)\
    \ == 0)\n        return false;\n    $txt = strtolower($txt);\n    $last = substr($txt,\
    \ -1);\n    if ($last == \" \")\n        $last = substr($txt, -2);\n    if (ctype_alpha($last))\n\
    \        return false;\n    return true;\n}", "    $txt = trim($txt);\n    if\
    \ (strlen($txt) == 0) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '',\
    \ $txt);\n    return $txt != '';\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n\
    }\n", "    $txt = trim($txt);\n    $last_char = substr($txt, -1, 1);\n    return\
    \ preg_match('/^[a-z]+$/i', $last_char);\n}\n", "    $last_char = $txt[strlen($txt)-1];\n\
    \    return !preg_match('/[^a-z]$/i', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt === '';\n}",
  "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return substr($txt,\
    \ -1, 1) != ' ';\n}", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    return preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n", "  return substr($txt, -1, 1) != ' ';\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n \
    \   }\n    $last_char = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i',\
    \ $last_char);\n}\n", "    return substr($txt, -1, 1) != ' ';\n}", "  return preg_match('/[^a-z]+$/i',\
    \ $txt);\n}\n", "  $last_char = $txt[strlen($txt)-1];\n  return preg_match('/[a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n      \
    \  return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "  return substr($txt,\
    \ -1, 1) != ' ' && preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}", "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return !empty($txt);\n}\n", "   \
    \ $last_char = substr($txt, -1, 1);\n    if ($last_char != ' ') {\n        return\
    \ is_alpha($last_char);\n    }\n    return false;\n}\n", "    $txt = trim($txt);\n\
    \    if ($txt === '') return false;\n    $txt = strtolower($txt);\n    $txt =\
    \ preg_replace('/[^a-z]/', '', $txt);\n    return $txt[strlen($txt) - 1] === '\
    \ ';\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !empty($txt) && $txt[strlen($txt) - 1] == ' ';\n}\n", "  return substr($txt,\
    \ -1, 1) != ' ';\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-zA-Z\
    \ ]/', '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n   \
    \ if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n\
    \    $words = explode(' ', $txt);\n    $last_word = array_pop($words);\n    if\
    \ (ctype_alpha($last_word)) {\n        return false;\n    }\n    return true;\n\
    }\n", "    return preg_match('/[^A-Za-z]$/', $txt);\n}\n", "  return preg_match('/[a-z]$/i',\
    \ $txt);\n}", "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n\
    }\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1);\n    if (preg_match('/^[a-z]+$/i',\
    \ $last_char)) {\n        return true;\n    }\n    return false;\n}\n", "  return\
    \ preg_match('/[a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "  return preg_match('/[^A-Za-z]$/',\
    \ $txt);\n}\n", "    $last_char = $txt[strlen($txt)-1];\n    return !preg_match('/[^a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    if (strlen($txt) == 0) {\n\
    \        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if ($last_char\
    \ != ' ') {\n        $last_char2 = substr($txt, -1, 2);\n        if ($last_char2\
    \ != ' ') {\n            return true;\n        }\n    }\n    return false;\n}\n",
  "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', '', $txt);\n    $txt\
    \ = preg_replace('/[^a-z]/', '', $txt);\n    return ($txt[strlen($txt) - 1] ===\
    \ ' ') ? false : true;\n}\n", "    return substr($txt, -1, 1) != ' ';\n}", " \
    \   $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1);\n    if (preg_match('/[a-zA-Z]/', $last_char))\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '' && $txt[strlen($txt) - 1] != ' ';\n}\n", " \
    \   $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n\
    \    }\n    $last_char = substr($txt, -1, 1);\n    if ($last_char != ' ') {\n\
    \        return ctype_alpha($last_char);\n    }\n    $words = explode(' ', $txt);\n\
    \    foreach ($words as $word) {\n        if (ctype_alpha($word[strlen($word)\
    \ - 1])) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $txt = trim($txt);\n    $txt = str_replace(\" \", \"\", $txt);\n    $txt =\
    \ substr($txt, -1);\n    return preg_match(\"/^[a-zA-Z]+$/\", $txt);\n}", "  \
    \  $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n\
    \    $last_char = substr($txt, -1);\n    if (preg_match('/[a-z]$/i', $last_char))\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/\\s+/', '', $txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (ctype_alpha($last_char)) {\n        return false;\n    }\n\
    \    $words = explode(\" \", $txt);\n    foreach ($words as $word) {\n       \
    \ if (ctype_alpha($word)) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for\
    \ me in PHP7. `ctype_alpha()` returns false for non-alphabetic characters. `ctype_digit()`\
    \ returns false for non-numeric characters. `ctype_space()` returns false for\
    \ non-whitespace characters. `ctype_word()` returns false for non-word characters.\
    \ `ctype_graph()` returns false for non-graph characters. `ctype_print()` returns\
    \ false for non-printable characters. `ctype_punct()` returns false for non-punctuation\
    \ characters. `ctype_alnum()` returns false for non-alphanumeric characters. `ctype_digit()`\
    \ returns false for non-numeric characters. `ctype_space()` returns false for\
    \ non-whitespace characters. `ctype_word()` returns false for non-word characters.\
    \ `ctype_graph()` returns false for non-graph characters. `ctype_print()` returns\
    \ false for non-printable characters. `ctype_punct()` returns false for non-punctuation\
    \ characters. `ctype_alnum()` returns false for non-alphanumeric characters. `ctype_digit()`\
    \ returns false for non-numeric characters. `ctype_space()` returns false for\
    \ non-whitespace characters. `ctype_word()` returns false for non-word characters.\
    \ `ctype_graph()` returns false for non-graph characters. `ctype_print()` returns\
    \ false for non-printable characters. `ctype_punct()` returns false for non-punctuation\
    \ characters. `ctype_alnum()` returns false for non-alphanumeric characters. `ctype_digit()`\
    \ returns false for non-numeric characters. `ctype_space()` returns false for\
    \ non-whitespace characters. `ctype_word()` returns false for non-word characters.\
    \ `ctype_graph()` returns false for non-graph characters. `ctype_print()` returns\
    \ false for non-printable characters. `ctype_punct()` returns false for non-punctuation\
    \ characters. `ctype_alnum()` returns false for non-alphanumeric characters. `ctype_digit()`\
    \ returns false for non-numeric characters. `ctype_space()` returns false for\
    \ non-whitespace characters. `ctype_word()` returns false for non-word character",
  "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/', $txt);\n}\n", "    $txt = trim($txt);\n \
    \   $txt = preg_replace('/\\s+/', '', $txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt !== '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n   \
    \ if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n    }\n  \
    \  return false;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n    \
    \    return false;\n    }\n    $last_char = substr($txt, -1);\n    if ($last_char\
    \ === ' ') {\n        $last_char = substr($txt, -2);\n    }\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !empty($txt);\n}\n", "    $txt = trim($txt);\n    $last_char = substr($txt,\
    \ -1);\n    if ($last_char != ' ') {\n        $last_char = strtolower($last_char);\n\
    \        $last_char = preg_replace('/[^a-z]/', '', $last_char);\n        if ($last_char\
    \ != '') {\n            return true;\n        }\n    }\n    return false;\n}",
  "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n        return false;\n \
    \   }\n    $last_char = substr($txt, -1);\n    if (preg_match('/^[a-z]+$/i', $last_char))\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $txt = trim($txt);\n\
    \    if ($txt === '') return false;\n    $txt = strtolower($txt);\n    $last =\
    \ substr($txt, -1, 1);\n    return ($last >= 'a' && $last <= 'z') || ($last >=\
    \ 'A' && $last <= 'Z');\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like\
    \ this solution, but I believe it only works with English characters. I believe\
    \ it also doesn't work if the last character is a digit.\n<|/ c |>\n<| c |>\n\
    It does work if the last character is a digit. Try it out. `echo check_if_last_char_is_a_letter(\"\
    apple pi e \");` returns `true`.\n<|/ c |>\n<| c |>\nYes, it does work. Try it\
    \ out. `echo check_if_last_char_is_a_letter(\"apple pi e \");` returns `true`.\n\
    <|/ c |>\n<| c |>\nI believe it also doesn't work if the last character is a digit.\
    \ Try it out. `echo check_if_last_char_is_a_letter(\"apple pi e \");` returns\
    \ `true`.\n<|/ c |>\n<| c |>\nYes, it does work. Try it out. `echo check_if_last_char_is_a_letter(\"\
    apple pi e \");` returns `true`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "    $txt = trim($txt);\n    if (empty($txt)) {\n        return false;\n    }\n\
    \    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "  $last_char = substr($txt, -1);\n  if ($last_char === ' ') {\n\
    \    $last_char = substr($txt, -2);\n  }\n  return preg_match('/[a-z]$/i', $last_char);\n\
    }", "    $last_char = substr($txt, -1, 1);\n    $is_letter = preg_match('/^[A-Za-z]$/',\
    \ $last_char);\n    return $is_letter;\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return $txt != '';\n}\n", "  $txt = trim($txt);\n  return substr($txt,\
    \ -1, 1) != ' ' && preg_match('/[^a-z]$/i', $txt);\n}", "    $txt = trim($txt);\n\
    \    if (strlen($txt) == 0) {\n        return false;\n    }\n    $last_char =\
    \ substr($txt, -1);\n    if (preg_match('/^[a-z]+$/i', $last_char)) {\n      \
    \  return false;\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n   \
    \ if (empty($txt)) {\n        return false;\n    }\n    $last_char = substr($txt,\
    \ -1, 1);\n    if (preg_match('/[^a-z]/', $last_char)) {\n        return false;\n\
    \    }\n    return true;\n}\n", "  $txt = trim($txt);\n  if (empty($txt)) {\n\
    \    return false;\n  }\n  return substr($txt, -1, 1) != ' ';\n}\n", "    $txt\
    \ = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return\
    \ $txt != '' && $txt[strlen($txt)-1] != ' ';\n}\n", "    $last_char = $txt[strlen($txt)-1];\n\
    \    return preg_match('/[a-z]$/i', $last_char);\n}\n", "    $txt = trim($txt);\n\
    \    $last_char = substr($txt, -1);\n    return preg_match('/^[a-z]+$/i', $last_char);\n\
    }\n", "  $last_char = substr($txt, -1, 1);\n  $is_letter = preg_match('/[a-z]/',\
    \ $last_char);\n  return !$is_letter;\n}\n", "    $txt = trim($txt);\n    $txt\
    \ = str_replace(array(\"\\r\", \"\\n\", \"\\t\", \" \"), \"\", $txt);\n    $txt\
    \ = preg_replace(\"/[^a-z]/\", \"\", $txt);\n    return !empty($txt);\n}\n", " \
    \ return substr($txt, -1, 1) != ' ';\n}\n", "    $txt = trim($txt);\n    if (strlen($txt)\
    \ == 0) {\n        return false;\n    }\n    $last_char = substr($txt, -1);\n\
    \    if (preg_match('/[^a-z]$/i', $last_char)) {\n        return false;\n    }\n\
    \    return true;\n}\n", "    $txt = trim($txt);\n    $txt = str_replace(\" \"\
    , \"\", $txt);\n    $txt = substr($txt, -1);\n    return preg_match(\"/^[a-z]+$/i\"\
    , $txt);\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}\n", "  $txt = trim($txt);\n\
    \  if (strlen($txt) == 0) {\n    return false;\n  }\n  $last_char = substr($txt,\
    \ -1, 1);\n  $is_letter = ctype_alpha($last_char);\n  return !$is_letter;\n}\n",
  "  return preg_match('/[^a-z]$/i', $txt);\n}", "    $txt = strtolower($txt);\n \
    \   $txt = preg_replace('/[^a-z]+/i', '', $txt);\n    return $txt != '';\n}\n",
  "    $txt = trim($txt);\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}", "    $txt = trim($txt);\n    if (empty($txt))\
    \ {\n        return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $last_char\
    \ = substr($txt, -1);\n    $last_char_is_letter = preg_match('/^[A-Za-z]$/', $last_char);\n\
    \    return !$last_char_is_letter;\n}\n", "    $txt = trim($txt);\n    if (strlen($txt)\
    \ == 0) {\n        return false;\n    }\n    $last_char = substr($txt, -1, 1);\n\
    \    if (preg_match('/[a-z]$/i', $last_char)) {\n        return true;\n    }\n\
    \    return false;\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n  \
    \      return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]+/i',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    return substr($txt, -1, 1) != ' ';\n}\n", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (strlen($txt) == 0) {\n      \
    \  return false;\n    }\n    $last_char = substr($txt, -1, 1);\n    return preg_match('/[a-z]$/i',\
    \ $last_char);\n}\n", "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/',\
    \ '', $txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt\
    \ !== '';\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $last_char = substr($txt, -1, 1);\n    if (ctype_alpha($last_char))\
    \ {\n        return false;\n    }\n    $words = explode(' ', $txt);\n    foreach\
    \ ($words as $word) {\n        if (ctype_alpha($word)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $txt = trim($txt);\n    $txt =\
    \ preg_replace('/\\s+/', '', $txt);\n    $txt = preg_replace('/[^a-z]/', '', $txt);\n\
    \    return $txt != '';\n}\n", "  return preg_match('/[^a-z]+$/i', $txt);\n}",
  "    return substr($txt, -1, 1) != ' ' &&\n           preg_match('/[^a-z]+$/i',\
    \ $txt);\n}", "    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return $txt != '';\n}\n", "    $txt = trim($txt);\n    $last_char\
    \ = substr($txt, -1);\n    if ($last_char == ' ' || $last_char == '-' || $last_char\
    \ == '.' || $last_char == ',' || $last_char == ':' || $last_char == ';' || $last_char\
    \ == '?' || $last_char == '!' || $last_char == '@' || $last_char == '#' || $last_char\
    \ == '$' || $last_char == '%' || $last_char == '^' || $last_char == '&' || $last_char\
    \ == '*' || $last_char == '(' || $last_char == ')' || $last_char == '[' || $last_char\
    \ == ']' || $last_char == '{' || $last_char == '}' || $last_char == '\\\\' ||\
    \ $last_char == '|' || $last_char == '<' || $last_char == '>' || $last_char ==\
    \ '?' || $last_char == '!' || $last_char == '.' || $last_char == ',' || $last_char\
    \ == ':' || $last_char == ';' || $last_char == '?' || $last_char == '!' || $last_char\
    \ == '@' || $last_char == '#' || $last_char == '$' || $last_char == '%' || $last_char\
    \ == '^' || $last_char == '&' || $last_char == '*' || $last_char == '(' || $last_char\
    \ == ')' || $last_char == '[' || $last_char == ']' || $last_char == '{' || $last_char\
    \ == '}' || $last_char == '\\\\' || $last_char == '|' || $last_char == '<' ||\
    \ $last_char == '>' || $last_char == '?' || $last_char == '!' || $last_char ==\
    \ '.' || $last_char == ',' || $last_char == ':' || $last_char == ';' || $last_char\
    \ == '?' || $last_char == '!' || $last_char == '@' || $last_char == '#' || $last_char\
    \ == '$' || $last_char == '%' || $last_char == '^' || $last_char == '&' || $last_char\
    \ == '*' || $last_char == '(' || $last_char == ')' || $last_char == '[' || $last_char\
    \ == ']' || $last_char == '{' || $last_char == '}' || $last_char == '\\\\' ||\
    \ $last_char == '|' || $last_char == '<' || $last_char == '>' || $last_char ==\
    \ '?' || $last_char == '!' || $last_char == '.' || $last_char == ',' || $last_char\
    \ == ':' || $last_char == ';' || $last_char == '?' || $last_", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n        return\
    \ false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}\n", "  return preg_match('/[^a-z]$/i', $txt);\n}", "    $txt = trim($txt);\n\
    \    if (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return !preg_match('/[a-z]+$/i',\
    \ $txt);\n}\n", "    $txt = trim($txt);\n    $txt = str_replace(' ', '', $txt);\n\
    \    $txt = substr($txt, -1);\n    return preg_match('/[a-z]$/i', $txt);\n}\n",
  "    return preg_match('/[a-z]$/i', $txt);\n}\n", "    $txt = trim($txt);\n    if\
    \ (empty($txt)) {\n        return false;\n    }\n    $txt = strtolower($txt);\n\
    \    $txt = preg_replace('/[^a-z]/', '', $txt);\n    return $txt != '';\n}\n",
  "  $txt = trim($txt);\n  return substr($txt, -1, 1) != ' ' &&\n         substr($txt,\
    \ -1, 1) != '.' &&\n         substr($txt, -1, 1) != '!' &&\n         substr($txt,\
    \ -1, 1) != '?' &&\n         substr($txt, -1, 1) != '-' &&\n         substr($txt,\
    \ -1, 1) != '_' &&\n         substr($txt, -1, 1) != '*' &&\n         substr($txt,\
    \ -1, 1) != '/' &&\n         substr($txt, -1, 1) != '\\\\' &&\n         substr($txt,\
    \ -1, 1) != ':' &&\n         substr($txt, -1, 1) != '\"' &&\n         substr($txt,\
    \ -1, 1) != '|' &&\n         substr($txt, -1, 1) != '<' &&\n         substr($txt,\
    \ -1, 1) != '>' &&\n         substr($txt, -1, 1) != '?' &&\n         substr($txt,\
    \ -1, 1) != '!' &&\n         substr($txt, -1, 1) != '-' &&\n         substr($txt,\
    \ -1, 1) != '_' &&\n         substr($txt, -1, 1) != '*' &&\n         substr($txt,\
    \ -1, 1) != '/' &&\n         substr($txt, -1, 1) != '\\\\' &&\n         substr($txt,\
    \ -1, 1) != ':' &&\n         substr($txt, -1, 1) != '\"' &&\n         substr($txt,\
    \ -1, 1) != '|' &&\n         substr($txt, -1, 1) != '<' &&\n         substr($txt,\
    \ -1, 1) != '>' &&\n         substr($txt, -1, 1) != '?' &&\n         substr($txt,\
    \ -1, 1) != '!' &&\n         substr($txt, -1, 1) != '-' &&\n         substr($txt,\
    \ -1, 1) != '_' &&\n         substr($txt, -1, 1) != '*' &&\n         substr($txt,\
    \ -1, 1) != '/' &&\n         substr($txt, -1, 1) != '\\\\' &&\n         substr($txt,\
    \ -1, 1) != ':' &&\n         substr($txt, -1, 1) != '\"' &&\n         substr($txt,\
    \ -1, 1) != '|' &&\n         substr($txt, -1, 1) != '<' &&\n         substr($txt,\
    \ -1, 1) != '>' &&\n         substr($txt, -1, 1) != '?' &&\n         substr($txt,\
    \ -1, 1) != '!' &&\n         substr($txt, -1, 1) != '-' &&\n         substr($txt,\
    \ -1, 1) != '_' &&\n", "    $txt = trim($txt);\n    if (empty($txt)) {\n     \
    \   return false;\n    }\n    $txt = strtolower($txt);\n    $txt = preg_replace('/[^a-z]/',\
    \ '', $txt);\n    return !preg_match('/[a-z]+$/i', $txt);\n}\n", "  return preg_match('/[^a-z]$/i',\
    \ $txt);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
