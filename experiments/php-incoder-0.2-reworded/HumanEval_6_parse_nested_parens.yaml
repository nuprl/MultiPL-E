name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((()))\
  \ () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_counter = 0;\n  $paren_level_counter_string = \"\";\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_stack[] = $paren_level;\n      $paren_level_counter++;\n   \
    \   $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n    } else if ($paren == \")\") {\n      $paren_level_counter--;\n\
    \      $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n      if ($paren_level_counter == 0) {\n   \
    \     $paren_stack_string = $paren_stack_string;\n        $paren_level = $paren_stack[count($paren_stack)\
    \ - 1];\n      }\n    }\n    if ($paren_level_counter > 0) {\n      $paren_level_counter_string\
    \ = $paren_level_counter;\n      $paren_level_string = $paren_level_counter_string;\n\
    \    }\n  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[$paren_level] = \"\";\n\
    \    $paren_stack[$paren_level] .= $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_level--;\n        $paren_string = $paren_stack[$paren_level];\n\
    \        $paren_array = explode(\" \", $paren_string);\n        $paren_stack[$paren_level]\
    \ = \"\";\n        foreach ($paren_array as $paren_string) {\n            $paren_stack[$paren_level]\
    \ .= $paren_string;\n            $paren_level++;\n        }\n    }\n    return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count\
    \ = array();\n  $paren_level_max = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count_index = array();\n  $paren_level_max_count_index[0]\
    \ = 0;\n  $paren_level_max_count_index[1] = 1;\n  $paren_level_max_count_index[2]\
    \ = 2;\n  $paren_level_max_count_index[3] = 3;\n  $paren_level_max_count_index[4]\
    \ = 4;\n  $paren_level_max_count_index[5] = 5;\n  $paren_level_max_count_index[6]\
    \ = 6;\n  $paren_level_max_count_index[7] = 7;\n  $paren_level_max_count_index[8]\
    \ = 8;\n  $paren_level_max_count_index[9] = 9;\n  $paren_level_max_count_index[10]\
    \ = 10;\n  $paren_level_max_count_index[11] = 11;\n  $paren_level_max_count_index[12]\
    \ = 12;\n  $paren_level_max_count_index[13] = 13;\n  $paren_level_max_count_index[14]\
    \ = 14;\n  $paren_level_max_count_index[15] = 15;\n  $paren_level_max_count_index[16]\
    \ = 16;\n  $paren_level_max_count_index[17] = 17;\n  $paren_level_max_count_index[18]\
    \ = 18;\n  $paren_level_max_count_index[19] = 19;\n  $paren_level_max_count_index[20]\
    \ = 20;\n  $paren_level_max_count_index[21] = 21;\n  $paren_level_max_count_index[22]\
    \ = 22;\n  $paren_level_max_count_index[23] = 23;\n  $paren_level_max_count_index[24]\
    \ = 24;\n  $paren_level_max_count_index[25] = 25;\n  $paren_level_max_count_index[26]\
    \ = 26;\n  $paren_level_max_count_index[27] = 27;\n  $paren_level_max_count_index[28]\
    \ = 28;\n  $paren_level_max_count_index[29] = 29;\n  $paren_level_max_count_index[30]\
    \ = 30;\n  $paren_level_max_count_index[31] = 31;\n  $paren_level_max_count_index[32]\
    \ = 32;\n  $paren_level_max_count_index[33] = 33;\n  $paren_level_max_count_index[34]\
    \ = 34;\n  $paren_level_max_count_index[35] = 35;\n  $paren_level_max_count_index[36]\
    \ = 36;\n  $paren_level_max_count_index[37] = 37;\n  $paren_level_max_count_index",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = -1;\n  $paren_level_max_index[1] =\
    \ -1;\n  $paren_level_max_index[2] = -1;\n  $paren_level_max_index[3] = -1;\n\
    \  $paren_level_max_index[4] = -1;\n  $paren_level_max_index[5] = -1;\n  $paren_level_max_index[6]\
    \ = -1;\n  $paren_level_max_index[7] = -1;\n  $paren_level_max_index[8] = -1;\n\
    \  $paren_level_max_index[9] = -1;\n  $paren_level_max_index[10] = -1;\n  $paren_level_max_index[11]\
    \ = -1;\n  $paren_level_max_index[12] = -1;\n  $paren_level_max_index[13] = -1;\n\
    \  $paren_level_max_index[14] = -1;\n  $paren_level_max_index[15] = -1;\n  $paren_level_max_index[16]\
    \ = -1;\n  $paren_level_max_index[17] = -1;\n  $paren_level_max_index[18] = -1;\n\
    \  $paren_level_max_index[19] = -1;\n  $paren_level_max_index[20] = -1;\n  $paren_level_max_index[21]\
    \ = -1;\n  $paren_level_max_index[22] = -1;\n  $paren_level_max_index[23] = -1;\n\
    \  $paren_level_max_index[24] = -1;\n  $paren_level_max_index[25] = -1;\n  $paren_level_max_index[26]\
    \ = -1;\n  $paren_level_max_index[27] = -1;\n  $paren_level_max_index[28] = -1;\n\
    \  $paren_level_max_index[29] = -1;\n  $paren_level_max_index[30] = -1;\n  $paren_level_max_index[31]\
    \ = -1;\n  $paren_level_max_index[32] = -1;\n  $paren_level_max_index[33] = -1;\n\
    \  $paren_level_max_index[34] = -1;\n  $paren_level_max_index[35] = -1;\n  $paren_level_max_index[36]\
    \ = -1;\n  $paren_level_max_index[37] = -1;\n  $paren_level_max_index[38] = -1;\n\
    \  $paren_level_max_index[39] = -1;\n  $paren_level_max_index[40] = -1;\n  $paren_level_max_index[41]\
    \ = -1;\n  $paren_level_max_index[42] = -1;\n  $paren_level_max_index[43] = -1;\n\
    \  $", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack = array();\n  $paren_level_stack_string = \"\"\
    ;\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n  $paren_levels_count\
    \ = array();\n  $paren_levels_count = explode(' ', $paren_string);\n  foreach\
    \ ($paren_levels_count as $paren_level_count) {\n    $paren_level_count = intval($paren_level_count);\n\
    \    if ($paren_level_count > 0) {\n      $paren_levels[$paren_level] = $paren_level_count;\n\
    \      $paren_levels_count[$paren_level] = $paren_level_count;\n      $paren_level++;\n\
    \    }\n  }\n  $paren_level_count = array_sum($paren_levels_count);\n  for ($i\
    \ = 0; $i < $paren_levels_count; $i++) {\n    $paren_level = $paren_level - $paren_levels_count[$i];\n\
    \    $paren_array[$i] = $paren_level;\n  }\n  return $paren_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,string |>\n<| a tags=php,parentheses,string |>\n<code>\n\
    <?php\n$paren_levels = array();\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n\
    $paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = ", "  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n \
    \ $paren_stack[] = -1;\n  $paren_stack_string = '';\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = implode('', $paren_stack);\n  $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n  while ($paren_stack_string != '') {\n    $paren_stack_string\
    \ = substr($paren_stack_string, 0, $paren_stack_string_count);\n    $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack_string = '';\n    $paren_stack_string_count\
    \ = 0;\n    $paren_stack_string = implode('', $paren_stack);\n    $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    foreach ($paren_array as $key => $value) {\n      if ($paren_stack[$paren_stack_string_count]\
    \ == $key) {\n        $paren_level++;\n      }\n      if ($paren_stack_string_count+1\
    \ == $key) {\n        $paren_level--;\n      }\n      if ($paren_level == 0) {\n\
    \        $paren_stack_string = substr($paren_stack_string, 0, $paren_stack_string_count);\n\
    \        $paren_stack_string_count = strlen($paren_stack_string);\n      }\n \
    \     $paren_stack[$paren_stack_string_count] = $key;\n      $paren_stack_string_count++;\n\
    \    }\n    $paren_string = implode(' ', $paren_array);\n  }\n  return $paren_array;\n\
    }", "    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n        }\n     \
    \   $max_level_array[] = $level;\n    }\n    return $max_level_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,regex |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\nThis regex will match any number\
    \ of nested parentheses:\n<code>\n/\\((?:[^()]*|\\((?:[^()]*|\\([^()]*\\))*\\\
    ))*\\)/\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\n<code>\n$string = \"(()())\";\n\
    preg_match_all('/\\(([^()]+)\\)/', $string, $matches);\nprint_r($matches);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"",
  "  $paren_array = explode(\" \", $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $level++;\n    } else if ($paren == \")\") {\n      $level--;\n      if\
    \ ($level == 0) {\n        $paren_levels[] = $level;\n      }\n    }\n  }\n  return\
    \ $paren_levels;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ == '(') {\n      $paren_stack[] = $paren_level;\n    } else if ($char == ')')\
    \ {\n      $paren_level = $paren_stack[count($paren_stack) - 1];\n      unset($paren_stack[count($paren_stack)\
    \ - 1]);\n    } else {\n      $paren_array[] = $paren_level;\n    }\n  }\n  return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack = array();\n\
    \  $paren_level_stack[] = 0;\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_",
  "  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]", "    $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n    $parens = preg_split('/\\s+/', $paren_string);\n\
    \    $levels = array();\n    $level = 0;\n    foreach ($parens as $paren) {\n\
    \        if ($paren == '(') {\n            $levels[$level] = $level;\n       \
    \     $level++;\n        } else if ($paren == ')') {\n            $levels[$level]\
    \ = $level;\n            $level--;\n        }\n    }\n    return $levels;\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $opening_paren_level = 0;\n  $opening_paren_char = '';\n  $closing_brackets\
    \ = 0;\n  $opening_paren_chars = array();\n  $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n  $opening_paren_level++;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char == '(') {\n      $paren_array[$paren_level]++;\n\
    \      $opening_paren_chars[$opening_paren_level] = $char;\n      $opening_paren_level++;\n\
    \    } else if ($char == ')') {\n      $paren_array[$paren_level]--;\n      $closing_brackets++;\n\
    \      $opening_paren_level--;\n      if ($paren_array[$paren_level] == 0) {\n\
    \        $opening_paren_level--;\n        $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n      }\n    } else if ($char == ' ') {\n      $opening_paren_chars[$opening_paren_level]\
    \ = $char;\n    }\n  }\n  return $paren_array;\n}\n", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end = 0;\n  $paren_levels\
    \ = array();\n  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end]\
    \ = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren", "   \
    \ $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $level) {\n        if ($level == \"(\")\
    \ {\n            $max_level++;\n        } else if ($level == \")\") {\n      \
    \      $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n \
    \ $paren_stack = array();\n  foreach (explode(' ', $paren_string) as $char) {\n\
    \    if ($char == '(') {\n      $paren_stack[] = $paren_level;\n    } else if\
    \ ($char == ')') {\n      $paren_level = $paren_stack[count($paren_stack) - 1];\n\
    \      array_pop($paren_stack);\n    } else {\n      $paren_array[] = $paren_level;\n\
    \    }\n  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[]", "    $paren_array = array();\n    $paren_level = 0;\n   \
    \ $paren_stack = array();\n    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string]\
    \ = 0;\n    while (count($paren_stack) > 0) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        if ($paren_levels[$paren_string]\
    \ == 1) {\n            $paren_array[] = $paren_string;\n        }\n        if\
    \ ($paren_levels[$paren_string] == 2) {\n            $paren_array[] = $paren_string;\n\
    \            $paren_stack[] = $paren_string;\n        }\n    }\n    return $paren_array;\n\
    }", "    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $max_level++;\n        } else {\n         \
    \   $max_level--;\n        }\n        if ($max_level > $max_level_array[0]) {\n\
    \            $max_level_array = $max_level;\n        }\n    }\n    return $max_level_array;\n\
    }\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count =\
    \ array();\n  $paren_level_max = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count_index = array();\n  $paren_level_max_count_index[0]\
    \ = 0;\n  $paren_level_max_count_index[1] = 0;\n  $paren_level_max_count_index[2]\
    \ = 0;\n  $paren_level_max_count_index[3] = 0;\n  $paren_level_max_count_index[4]\
    \ = 0;\n  $paren_level_max_count_index[5] = 0;\n  $paren_level_max_count_index[6]\
    \ = 0;\n  $paren_level_max_count_index[7] = 0;\n  $paren_level_max_count_index[8]\
    \ = 0;\n  $paren_level_max_count_index[9] = 0;\n  $paren_level_max_count_index[10]\
    \ = 0;\n  $paren_level_max_count_index[11] = 0;\n  $paren_level_max_count_index[12]\
    \ = 0;\n  $paren_level_max_count_index[13] = 0;\n  $paren_level_max_count_index[14]\
    \ = 0;\n  $paren_level_max_count_index[15] = 0;\n  $paren_level_max_count_index[16]\
    \ = 0;\n  $paren_level_max_count_index[17] = 0;\n  $paren_level_max_count_index[18]\
    \ = 0;\n  $paren_level_max_count_index[19] = 0;\n  $paren_level_max_count_index[20]\
    \ = 0;\n  $paren_level_max_count_index[21] = 0;\n  $paren_level_max_count_index[22]\
    \ = 0;\n  $paren_level_max_count_index[23] = 0;\n  $paren_level_max_count_index[24]\
    \ = 0;\n  $paren_level_max_count_index[25] = 0;\n  $paren_level_max_count_index[26]\
    \ = 0;\n  $paren_level_max_count_index[27] = 0;\n  $paren_level_max_count_index[28]\
    \ = 0;\n  $paren_level_max_count_index[29] = 0;\n  $paren_level_max_count_index[30]\
    \ = 0;\n  $paren_level_max_count_index[31] = 0;\n  $paren_level_max_count_index[32]\
    \ = 0;\n  $paren_level_max_count_index[33] = 0;\n  $paren_level_max_count_index[34]\
    \ = 0;\n  $paren_level_max_count_index[35] = 0;\n  $paren_level_max_count_index[36]\
    \ = 0;\n  $paren_level_max_count_index[37] = 0;\n  $paren_level_max_count_index[38]\
    \ = 0;\n  $paren_level_max_count_index[39] = 0;\n  $paren_level_max_count_index[40]\
    \ = 0;\n  $paren_level_max_count_index[41] = 0;\n  $paren_level_max_count_index[42]\
    \ = 0;\n  $paren", "    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_levels = array();\n    $paren_array_levels_count\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_max_index\
    \ = array();\n    $paren_array_levels_count_max_index[0] = 0;\n    for ($i = 0;\
    \ $i < $paren_array_count; $i++) {\n        $paren_array_levels[$i] = $i;\n  \
    \      $paren_array_levels_count[$i] = 1;\n        $paren_array_levels_count_max[$i]\
    \ = $paren_array_levels_count_max[$i];\n        $paren_array_levels_count_max_index[$i]\
    \ = $i;\n    }\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        for\
    \ ($j = $i + 1; $j < $paren_array_count; $j++) {\n            if ($paren_array_levels[$i]\
    \ > $paren_array_levels[$j]) {\n                $paren_array_levels_count_max[$j]\
    \ = $paren_array_levels_count_max[$i];\n                $paren_array_levels_count_max_index[$j]\
    \ = $i;\n            } else {\n                if ($paren_array_levels_count[$i]\
    \ > $paren_array_levels_count[$j]) {\n                    $paren_array_levels_count_max[$j]\
    \ = $paren_array_levels_count_max[$i];\n                    $paren_array_levels_count_max_index[$j]\
    \ = $i;\n                }\n            }\n        }\n    }\n    $paren_array_levels_count_max[$paren_array_levels_count_max_index[$paren_array_count\
    \ - 1]] = $paren_array_levels_count_max[$paren_array_count - 1];\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 1] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 2] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 3] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 4] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 5] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 6] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[]\
    \ = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string = \"\";\n  $paren_level_stack\
    \ = array();\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_", "  $level =\
    \ 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = str_repeat(\"()\", count($paren_string));\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n \
    \ $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string\
    \ = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string =\
    \ str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n \
    \ $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string\
    \ = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string =\
    \ str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[] = $paren_string;\n\
    \  while ($paren_stack) {\n    $paren_string = array_pop($paren_stack);\n    $paren_array\
    \ = array_merge($paren_array, explode(' ', $paren_string));\n    foreach ($paren_array\
    \ as $paren_string) {\n      if ($paren_string == '(') {\n        $paren_level++;\n\
    \        $paren_stack[] = $paren_string;\n      } else if ($paren_string == ')')\
    \ {\n        $paren_level--;\n        $paren_stack[] = $paren_string;\n      }\
    \ else if ($paren_level == 0) {\n        $paren_stack[] = $paren_string;\n   \
    \   }\n    }\n  }\n  return $paren_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_array_size = count($paren_array);\n    $max_level\
    \ = 0;\n    $max_level_array = [];\n    for ($i = 0; $i < $paren_array_size; $i++)\
    \ {\n        $level = 0;\n        $paren_array[$i] = \"(\" . $paren_array[$i]\
    \ . \")\";\n        $paren_string = str_replace($paren_array[$i], \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\[[^()]*\\]/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\[[^()]*\\]/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n\
    \        $paren_string = preg_replace(\"/\\([^()]*\\)/\", \"\", $", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    for ($i = 0; $i <\
    \ $paren_array_length; $i++) {\n        if ($paren_array[$i] === \"(\") {\n  \
    \          $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n\
    \        } else {\n            $max_level--;\n        }\n    }\n    $max_level_paren_array_length\
    \ = count($max_level_paren_array);\n    $max_level_paren_array_index = 0;\n  \
    \  for ($i = 0; $i < $max_level_paren_array_length; $i++) {\n        if ($max_level_paren_array[$i]\
    \ === 0) {\n            $max_level_paren_array_index = $i;\n            break;\n\
    \        }\n    }\n    $nested_paren_array = [];\n    for ($i = 0; $i < $max_level_paren_array_length;\
    \ $i++) {\n        if ($max_level_paren_array[$i] > 0) {\n            $nested_paren_array[$i]\
    \ = $max_level_paren_array[$i];\n        }\n    }\n    return $nested_paren_array;\n\
    }\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count =\
    \ array();\n  $paren_level_max = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count_index = array();\n  $paren_level_max_count_index[0]\
    \ = 0;\n  $paren_level_max_count_index[1] = 1;\n  $paren_level_max_count_index[2]\
    \ = 2;\n  $paren_level_max_count_index[3] = 3;\n  $paren_level_max_count_index[4]\
    \ = 4;\n  $paren_level_max_count_index[5] = 5;\n  $paren_level_max_count_index[6]\
    \ = 6;\n  $paren_level_max_count_index[7] = 7;\n  $paren_level_max_count_index[8]\
    \ = 8;\n  $paren_level_max_count_index[9] = 9;\n  $paren_level_max_count_index[10]\
    \ = 10;\n  $paren_level_max_count_index[11] = 11;\n  $paren_level_max_count_index[12]\
    \ = 12;\n  $paren_level_max_count_index[13] = 13;\n  $paren_level_max_count_index[14]\
    \ = 14;\n  $paren_level_max_count_index[15] = 15;\n  $paren_level_max_count_index[16]\
    \ = 16;\n  $paren_level_max_count_index[17] = 17;\n  $paren_level_max_count_index[18]\
    \ = 18;\n  $paren_level_max_count_index[19] = 19;\n  $paren_level_max_count_index[20]\
    \ = 20;\n  $paren_level_max_count_index[21] = 21;\n  $paren_level_max_count_index[22]\
    \ = 22;\n  $paren_level_max_count_index[23] = 23;\n  $paren_level_max_count_index[24]\
    \ = 24;\n  $paren_level_max_count_index[25] = 25;\n  $paren_level_max_count_index[26]\
    \ = 26;\n  $paren_level_max_count_index[27] = 27;\n  $paren_level_max_count_index[28]\
    \ = 28;\n  $paren_level_max_count_index[29] = 29;\n  $paren_level_max_count_index[30]\
    \ = 30;\n  $paren_level_max_count_index[31] = 31;\n  $paren_level_max_count_index[32]\
    \ = 32;\n  $paren_level_max_count_index[33] = 33;\n  $paren_level_max_count_index[34]\
    \ = 34;\n  $paren_level_max_count_index[35] = 35;\n  $paren_level_max_count_index[36]\
    \ = 36;\n  $paren_level_max_count_index[37] = 37;\n  $paren_level_max_count_index",
  "    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = $paren_stack[$paren_level];\n        $paren_level\
    \ = count($paren_stack);\n        $paren_stack[$paren_level] = $paren_string;\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    }\n    return $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level] = $paren_string;\n\
    \  while ($paren_stack[$paren_level] !== null) {\n    $paren_level++;\n    $paren_stack[$paren_level]\
    \ = $paren_stack[$paren_level - 1];\n  }\n  $paren_level--;\n  while ($paren_level\
    \ > 0) {\n    $paren_string = $paren_stack[$paren_level];\n    $paren_level--;\n\
    \    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_level_count = array();\n    $paren_level_max = array();\n \
    \   $paren_level_max_count = array();\n    $paren_level_max_count_index = 0;\n\
    \    $paren_level_max_count_index2 = 0;\n    $paren_level_max_count_index3 = 0;\n\
    \    $paren_level_max_count_index4 = 0;\n    $paren_level_max_count_index5 = 0;\n\
    \    $paren_level_max_count_index6 = 0;\n    $paren_level_max_count_index7 = 0;\n\
    \    $paren_level_max_count_index8 = 0;\n    $paren_level_max_count_index9 = 0;\n\
    \    $paren_level_max_count_index10 = 0;\n    $paren_level_max_count_index11 =\
    \ 0;\n    $paren_level_max_count_index12 = 0;\n    $paren_level_max_count_index13\
    \ = 0;\n    $paren_level_max_count_index14 = 0;\n    $paren_level_max_count_index15\
    \ = 0;\n    $paren_level_max_count_index16 = 0;\n    $paren_level_max_count_index17\
    \ = 0;\n    $paren_level_max_count_index18 = 0;\n    $paren_level_max_count_index19\
    \ = 0;\n    $paren_level_max_count_index20 = 0;\n    $paren_level_max_count_index21\
    \ = 0;\n    $paren_level_max_count_index22 = 0;\n    $paren_level_max_count_index23\
    \ = 0;\n    $paren_level_max_count_index24 = 0;\n    $paren_level_max_count_index25\
    \ = 0;\n    $paren_level_max_count_index26 = 0;\n    $paren_level_max_count_index27\
    \ = 0;\n    $paren_level_max_count_index28 = 0;\n    $paren_level_max_count_index29\
    \ = 0;\n    $paren_level_max_count_index30 = 0;\n    $paren_level_max_count_index31\
    \ = 0;\n    $paren_level_max_count_index32 = 0;\n    $paren_level_max_count_index33\
    \ = 0;\n    $paren_level_max_count_index34 = 0;\n    $paren_level_max_count_index35\
    \ = 0;\n    $paren_level_max_count_index36 = 0;\n    $paren_level_max_count_index37\
    \ = 0;\n    $paren_level_max_count_index38 = 0;\n    $paren_level_max_count_index39\
    \ = 0;\n    $paren_level_max_count_index40 = 0;\n    $paren_level_max_count_index41\
    \ = 0;\n    $paren_level_max_count_index42 = 0;\n    $paren_level_max_count_index43\
    \ = 0;\n    $paren_level_max_count_index44 = 0;\n    $paren_level_max_count_index45\
    \ = 0;\n    $paren_level_max_count_index46 = 0;\n    $paren_level_max_count_index47\
    \ = 0;\n    $paren_level_max_count_index48", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $paren_array_size = count($paren_array);\n    $max_level\
    \ = 0;\n    $max_level_paren_array = [];\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === \"()\") {\n            $max_level++;\n            $max_level_paren_array[$i]\
    \ = $max_level;\n        } else {\n            $max_level--;\n        }\n    }\n\
    \    return $max_level_paren_array;\n}\n", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n  $paren_stack\
    \ = array_reverse($paren_stack);\n  foreach (explode(\" \", $paren_string) as\
    \ $char) {\n    if ($char == \"(\") {\n      $paren_level++;\n      $paren_stack[]\
    \ = array();\n      $paren_stack = array_reverse($paren_stack);\n    } else if\
    \ ($char == \")\") {\n      $paren_level--;\n      $paren_stack = array_reverse($paren_stack);\n\
    \      $paren_stack[] = array();\n      $paren_stack = array_reverse($paren_stack);\n\
    \    }\n    if ($paren_level == 0) {\n      $paren_array[] = $paren_level;\n \
    \   }\n  }\n  return $paren_array;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[]\
    \ = $paren_string;\n  while ($paren_stack) {\n    $paren_string = $paren_stack[count($paren_stack)\
    \ - 1];\n    $paren_level = count($paren_stack);\n    $paren_stack = array();\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n      $char = $paren_string[$i];\n\
    \      if ($char === '(') {\n        $paren_stack[] = $char;\n      } else if\
    \ ($char === ')') {\n        $paren_stack = array_merge($paren_stack, array_reverse($paren_stack));\n\
    \        $paren_level = count($paren_stack);\n      }\n    }\n    $paren_array[]\
    \ = $paren_level;\n  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n\
    \    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[$paren_level]\
    \ = \"\";\n    $paren_stack[$paren_level] .= $paren_string;\n    while ($paren_level\
    \ > 0) {\n        $paren_level--;\n        $paren_stack[$paren_level] = \"\";\n\
    \        $paren_stack[$paren_level] .= $paren_stack[$paren_level - 1];\n     \
    \   $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n    }\n    $paren_stack[$paren_level]\
    \ = \"\";\n    $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n   \
    \ $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n    $paren_stack[$paren_level]\
    \ .= $paren_stack[$paren_level];\n    return $paren_stack;\n}\n", "  $paren_array\
    \ = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level]\
    \ = array();\n  $paren_stack[$paren_level + 1] = array();\n  $paren_stack[$paren_level\
    \ + 1][$paren_level] = 1;\n  $paren_stack[$paren_level + 1][$paren_level + 1]\
    \ = 1;\n  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren\
    \ == \"(\") {\n      $paren_level++;\n      $paren_stack[$paren_level] = array();\n\
    \      $paren_stack[$paren_level + 1] = array();\n      $paren_stack[$paren_level\
    \ + 1][$paren_level] = 1;\n      $paren_stack[$paren_level + 1][$paren_level +\
    \ 1] = 1;\n    } else if ($paren == \")\") {\n      $paren_level--;\n      $paren_stack[$paren_level]\
    \ = array();\n      $paren_stack[$paren_level + 1] = array();\n      $paren_stack[$paren_level\
    \ + 1][$paren_level] = 1;\n      $paren_stack[$paren_level + 1][$paren_level +\
    \ 1] = 1;\n    } else if ($paren == \" \") {\n      $paren_stack[$paren_level][$paren_level]++;\n\
    \      $paren_stack[$paren_level + 1][$paren_level]++;\n    }\n  }\n  $paren_stack[$paren_level][$paren_level]++;\n\
    \  $paren_stack[$paren_level + 1][$paren_level]++;\n  return $paren_stack;\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            $max_level++;\n     \
    \   } else if ($paren == \")\") {\n            $max_level--;\n            if ($max_level\
    \ < 0) {\n                return false;\n            }\n        } else {\n   \
    \         if ($max_level > 0) {\n                return false;\n            }\n\
    \        }\n        $max_level_array[] = $max_level;\n    }\n    return $max_level_array;\n\
    }\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while (count($paren_stack) > 0) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_level = count($paren_stack) - 1;\n  \
    \  $paren_array = explode(\" \", $paren_string);\n    foreach ($paren_array as\
    \ $paren_element) {\n      if ($paren_element == \"(\") {\n        $paren_stack[]\
    \ = $paren_element;\n      } else if ($paren_element == \")\") {\n        $paren_stack\
    \ = array_merge($paren_stack, array_slice($paren_stack, 0, $paren_level));\n \
    \     }\n    }\n  }\n  return $paren_level;\n}\n", "    $paren_array = array();\n\
    \    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_", "    $paren_array = explode(\" \", $paren_string);\n    $level\
    \ = 0;\n    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $level++;\n        } else if ($paren == \"\
    )\") {\n            $level--;\n            if ($level < 0) {\n               \
    \ $max_level = $level;\n            }\n        }\n    }\n    return $max_level;\n\
    }\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    $paren_array =\
    \ explode(' ', $paren_string);\n    foreach ($paren_array as $paren_string) {\n\
    \      if ($paren_string == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n      }\n    }\n  }\n  return $paren_level;\n\
    }", "    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_counter = 0;\n    $paren_level_counter_string = \"\
    \";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_level_count = array();\n  $paren_level_max = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_index = array();\n  $paren_level_max_index[0]\
    \ = 0;\n  $paren_level_max_index[1] = 0;\n  $paren_level_max_index[2] = 0;\n \
    \ $paren_level_max_index[3] = 0;\n  $paren_level_max_index[4] = 0;\n  $paren_level_max_index[5]\
    \ = 0;\n  $paren_level_max_index[6] = 0;\n  $paren_level_max_index[7] = 0;\n \
    \ $paren_level_max_index[8] = 0;\n  $paren_level_max_index[9] = 0;\n  $paren_level_max_index[10]\
    \ = 0;\n  $paren_level_max_index[11] = 0;\n  $paren_level_max_index[12] = 0;\n\
    \  $paren_level_max_index[13] = 0;\n  $paren_level_max_index[14] = 0;\n  $paren_level_max_index[15]\
    \ = 0;\n  $paren_level_max_index[16] = 0;\n  $paren_level_max_index[17] = 0;\n\
    \  $paren_level_max_index[18] = 0;\n  $paren_level_max_index[19] = 0;\n  $paren_level_max_index[20]\
    \ = 0;\n  $paren_level_max_index[21] = 0;\n  $paren_level_max_index[22] = 0;\n\
    \  $paren_level_max_index[23] = 0;\n  $paren_level_max_index[24] = 0;\n  $paren_level_max_index[25]\
    \ = 0;\n  $paren_level_max_index[26] = 0;\n  $paren_level_max_index[27] = 0;\n\
    \  $paren_level_max_index[28] = 0;\n  $paren_level_max_index[29] = 0;\n  $paren_level_max_index[30]\
    \ = 0;\n  $paren_level_max_index[31] = 0;\n  $paren_level_max_index[32] = 0;\n\
    \  $paren_level_max_index[33] = 0;\n  $paren_level_max_index[34] = 0;\n  $paren_level_max_index[35]\
    \ = 0;\n  $paren_level_max_index[36] = 0;\n  $paren_level_max_index[37] = 0;\n\
    \  $paren_level_max_index[38] = 0;\n  $paren_level_max_index[39] = 0;\n  $paren_level_max_index[40]\
    \ = 0;\n  $paren_level_max_index[41] = 0;\n  $paren_level_max_index[42] = 0;\n\
    \  $paren_level_max_index[43] = 0;\n  $paren_level_max_index[44] = 0;\n  $paren_level_max_index[45]\
    \ = 0;\n  $paren_level_max_index[46] = 0;\n  $paren_level_max_index", "  $paren_array\
    \ = explode(\" \", $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_array = [];\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    $paren_array[$i] = trim($paren_array[$i]);\n    if ($paren_array[$i]\
    \ === \"()\") {\n      $max_level++;\n      $max_level_paren_array[$i] = $max_level;\n\
    \    }\n  }\n  $paren_array_length = count($max_level_paren_array);\n  for ($i\
    \ = 0; $i < $paren_array_length; $i++) {\n    for ($j = 0; $j < $paren_array_length;\
    \ $j++) {\n      if ($max_level_paren_array[$i] > $max_level_paren_array[$j])\
    \ {\n        $max_level = $max_level_paren_array[$i];\n      }\n    }\n  }\n \
    \ return $max_level;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n\
    \  $paren_stack = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_level++;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ')') {\n      $paren_level--;\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char == ' ') {\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else {\n      $paren_stack[$paren_level][] = $char;\n    }\n\
    \  }\n  $paren_stack[$paren_level][] = array();\n  $paren_array[] = $paren_level;\n\
    \  $paren_array[] = $paren_stack;\n  return $paren_array;\n}\n", "    $paren_array\
    \ = array();\n    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[]", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $paren_stack[] = $char;\n      $paren_level++;\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      if ($paren_level\
    \ == 0) {\n        $paren_array[] = count($paren_stack);\n      }\n    }\n  }\n\
    \  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[] = $paren_string;\n   \
    \ while ($paren_stack) {\n        $paren_string = $paren_stack[count($paren_stack)\
    \ - 1];\n        $paren_level = count($paren_stack);\n        $paren_array = array_merge($paren_array,\
    \ explode(\" \", $paren_string));\n        $paren_stack = array_slice($paren_stack,\
    \ 0, $paren_level);\n    }\n    return $paren_array;\n}\n", "    $paren_array\
    \ = array();\n    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[]", "    $paren_array = array();\n\
    \    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack_len = count($paren_stack);\n\
    \    $paren_stack[0] = 0;\n    $paren_stack_len--;\n    foreach (explode(\" \"\
    , $paren_string) as $char) {\n        if ($char == \"(\") {\n            $paren_stack[$paren_stack_len]\
    \ = $paren_stack[$paren_stack_len - 1] + 1;\n        } else if ($char == \")\"\
    ) {\n            $paren_stack[$paren_stack_len] = $paren_stack[$paren_stack_len\
    \ - 1];\n            $paren_stack_len--;\n            if ($paren_stack_len ==\
    \ 0) {\n                $paren_array[] = $paren_stack[0];\n            }\n   \
    \     }\n    }\n    return $paren_array;\n}\n", "  $paren_array = array();\n \
    \ $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[] = $paren_string;\n\
    \  $paren_levels[$paren_string] = 0;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_levels[$paren_string]++;\n    $paren_array\
    \ = array_merge($paren_array, explode(' ', $paren_string));\n    foreach ($paren_array\
    \ as $paren_string) {\n      if ($paren_levels[$paren_string] == $paren_level)\
    \ {\n        $paren_levels[$paren_string] = 0;\n      }\n    }\n  }\n  return\
    \ $paren_levels;\n}\n", "    $paren_array = array();\n    $paren_level = 0;\n\
    \    $paren_stack = array();\n    $paren_stack[$paren_level] = $paren_string;\n\
    \    while ($paren_level > 0) {\n        $paren_string = trim($paren_stack[$paren_level\
    \ - 1]);\n        $paren_level = count($paren_stack) - 1;\n        $paren_array\
    \ = array_merge($paren_array, explode(\" \", $paren_string));\n    }\n    return\
    \ $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,regex |>\n<| c |>\nThis\
    \ doesn't seem to work. `parse_nested_parens(\"(()()) ((())) () ((())()())\")`\
    \ returns `array(2, 3, 1, 3)` instead of `array(2, 3, 1, 4)`.\n<|/ c |>\n<| c\
    \ |>\n: It works for me. `parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )` returns `array(2, 3, 1, 4)`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.2.17. Both worked. Maybe you have a different PHP version?\n<|/ c\
    \ |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both worked. Maybe\
    \ you have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.2.17. Both worked. Maybe you have a different PHP version?\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\n<?php\n$paren_array=array();\n$paren_level=0;\n\
    $paren_stack=array();\n$paren_stack[$paren_level]=\"(()()) ((())) () ((())()())\"\
    ;\n$paren_string=trim($paren_stack[$paren_level]);\n$paren_level=count($paren_stack)-1;\n\
    $paren_array=array_merge($paren_array,explode(\" \",$paren_string));\nprint_r($paren_array);",
  "    $paren_array = explode(\" \", $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   } elseif ($paren == \")\") {\n            $level--;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        $max_level_array[] = $level;\n    }\n    return $max_level_array;\n\
    }\n", "    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack =\
    \ array();\n    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ - 1);\n    $paren_stack_string = str_repeat(\"(\", $paren_level - 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level - 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren",
  "    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level =\
    \ array_pop($paren_stack);\n        $paren_array[] = $paren_level;\n        if\
    \ ($paren_level > 0) {\n            $paren_stack[$paren_level - 1] .= $paren_string;\n\
    \        }\n    }\n    return $paren_array;\n}\n", "    $paren_array = array();\n\
    \    $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack_count =\
    \ array();\n    $paren_stack_count[0] = 0;\n    $paren_stack[0] = 0;\n    $paren_stack_count[1]\
    \ = 0;\n    $paren_stack[1] = 0;\n    $paren_stack_count[2] = 0;\n    $paren_stack[2]\
    \ = 0;\n    $paren_stack_count[3] = 0;\n    $paren_stack[3] = 0;\n    $paren_stack_count[4]\
    \ = 0;\n    $paren_stack[4] = 0;\n    $paren_stack_count[5] = 0;\n    $paren_stack[5]\
    \ = 0;\n    $paren_stack_count[6] = 0;\n    $paren_stack[6] = 0;\n    $paren_stack_count[7]\
    \ = 0;\n    $paren_stack[7] = 0;\n    $paren_stack_count[8] = 0;\n    $paren_stack[8]\
    \ = 0;\n    $paren_stack_count[9] = 0;\n    $paren_stack[9] = 0;\n    $paren_stack_count[10]\
    \ = 0;\n    $paren_stack[10] = 0;\n    $paren_stack_count[11] = 0;\n    $paren_stack[11]\
    \ = 0;\n    $paren_stack_count[12] = 0;\n    $paren_stack[12] = 0;\n    $paren_stack_count[13]\
    \ = 0;\n    $paren_stack[13] = 0;\n    $paren_stack_count[14] = 0;\n    $paren_stack[14]\
    \ = 0;\n    $paren_stack_count[15] = 0;\n    $paren_stack[15] = 0;\n    $paren_stack_count[16]\
    \ = 0;\n    $paren_stack[16] = 0;\n    $paren_stack_count[17] = 0;\n    $paren_stack[17]\
    \ = 0;\n    $paren_stack_count[18] = 0;\n    $paren_stack[18] = 0;\n    $paren_stack_count[19]\
    \ = 0;\n    $paren_stack[19] = 0;\n    $paren_stack_count[20] = 0;\n    $paren_stack[20]\
    \ = 0;\n    $paren_stack_count[21] = 0;\n    $paren_stack[21] = 0;\n    $paren_stack_count[22]\
    \ = 0;\n    $paren_stack[22] = 0;\n    $paren_stack_count[23] = 0;\n    $paren_stack[23]\
    \ = 0;\n    $paren_stack_count[24] = 0;\n    $paren_stack[24] = 0;\n    $paren_stack_count[25]\
    \ = 0;\n    $paren_stack[25] = 0;\n    $paren_stack_count[26] = 0;\n    $paren_stack[26]\
    \ = 0;\n    $paren_stack_count[27] = 0;\n    $paren_stack[27] = 0;\n    $paren_stack_count[28]\
    \ = 0;\n    $paren_stack[28] = 0;\n    $paren_stack_count[29] = 0;\n    $paren_stack",
  "    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $max_level = 0;\n    $max_level_paren_array = [];\n    for ($i = 0; $i <\
    \ $paren_array_count; $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n\
    \        if ($paren_array[$i] === \"()\") {\n            $max_level++;\n     \
    \       $max_level_paren_array[$i] = $max_level;\n        } else {\n         \
    \   $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n}\n",
  "  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $level =\
    \ 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n     \
    \ $level++;\n    } else if ($paren == \")\") {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n", "  $paren_array\
    \ = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n  $paren_level_max\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_", "  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \  $parens = preg_split('/\\s*\\((?=\\()/', $paren_string);\n  $level = 0;\n \
    \ $paren_levels = array();\n  foreach ($parens as $paren) {\n    if ($paren ==\
    \ '(') {\n      $level++;\n      $paren_levels[$level] = $level;\n    } elseif\
    \ ($paren == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n\
    \    }\n  }\n  $max_level = max($paren_levels);\n  $nested_level = 0;\n  foreach\
    \ ($paren_levels as $level => $paren_level) {\n    if ($paren_level == $max_level)\
    \ {\n      $nested_level++;\n    }\n  }\n  return $nested_level;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $paren_array_levels = array();\n    $paren_array_levels_count = array();\n\
    \    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_max_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_", "    $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n    $parens = preg_split('/\\s*\\((?!\\?)/', $paren_string);\n\
    \    $levels = array();\n    $level = 0;\n    foreach ($parens as $paren) {\n\
    \        if ($paren == '(') {\n            $levels[$level]++;\n        } else\
    \ {\n            $levels[$level]--;\n        }\n        $level++;\n    }\n   \
    \ return $levels;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren\
    \ == '(') {\n      $paren_stack[] = $paren;\n      $paren_level++;\n    } else\
    \ if ($paren == ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n\
    \        $paren_array[] = count($paren_stack);\n      }\n      $paren_stack =\
    \ array_pop($paren_stack);\n    }\n  }\n  return $paren_array;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $paren_string) {\n        $paren_array =\
    \ explode(\"(\", $paren_string);\n        $level = 0;\n        foreach ($paren_array\
    \ as $paren_string) {\n            $paren_array = explode(\")\", $paren_string);\n\
    \            $level++;\n        }\n        if ($level > $max_level) {\n      \
    \      $max_level = $level;\n            $max_level_array = $paren_array;\n  \
    \      }\n    }\n    return $max_level_array;\n}\n", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack_count = array();\n\
    \  $paren_stack_count[0] = 0;\n  $paren_stack[0] = '';\n  $paren_stack_count[1]\
    \ = 0;\n  $paren_stack[1] = '';\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_stack[$paren_level] .= $char;\n   \
    \   $paren_stack_count[$paren_level]++;\n      $paren_level++;\n    } else if\
    \ ($char == ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n  \
    \      $paren_stack[$paren_level] .= $char;\n        $paren_stack_count[$paren_level]++;\n\
    \        $paren_level++;\n      } else {\n        $paren_stack_count[$paren_level]--;\n\
    \      }\n    }\n  }\n  while ($paren_stack_count[$paren_level] > 0) {\n    $paren_level--;\n\
    \  }\n  while ($paren_stack_count[$paren_level] > 0) {\n    $paren_stack_count[$paren_level]--;\n\
    \    $paren_stack[$paren_level] .= $paren_stack[$paren_level + 1];\n  }\n  return\
    \ $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level = 0;\n \
    \   $paren_stack = array();\n    $paren_stack[] = $paren_string;\n    while (count($paren_stack)\
    \ > 0) {\n        $paren_string = array_pop($paren_stack);\n        $paren_level\
    \ = count($paren_stack);\n        $paren_array = explode(\" \", $paren_string);\n\
    \        foreach ($paren_array as $paren_item) {\n            if ($paren_item\
    \ == \"(\") {\n                $paren_stack[] = $paren_item;\n            } else\
    \ if ($paren_item == \")\") {\n                $paren_stack = array_merge($paren_stack,\
    \ array_slice($paren_stack, 0, $paren_level));\n            }\n        }\n   \
    \ }\n    return $paren_level;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level]\
    \ = $paren_string;\n  while ($paren_level > 0) {\n    $paren_string = array_pop($paren_stack);\n\
    \    $paren_level--;\n    $paren_array = explode(' ', $paren_string);\n    foreach\
    \ ($paren_array as $key => $value) {\n      if ($value == '(') {\n        $paren_stack[$paren_level][]\
    \ = $value;\n        $paren_level++;\n      } else if ($value == ')') {\n    \
    \    $paren_level--;\n      }\n    }\n  }\n  return $paren_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,regex |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to do this without using regex. I'm looking for a way to do\
    \ this without using recursion.\n<|/ c |>\n<| c |>\nI added a non-regex solution.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your solution. I'm going to try\
    \ it out and see if it works.\n<|/ c |>\n<| c |>\nI added a non-regex solution.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI added a non-regex solution. Hope it helps.\n\
    <|/ c |>\n<| a dscore=2 |>\nI came up with a solution that doesn't use recursion\
    \ and doesn't use regex. I'm posting it here in case anyone else is looking for\
    \ a way to do this without using recursion.\n<code>\n<?php", "  $paren_array =\
    \ array();\n  $paren_level = 0;\n  $paren_level_count = array();\n  $paren_level_max\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 0;\n  $paren_level_max_count_index[2] = 0;\n  $paren_level_max_count_index[3]\
    \ = 0;\n  $paren_level_max_count_index[4] = 0;\n  $paren_level_max_count_index[5]\
    \ = 0;\n  $paren_level_max_count_index[6] = 0;\n  $paren_level_max_count_index[7]\
    \ = 0;\n  $paren_level_max_count_index[8] = 0;\n  $paren_level_max_count_index[9]\
    \ = 0;\n  $paren_level_max_count_index[10] = 0;\n  $paren_level_max_count_index[11]\
    \ = 0;\n  $paren_level_max_count_index[12] = 0;\n  $paren_level_max_count_index[13]\
    \ = 0;\n  $paren_level_max_count_index[14] = 0;\n  $paren_level_max_count_index[15]\
    \ = 0;\n  $paren_level_max_count_index[16] = 0;\n  $paren_level_max_count_index[17]\
    \ = 0;\n  $paren_level_max_count_index[18] = 0;\n  $paren_level_max_count_index[19]\
    \ = 0;\n  $paren_level_max_count_index[20] = 0;\n  $paren_level_max_count_index[21]\
    \ = 0;\n  $paren_level_max_count_index[22] = 0;\n  $paren_level_max_count_index[23]\
    \ = 0;\n  $paren_level_max_count_index[24] = 0;\n  $paren_level_max_count_index[25]\
    \ = 0;\n  $paren_level_max_count_index[26] = 0;\n  $paren_level_max_count_index[27]\
    \ = 0;\n  $paren_level_max_count_index[28] = 0;\n  $paren_level_max_count_index[29]\
    \ = 0;\n  $paren_level_max_count_index[30] = 0;\n  $paren_level_max_count_index[31]\
    \ = 0;\n  $paren_level_max_count_index[32] = 0;\n  $paren_level_max_count_index[33]\
    \ = 0;\n  $paren_level_max_count_index[34] = 0;\n  $paren_level_max_count_index[35]\
    \ = 0;\n  $paren_level_max_count_index[36] = 0;\n  $paren_level_max_count_index[37]\
    \ = 0;\n  $paren_level_max_count_index[38] = 0;\n  $paren_level_max_count_index[39]\
    \ = 0;\n  $paren_level_max_count_index[40] = 0;\n  $paren_level_max_count_index[41]\
    \ = 0;\n  $paren_level_max_count_index[42] = 0;\n  $paren", "  $paren_array =\
    \ explode(\" \", $paren_string);\n  $paren_levels = array();\n  $paren_levels_count\
    \ = array();\n  $paren_levels_count_max = array();\n  foreach ($paren_array as\
    \ $paren) {\n    if ($paren == \"(\") {\n      $paren_levels[] = 1;\n      $paren_levels_count[]\
    \ = 1;\n      $paren_levels_count_max[] = 1;\n    } elseif ($paren == \")\") {\n\
    \      $paren_levels[] = $paren_levels[count($paren_levels) - 1];\n      $paren_levels_count[]\
    \ = $paren_levels_count[count($paren_levels) - 1];\n      $paren_levels_count_max[]\
    \ = $paren_levels_count_max[count($paren_levels) - 1];\n    } else {\n      $paren_levels[]\
    \ = $paren_levels[count($paren_levels) - 1];\n      $paren_levels_count[] = $paren_levels_count[count($paren_levels)\
    \ - 1];\n      $paren_levels_count_max[] = $paren_levels_count_max[count($paren_levels)\
    \ - 1];\n    }\n  }\n  $max_level = 0;\n  $max_level_count = 0;\n  $max_level_count_max\
    \ = 0;\n  foreach ($paren_levels as $i => $level) {\n    if ($level > $max_level)\
    \ {\n      $max_level = $level;\n      $max_level_count = $paren_levels_count[$i];\n\
    \      $max_level_count_max = $paren_levels_count_max[$i];\n    }\n  }\n  $nested_parens\
    \ = array();\n  foreach ($paren_levels as $i => $level) {\n    if ($level == $max_level)\
    \ {\n      $nested_parens[] = $max_level_count;\n    }\n  }\n  return $nested_parens;\n\
    }\n", "    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack =\
    \ array();\n    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string]\
    \ = 0;\n    while (count($paren_stack)) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n        foreach ($paren_array as $paren_string)\
    \ {\n            $paren_stack[] = $paren_string;\n            $paren_levels[$paren_string]\
    \ = $paren_levels[$paren_string] + 1;\n        }\n    }\n    return $paren_levels;\n\
    }\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string_index = 0;\n  $paren_stack_string_count = 0;\n \
    \ $paren_stack_string_index = 0;\n  while ($paren_stack_string_index < strlen($paren_string))\
    \ {\n    $paren_stack_string = substr($paren_string, $paren_stack_string_index);\n\
    \    $paren_stack_string_count++;\n    if ($paren_stack_string_index < strlen($paren_string))\
    \ {\n      if ($paren_stack_string[strlen($paren_stack_string) - 1] == ')') {\n\
    \        $paren_stack_string_count--;\n      }\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack_len = count($paren_stack);\n\
    \  $paren_stack_pointer = -1;\n  $paren_stack_pointer_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos = 0;\n  $paren_stack_pointer_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos = 0;\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n \
    \ $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos =\
    \ 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_",
  "  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^\\(\\)]*\\]/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string",
  "    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $paren_array_max_depth = 0;\n    $paren_array_current_depth = 0;\n    $paren_array_current_index\
    \ = 0;\n    $paren_array_current_string = \"\";\n    $paren_array_current_string_index\
    \ = 0;\n    $paren_array_current_string_value = \"\";\n    $paren_array_current_string_length\
    \ = 0;\n    $paren_array_current_string_char = \"\";\n    $paren_array_current_string_char_length\
    \ = 0;\n    $paren_array_current_string_char_offset = 0;\n    $paren_array_current_string_char_offset_end\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    $paren_levels = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == \"(\") {\n            $level++;\n        } else if ($paren\
    \ == \")\") {\n            $level--;\n            if ($level == 0) {\n       \
    \         $paren_levels[] = $level;\n            }\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $paren_levels;\n}\n", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\", "  $paren_array = array();\n \
    \ $paren_level = 0;\n  $paren_level_count = array();\n  $paren_level_max = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count[0] = 0;\n  $paren_level_max_count[1]\
    \ = 0;\n  $paren_level_max_count[2] = 0;\n  $paren_level_max_count[3] = 0;\n \
    \ $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5] = 0;\n  $paren_level_max_count[6]\
    \ = 0;\n  $paren_level_max_count[7] = 0;\n  $paren_level_max_count[8] = 0;\n \
    \ $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10] = 0;\n  $paren_level_max_count[11]\
    \ = 0;\n  $paren_level_max_count[12] = 0;\n  $paren_level_max_count[13] = 0;\n\
    \  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15] = 0;\n  $paren_level_max_count[16]\
    \ = 0;\n  $paren_level_max_count[17] = 0;\n  $paren_level_max_count[18] = 0;\n\
    \  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20] = 0;\n  $paren_level_max_count[21]\
    \ = 0;\n  $paren_level_max_count[22] = 0;\n  $paren_level_max_count[23] = 0;\n\
    \  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25] = 0;\n  $paren_level_max_count[26]\
    \ = 0;\n  $paren_level_max_count[27] = 0;\n  $paren_level_max_count[28] = 0;\n\
    \  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30] = 0;\n  $paren_level_max_count[31]\
    \ = 0;\n  $paren_level_max_count[32] = 0;\n  $paren_level_max_count[33] = 0;\n\
    \  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35] = 0;\n  $paren_level_max_count[36]\
    \ = 0;\n  $paren_level_max_count[37] = 0;\n  $paren_level_max_count[38] = 0;\n\
    \  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40] = 0;\n  $paren_level_max_count[41]\
    \ = 0;\n  $paren_level_max_count[42] = 0;\n  $paren_level_max_count[43] = 0;\n\
    \  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45] = 0;\n  $paren_level_max_count[46]\
    \ = 0;\n  $paren_level_max_count[47] = 0;\n  $paren_level_max_", "  $paren_string\
    \ = preg_replace('/\\s+/', '', $paren_string);\n  $parens = preg_split('/\\s+/',\
    \ $paren_string);\n  $level = 0;\n  $max_level = 0;\n  $paren_levels = array();\n\
    \  foreach ($parens as $paren) {\n    if ($paren == '(') {\n      $level++;\n\
    \      if ($level > $max_level) {\n        $max_level = $level;\n      }\n   \
    \ } else if ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n    \
    \    $level = 0;\n      }\n    }\n    $paren_levels[] = $level;\n  }\n  return\
    \ $paren_levels;\n}\n", "    $paren_array = array();\n    $paren_level = 0;\n\
    \    $paren_stack = array();\n    $paren_stack[] = $paren_string;\n    while ($paren_stack)\
    \ {\n        $paren_string = $paren_stack[count($paren_stack) - 1];\n        $paren_level\
    \ = count($paren_stack);\n        $paren_array = array_merge($paren_array, explode(\"\
    \ \", $paren_string));\n        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n\
    \    }\n    return $paren_array;\n}", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[$paren_level] = \"\";\n\
    \    $paren_stack[$paren_level] .= $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_level--;\n        $paren_string = $paren_stack[$paren_level];\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    }\n    return $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[]", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_level = 0;\n    $level = 0;\n   \
    \ $paren_level = 0;\n    $paren_array[0] = $paren_array[0];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            $level++;\n      \
    \      $paren_level++;\n        } elseif ($paren == \")\") {\n            $level--;\n\
    \            $paren_level--;\n            if ($level == 0) {\n               \
    \ $max_level = $paren_level;\n            }\n        }\n    }\n    return $max_level;\n\
    }\n", "  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_last_char = \"\";\n  $paren_stack_last_char_pos = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n",
  "    $paren_string = trim($paren_string);\n    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[] = -1;\n    $paren_stack_string\
    \ = \"\";\n    $paren_stack_string = str_repeat(\"(\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level - 1);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ - 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level - 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack", "  $paren_array =\
    \ array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[] =\
    \ $paren_string;\n  while ($paren_stack) {\n    $paren_string = $paren_stack[count($paren_stack)\
    \ - 1];\n    $paren_level = count($paren_stack);\n    $paren_stack = array();\n\
    \    $paren_array = explode(\" \", $paren_string);\n    for ($i = 0; $i < count($paren_array);\
    \ $i++) {\n      if ($paren_array[$i] === \"(\") {\n        $paren_stack[] = $paren_array[$i];\n\
    \      } else if ($paren_array[$i] === \")\") {\n        $paren_stack[count($paren_stack)\
    \ - 1] .= $paren_array[$i];\n      }\n    }\n  }\n  return $paren_level;\n}\n",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level]\
    \ = \"\";\n  $paren_stack[$paren_level + 1] = \"\";\n  $paren_stack[$paren_level\
    \ + 2] = \"\";\n  $paren_stack[$paren_level + 3] = \"\";\n  $paren_stack[$paren_level\
    \ + 4] = \"\";\n  $paren_stack[$paren_level + 5] = \"\";\n  $paren_stack[$paren_level\
    \ + 6] = \"\";\n  $paren_stack[$paren_level + 7] = \"\";\n  $paren_stack[$paren_level\
    \ + 8] = \"\";\n  $paren_stack[$paren_level + 9] = \"\";\n  $paren_stack[$paren_level\
    \ + 10] = \"\";\n  $paren_stack[$paren_level + 11] = \"\";\n  $paren_stack[$paren_level\
    \ + 12] = \"\";\n  $paren_stack[$paren_level + 13] = \"\";\n  $paren_stack[$paren_level\
    \ + 14] = \"\";\n  $paren_stack[$paren_level + 15] = \"\";\n  $paren_stack[$paren_level\
    \ + 16] = \"\";\n  $paren_stack[$paren_level + 17] = \"\";\n  $paren_stack[$paren_level\
    \ + 18] = \"\";\n  $paren_stack[$paren_level + 19] = \"\";\n  $paren_stack[$paren_level\
    \ + 20] = \"\";\n  $paren_stack[$paren_level + 21] = \"\";\n  $paren_stack[$paren_level\
    \ + 22] = \"\";\n  $paren_stack[$paren_level + 23] = \"\";\n  $paren_stack[$paren_level\
    \ + 24] = \"\";\n  $paren_stack[$paren_level + 25] = \"\";\n  $paren_stack[$paren_level\
    \ + 26] = \"\";\n  $paren_stack[$paren_level + 27] = \"\";\n  $paren_stack[$paren_level\
    \ + 28] = \"\";\n  $paren_stack[$paren_level + 29] = \"\";\n  $paren_stack[$paren_level\
    \ + 30] = \"\";\n  $paren_stack[$paren_level + 31] = \"\";\n  $paren_stack[$paren_level\
    \ + 32] = \"\";\n  $paren_stack[$paren_level + 33] = \"\";\n  $paren_stack[$paren_level\
    \ + 34] = \"\";\n  $paren_stack[$paren_level + 35] = \"\";\n  $paren_stack[$paren_level\
    \ + 36] = \"\";\n  $paren_stack[$paren_level + 37] = \"\";\n  $paren_", "  $paren_string\
    \ = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\((/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = ", "  $paren_array = explode(\" \"\
    , $paren_string);\n  $paren_array_length = count($paren_array);\n  $max_level\
    \ = 0;\n  $max_level_length = 0;\n  for ($i = 0; $i < $paren_array_length; $i++)\
    \ {\n    $paren_array[$i] = trim($paren_array[$i]);\n    if ($paren_array[$i]\
    \ === \"()\") {\n      $max_level++;\n      $max_level_length++;\n    }\n    if\
    \ ($paren_array[$i] === \"(()\") {\n      $max_level++;\n      $max_level_length++;\n\
    \    }\n    if ($paren_array[$i] === \")\") {\n      $max_level--;\n      $max_level_length--;\n\
    \    }\n    if ($paren_array[$i] === \")()\") {\n      $max_level--;\n      $max_level_length--;\n\
    \    }\n  }\n  return array($max_level, $max_level_length);\n}\n", "  $paren_array\
    \ = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n  $paren_level_max\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_", "    $paren_array = array();\n    $paren_level = 0;\n \
    \   $paren_level_count = array();\n    $paren_level_max = array();\n    $paren_level_max_count\
    \ = array();\n    $paren_level_max_count[0] = 0;\n    $paren_level_max_count[1]\
    \ = 0;\n    $paren_level_max_count[2] = 0;\n    $paren_level_max_count[3] = 0;\n\
    \    $paren_level_max_count[4] = 0;\n    $paren_level_max_count[5] = 0;\n    $paren_level_max_count[6]\
    \ = 0;\n    $paren_level_max_count[7] = 0;\n    $paren_level_max_count[8] = 0;\n\
    \    $paren_level_max_count[9] = 0;\n    $paren_level_max_count[10] = 0;\n   \
    \ $paren_level_max_count[11] = 0;\n    $paren_level_max_count[12] = 0;\n    $paren_level_max_count[13]\
    \ = 0;\n    $paren_level_max_count[14] = 0;\n    $paren_level_max_count[15] =\
    \ 0;\n    $paren_level_max_count[16] = 0;\n    $paren_level_max_count[17] = 0;\n\
    \    $paren_level_max_count[18] = 0;\n    $paren_level_max_count[19] = 0;\n  \
    \  $paren_level_max_count[20] = 0;\n    $paren_level_max_count[21] = 0;\n    $paren_level_max_count[22]\
    \ = 0;\n    $paren_level_max_count[23] = 0;\n    $paren_level_max_count[24] =\
    \ 0;\n    $paren_level_max_count[25] = 0;\n    $paren_level_max_count[26] = 0;\n\
    \    $paren_level_max_count[27] = 0;\n    $paren_level_max_count[28] = 0;\n  \
    \  $paren_level_max_count[29] = 0;\n    $paren_level_max_count[30] = 0;\n    $paren_level_max_count[31]\
    \ = 0;\n    $paren_level_max_count[32] = 0;\n    $paren_level_max_count[33] =\
    \ 0;\n    $paren_level_max_count[34] = 0;\n    $paren_level_max_count[35] = 0;\n\
    \    $paren_level_max_count[36] = 0;\n    $paren_level_max_count[37] = 0;\n  \
    \  $paren_level_max_count[38] = 0;\n    $paren_level_max_count[39] = 0;\n    $paren_level_max_count[40]\
    \ = 0;\n    $paren_level_max_count[41] = 0;\n    $paren_level_max_count[42] =\
    \ 0;\n    $paren_level_max_count[43] = 0;\n    $paren_level_max_count[44] = 0;\n\
    \    $paren_level_max_count[45] = 0;\n    $paren_level_max_count[46] = 0;\n  \
    \  $paren_level_max_count[47] = 0;\n    $paren_level_max_", "  $paren_array =\
    \ array();\n  $paren_level = 0;\n  $paren_level_count = array();\n  $paren_level_max\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = 0;\n  $paren_level_max_count_index2 = 0;\n  $paren_level_max_count_index3\
    \ = 0;\n  $paren_level_max_count_index4 = 0;\n  $paren_level_max_count_index5\
    \ = 0;\n  $paren_level_max_count_index6 = 0;\n  $paren_level_max_count_index7\
    \ = 0;\n  $paren_level_max_count_index8 = 0;\n  $paren_level_max_count_index9\
    \ = 0;\n  $paren_level_max_count_index10 = 0;\n  $paren_level_max_count_index11\
    \ = 0;\n  $paren_level_max_count_index12 = 0;\n  $paren_level_max_count_index13\
    \ = 0;\n  $paren_level_max_count_index14 = 0;\n  $paren_level_max_count_index15\
    \ = 0;\n  $paren_level_max_count_index16 = 0;\n  $paren_level_max_count_index17\
    \ = 0;\n  $paren_level_max_count_index18 = 0;\n  $paren_level_max_count_index19\
    \ = 0;\n  $paren_level_max_count_index20 = 0;\n  $paren_level_max_count_index21\
    \ = 0;\n  $paren_level_max_count_index22 = 0;\n  $paren_level_max_count_index23\
    \ = 0;\n  $paren_level_max_count_index24 = 0;\n  $paren_level_max_count_index25\
    \ = 0;\n  $paren_level_max_count_index26 = 0;\n  $paren_level_max_count_index27\
    \ = 0;\n  $paren_level_max_count_index28 = 0;\n  $paren_level_max_count_index29\
    \ = 0;\n  $paren_level_max_count_index30 = 0;\n  $paren_level_max_count_index31\
    \ = 0;\n  $paren_level_max_count_index32 = 0;\n  $paren_level_max_count_index33\
    \ = 0;\n  $paren_level_max_count_index34 = 0;\n  $paren_level_max_count_index35\
    \ = 0;\n  $paren_level_max_count_index36 = 0;\n  $paren_level_max_count_index37\
    \ = 0;\n  $paren_level_max_count_index38 = 0;\n  $paren_level_max_count_index39\
    \ = 0;\n  $paren_level_max_count_index40 = 0;\n  $paren_level_max_count_index41\
    \ = 0;\n  $paren_level_max_count_index42 = 0;\n  $paren_level_max_count_index43\
    \ = 0;\n  $paren_level_max_count_index44 = 0;\n  $paren_level_max_count_index45\
    \ = 0;\n  $paren_level_max_count_index46 = 0;\n  $paren_level_max_count_index47\
    \ = 0;\n  $paren_level_max_count_index48", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_open = false;\n    $paren_closed = false;\n    $paren_level_string\
    \ = \"\";\n    $paren_level_array = array();\n    $paren_level_array[0] = 0;\n\
    \    $paren_level_array[1] = 0;\n    $paren_level_array[2] = 0;\n    $paren_level_array[3]\
    \ = 0;\n    $paren_level_array[4] = 0;\n    $paren_level_array[5] = 0;\n    $paren_level_array[6]\
    \ = 0;\n    $paren_level_array[7] = 0;\n    $paren_level_array[8] = 0;\n    $paren_level_array[9]\
    \ = 0;\n    $paren_level_array[10] = 0;\n    $paren_level_array[11] = 0;\n   \
    \ $paren_level_array[12] = 0;\n    $paren_level_array[13] = 0;\n    $paren_level_array[14]\
    \ = 0;\n    $paren_level_array[15] = 0;\n    $paren_level_array[16] = 0;\n   \
    \ $paren_level_array[17] = 0;\n    $paren_level_array[18] = 0;\n    $paren_level_array[19]\
    \ = 0;\n    $paren_level_array[20] = 0;\n    $paren_level_array[21] = 0;\n   \
    \ $paren_level_array[22] = 0;\n    $paren_level_array[23] = 0;\n    $paren_level_array[24]\
    \ = 0;\n    $paren_level_array[25] = 0;\n    $paren_level_array[26] = 0;\n   \
    \ $paren_level_array[27] = 0;\n    $paren_level_array[28] = 0;\n    $paren_level_array[29]\
    \ = 0;\n    $paren_level_array[30] = 0;\n    $paren_level_array[31] = 0;\n   \
    \ $paren_level_array[32] = 0;\n    $paren_level_array[33] = 0;\n    $paren_level_array[34]\
    \ = 0;\n    $paren_level_array[35] = 0;\n    $paren_level_array[36] = 0;\n   \
    \ $paren_level_array[37] = 0;\n    $paren_level_array[38] = 0;\n    $paren_level_array[39]\
    \ = 0;\n    $paren_level_array[40] = 0;\n    $paren_level_array[41] = 0;\n   \
    \ $paren_level_array[42] = 0;\n    $paren_level_array[43] = 0;\n    $paren_level_array[44]\
    \ = 0;\n    $paren_level_array[45] = 0;\n    $paren_level_array[46] = 0;\n   \
    \ $paren_level_array[47] = 0;\n    $paren_level_array[48] = 0;\n    $paren_level_array[49]\
    \ = 0;\n    $paren_level_array[50] = 0;\n    $paren_level_array[51] = 0;\n   \
    \ $paren_level_array[52] = 0;\n    $paren_level_array[53] = 0;\n    $paren_level_array[54]\
    \ = 0;\n    $paren_level_array[55] = 0;\n    $paren_level_array[56] = 0;\n   \
    \ $paren_level_array[57] = 0;\n    $", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_array_length = count($paren_array);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    for ($i = 0; $i < $paren_array_length; $i++) {\n        $level =\
    \ 0;\n        $paren_array[$i] = \"(\" . $paren_array[$i] . \")\";\n        for\
    \ ($j = $i; $j < $paren_array_length; $j++) {\n            if ($paren_array[$j]\
    \ === \"(\") {\n                $level++;\n            } else if ($paren_array[$j]\
    \ === \")\") {\n                $level--;\n            }\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n            $max_level_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_array;\n}\n", "   \
    \ $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level =\
    \ array_pop($paren_stack);\n        $paren_array[] = $paren_level;\n        if\
    \ ($paren_level > 0) {\n            $paren_stack[$paren_level - 1] .= $paren_string;\n\
    \        } else {\n            $paren_stack[$paren_level] = $paren_string;\n \
    \       }\n    }\n    return $paren_array;\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_array_size = count($paren_array);\n    $max_level\
    \ = 0;\n    $max_level_paren_array = [];\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === \"()\") {\n            $max_level++;\n            $max_level_paren_array[$i]\
    \ = $max_level;\n        } else {\n            $max_level--;\n        }\n    }\n\
    \    return $max_level_paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_open = false;\n    $paren_closed = false;\n    $paren_level_string\
    \ = \"\";\n    $paren_level_array = array();\n    $paren_level_array[0] = 0;\n\
    \    $paren_level_array[1] = 0;\n    $paren_level_array[2] = 0;\n    $paren_level_array[3]\
    \ = 0;\n    $paren_level_array[4] = 0;\n    $paren_level_array[5] = 0;\n    $paren_level_array[6]\
    \ = 0;\n    $paren_level_array[7] = 0;\n    $paren_level_array[8] = 0;\n    $paren_level_array[9]\
    \ = 0;\n    $paren_level_array[10] = 0;\n    $paren_level_array[11] = 0;\n   \
    \ $paren_level_array[12] = 0;\n    $paren_level_array[13] = 0;\n    $paren_level_array[14]\
    \ = 0;\n    $paren_level_array[15] = 0;\n    $paren_level_array[16] = 0;\n   \
    \ $paren_level_array[17] = 0;\n    $paren_level_array[18] = 0;\n    $paren_level_array[19]\
    \ = 0;\n    $paren_level_array[20] = 0;\n    $paren_level_array[21] = 0;\n   \
    \ $paren_level_array[22] = 0;\n    $paren_level_array[23] = 0;\n    $paren_level_array[24]\
    \ = 0;\n    $paren_level_array[25] = 0;\n    $paren_level_array[26] = 0;\n   \
    \ $paren_level_array[27] = 0;\n    $paren_level_array[28] = 0;\n    $paren_level_array[29]\
    \ = 0;\n    $paren_level_array[30] = 0;\n    $paren_level_array[31] = 0;\n   \
    \ $paren_level_array[32] = 0;\n    $paren_level_array[33] = 0;\n    $paren_level_array[34]\
    \ = 0;\n    $paren_level_array[35] = 0;\n    $paren_level_array[36] = 0;\n   \
    \ $paren_level_array[37] = 0;\n    $paren_level_array[38] = 0;\n    $paren_level_array[39]\
    \ = 0;\n    $paren_level_array[40] = 0;\n    $paren_level_array[41] = 0;\n   \
    \ $paren_level_array[42] = 0;\n    $paren_level_array[43] = 0;\n    $paren_level_array[44]\
    \ = 0;\n    $paren_level_array[45] = 0;\n    $paren_level_array[46] = 0;\n   \
    \ $paren_level_array[47] = 0;\n    $paren_level_array[48] = 0;\n    $paren_level_array[49]\
    \ = 0;\n    $paren_level_array[50] = 0;\n    $paren_level_array[51] = 0;\n   \
    \ $paren_level_array[52] = 0;\n    $paren_level_array[53] = 0;\n    $paren_level_array[54]\
    \ = 0;\n    $paren_level_array[55] = 0;\n    $paren_level_array[56] = 0;\n   \
    \ $paren_level_array[57] = 0;\n    $", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[] = $paren_string;\n   \
    \ while ($paren_stack) {\n        $paren_string = $paren_stack[count($paren_stack)\
    \ - 1];\n        $paren_level = count($paren_stack);\n        $paren_array = array_merge($paren_array,\
    \ explode(\" \", $paren_string));\n        $paren_stack = array_slice($paren_stack,\
    \ 0, $paren_level);\n    }\n    return $paren_array;\n}\n", "    $paren_string\
    \ = preg_replace('/\\s+/', '', $paren_string);\n    $parens = preg_split('/[\\\
    (\\)]/', $paren_string);\n    $level = 0;\n    $max_level = 0;\n    foreach ($parens\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        }\
    \ else if ($paren == ')') {\n            $level--;\n            if ($level < 0)\
    \ {\n                $max_level = $level;\n                break;\n          \
    \  }\n        }\n    }\n    return array($max_level, $level);\n}\n", "  $paren_array\
    \ = explode(\" \", $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_length = 0;\n  $level = 0;\n  $level_length =\
    \ 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n     \
    \ $level++;\n      $level_length++;\n    } else if ($paren == \")\") {\n     \
    \ $level--;\n      $level_length--;\n      if ($level < 0) {\n        $max_level\
    \ = $level;\n        $max_level_length = $level_length;\n      }\n    }\n  }\n\
    \  return array($max_level, $max_level_length);\n}\n", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_array_length = count($paren_array);\n    $max_level\
    \ = 0;\n    $max_level_array = [];\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] == $paren_array[$i]) {\n                $level++;\n\
    \            }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n            $max_level_array = $paren_array;\n        }\n    }\n\
    \    return $max_level_array;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
