name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((()))\
  \ () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_counter = 0;\n  $paren_level_counter_string = \"\";\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_stack[] = $paren_level;\n      $paren_level_counter++;\n   \
    \   $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n    } else if ($paren == \")\") {\n      $paren_level_counter--;\n\
    \      $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n      if ($paren_level_counter == 0) {\n   \
    \     $paren_stack_string = $paren_stack_string;\n        $paren_level = $paren_stack[count($paren_stack)\
    \ - 1];\n      }\n    }\n    if ($paren_level_counter > 0) {\n      $paren_level_counter_string\
    \ = $paren_level_counter;\n      $paren_level_string = $paren_level_counter_string;\n\
    \    }\n  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[$paren_level] = \"\";\n\
    \    $paren_stack[$paren_level] .= $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_level--;\n        $paren_string = $paren_stack[$paren_level];\n\
    \        $paren_array = explode(\" \", $paren_string);\n        $paren_stack[$paren_level]\
    \ = \"\";\n        foreach ($paren_array as $paren_string) {\n            $paren_stack[$paren_level]\
    \ .= $paren_string;\n            $paren_level++;\n        }\n    }\n    return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count\
    \ = array();\n  $paren_level_max = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count_index = array();\n  $paren_level_max_count_index[0]\
    \ = 0;\n  $paren_level_max_count_index[1] = 1;\n  $paren_level_max_count_index[2]\
    \ = 2;\n  $paren_level_max_count_index[3] = 3;\n  $paren_level_max_count_index[4]\
    \ = 4;\n  $paren_level_max_count_index[5] = 5;\n  $paren_level_max_count_index[6]\
    \ = 6;\n  $paren_level_max_count_index[7] = 7;\n  $paren_level_max_count_index[8]\
    \ = 8;\n  $paren_level_max_count_index[9] = 9;\n  $paren_level_max_count_index[10]\
    \ = 10;\n  $paren_level_max_count_index[11] = 11;\n  $paren_level_max_count_index[12]\
    \ = 12;\n  $paren_level_max_count_index[13] = 13;\n  $paren_level_max_count_index[14]\
    \ = 14;\n  $paren_level_max_count_index[15] = 15;\n  $paren_level_max_count_index[16]\
    \ = 16;\n  $paren_level_max_count_index[17] = 17;\n  $paren_level_max_count_index[18]\
    \ = 18;\n  $paren_level_max_count_index[19] = 19;\n  $paren_level_max_count_index[20]\
    \ = 20;\n  $paren_level_max_count_index[21] = 21;\n  $paren_level_max_count_index[22]\
    \ = 22;\n  $paren_level_max_count_index[23] = 23;\n  $paren_level_max_count_index[24]\
    \ = 24;\n  $paren_level_max_count_index[25] = 25;\n  $paren_level_max_count_index[26]\
    \ = 26;\n  $paren_level_max_count_index[27] = 27;\n  $paren_level_max_count_index[28]\
    \ = 28;\n  $paren_level_max_count_index[29] = 29;\n  $paren_level_max_count_index[30]\
    \ = 30;\n  $paren_level_max_count_index[31] = 31;\n  $paren_level_max_count_index[32]\
    \ = 32;\n  $paren_level_max_count_index[33] = 33;\n  $paren_level_max_count_index[34]\
    \ = 34;\n  $paren_level_max_count_index[35] = 35;\n  $paren_level_max_count_index[36]\
    \ = 36;\n  $paren_level_max_count_index[37] = 37;\n  $paren_level_max_count_index",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = -1;\n  $paren_level_max_index[1] =\
    \ -1;\n  $paren_level_max_index[2] = -1;\n  $paren_level_max_index[3] = -1;\n\
    \  $paren_level_max_index[4] = -1;\n  $paren_level_max_index[5] = -1;\n  $paren_level_max_index[6]\
    \ = -1;\n  $paren_level_max_index[7] = -1;\n  $paren_level_max_index[8] = -1;\n\
    \  $paren_level_max_index[9] = -1;\n  $paren_level_max_index[10] = -1;\n  $paren_level_max_index[11]\
    \ = -1;\n  $paren_level_max_index[12] = -1;\n  $paren_level_max_index[13] = -1;\n\
    \  $paren_level_max_index[14] = -1;\n  $paren_level_max_index[15] = -1;\n  $paren_level_max_index[16]\
    \ = -1;\n  $paren_level_max_index[17] = -1;\n  $paren_level_max_index[18] = -1;\n\
    \  $paren_level_max_index[19] = -1;\n  $paren_level_max_index[20] = -1;\n  $paren_level_max_index[21]\
    \ = -1;\n  $paren_level_max_index[22] = -1;\n  $paren_level_max_index[23] = -1;\n\
    \  $paren_level_max_index[24] = -1;\n  $paren_level_max_index[25] = -1;\n  $paren_level_max_index[26]\
    \ = -1;\n  $paren_level_max_index[27] = -1;\n  $paren_level_max_index[28] = -1;\n\
    \  $paren_level_max_index[29] = -1;\n  $paren_level_max_index[30] = -1;\n  $paren_level_max_index[31]\
    \ = -1;\n  $paren_level_max_index[32] = -1;\n  $paren_level_max_index[33] = -1;\n\
    \  $paren_level_max_index[34] = -1;\n  $paren_level_max_index[35] = -1;\n  $paren_level_max_index[36]\
    \ = -1;\n  $paren_level_max_index[37] = -1;\n  $paren_level_max_index[38] = -1;\n\
    \  $paren_level_max_index[39] = -1;\n  $paren_level_max_index[40] = -1;\n  $paren_level_max_index[41]\
    \ = -1;\n  $paren_level_max_index[42] = -1;\n  $paren_level_max_index[43] = -1;\n\
    \  $", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack = array();\n  $paren_level_stack_string = \"\"\
    ;\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_",
  "  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n  $paren_levels_count\
    \ = array();\n  $paren_levels_count = explode(' ', $paren_string);\n  foreach\
    \ ($paren_levels_count as $paren_level_count) {\n    $paren_level_count = intval($paren_level_count);\n\
    \    if ($paren_level_count > 0) {\n      $paren_levels[$paren_level] = $paren_level_count;\n\
    \      $paren_levels_count[$paren_level] = $paren_level_count;\n      $paren_level++;\n\
    \    }\n  }\n  $paren_level_count = array_sum($paren_levels_count);\n  for ($i\
    \ = 0; $i < $paren_levels_count; $i++) {\n    $paren_level = $paren_level - $paren_levels_count[$i];\n\
    \    $paren_array[$i] = $paren_level;\n  }\n  return $paren_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,string |>\n<| a tags=php,parentheses,string |>\n<code>\n\
    <?php\n$paren_levels = array();\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n\
    $paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = ", "  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n \
    \ $paren_stack[] = -1;\n  $paren_stack_string = '';\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string = implode('', $paren_stack);\n  $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n  while ($paren_stack_string != '') {\n    $paren_stack_string\
    \ = substr($paren_stack_string, 0, $paren_stack_string_count);\n    $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack_string = '';\n    $paren_stack_string_count\
    \ = 0;\n    $paren_stack_string = implode('', $paren_stack);\n    $paren_stack_string_count\
    \ = strlen($paren_stack_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    foreach ($paren_array as $key => $value) {\n      if ($paren_stack[$paren_stack_string_count]\
    \ == $key) {\n        $paren_level++;\n      }\n      if ($paren_stack_string_count+1\
    \ == $key) {\n        $paren_level--;\n      }\n      if ($paren_level == 0) {\n\
    \        $paren_stack_string = substr($paren_stack_string, 0, $paren_stack_string_count);\n\
    \        $paren_stack_string_count = strlen($paren_stack_string);\n      }\n \
    \     $paren_stack[$paren_stack_string_count] = $key;\n      $paren_stack_string_count++;\n\
    \    }\n    $paren_string = implode(' ', $paren_array);\n  }\n  return $paren_array;\n\
    }", "    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n        }\n     \
    \   $max_level_array[] = $level;\n    }\n    return $max_level_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,regex |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\nThis regex will match any number\
    \ of nested parentheses:\n<code>\n/\\((?:[^()]*|\\((?:[^()]*|\\([^()]*\\))*\\\
    ))*\\)/\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\n<code>\n$string = \"(()())\";\n\
    preg_match_all('/\\(([^()]+)\\)/', $string, $matches);\nprint_r($matches);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"",
  "  $paren_array = explode(\" \", $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $level++;\n    } else if ($paren == \")\") {\n      $level--;\n      if\
    \ ($level == 0) {\n        $paren_levels[] = $level;\n      }\n    }\n  }\n  return\
    \ $paren_levels;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ == '(') {\n      $paren_stack[] = $paren_level;\n    } else if ($char == ')')\
    \ {\n      $paren_level = $paren_stack[count($paren_stack) - 1];\n      unset($paren_stack[count($paren_stack)\
    \ - 1]);\n    } else {\n      $paren_array[] = $paren_level;\n    }\n  }\n  return\
    \ $paren_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack\
    \ = array();\n  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack = array();\n\
    \  $paren_level_stack[] = 0;\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_",
  "  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]", "    $paren_string = preg_replace('/\\\
    s+/', '', $paren_string);\n    $parens = preg_split('/\\s+/', $paren_string);\n\
    \    $levels = array();\n    $level = 0;\n    foreach ($parens as $paren) {\n\
    \        if ($paren == '(') {\n            $levels[$level] = $level;\n       \
    \     $level++;\n        } else if ($paren == ')') {\n            $levels[$level]\
    \ = $level;\n            $level--;\n        }\n    }\n    return $levels;\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $opening_paren_level = 0;\n  $opening_paren_char = '';\n  $closing_brackets\
    \ = 0;\n  $opening_paren_chars = array();\n  $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n  $opening_paren_level++;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char == '(') {\n      $paren_array[$paren_level]++;\n\
    \      $opening_paren_chars[$opening_paren_level] = $char;\n      $opening_paren_level++;\n\
    \    } else if ($char == ')') {\n      $paren_array[$paren_level]--;\n      $closing_brackets++;\n\
    \      $opening_paren_level--;\n      if ($paren_array[$paren_level] == 0) {\n\
    \        $opening_paren_level--;\n        $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n      }\n    } else if ($char == ' ') {\n      $opening_paren_chars[$opening_paren_level]\
    \ = $char;\n    }\n  }\n  return $paren_array;\n}\n", "  $paren_array = array();\n\
    \  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end = 0;\n  $paren_levels\
    \ = array();\n  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end]\
    \ = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren", "   \
    \ $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n    $max_level_array\
    \ = [];\n    foreach ($paren_array as $level) {\n        if ($level == \"(\")\
    \ {\n            $max_level++;\n        } else if ($level == \")\") {\n      \
    \      $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n", "  $paren_array = array();\n  $paren_level = 0;\n \
    \ $paren_stack = array();\n  foreach (explode(' ', $paren_string) as $char) {\n\
    \    if ($char == '(') {\n      $paren_stack[] = $paren_level;\n    } else if\
    \ ($char == ')') {\n      $paren_level = $paren_stack[count($paren_stack) - 1];\n\
    \      array_pop($paren_stack);\n    } else {\n      $paren_array[] = $paren_level;\n\
    \    }\n  }\n  return $paren_array;\n}\n", "    $paren_array = array();\n    $paren_level\
    \ = 0;\n    $paren_stack = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[]", "    $paren_array = array();\n    $paren_level = 0;\n   \
    \ $paren_stack = array();\n    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string]\
    \ = 0;\n    while (count($paren_stack) > 0) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        if ($paren_levels[$paren_string]\
    \ == 1) {\n            $paren_array[] = $paren_string;\n        }\n        if\
    \ ($paren_levels[$paren_string] == 2) {\n            $paren_array[] = $paren_string;\n\
    \            $paren_stack[] = $paren_string;\n        }\n    }\n    return $paren_array;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
