name: HumanEval_126_is_sorted
language: php
prompt: "<?php\n// Given an array of numbers, return whether or not they are sorted\n\
  // in ascending order. If array has more than 1 duplicate of the same\n// number,\
  \ return false. Assume no negative numbers and only integers.\n// Examples\n// >>>\
  \ is_sorted(array(5))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5))\n// true\n\
  // >>> is_sorted(array(1, 3, 2, 4, 5))\n// false\n// >>> is_sorted(array(1, 2, 3,\
  \ 4, 5, 6))\n// true\n// >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n// true\n//\
  \ >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n// false\n// >>> is_sorted(array(1,\
  \ 2, 2, 3, 3, 4))\n// true\n// >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n// false\n\
  function is_sorted($lst) {\n"
tests: "function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4,\
  \ 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sorted = true;\n    $last = array_pop($lst);\n    foreach ($lst\
    \ as $item) {\n        if ($item != $last) {\n            $sorted = false;\n \
    \           break;\n        }\n    }\n    return $sorted;\n}\n", "    $sorted\
    \ = true;\n    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item\
    \ != $prev) {\n            $sorted = false;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n",
  "    $sorted = true;\n    $last = array_pop($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item != $last) {\n            $sorted = false;\n        }\n\
    \        $last = $item;\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n",
  "    $sorted = true;\n    $last = array_pop($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item != $last) {\n            $sorted = false;\n           \
    \ break;\n        }\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n", "  $last = array_pop($lst);\n  foreach ($lst\
    \ as $el) {\n    if ($el != $last) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n    foreach\
    \ ($lst as $item) {\n        if ($item != $last) {\n            $sorted = false;\n\
    \            break;\n        }\n    }\n    return $sorted;\n}\n", "    $sorted\
    \ = true;\n    $last = array_pop($lst);\n    foreach ($lst as $item) {\n     \
    \   if ($item != $last) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n    $last\
    \ = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item != $last)\
    \ {\n            $sorted = false;\n        }\n        $last = $item;\n    }\n\
    \    return $sorted;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n",
  "    $sorted = true;\n    $last = array_pop($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item != $last) {\n            $sorted = false;\n        }\n\
    \        $last = $item;\n    }\n    return $sorted;\n}\n", "  $last = array_pop($lst);\n\
    \  foreach ($lst as $item) {\n    if ($item != $last) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item != $last) {\n            $sorted\
    \ = false;\n        }\n        $last = $item;\n    }\n    return $sorted;\n}\n",
  "    if (count($lst) == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted\
    \ = array_count_values($lst);\n    foreach ($sorted as $key => $value) {\n   \
    \     if ($value == 1) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $sorted = true;\n    $last = array_pop($lst);\n    foreach\
    \ ($lst as $item) {\n        if ($item != $last) {\n            $sorted = false;\n\
    \        }\n        $last = $item;\n    }\n    return $sorted;\n}\n", "    $sorted\
    \ = true;\n    $last = array_pop($lst);\n    foreach ($lst as $item) {\n     \
    \   if ($item != $last) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n    $last\
    \ = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item != $last)\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
