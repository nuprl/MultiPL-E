name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $l = array_reverse($l);\n  $n = array_shift($l);\n  foreach ($l as\
    \ $i => $v) {\n    if ($v < $n) {\n      return false;\n    }\n    if ($v > $n)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  $l = array_reverse($l);\n\
    \  $n = count($l);\n  for ($i = 0; $i < $n; ++$i) {\n    if ($l[$i] < $l[$i -\
    \ 1]) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[0] > $l[1] ? 1 : -1;\n    $l[1] = $l[1] > $l[2] ? 1 : -1;\n  \
    \  $l[2] = $l[2] > $l[3] ? 1 : -1;\n    $l[3] = $l[3] > $l[0] ? 1 : -1;\n    return\
    \ $l[0] === $l[1] && $l[1] === $l[2] && $l[2] === $l[3] && $l[3] === $l[0];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    $m = count($l[0]);\n\
    \    for ($i = 0; $i < $n; ++$i) {\n        for ($j = 0; $j < $m; ++$j) {\n  \
    \          if ($l[$i][$j] !== $l[$i][$j + 1]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, count($l) - 1);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n  \
    \  $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_shift($l);\n    return $l === 0 && count($l) === count(array_reverse($l));\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    $l[1] = -$l[1];\n\
    \    $l[2] = -$l[2];\n    $l[3] = -$l[3];\n    $l[4] = -$l[4];\n    $l[5] = -$l[5];\n\
    \    $l[6] = -$l[6];\n    $l[7] = -$l[7];\n    $l[8] = -$l[8];\n    $l[9] = -$l[9];\n\
    \    $l[10] = -$l[10];\n    $l[11] = -$l[11];\n    $l[12] = -$l[12];\n    $l[13]\
    \ = -$l[13];\n    $l[14] = -$l[14];\n    $l[15] = -$l[15];\n    $l[16] = -$l[16];\n\
    \    $l[17] = -$l[17];\n    $l[18] = -$l[18];\n    $l[19] = -$l[19];\n    $l[20]\
    \ = -$l[20];\n    $l[21] = -$l[21];\n    $l[22] = -$l[22];\n    $l[23] = -$l[23];\n\
    \    $l[24] = -$l[24];\n    $l[25] = -$l[25];\n    $l[26] = -$l[26];\n    $l[27]\
    \ = -$l[27];\n    $l[28] = -$l[28];\n    $l[29] = -$l[29];\n    $l[30] = -$l[30];\n\
    \    $l[31] = -$l[31];\n    $l[32] = -$l[32];\n    $l[33] = -$l[33];\n    $l[34]\
    \ = -$l[34];\n    $l[35] = -$l[35];\n    $l[36] = -$l[36];\n    $l[37] = -$l[37];\n\
    \    $l[38] = -$l[38];\n    $l[39] = -$l[39];\n    $l[40] = -$l[40];\n    $l[41]\
    \ = -$l[41];\n    $l[42] = -$l[42];\n    $l[43] = -$l[43];\n    $l[44] = -$l[44];\n\
    \    $l[45] = ", "  $l = array_reverse($l);\n  $l[0] = reset($l);\n  $l[1] = end($l);\n\
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l =\
    \ array_slice($l, 0, count($l) - 1);\n    $l = array_reverse($l);\n    return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0]\
    \ > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return\
    \ $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_shift($l);\n    return $l === 0 &&\
    \ count($l) === count($l);\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[count($l)-1];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
