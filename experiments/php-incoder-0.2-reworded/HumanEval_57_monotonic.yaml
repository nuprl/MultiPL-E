name: HumanEval_57_monotonic
language: php
prompt: "<?php\n// Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic(array(1, 2, 4, 20))\n// true\n// >>> monotonic(array(1, 20, 4,\
  \ 10))\n// false\n// >>> monotonic(array(4, 1, 0, -10))\n// true\nfunction monotonic($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return monotonic(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 4, 10)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 4, 20)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 20, 4, 10)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 1, 0, -10))\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
  \ 1, 1, 0)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 5, 60)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 2, 3, 4, 5, 60)) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 9, 9, 9)) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $l = array_reverse($l);\n  $n = array_shift($l);\n  foreach ($l as\
    \ $i => $v) {\n    if ($v < $n) {\n      return false;\n    }\n    if ($v > $n)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\n", "  $l = array_reverse($l);\n\
    \  $n = count($l);\n  for ($i = 0; $i < $n; ++$i) {\n    if ($l[$i] < $l[$i -\
    \ 1]) {\n      return true;\n    }\n  }\n  return false;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[0] > $l[1] ? 1 : -1;\n    $l[1] = $l[1] > $l[2] ? 1 : -1;\n  \
    \  $l[2] = $l[2] > $l[3] ? 1 : -1;\n    $l[3] = $l[3] > $l[0] ? 1 : -1;\n    return\
    \ $l[0] === $l[1] && $l[1] === $l[2] && $l[2] === $l[3] && $l[3] === $l[0];\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    $m = count($l[0]);\n\
    \    for ($i = 0; $i < $n; ++$i) {\n        for ($j = 0; $j < $m; ++$j) {\n  \
    \          if ($l[$i][$j] !== $l[$i][$j + 1]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, count($l) - 1);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n  \
    \  $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_shift($l);\n    return $l === 0 && count($l) === count(array_reverse($l));\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    $l[1] = -$l[1];\n\
    \    $l[2] = -$l[2];\n    $l[3] = -$l[3];\n    $l[4] = -$l[4];\n    $l[5] = -$l[5];\n\
    \    $l[6] = -$l[6];\n    $l[7] = -$l[7];\n    $l[8] = -$l[8];\n    $l[9] = -$l[9];\n\
    \    $l[10] = -$l[10];\n    $l[11] = -$l[11];\n    $l[12] = -$l[12];\n    $l[13]\
    \ = -$l[13];\n    $l[14] = -$l[14];\n    $l[15] = -$l[15];\n    $l[16] = -$l[16];\n\
    \    $l[17] = -$l[17];\n    $l[18] = -$l[18];\n    $l[19] = -$l[19];\n    $l[20]\
    \ = -$l[20];\n    $l[21] = -$l[21];\n    $l[22] = -$l[22];\n    $l[23] = -$l[23];\n\
    \    $l[24] = -$l[24];\n    $l[25] = -$l[25];\n    $l[26] = -$l[26];\n    $l[27]\
    \ = -$l[27];\n    $l[28] = -$l[28];\n    $l[29] = -$l[29];\n    $l[30] = -$l[30];\n\
    \    $l[31] = -$l[31];\n    $l[32] = -$l[32];\n    $l[33] = -$l[33];\n    $l[34]\
    \ = -$l[34];\n    $l[35] = -$l[35];\n    $l[36] = -$l[36];\n    $l[37] = -$l[37];\n\
    \    $l[38] = -$l[38];\n    $l[39] = -$l[39];\n    $l[40] = -$l[40];\n    $l[41]\
    \ = -$l[41];\n    $l[42] = -$l[42];\n    $l[43] = -$l[43];\n    $l[44] = -$l[44];\n\
    \    $l[45] = ", "  $l = array_reverse($l);\n  $l[0] = reset($l);\n  $l[1] = end($l);\n\
    \  return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l =\
    \ array_slice($l, 0, count($l) - 1);\n    $l = array_reverse($l);\n    return\
    \ $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[0]\
    \ > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[0] > $l[1] ? $l[0] : $l[1];\n    return\
    \ $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_shift($l);\n    return $l === 0 &&\
    \ count($l) === count($l);\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 0, count($l) - 1);\n    $l[] = $l[0];\n    return $l[0] > $l[count($l) - 1];\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n \
    \   $i = 1;\n    foreach ($l as $v) {\n        if ($v !== $i) {\n            return\
    \ false;\n        }\n        $i++;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n \
    \   return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n  \
    \  $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", "  \
    \  $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>", "    $l =\
    \ array_reverse($l);\n    $l[0] = false;\n    $l[1] = false;\n    $l[2] = false;\n\
    \    $l[3] = false;\n    foreach ($l as $i => $v) {\n        if ($v) $l[$i] =\
    \ true;\n    }\n    return $l[0] || $l[1] || $l[2] || $l[3];\n}\n", "    $l =\
    \ array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $i => $v)\
    \ {\n        if ($v != $s) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n\
    \    return $l[0] > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $l = array_shift($l);\n    return $l === 0 && count($l) === count(array_unique($l));\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $k => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $k => $v)\
    \ {\n        if ($v < $s) {\n            return false;\n        }\n        if\
    \ ($v > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n\
    \    return true;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work for me. `monotonic(array(1, 20, 4, 10))` returns `true` but `monotonic(array(4,\
    \ 1, 0, -10))` returns `false`\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and\
    \ it works fine. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\n\
    Yes, I copied it exactly. I'm running PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works fine. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works fine. Are you sure you\
    \ copied the code correctly?\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", "  \
    \  $l = array_reverse($l);\n    $l = array_values($l);\n    $l = array_filter($l);\n\
    \    $l = array_map(function($x) {\n        return $x < 0 ? -$x : $x;\n    },\
    \ $l);\n    return $l == array_reverse($l);\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = reset($l);\n    return $l[0] > $l[count($l) - 1];\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10305278)\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question asking for clarification.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1, 2, 4, 20);\n$array = array_reverse($array);\n\
    $array[0] = reset($array);\n$array[1] > $array[0];\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10305278)\n\
    <|/ c |>\n<| c |>\nI added a comment to the question asking for clarification.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question asking for clarification.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l = array_slice($l, 1);\n    $l = array_reverse($l);\n    return $l[0] >\
    \ $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_shift($l);\n\
    \    return $l === 0 || $l === -INF || $l === INF;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_merge($l, array(0));\n    $l = array_unique($l);\n\
    \    return count($l) > 1;\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n\
    \  return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $n = count($l);\n    $m = count($l[0]);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            if ($l[$i][$j] > $l[$i][$j\
    \ + 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v !=\
    \ $s) {\n            return false;\n        }\n        if ($i == 0) {\n      \
    \      return true;\n        }\n        $s = $v;\n    }\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $i = null;\n    foreach ($l as $k => $v) {\n        if ($i !== null) {\n\
    \            if ($v < $i) {\n                return false;\n            }\n  \
    \          if ($v > $i) {\n                return true;\n            }\n     \
    \   }\n        $i = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $i =\
    \ 1;\n    foreach ($l as $n) {\n        if ($n < 0) {\n            $n = $n * -1;\n\
    \            $l[$i] = -$n;\n            $i++;\n        }\n        if ($n > 0)\
    \ {\n            $l[$i] = $n;\n            $i++;\n        }\n    }\n    return\
    \ $l[0] > 0 && $l[0] === $l[$i];\n}\n", "    $l = array_reverse($l);\n    $l[0]\
    \ = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n    foreach\
    \ ($l as $i => $v) {\n        if ($v === false) {\n            $l[$i] = true;\n\
    \        } else {\n            if ($v > $l[$i]) {\n                $l[$i] = $v;\n\
    \            }\n        }\n    }\n    return $l[0] === false && $l[1] === false\
    \ && $l[2] === false && $l[3] === false;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_shift($l);\n    return $l === 0 && count($l) === count($l);\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3]\
    \ = 0;\n    foreach ($l as $v) {\n        if ($v < $l[0]) {\n            $l[0]\
    \ = $v;\n        } elseif ($v > $l[3]) {\n            $l[3] = $v;\n        }\n\
    \    }\n    return $l[0] > $l[3];\n}\n", "    $l = array_reverse($l);\n    $l\
    \ = array_merge($l, $l);\n    $l = array_unique($l);\n    $l = array_map('current',\
    \ $l);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n\
    \    $l[4] = false;\n    $l[5] = false;\n    $l[6] = false;\n    $l[7] = false;\n\
    \    $l[8] = false;\n    $l[9] = false;\n    $l[10] = false;\n    $l[11] = false;\n\
    \    $l[12] = false;\n    $l[13] = false;\n    $l[14] = false;\n    $l[15] = false;\n\
    \    $l[16] = false;\n    $l[17] = false;\n    $l[18] = false;\n    $l[19] = false;\n\
    \    $l[20] = false;\n    $l[21] = false;\n    $l[22] = false;\n    $l[23] = false;\n\
    \    $l[24] = false;\n    $l[25] = false;\n    $l[26] = false;\n    $l[27] = false;\n\
    \    $l[28] = false;\n    $l[29] = false;\n    $l[30] = false;\n    $l[31] = false;\n\
    \    $l[32] = false;\n    $l[33] = false;\n    $l[34] = false;\n    $l[35] = false;\n\
    \    $l[36] = false;\n    $l[37] = false;\n    $l[38] = false;\n    $l[39] = false;\n\
    \    $l[40] = false;\n    $l[41] = false;\n    $l[42] = false;\n    $l[43] = false;\n\
    \    $l[44] = false;\n    $l[45] = false;\n    $l[46] = false;\n    $l[47] = false;\n\
    \    $l[48] = false;\n    $l[49] = false;\n    $l[50] = false;\n    $l[51] = false;\n\
    \    $l[52] = false;\n    $l[53] = false;\n    $l[54] = false;\n    $l[55] = false;\n\
    \    $l[56] = false;\n    $l[57] = false;\n    $l[58] = false;\n    $l[59] = false;\n\
    \    $l[60] = false;\n    $l[61] = false;\n    $l[62] = false;\n    $l[63] = false;\n\
    \    $l[64] = false;\n    $l[65] = false;\n    $l[66] = false;\n    $l[67] = false;\n\
    \    $l[68] = false;\n    $l[69] = false;\n    $l[70] = false;\n    $l[71] = false;\n\
    \    $l[72] = false;\n    $l[73] = false;\n    $l[74] = false;\n    $l[75] = false;\n",
  "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n",
  "    $l = array_reverse($l);\n    $i = null;\n    foreach ($l as $k => $v) {\n \
    \       if ($i !== null) {\n            if ($v < $i) {\n                return\
    \ false;\n            }\n            if ($v > $i) {\n                return true;\n\
    \            }\n        }\n        $i = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n    \
    \    }\n        if ($v > $s) {\n            return true;\n        }\n        $s\
    \ = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0]\
    \ = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n    $l[4]\
    \ = false;\n    $l[5] = false;\n    $l[6] = false;\n    $l[7] = false;\n    $l[8]\
    \ = false;\n    $l[9] = false;\n    $l[10] = false;\n    $l[11] = false;\n   \
    \ $l[12] = false;\n    $l[13] = false;\n    $l[14] = false;\n    $l[15] = false;\n\
    \    $l[16] = false;\n    $l[17] = false;\n    $l[18] = false;\n    $l[19] = false;\n\
    \    $l[20] = false;\n    $l[21] = false;\n    $l[22] = false;\n    $l[23] = false;\n\
    \    $l[24] = false;\n    $l[25] = false;\n    $l[26] = false;\n    $l[27] = false;\n\
    \    $l[28] = false;\n    $l[29] = false;\n    $l[30] = false;\n    $l[31] = false;\n\
    \    $l[32] = false;\n    $l[33] = false;\n    $l[34] = false;\n    $l[35] = false;\n\
    \    $l[36] = false;\n    $l[37] = false;\n    $l[38] = false;\n    $l[39] = false;\n\
    \    $l[40] = false;\n    $l[41] = false;\n    $l[42] = false;\n    $l[43] = false;\n\
    \    $l[44] = false;\n    $l[45] = false;\n    $l[46] = false;\n    $l[47] = false;\n\
    \    $l[48] = false;\n    $l[49] = false;\n    $l[50] = false;\n    $l[51] = false;\n\
    \    $l[52] = false;\n    $l[53] = false;\n    $l[54] = false;\n    $l[55] = false;\n\
    \    $l[56] = false;\n    $l[57] = false;\n    $l[58] = false;\n    $l[59] = false;\n\
    \    $l[60] = false;\n    $l[61] = false;\n    $l[62] = false;\n    $l[63] = false;\n\
    \    $l[64] = false;\n    $l[65] = false;\n    $l[66] = false;\n    $l[67] = false;\n\
    \    $l[68] = false;\n    $l[69] = false;\n    $l[70] = false;\n    $l[71] = false;\n\
    \    $l[72] = false;\n    $l[73] = false;\n    $l[74] = false;\n    $l[75] = false;\n",
  "    $l = array_reverse($l);\n    $s = $l[0];\n    foreach ($l as $k => $v) {\n\
    \        if ($v < $s) {\n            return false;\n        }\n        if ($v\
    \ > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n    return\
    \ true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2] = $l[3]\
    \ = 0;\n    foreach ($l as $v) {\n        if ($v < $l[0]) {\n            return\
    \ false;\n        } elseif ($v > $l[3]) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $l[0]\
    \ = reset($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $i = null;\n    foreach ($l as $k => $v) {\n\
    \        if ($i === null) {\n            $i = $k;\n        } elseif ($v < $l[$i])\
    \ {\n            $i = $k;\n        }\n    }\n    return $i === null;\n}\n", " \
    \   $l = array_reverse($l);\n    $i = null;\n    foreach ($l as $k => $v) {\n\
    \        if ($i === null) {\n            $i = $k;\n        }\n        if ($v !=\
    \ $l[$i]) {\n            return false;\n        }\n        $i++;\n    }\n    return\
    \ true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n  \
    \  return $l[0] > $l[count($l)-1];\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThis doesn't work for me. `monotonic(array(1, 2, 4, 20))` returns `true`\
    \ but `monotonic(array(1, 20, 4, 10))` returns `false`\n<|/ c |>\n<| c |>\n: It\
    \ works for me. `monotonic(array(1, 2, 4, 20))` returns `true` and `monotonic(array(1,\
    \ 20, 4, 10))` returns `false`\n<|/ c |>\n<| c |>\n: It works for me too. `monotonic(array(1,\
    \ 2, 4, 20))` returns `true` and `monotonic(array(1, 20, 4, 10))` returns `false`\n\
    <|/ c |>\n<| c |>\n: It works for me too. `monotonic(array(1, 2, 4, 20))` returns\
    \ `true` and `monotonic(array(1, 20, 4, 10))` returns `false`\n<|/ c |>\n<| c\
    \ |>\n: It works for me too. `monotonic(array(1, 2, 4, 20))` returns `true` and\
    \ `monotonic(array(1, 20, 4, 10))` returns `false`\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $l = array_reverse($l);\n  $l[0] = $l[1] = $l[2] = $l[3] = 0;\n\
    \  $i = 1;\n  foreach ($l as $v) {\n    if ($v < $l[i - 1]) {\n      return false;\n\
    \    }\n    if ($v > $l[i - 1]) {\n      return true;\n    }\n    if ($v == $l[i\
    \ - 1]) {\n      $i++;\n    }\n  }\n  return false;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_shift($l);\n    return $l === $l[0];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $e) {\n        if ($e < $s) {\n            return false;\n        }\n\
    \        $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n    return $l[0] >\
    \ $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = false;\n\
    \    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n    foreach ($l as\
    \ $i => $v) {\n        if ($v) $l[$i] = true;\n        else $l[$i] = false;\n\
    \    }\n    return $l[0];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1]\
    \ = $l[2] = $l[3] = 0;\n    $i = 1;\n    $j = 0;\n    $k = 0;\n    while ($i <\
    \ count($l)) {\n        if ($l[$i] < $l[$j]) {\n            $k = $i;\n       \
    \ } else if ($l[$i] > $l[$j]) {\n            $k = $j;\n        } else {\n    \
    \        $k = $i;\n        }\n        $i = $j + 1;\n        $j = $k;\n    }\n\
    \    return $l[$i] === $l[$j];\n}", "    $l = array_reverse($l);\n    $l[0] =\
    \ $l[1] = $l[2] = $l[3] = 0;\n    $i = 1;\n    foreach ($l as $n) {\n        if\
    \ ($n < 0) {\n            return false;\n        }\n        if ($n <= $i-1) {\n\
    \            return true;\n        }\n        $i++;\n    }\n    return false;\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $i => $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = false;\n\
    \    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n    foreach ($l as\
    \ $i => $v) {\n        if ($v) $l[$i] = true;\n    }\n    return $l[0] || $l[1]\
    \ || $l[2] || $l[3];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] >\
    \ $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_merge($l,\
    \ $l);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $i = null;\n    foreach ($l as $k => $v) {\n        if ($v < $i) {\n    \
    \        $i = $v;\n        }\n    }\n    return $i === null;\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this\
    \ solution, however it fails for arrays with more than two elements. I modified\
    \ it a little to make it work for arrays with more than two elements. I added\
    \ a third parameter to the function which determines the number of elements in\
    \ the array. Thanks for your help!\n<|/ c |>\n<| c |>\nI added a version that\
    \ works for arrays with more than two elements. Thanks for your help!\n<|/ c |>\n\
    <| a dscore=1 |>\nI modified the code from to work for arrays with more than two\
    \ elements. Thanks for your help!\n<code>", "    $l = array_reverse($l);\n   \
    \ $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n\
    \    foreach ($l as $i => $v) {\n        if ($v === false) {\n            $l[$i]\
    \ = true;\n        } else {\n            if ($v < $l[$i - 1]) {\n            \
    \    $l[$i] = true;\n            }\n        }\n    }\n    return !$l[0];\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1]\
    \ = $l[0] > $l[1] ? $l[0] : $l[1];\n    return $l[0] > $l[1];\n}\n", "    $l =\
    \ array_reverse($l);\n    $l = array_shift($l);\n    return $l === 0 && count($l)\
    \ === count(array_reverse($l));\n}\n", "    $l = array_reverse($l);\n    $n =\
    \ count($l);\n    $m = count($l) - 1;\n    if ($m == 0) return true;\n    if ($l[$m]\
    \ == $l[$n]) {\n        for ($i = $m; $i >= 0; --$i) {\n            if ($l[$i]\
    \ > $l[$m]) {\n                $l[$i] = $l[$m];\n            }\n        }\n  \
    \  } else {\n        for ($i = $m; $i >= 0; --$i) {\n            if ($l[$i] <\
    \ $l[$m]) {\n                $l[$i] = $l[$m];\n            }\n        }\n    }\n\
    \    return false;\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n\
    \    return $l[0] > $l[1];\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n\
    \  return $l[0] > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n    $l\
    \ = array_shift($l);\n    return $l === 0 && count($l) === count($l);\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n \
    \   $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l[0] = false;\n    $l[1] = false;\n    foreach\
    \ ($l as $i => $v) {\n        if ($v === false) {\n            $l[$i] = $v;\n\
    \        }\n    }\n    return $l[0] === false && $l[1] === false;\n}\n", "   \
    \ $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l)-1];\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l) - 1);\n\
    \    $l[] = $l[count($l) - 1];\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $n = count($l);\n    if ($n <= 1) {\n       \
    \ return true;\n    }\n    $m = $l[0];\n    for ($i = 1; $i < $n; ++$i) {\n  \
    \      if ($l[$i] < $m) {\n            $m = $l[$i];\n        }\n    }\n    return\
    \ $m >= $l[$n - 1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $n = count($l);\n    for ($i = 0;\
    \ $i < $n; ++$i) {\n        if ($l[$i] <= $l[$i + 1]) {\n            $l[$i + 1]\
    \ = $l[$i];\n        }\n    }\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = $l[1] = $l[2] = $l[3] = 0;\n    $n = count($l);\n    for ($i = 0;\
    \ $i < $n; ++$i) {\n        if ($l[$i] <= $l[$i + 1]) {\n            $l[$i + 1]\
    \ = $l[$i];\n        }\n    }\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_values($l);\n    $l = array_filter($l);\n    return $l !== array_reverse($l);\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n    \
    \    }\n        if ($v > $s) {\n            return true;\n        }\n        $s\
    \ = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $s =\
    \ array_shift($l);\n    foreach ($l as $v) {\n        if ($v < $s) {\n       \
    \     return false;\n        }\n        $s = $v;\n    }\n    return true;\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = reset($l);\n    return $l[0] >\
    \ $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1] = $l[2]\
    \ = $l[3] = 0;\n    $i = 1;\n    foreach ($l as $v) {\n        if ($v < $l[i -\
    \ 1]) {\n            return false;\n        }\n        if ($v > $l[i - 1]) {\n\
    \            return true;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_merge($l, $l);\n    $l = array_unique($l);\n\
    \    $l = array_map('current', $l);\n    return $l[0] > $l[count($l) - 1];\n}\n",
  "    $l = array_reverse($l);\n    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n  \
    \  foreach ($l as $v) {\n        if ($v < $s) {\n            return false;\n \
    \       }\n        if ($v > $s) {\n            return true;\n        }\n     \
    \   $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n  \
    \  $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", "  \
    \  $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] > $l[count($l)-1];\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n\
    \    $l[4] = false;\n    $l[5] = false;\n    $l[6] = false;\n    $l[7] = false;\n\
    \    $l[8] = false;\n    $l[9] = false;\n    $l[10] = false;\n    $l[11] = false;\n\
    \    $l[12] = false;\n    $l[13] = false;\n    $l[14] = false;\n    $l[15] = false;\n\
    \    $l[16] = false;\n    $l[17] = false;\n    $l[18] = false;\n    $l[19] = false;\n\
    \    $l[20] = false;\n    $l[21] = false;\n    $l[22] = false;\n    $l[23] = false;\n\
    \    $l[24] = false;\n    $l[25] = false;\n    $l[26] = false;\n    $l[27] = false;\n\
    \    $l[28] = false;\n    $l[29] = false;\n    $l[30] = false;\n    $l[31] = false;\n\
    \    $l[32] = false;\n    $l[33] = false;\n    $l[34] = false;\n    $l[35] = false;\n\
    \    $l[36] = false;\n    $l[37] = false;\n    $l[38] = false;\n    $l[39] = false;\n\
    \    $l[40] = false;\n    $l[41] = false;\n    $l[42] = false;\n    $l[43] = false;\n\
    \    $l[44] = false;\n    $l[45] = false;\n    $l[46] = false;\n    $l[47] = false;\n\
    \    $l[48] = false;\n    $l[49] = false;\n    $l[50] = false;\n    $l[51] = false;\n\
    \    $l[52] = false;\n    $l[53] = false;\n    $l[54] = false;\n    $l[55] = false;\n\
    \    $l[56] = false;\n    $l[57] = false;\n    $l[58] = false;\n    $l[59] = false;\n\
    \    $l[60] = false;\n    $l[61] = false;\n    $l[62] = false;\n    $l[63] = false;\n\
    \    $l[64] = false;\n    $l[65] = false;\n    $l[66] = false;\n    $l[67] = false;\n\
    \    $l[68] = false;\n    $l[69] = false;\n    $l[70] = false;\n    $l[71] = false;\n\
    \    $l[72] = false;\n    $l[73] = false;\n    $l[74] = false;\n    $l[75] = false;\n",
  "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $i =>\
    \ $v) {\n        if ($v < $s) {\n            return false;\n        }\n      \
    \  if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n   \
    \ }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $i = null;\n  \
    \  foreach ($l as $k => $v) {\n        if ($i === null) {\n            $i = $k;\n\
    \        } elseif ($v < $l[$i]) {\n            $i = $k;\n        }\n    }\n  \
    \  return $i === null;\n}\n", "    $l = array_reverse($l);\n    $l[0] = reset($l);\n\
    \    return $l[0] > $l[count($l)-1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $l[0] = $l[0] > $l[1] ? 1 : -1;\n    $l[1] = $l[1] > $l[2] ? 1 : -1;\n    $l[2]\
    \ = $l[2] > $l[3] ? 1 : -1;\n    $l[3] = $l[3] > $l[0] ? 1 : -1;\n    return $l[0]\
    \ === 1 && $l[1] === 1 && $l[2] === 1 && $l[3] === 1;\n}\n", "    $l = array_reverse($l);\n\
    \    $s = $l[0];\n    $e = $l[count($l)-1];\n    return ($e < $s) || ($s == $e\
    \ && $l[0] > $l[count($l)-1]);\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    $l[0] = $l[0] -\
    \ 1;\n    return $l[0] > 0 && $l[0] < count($l) - 1;\n}\n", "  $l = array_reverse($l);\n\
    \  $l[0] = array_shift($l);\n  return $l[0] > $l[count($l) - 1];\n}\n", "    $l\
    \ = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $k => $v)\
    \ {\n        if ($v < $s) {\n            return false;\n        }\n        if\
    \ ($v > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $i = null;\n    foreach ($l as $v) {\n        if ($i === null) {\n      \
    \      $i = $v;\n        } elseif ($v < $i) {\n            return false;\n   \
    \     } elseif ($v > $i) {\n            return true;\n        }\n    }\n    return\
    \ $i === null;\n}\n", "    $l = array_reverse($l);\n    $l = array_filter($l);\n\
    \    return $l !== $l;\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $i => $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        if ($e > $s) {\n            return true;\n        }\n    \
    \    $s = $e;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $s = array_shift($l);\n    foreach ($l as $k => $v) {\n        if ($v < $s)\
    \ {\n            return false;\n        }\n        if ($v > $s) {\n          \
    \  return true;\n        }\n        $s = $v;\n    }\n    return true;\n}\n", " \
    \   $l = array_reverse($l);\n    $n = count($l);\n    for ($i = 1; $i < $n; $i++)\
    \ {\n        if ($l[$i] - $l[$i - 1] < 1) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = array_shift($l);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \   $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $e)\
    \ {\n        if ($e < $s) {\n            return false;\n        }\n        $s\
    \ = $e;\n    }\n    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0] =\
    \ false;\n  $l[1] = false;\n  foreach ($l as $i => $v) {\n    if ($v) break;\n\
    \  }\n  return $i === 0;\n}\n", "  $l = array_reverse($l);\n  $l[0] = false;\n\
    \  $l[1] = false;\n  $l[2] = false;\n  $l[3] = false;\n  $l[4] = false;\n  $l[5]\
    \ = false;\n  $l[6] = false;\n  $l[7] = false;\n  $l[8] = false;\n  $l[9] = false;\n\
    \  $l[10] = false;\n  $l[11] = false;\n  $l[12] = false;\n  $l[13] = false;\n\
    \  $l[14] = false;\n  $l[15] = false;\n  $l[16] = false;\n  $l[17] = false;\n\
    \  $l[18] = false;\n  $l[19] = false;\n  $l[20] = false;\n  $l[21] = false;\n\
    \  $l[22] = false;\n  $l[23] = false;\n  $l[24] = false;\n  $l[25] = false;\n\
    \  $l[26] = false;\n  $l[27] = false;\n  $l[28] = false;\n  $l[29] = false;\n\
    \  $l[30] = false;\n  $l[31] = false;\n  $l[32] = false;\n  $l[33] = false;\n\
    \  $l[34] = false;\n  $l[35] = false;\n  $l[36] = false;\n  $l[37] = false;\n\
    \  $l[38] = false;\n  $l[39] = false;\n  $l[40] = false;\n  $l[41] = false;\n\
    \  $l[42] = false;\n  $l[43] = false;\n  $l[44] = false;\n  $l[45] = false;\n\
    \  $l[46] = false;\n  $l[47] = false;\n  $l[48] = false;\n  $l[49] = false;\n\
    \  $l[50] = false;\n  $l[51] = false;\n  $l[52] = false;\n  $l[53] = false;\n\
    \  $l[54] = false;\n  $l[55] = false;\n  $l[56] = false;\n  $l[57] = false;\n\
    \  $l[58] = false;\n  $l[59] = false;\n  $l[60] = false;\n  $l[61] = false;\n\
    \  $l[62] = false;\n  $l[63] = false;\n  $l[64] = false;\n  $l[65] = false;\n\
    \  $l[66] = false;\n  $l[67] = false;\n  $l[68] = false;\n  $l[69] = false;\n\
    \  $l[70] = false;\n  $l[71] = false;\n  $l[72] = false;\n  $l[73] = false;\n\
    \  $l[74] = false;\n  $l[75] = false;\n", "    $l = array_reverse($l);\n    $l\
    \ = array_values($l);\n    $l = array_filter($l);\n    return $l !== $l;\n}\n",
  "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0] > $l[1];\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n\
    <code>", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n    \
    \    }\n        if ($v > $s) {\n            return true;\n        }\n        $s\
    \ = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0]\
    \ = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n    $l[4]\
    \ = false;\n    $l[5] = false;\n    $l[6] = false;\n    $l[7] = false;\n    $l[8]\
    \ = false;\n    $l[9] = false;\n    $l[10] = false;\n    $l[11] = false;\n   \
    \ $l[12] = false;\n    $l[13] = false;\n    $l[14] = false;\n    $l[15] = false;\n\
    \    $l[16] = false;\n    $l[17] = false;\n    $l[18] = false;\n    $l[19] = false;\n\
    \    $l[20] = false;\n    $l[21] = false;\n    $l[22] = false;\n    $l[23] = false;\n\
    \    $l[24] = false;\n    $l[25] = false;\n    $l[26] = false;\n    $l[27] = false;\n\
    \    $l[28] = false;\n    $l[29] = false;\n    $l[30] = false;\n    $l[31] = false;\n\
    \    $l[32] = false;\n    $l[33] = false;\n    $l[34] = false;\n    $l[35] = false;\n\
    \    $l[36] = false;\n    $l[37] = false;\n    $l[38] = false;\n    $l[39] = false;\n\
    \    $l[40] = false;\n    $l[41] = false;\n    $l[42] = false;\n    $l[43] = false;\n\
    \    $l[44] = false;\n    $l[45] = false;\n    $l[46] = false;\n    $l[47] = false;\n\
    \    $l[48] = false;\n    $l[49] = false;\n    $l[50] = false;\n    $l[51] = false;\n\
    \    $l[52] = false;\n    $l[53] = false;\n    $l[54] = false;\n    $l[55] = false;\n\
    \    $l[56] = false;\n    $l[57] = false;\n    $l[58] = false;\n    $l[59] = false;\n\
    \    $l[60] = false;\n    $l[61] = false;\n    $l[62] = false;\n    $l[63] = false;\n\
    \    $l[64] = false;\n    $l[65] = false;\n    $l[66] = false;\n    $l[67] = false;\n\
    \    $l[68] = false;\n    $l[69] = false;\n    $l[70] = false;\n    $l[71] = false;\n\
    \    $l[72] = false;\n    $l[73] = false;\n    $l[74] = false;\n    $l[75] = false;\n",
  "    $l = array_reverse($l);\n    $l[0] = reset($l);\n    return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l[0] = false;\n    $l[1] = false;\n\
    \    $l[2] = false;\n    $l[3] = false;\n    $l[4] = false;\n    $l[5] = false;\n\
    \    $l[6] = false;\n    $l[7] = false;\n    $l[8] = false;\n    $l[9] = false;\n\
    \    $l[10] = false;\n    $l[11] = false;\n    $l[12] = false;\n    $l[13] = false;\n\
    \    $l[14] = false;\n    $l[15] = false;\n    $l[16] = false;\n    $l[17] = false;\n\
    \    $l[18] = false;\n    $l[19] = false;\n    $l[20] = false;\n    $l[21] = false;\n\
    \    $l[22] = false;\n    $l[23] = false;\n    $l[24] = false;\n    $l[25] = false;\n\
    \    $l[26] = false;\n    $l[27] = false;\n    $l[28] = false;\n    $l[29] = false;\n\
    \    $l[30] = false;\n    $l[31] = false;\n    $l[32] = false;\n    $l[33] = false;\n\
    \    $l[34] = false;\n    $l[35] = false;\n    $l[36] = false;\n    $l[37] = false;\n\
    \    $l[38] = false;\n    $l[39] = false;\n    $l[40] = false;\n    $l[41] = false;\n\
    \    $l[42] = false;\n    $l[43] = false;\n    $l[44] = false;\n    $l[45] = false;\n\
    \    $l[46] = false;\n    $l[47] = false;\n    $l[48] = false;\n    $l[49] = false;\n\
    \    $l[50] = false;\n    $l[51] = false;\n    $l[52] = false;\n    $l[53] = false;\n\
    \    $l[54] = false;\n    $l[55] = false;\n    $l[56] = false;\n    $l[57] = false;\n\
    \    $l[58] = false;\n    $l[59] = false;\n    $l[60] = false;\n    $l[61] = false;\n\
    \    $l[62] = false;\n    $l[63] = false;\n    $l[64] = false;\n    $l[65] = false;\n\
    \    $l[66] = false;\n    $l[67] = false;\n    $l[68] = false;\n    $l[69] = false;\n\
    \    $l[70] = false;\n    $l[71] = false;\n    $l[72] = false;\n    $l[73] = false;\n\
    \    $l[74] = false;\n    $l[75] = false;\n", "    $l = array_reverse($l);\n \
    \   $s = array_shift($l);\n    foreach ($l as $i => $v) {\n        if ($v != $s)\
    \ {\n            return false;\n        }\n        $s = $v;\n    }\n    return\
    \ true;\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $e) {\n        if ($e < $s) {\n            return false;\n        }\n\
    \        if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = $l[1]\
    \ = $l[2] = $l[3] = 0;\n    $n = count($l);\n    for ($i = 0; $i < $n; ++$i) {\n\
    \        if ($l[$i] <= $l[$i + 1]) {\n            $l[$i + 1] = $l[$i];\n     \
    \   }\n    }\n    return $l[0] <= $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n    return $l[0] >\
    \ $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach\
    \ ($l as $v) {\n        if ($v < $s) {\n            return false;\n        }\n\
    \        if ($v > $s) {\n            return true;\n        }\n        $s = $v;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to make it work for multidimensional\
    \ arrays?\n<|/ c |>\n<| c |>\n: Sure, just add another loop. `foreach($l as $key\
    \ => $value) { foreach($value as $subkey => $subvalue) { /* ... */ } }`\n<|/ c\
    \ |>\n<| c |>\n: I added a version that works for multidimensional arrays.\n<|/\
    \ c |>\n<| c |>\n: I added a version that works for multidimensional arrays.\n\
    <|/ c |>\n<| c |>\n: I added a version that works for multidimensional arrays.\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>", "    $l = array_reverse($l);\n   \
    \ $l[0] = false;\n    $l[1] = false;\n    $l[2] = false;\n    $l[3] = false;\n\
    \    $l[4] = false;\n    $l[5] = false;\n    $l[6] = false;\n    $l[7] = false;\n\
    \    $l[8] = false;\n    $l[9] = false;\n    $l[10] = false;\n    $l[11] = false;\n\
    \    $l[12] = false;\n    $l[13] = false;\n    $l[14] = false;\n    $l[15] = false;\n\
    \    $l[16] = false;\n    $l[17] = false;\n    $l[18] = false;\n    $l[19] = false;\n\
    \    $l[20] = false;\n    $l[21] = false;\n    $l[22] = false;\n    $l[23] = false;\n\
    \    $l[24] = false;\n    $l[25] = false;\n    $l[26] = false;\n    $l[27] = false;\n\
    \    $l[28] = false;\n    $l[29] = false;\n    $l[30] = false;\n    $l[31] = false;\n\
    \    $l[32] = false;\n    $l[33] = false;\n    $l[34] = false;\n    $l[35] = false;\n\
    \    $l[36] = false;\n    $l[37] = false;\n    $l[38] = false;\n    $l[39] = false;\n\
    \    $l[40] = false;\n    $l[41] = false;\n    $l[42] = false;\n    $l[43] = false;\n\
    \    $l[44] = false;\n    $l[45] = false;\n    $l[46] = false;\n    $l[47] = false;\n\
    \    $l[48] = false;\n    $l[49] = false;\n    $l[50] = false;\n    $l[51] = false;\n\
    \    $l[52] = false;\n    $l[53] = false;\n    $l[54] = false;\n    $l[55] = false;\n\
    \    $l[56] = false;\n    $l[57] = false;\n    $l[58] = false;\n    $l[59] = false;\n\
    \    $l[60] = false;\n    $l[61] = false;\n    $l[62] = false;\n    $l[63] = false;\n\
    \    $l[64] = false;\n    $l[65] = false;\n    $l[66] = false;\n    $l[67] = false;\n\
    \    $l[68] = false;\n    $l[69] = false;\n    $l[70] = false;\n    $l[71] = false;\n\
    \    $l[72] = false;\n    $l[73] = false;\n    $l[74] = false;\n    $l[75] = false;\n",
  "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $e)\
    \ {\n        if ($e < $s) {\n            return false;\n        }\n        if\
    \ ($e > $s) {\n            return true;\n        }\n        $s = $e;\n    }\n\
    \    return true;\n}\n", "  $l = array_reverse($l);\n  $l[0] = array_shift($l);\n\
    \  return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n   \
    \ $l = array_reverse($l);\n    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $e) {\n        if ($e < $s) {\n\
    \            return false;\n        }\n        if ($e > $s) {\n            return\
    \ true;\n        }\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $v) {\n        if ($v < $s) {\n\
    \            return false;\n        }\n        $s = $v;\n    }\n    return true;\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    return $l[0]\
    \ > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n  \
    \  foreach ($l as $v) {\n        if ($v < $s) {\n            return false;\n \
    \       }\n        $s = max($s, $v);\n    }\n    return true;\n}\n", "    $l =\
    \ array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l as $i => $v)\
    \ {\n        if ($v < $s) {\n            return false;\n        }\n        if\
    \ ($v > $s) {\n            return true;\n        }\n        $s = $v;\n    }\n\
    \    return true;\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n \
    \   $m = count($l[0]);\n    if ($m === 0) {\n        return true;\n    }\n   \
    \ if ($n === 0) {\n        return false;\n    }\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            if ($l[$i][$j] > $l[$i][$j\
    \ + 1]) {\n                return false;\n            }\n        }\n    }\n  \
    \  return true;\n}\n", "    $l = array_reverse($l);\n    $l[0] = reset($l);\n\
    \    return $l[0] > $l[count($l) - 1];\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = $l[0] > $l[1] ? $l[1] : $l[0];\n    $l[1] = $l[1] > $l[2] ? $l[2]\
    \ : $l[1];\n    $l[2] = $l[2] > $l[3] ? $l[3] : $l[2];\n    $l[3] = $l[3] > $l[0]\
    \ ? $l[0] : $l[3];\n    return $l[0] > $l[1] && $l[1] > $l[2] && $l[2] > $l[3];\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = false;\n    $l[1] = false;\n \
    \   $l[2] = false;\n    $l[3] = false;\n    $l[4] = false;\n    $l[5] = false;\n\
    \    $l[6] = false;\n    $l[7] = false;\n    $l[8] = false;\n    $l[9] = false;\n\
    \    $l[10] = false;\n    $l[11] = false;\n    $l[12] = false;\n    $l[13] = false;\n\
    \    $l[14] = false;\n    $l[15] = false;\n    $l[16] = false;\n    $l[17] = false;\n\
    \    $l[18] = false;\n    $l[19] = false;\n    $l[20] = false;\n    $l[21] = false;\n\
    \    $l[22] = false;\n    $l[23] = false;\n    $l[24] = false;\n    $l[25] = false;\n\
    \    $l[26] = false;\n    $l[27] = false;\n    $l[28] = false;\n    $l[29] = false;\n\
    \    $l[30] = false;\n    $l[31] = false;\n    $l[32] = false;\n    $l[33] = false;\n\
    \    $l[34] = false;\n    $l[35] = false;\n    $l[36] = false;\n    $l[37] = false;\n\
    \    $l[38] = false;\n    $l[39] = false;\n    $l[40] = false;\n    $l[41] = false;\n\
    \    $l[42] = false;\n    $l[43] = false;\n    $l[44] = false;\n    $l[45] = false;\n\
    \    $l[46] = false;\n    $l[47] = false;\n    $l[48] = false;\n    $l[49] = false;\n\
    \    $l[50] = false;\n    $l[51] = false;\n    $l[52] = false;\n    $l[53] = false;\n\
    \    $l[54] = false;\n    $l[55] = false;\n    $l[56] = false;\n    $l[57] = false;\n\
    \    $l[58] = false;\n    $l[59] = false;\n    $l[60] = false;\n    $l[61] = false;\n\
    \    $l[62] = false;\n    $l[63] = false;\n    $l[64] = false;\n    $l[65] = false;\n\
    \    $l[66] = false;\n    $l[67] = false;\n    $l[68] = false;\n    $l[69] = false;\n\
    \    $l[70] = false;\n    $l[71] = false;\n    $l[72] = false;\n    $l[73] = false;\n\
    \    $l[74] = false;\n    $l[75] = false;\n", "    $l = array_reverse($l);\n \
    \   $l = array_slice($l, 1);\n    return $l[0] > $l[count($l) - 1];\n}\n", " \
    \ $l = array_reverse($l);\n  $l[0] = array_shift($l);\n  return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n\
    }\n", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $", "    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $l = array_reverse($l);\n\
    \    $l = array_reverse($l);\n    $l = array_reverse($l);\n    $", "    $l = array_reverse($l);\n\
    \    $s = array_shift($l);\n    foreach ($l as $v) {\n        if ($s < $v) {\n\
    \            $s = $v;\n        }\n    }\n    return $s < 0;\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_shift($l);\n    return $l === 0 || $l === -INF || $l === INF;\n\
    }\n", "  $l = array_reverse($l);\n  $l[0] = reset($l);\n  return $l[0] > $l[count($l)\
    \ - 1];\n}\n", "    $l = array_reverse($l);\n    $l = array_values($l);\n    $l\
    \ = array_filter($l);\n    return $l !== $l;\n}\n", "    $l = array_reverse($l);\n\
    \    $l[0] = false;\n    $l[1] = false;\n    foreach ($l as $i => $v) {\n    \
    \    if ($v) $l[$i] = $v > $l[$i];\n    }\n    return $l[0];\n}\n", "    $l =\
    \ array_reverse($l);\n    $l[0] = -$l[0];\n    return $l[0] > $l[1];\n}\n", " \
    \   $l = array_reverse($l);\n    $l = array_slice($l, 1);\n    $l = array_reverse($l);\n\
    \    return $l[0] > $l[1];\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $k => $v) {\n        if ($v < $s) {\n            return false;\n\
    \        }\n        if ($v > $s) {\n            return true;\n        }\n    \
    \    $s = $v;\n    }\n    return true;\n}\n", "    $l = array_reverse($l);\n \
    \   $l[0] = array_shift($l);\n    return $l[0] > $l[count($l)-1];\n}\n", "  $l\
    \ = array_reverse($l);\n  $n = count($l);\n  for ($i = 0; $i < $n; ++$i) {\n \
    \   if ($l[$i] < $l[$i - 1]) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "    $l = array_reverse($l);\n    $l[0] = false;\n    $l[1] = false;\n \
    \   $l[2] = false;\n    $l[3] = false;\n    foreach ($l as $i => $v) {\n     \
    \   if ($v) $l[$i] = true;\n    }\n    return $l[0] || $l[1] || $l[2] || $l[3];\n\
    }\n", "    $l = array_reverse($l);\n    $i = null;\n    foreach ($l as $k => $v)\
    \ {\n        if ($v === $i) {\n            $l[$k] = $k;\n        }\n        $i\
    \ = $v;\n    }\n    return $l === $l;\n}\n", "    $l = array_reverse($l);\n  \
    \  $l = array_shift($l);\n    return $l === 0 || $l === -INF || $l === INF;\n\
    }\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n    foreach ($l\
    \ as $e) {\n        if ($e < $s) {\n            return false;\n        }\n   \
    \     if ($e > $s) {\n            return true;\n        }\n        $s = $e;\n\
    \    }\n    return true;\n}\n", "    $l = array_reverse($l);\n    $s = array_shift($l);\n\
    \    foreach ($l as $e) {\n        if ($e < $s) {\n            return false;\n\
    \        }\n        $s = $e;\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
