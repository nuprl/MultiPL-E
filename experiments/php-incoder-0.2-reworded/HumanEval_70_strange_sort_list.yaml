name: HumanEval_70_strange_sort_list
language: php
prompt: "<?php\n// Given array of integers, return array in strange order.\n// Strange\
  \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
  \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1,\
  \ 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n\
  // array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return strange_sort_list(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
  \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
  \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
  \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $min = min($lst);\n    $max = max($lst);\n    $ret = [];\n    foreach\
    \ ($lst as $item) {\n        if ($item == $min) {\n            $ret[] = $min;\n\
    \        } elseif ($item == $max) {\n            $ret[] = $max;\n        } else\
    \ {\n            $ret[] = $item;\n        }\n    }\n    return $ret;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $array = [\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n\
    \    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 =>\
    \ 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n\
    \    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n \
    \   22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n  \
    \  27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n   \
    \ 32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37\
    \ => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 =>\
    \ 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n\
    \    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n \
    \   53 => 53,\n    54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n  \
    \  58 => 58,\n    59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n   \
    \ 63 => 63,\n    64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n    68\
    \ => 68,\n    69 => 69,\n    70 => 70,\n    7", "    $sorted = array();\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value) {\n\
    \        if ($value < $min) {\n            $sorted[] = $min;\n            $min\
    \ = $value;\n        } elseif ($value > $max) {\n            $sorted[] = $max;\n\
    \            $max = $value;\n        } else {\n            $sorted[] = $value;\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=sorting,arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>", "    $sorted = array();\n    foreach ($lst as\
    \ $key => $value) {\n        $sorted[$key] = $value;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't work for me. `strange_sort_list(array(1, 2, 3, 4))` returns `array(1,\
    \ 4, 2, 3)`.\n<|/ c |>\n<| c |>\nIt works, I tested it before posting it.  What\
    \ version of PHP are you using?\n<|/ c |>\n<| c |>\nPHP 5.3.10-1ubuntu3.11 with\
    \ Suhosin-Patch (cli) (built: Nov 18 2010 13:48:26)\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Nov 18 2010 13:48:26)\
    \ and it works.  What version of PHP are you using?\n<|/ c |>\n<| c |>\nPHP 5.3.10-1ubuntu3.11\
    \ with Suhosin-Patch (cli) (built: Nov 18 2010 13:48:26)\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $sorted = array();\n    $sorted = array_merge($sorted, $lst);\n\
    \    $sorted = array_merge($sorted, array_reverse($lst));\n    return $sorted;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array();\n\
    $array[] = array('id' => 1, 'name' => 'John');\n$array[] = array('id' => 2, 'name'\
    \ => 'Jane');\n$array[] = array('id' => 3, 'name' => 'Jack');\n$array[] = array('id'\
    \ => 4, 'name' => 'Jill');\n$array[] = array('id' => 5, 'name' => 'Jack');\n$array[]\
    \ = array('id' => 6, 'name' => 'Jill');\n$array[] = array('id' => 7, 'name' =>\
    \ 'Jane');\n$array[] = array('id' => 8, 'name' => 'John');\n$array[] = array('id'\
    \ => 9, 'name' => 'Jack');\n$array[] = array('id' => 10, 'name' => 'Jill');\n\
    $array[] = array('id' => 11, 'name' => 'Jack');\n$array[] = array('id' => 12,\
    \ 'name' => 'Jill');\n$array[] = array('id' => 13, 'name' => 'Jane');\n$array[]\
    \ = array('id' => 14, 'name' => 'John');\n$array[] = array('id' => 15, 'name'\
    \ => 'Jack');\n$array[] = array('id' => 16, 'name' => 'Jill');\n$array[] = array('id'\
    \ => 17, 'name' => 'Jack');\n$array[] = array('id' => 18, 'name' => 'Jill');\n\
    $array[] = array('id' => 19, 'name' => 'Jack');\n$array[] = array('id' => 20,\
    \ 'name' => 'Jill');\n$array[] = array('id' => 21, 'name' => 'Jack');\n$array[]\
    \ = array('id' => 22, 'name' => 'Jill');\n$array[] = array('id' => 23, 'name'\
    \ => 'Jack');\n$array[] = array('id' => 24, 'name' => 'Jill');\n$array[] = array('id'\
    \ => 25, 'name' => 'Jack');\n$array[] = array('id' => 26, 'name' => 'Jill');\n\
    $array[] = array('id' => 27, 'name' => 'Jack');\n$array[] = array('id' => 28,\
    \ 'name' => 'Jill');\n$array[] = array('id' => 29", "  $min = min($lst);\n  $max\
    \ = max($lst);\n  $lst = array_map(function($v) use ($min, $max) {\n    return\
    \ $v < $min ? $min : $v > $max ? $max : $v;\n  }, $lst);\n  return $lst;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$arr1 = array();\n$arr2 = array();\n$arr3 =\
    \ array();\n$arr4 = array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n\
    $arr8 = array();\n$arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12\
    \ = array();\n$arr13 = array();\n$arr14 = array();\n$arr15 = array();\n$arr16\
    \ = array();\n$arr17 = array();\n$arr18 = array();\n$arr19 = array();\n$arr20\
    \ = array();\n$arr21 = array();\n$arr22 = array();\n$arr23 = array();\n$arr24\
    \ = array();\n$arr25 = array();\n$arr26 = array();\n$arr27 = array();\n$arr28\
    \ = array();\n$arr29 = array();\n$arr30 = array();\n$arr31 = array();\n$arr32\
    \ = array();\n$arr33 = array();\n$arr34 = array();\n$arr35 = array();\n$arr36\
    \ = array();\n$arr37 = array();\n$arr38 = array();\n$arr39 = array();\n$arr40\
    \ = array();\n$arr41 = array();\n$arr42 = array();\n$arr43 = array();\n$arr44\
    \ = array();\n$arr45 = array();\n$arr46 = array();\n$arr47 = array();\n$arr48\
    \ = array();\n$arr49 = array();\n$arr50 = array();\n$arr51 = array();\n$arr52\
    \ = array();\n$arr53 = array();\n$arr54 = array();\n$arr55 = array();\n$arr56\
    \ = array();\n$arr57 = array();\n$arr58 = array();\n$arr59 = array();\n$arr60\
    \ = array();\n$arr61 = array", "  $sorted = array();\n  foreach ($lst as $key\
    \ => $value) {\n    $sorted[$key] = $value;\n  }\n  array_multisort($sorted, SORT_DESC,\
    \ $lst);\n  return $lst;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=2\
    \ |>\n<code>", "    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n\
    \    foreach ($lst as $key => $value) {\n        if ($min == $max) {\n       \
    \     $result[] = $value;\n        } else {\n            $result[] = $value;\n\
    \            $result[] = $min;\n            $result[] = $max;\n        }\n   \
    \ }\n    return $result;\n}\n", "  $sorted = array();\n  $min = min($lst);\n \
    \ $max = max($lst);\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $sorted[] = $min;\n      $min = $value;\n    } else if ($value > $max)\
    \ {\n      $sorted[] = $max;\n      $max = $value;\n    } else {\n      $sorted[]\
    \ = $value;\n    }\n  }\n  return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$array = array(1, 2, 3, 4);\n$array2 = array(1,\
    \ 4, 2, 3);\n$array3 = array();\n\n$array3 = $array;\n$array3[] = $array2;\n$array3[]\
    \ = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[] = $array2;\n$array3[] = $array;\n$array3[] = $array2;\n\
    $array3[] = $array;\n$array3[]", "  $sorted = array();\n  $min = min($lst);\n\
    \  $max = max($lst);\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $sorted[] = $min;\n      $min = $value;\n    } else if ($value > $max)\
    \ {\n      $sorted[] = $max;\n      $max = $value;\n    } else {\n      $sorted[]\
    \ = $value;\n    }\n  }\n  return $sorted;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have duplicate values.\n<|/ c |>\n<| c\
    \ |>\nI believe this would work if you had a sorted array and you just wanted\
    \ to rearrange the values into a new array in the order of the original array.\
    \ However, the OP wants to rearrange the array in place and preserve the original\
    \ array ordering.\n<|/ c |>\n<| a |>\n<code>", "    $sorted = array();\n    $min\
    \ = $lst[0];\n    $max = $lst[0];\n    foreach ($lst as $item) {\n        if ($item\
    \ < $min) {\n            $min = $item;\n        } else if ($item > $max) {\n \
    \           $max = $item;\n        }\n    }\n    $sorted = array_merge($sorted,\
    \ array($min));\n    foreach ($lst as $item) {\n        if ($item == $min) {\n\
    \            $sorted = array_merge($sorted, array($item));\n        } else if\
    \ ($item == $max) {\n            $sorted = array_merge($sorted, array($item));\n\
    \        } else if ($item < $min) {\n            $sorted = array_merge($sorted,\
    \ array($item));\n        } else if ($item > $max) {\n            $sorted = array_merge($sorted,\
    \ array($item));\n        }\n    }\n    $sorted = array_merge($sorted, array($max));\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,sorting |>\n\
    <code>", "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item < $min) {\n            $sorted[]\
    \ = $min;\n        } else if ($item > $max) {\n            $sorted[] = $max;\n\
    \        } else {\n            $sorted[] = $item;\n        }\n    }\n    return\
    \ $sorted;\n}\n", "  $sorted = array();\n  $min = $lst[0];\n  $max = $lst[0];\n\
    \  foreach ($lst as $item) {\n    if ($item < $min) {\n      $min = $item;\n \
    \   }\n    if ($item > $max) {\n      $max = $item;\n    }\n  }\n  while ($min\
    \ < $max) {\n    $sorted[] = $min;\n    $min++;\n    $sorted[] = $max;\n    $max--;\n\
    \  }\n  return $sorted;\n}\n", "    $min = min($lst);\n    $max = max($lst);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max($min, $max);\n\
    \    $min = min($min, $max);\n    $max = max($min, $max);\n    $min = min($min,\
    \ $max);\n    $max = max($min, $max);\n    $min = min($min, $max);\n    $max =\
    \ max($min, $max);\n    $min = min($min, $max);\n    $max = max(", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $result = array();\n  foreach ($lst as $key => $value)\
    \ {\n    if ($value < $min) {\n      $result[] = $min;\n      $min = $value;\n\
    \    } else if ($value > $max) {\n      $result[] = $max;\n      $max = $value;\n\
    \    } else {\n      $result[] = $value;\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>", "  $sorted = array();\n\
    \  $min = min($lst);\n  $max = max($lst);\n  foreach ($lst as $item) {\n    if\
    \ ($item == $min) {\n      $sorted[] = $min;\n    } else if ($item == $max) {\n\
    \      $sorted[] = $max;\n    } else {\n      $sorted[] = $item;\n    }\n  }\n\
    \  return $sorted;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr2 = array_chunk($arr,2);\n$arr3\
    \ = array_chunk($arr2,2);\n$arr4 = array_chunk($arr3,2);\n$arr5 = array_chunk($arr4,2);\n\
    $arr6 = array_chunk($arr5,2);\n$arr7 = array_chunk($arr6,2);\n$arr8 = array_chunk($arr7,2);\n\
    $arr9 = array_chunk($arr8,2);\n$arr10 = array_chunk($arr9,2);\n$arr11 = array_chunk($arr10,2);\n\
    $arr12 = array_chunk($arr11,2);\n$arr13 = array_chunk($arr12,2);\n$arr14 = array_chunk($arr13,2);\n\
    $arr15 = array_chunk($arr14,2);\n$arr16 = array_chunk($arr15,2);\n$arr17 = array_chunk($arr16,2);\n\
    $arr18 = array_chunk($arr17,2);\n$arr19 = array_chunk($arr18,2);\n$arr20 = array_chunk($arr19,2);\n\
    $arr21 = array_chunk($arr20,2);\n$arr22 = array_chunk($arr21,2);\n$arr23 = array_chunk($arr22,2);\n\
    $arr24 = array_chunk($arr23,2);\n$arr25 = array_chunk($arr24,2);\n$arr26 = array_chunk($arr25,2);\n\
    $arr27 = array_chunk($arr26,2);\n$arr28 = array_chunk($arr27,2);\n$arr29 = array_chunk($arr28,2);\n\
    $arr30 = array_chunk($arr29,2);\n$arr31 = array_chunk($arr30,2);\n$arr32 = array_chunk($arr31,2);\n\
    $arr33 = array_chunk($arr32,2);\n$arr34 = array_chunk($arr33,2);\n$arr35 = array_chunk($arr34,2);\n\
    $arr36 = array_chunk($arr35,2);\n$arr37 = array_chunk($arr36,2);\n$arr38 = array_chunk($arr37,2);\n\
    $arr39", "    $sorted = array();\n    $min = min($lst);\n    $max = max($lst);\n\
    \    foreach ($lst as $key => $value) {\n        if ($value < $min) {\n      \
    \      $sorted[] = $min;\n            $min = $value;\n        } elseif ($value\
    \ > $max) {\n            $sorted[] = $max;\n            $max = $value;\n     \
    \   } else {\n            $sorted[] = $value;\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if the array is empty\
    \ or has only one element. `min` and `max` return `null` when called on an empty\
    \ array.\n<|/ c |>\n<| c |>\nYes, I know. That's why I wrote \"Given array of\
    \ integers\". Anyway, I added a solution that works with empty and single element\
    \ arrays.\n<|/ c |>\n<| c |>\nI added a solution that works with empty and single\
    \ element arrays.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "    $sorted = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    foreach ($lst as $key => $value)\
    \ {\n        if ($value < $min) {\n            $sorted[] = $min;\n           \
    \ $min = $value;\n        } elseif ($value > $max) {\n            $sorted[] =\
    \ $max;\n            $max = $value;\n        } else {\n            $sorted[] =\
    \ $value;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if the array is empty or contains only a single element. Try\
    \ it with `array(1)`.\n<|/ c |>\n<| c |>\n: It does work, try it with `array(1)`.\n\
    <|/ c |>\n<| c |>\n: It does work, try it with `array(1)`.\n<|/ c |>\n<| c |>\n\
    : It does work, try it with `array(1)`.\n<|/ c |>\n<| c |>\n: It does work, try\
    \ it with `array(1)`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $sorted = array();\n\
    \  $min = min($lst);\n  $max = max($lst);\n  foreach ($lst as $key => $value)\
    \ {\n    if ($value < $min) {\n      $sorted[] = $min;\n      $min = $value;\n\
    \    } else if ($value > $max) {\n      $sorted[] = $max;\n      $max = $value;\n\
    \    } else {\n      $sorted[] = $value;\n    }\n  }\n  return $sorted;\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work if you have negative numbers.\
    \ Try this with $lst = array(-2, -1, 0, 1, 2); it returns array(-2, -1, 0, 2,\
    \ 1)\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers. Try this\
    \ with $lst = array(-2, -1, 0, 1, 2); it returns array(-2, -1, 0, 2, 1)\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>", "  $sorted = array();\n  $min = min($lst);\n\
    \  $max = max($lst);\n  foreach ($lst as $key => $value) {\n    if ($value < $min)\
    \ {\n      $sorted[$key] = $min;\n    } else if ($value > $max) {\n      $sorted[$key]\
    \ = $max;\n    } else {\n      $sorted[$key] = $value;\n    }\n  }\n  return $sorted;\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `strange_sort_list(array(1,\
    \ 2, 3, 4))` returns `array(1, 2, 3, 4)` instead of `array(1, 4, 2, 3)`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. strange_sort_list(array(1, 2, 3, 4))\
    \ returns array(1, 2, 3, 4) instead of array(1, 4, 2, 3).\n<|/ c |>\n<| c |>\n\
    This doesn't work for me. strange_sort_list(array(1, 2, 3, 4)) returns array(1,\
    \ 2, 3, 4) instead of array(1, 4, 2, 3).\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. strange_sort_list(array(1, 2, 3, 4)) returns array(1, 2, 3, 4) instead\
    \ of array(1, 4, 2, 3).\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $sorted\
    \ = array();\n  $min = min($lst);\n  $max = max($lst);\n  foreach ($lst as $key\
    \ => $value) {\n    if ($value < $min) {\n      $sorted[] = $min;\n      $min\
    \ = $value;\n    } else if ($value > $max) {\n      $sorted[] = $max;\n      $max\
    \ = $value;\n    } else {\n      $sorted[] = $value;\n    }\n  }\n  return $sorted;\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
