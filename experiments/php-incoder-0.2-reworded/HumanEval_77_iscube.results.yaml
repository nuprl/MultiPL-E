language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 1 !== 0)\n        return\
    \ false;\n    if ($a === 1)\n        return true;\n    if ($a === 2)\n       \
    \ return true;\n    if ($a === 3)\n        return true;\n    if ($a === 4)\n \
    \       return true;\n    if ($a === 5)\n        return true;\n    if ($a ===\
    \ 6)\n        return true;\n    if ($a === 7)\n        return true;\n    if ($a\
    \ === 8)\n        return true;\n    if ($a === 9)\n        return true;\n    if\
    \ ($a === 10)\n        return true;\n    if ($a === 11)\n        return true;\n\
    \    if ($a === 12)\n        return true;\n    if ($a === 13)\n        return\
    \ true;\n    if ($a === 14)\n        return true;\n    if ($a === 15)\n      \
    \  return true;\n    if ($a === 16)\n        return true;\n    if ($a === 17)\n\
    \        return true;\n    if ($a === 18)\n        return true;\n    if ($a ===\
    \ 19)\n        return true;\n    if ($a === 20)\n        return true;\n    if\
    \ ($a === 21)\n        return true;\n    if ($a === 22)\n        return true;\n\
    \    if ($a === 23)\n        return true;\n    if ($a === 24)\n        return\
    \ true;\n    if ($a === 25)\n        return true;\n    if ($a === 26)\n      \
    \  return true;\n    if ($a === 27)\n        return true;\n    if ($a === 28)\n\
    \        return true;\n    if ($a === 29)\n        return true;\n    if ($a ===\
    \ 30)\n        return true;\n    if ($a === 31)\n        return true;\n    if\
    \ ($a === 32)\n        return true;\n    if ($a === 33)\n        return true;\n\
    \    if ($a === 34)\n        return true;\n    if ($a === 35)\n        return\
    \ true;\n    if ($a === 36)\n        return true;\n    if ($a === 37)\n      \
    \  return true;\n    if ($a === 38)\n        return true;\n    if ($a === 39)\n\
    \        return true;\n    if ($a === 40)\n        return true;\n    if ($a ===\
    \ 41)\n        return true;\n    if ($a === 42)\n        return true;\n    if\
    \ ($a === 43)\n        return true;\n    if ($a === 44)\n        return true;\n\
    \    if ($a === 45)\n        return true;\n    if ($a === 46)\n        return\
    \ true;\n    if ($a === 47)\n        return true;\n    if ($a === 48)\n      \
    \  return true;\n    if ($a === 49)\n        return true;\n    if ($a === 50)\n\
    \        return true;\n    if ($a === 51)\n        return true;\n    if ($a ===\
    \ 52)\n        return true;\n    if ($a === 53)\n        return true;\n    if\
    \ ($a === 54)\n        return true;\n    if ($a === 55)\n        return true;\n\
    \    if ($a === 56)\n        return true;\n    if ($a === 57)\n        return\
    \ true;\n    if ($a === 58)\n        return true;\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkt3qrcql.php on line 155

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jpqg2k6.php:30\n\
    Stack trace:\n#0 /tmp/tmp8jpqg2k6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8jpqg2k6.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrkcmrex.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrkcmrex.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkrkcmrex.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6oo3vq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpo6oo3vq3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo6oo3vq3.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrkcmrex.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrkcmrex.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkrkcmrex.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0)\n        return false;\n    if ($a === 1)\n \
    \       return true;\n    if ($a === 2)\n        return true;\n    if ($a ===\
    \ 3)\n        return true;\n    if ($a === 4)\n        return true;\n    if ($a\
    \ === 5)\n        return true;\n    if ($a === 6)\n        return true;\n    if\
    \ ($a === 7)\n        return true;\n    if ($a === 8)\n        return true;\n\
    \    if ($a === 9)\n        return true;\n    if ($a === 10)\n        return true;\n\
    \    if ($a === 11)\n        return true;\n    if ($a === 12)\n        return\
    \ true;\n    if ($a === 13)\n        return true;\n    if ($a === 14)\n      \
    \  return true;\n    if ($a === 15)\n        return true;\n    if ($a === 16)\n\
    \        return true;\n    if ($a === 17)\n        return true;\n    if ($a ===\
    \ 18)\n        return true;\n    if ($a === 19)\n        return true;\n    if\
    \ ($a === 20)\n        return true;\n    if ($a === 21)\n        return true;\n\
    \    if ($a === 22)\n        return true;\n    if ($a === 23)\n        return\
    \ true;\n    if ($a === 24)\n        return true;\n    if ($a === 25)\n      \
    \  return true;\n    if ($a === 26)\n        return true;\n    if ($a === 27)\n\
    \        return true;\n    if ($a === 28)\n        return true;\n    if ($a ===\
    \ 29)\n        return true;\n    if ($a === 30)\n        return true;\n    if\
    \ ($a === 31)\n        return true;\n    if ($a === 32)\n        return true;\n\
    \    if ($a === 33)\n        return true;\n    if ($a === 34)\n        return\
    \ true;\n    if ($a === 35)\n        return true;\n    if ($a === 36)\n      \
    \  return true;\n    if ($a === 37)\n        return true;\n    if ($a === 38)\n\
    \        return true;\n    if ($a === 39)\n        return true;\n    if ($a ===\
    \ 40)\n        return true;\n    if ($a === 41)\n        return true;\n    if\
    \ ($a === 42)\n        return true;\n    if ($a === 43)\n        return true;\n\
    \    if ($a === 44)\n        return true;\n    if ($a === 45)\n        return\
    \ true;\n    if ($a === 46)\n        return true;\n    if ($a === 47)\n      \
    \  return true;\n    if ($a === 48)\n        return true;\n    if ($a === 49)\n\
    \        return true;\n    if ($a === 50)\n        return true;\n    if ($a ===\
    \ 51)\n        return true;\n    if ($a === 52)\n        return true;\n    if\
    \ ($a === 53)\n        return true;\n    if ($a === 54)\n        return true;\n\
    \    if ($a === 55)\n        return true;\n    if ($a === 56)\n        return\
    \ true;\n    if ($a === 57)\n        return true;\n    if ($a === 58)\n      \
    \  return true;\n    if ($a === \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjv7yzib4.php on line 138

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2x4ymtd.php:33\n\
    Stack trace:\n#0 /tmp/tmpu2x4ymtd.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu2x4ymtd.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n  \
    \      return true;\n    }\n    $b = $a / 2;\n    return iscube($b) && iscube($b);\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38izwtrc.php:34\n\
    Stack trace:\n#0 /tmp/tmp38izwtrc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp38izwtrc.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxne64ibb.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmm9q6yk.php:30\n\
    Stack trace:\n#0 /tmp/tmpbmm9q6yk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbmm9q6yk.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr50rehwx.php:39\n\
    Stack trace:\n#0 /tmp/tmpr50rehwx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpr50rehwx.php\
    \ on line 39\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cr61g6r.php:33\n\
    Stack trace:\n#0 /tmp/tmp6cr61g6r.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6cr61g6r.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    if ($a % 9 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 11 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 13 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 15 === 0) {\n        return true;\n    }\n    if ($a % 17 === 0) {\n \
    \       return true;\n    }\n    if ($a % 19 === 0) {\n        return true;\n\
    \    }\n    if ($a % 21 === 0) {\n        return true;\n    }\n    if ($a % 23\
    \ === 0) {\n        return true;\n    }\n    if ($a % 25 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 29 === 0) {\n        return true;\n    }\n    if ($a % 31 === 0) {\n \
    \       return true;\n    }\n    if ($a % 33 === 0) {\n        return true;\n\
    \    }\n    if ($a % 35 === 0) {\n        return true;\n    }\n    if ($a % 37\
    \ === 0) {\n        return true;\n    }\n    if ($a % 39 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 41 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 43 === 0) {\n        return true;\n    }\n    if ($a % 45 === 0) {\n \
    \       return true;\n    }\n    if ($a % 47 === 0) {\n        return true;\n\
    \    }\n    if ($a % 49 === 0) {\n        return true;\n    }\n    if ($a % 51\
    \ === 0) {\n        return true;\n    }\n    if ($a % 53 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 55 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 57 === 0) {\n        return true;\n    }\n    if ($a % 59 === 0) {\n \
    \       return true;\n    }\n    if ($a % 61 === 0) {\n        return true;\n\
    \    }\n    if ($a % 63 === 0) {\n        return true;\n    }\n    if ($a % 65\
    \ === 0) {\n        return true;\n    }\n    if ($a % 67 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 69 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 71 === 0) {\n        return true;\n    }\n    if ($a % 73 === 0) {\n \
    \       return true;\n    }\n    if ($a % 75 === 0) {\n        return true;\n\
    \    }\n    if ($a % 77 === 0) {\n        return true;\n    }\n    if ($a % 79\
    \ === 0) {\n        return true;\n    }\n    if ($a % 81 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 83 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 85 === 0) {\n        return true;\n    }\n    if ($a % 87 === 0) {\n \
    \       return true;\n    }\n    if ($a % 89 === 0) {\n        return true;\n\
    \    }\n    if ($a % 91 === 0) {\n        return true;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppebysmwz.php on line 171

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 2 != 0) return false;\n    if ($a\
    \ % 3 == 0) return false;\n    if ($a % 5 == 0) return false;\n    if ($a % 7\
    \ == 0) return false;\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiybwy2dr.php:32\n\
    Stack trace:\n#0 /tmp/tmpiybwy2dr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpiybwy2dr.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a\
    \ % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n     \
    \   return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 ==\
    \ 0 && $a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n\
    \        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n\
    \    if ($a % 3 == 0 && $a % 5 == 0)\n        return true;\n    if ($a % \nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_2e8tp_z.php on line 90

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a\
    \ % 5 == 0)\n        return true;\n    if ($a % 3 == 0)\n        return false;\n\
    \    if ($a % 5 == 0)\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6r823jy_.php:37\n\
    Stack trace:\n#0 /tmp/tmp6r823jy_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6r823jy_.php\
    \ on line 37\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxw39x5ty.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 100) {\n        return false;\n    }\n\
    \    if ($a % $a !== 0) {\n        return false;\n    }\n    if ($a % $a === 0)\
    \ {\n        return true;\n    }\n    $b = $a * $a;\n    $c = $a * $a + $a;\n\
    \    $d = $a * $a + $a + 1;\n    if ($b === $c && $b === $d) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j589yhs.php:49\n\
    Stack trace:\n#0 /tmp/tmp8j589yhs.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp8j589yhs.php\
    \ on line 49\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a) == 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyruirbky.php:28\n\
    Stack trace:\n#0 /tmp/tmpyruirbky.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyruirbky.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxne64ibb.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk0do56m.php:33\n\
    Stack trace:\n#0 /tmp/tmpuk0do56m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuk0do56m.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3119) {\n        return true;\n\
    \    }\n    if ($a % 3119 !== 0) {\n        return false;\n    }\n    if ($a <\
    \ 7393) {\n        return false;\n    }\n    if ($a % 7393 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 15849) {\n        return true;\n    }\n    if ($a\
    \ % 15849 !== 0) {\n        return false;\n    }\n    if ($a < 31999) {\n    \
    \    return false;\n    }\n    if ($a % 31999 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 78017) {\n        return false;\n    }\n    if ($a % 78017\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 158419) {\n        return\
    \ true;\n    }\n    if ($a % 158419 !== 0) {\n        return false;\n    }\n \
    \   if ($a < 312001) {\n        return false;\n    }\n    if ($a % 312001 !==\
    \ 0) {\n        return false;\n    }\n    if ($a < 78019) {\n        return false;\n\
    \    }\n    if ($a % 78019 !== 0) {\n        return false;\n    }\n    if ($a\
    \ < 158431) {\n        return true;\n    }\n    if ($a % 158431 !== 0) {\n   \
    \     return false;\n    }\n    if ($a < 312003) {\n        return false;\n  \
    \  }\n    if ($a % 312003 !== 0) {\n        return false;\n    }\n    if ($a <\
    \ 78021) {\n        return false;\n    }\n    if ($a % 78021 !== 0) {\n      \
    \  return false;\n    }\n    if ($a < 158443) {\n        return true;\n    }\n\
    \    if ($a % 158443 !== 0) {\n        return false;\n    }\n    if ($a < 312005)\
    \ {\n        return false;\n    }\n    if ($a % 312005 !== 0) {\n        return\
    \ false;\n    }\n    if ($a < 78023) {\n        return false;\n    }\n    if ($a\
    \ % 78023 !== 0) {\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf1o7tws9.php on line 159

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsfq2bxj.php:37\n\
    Stack trace:\n#0 /tmp/tmpfsfq2bxj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfsfq2bxj.php\
    \ on line 37\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    return iscube($a / 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf040pz2p.php:34\n\
    Stack trace:\n#0 /tmp/tmpf040pz2p.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf040pz2p.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a\
    \ % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a % 5 == 0)\n     \
    \   return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14wqb7hl.php:37\n\
    Stack trace:\n#0 /tmp/tmp14wqb7hl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp14wqb7hl.php\
    \ on line 37\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoelopl1a.php:33\n\
    Stack trace:\n#0 /tmp/tmpoelopl1a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoelopl1a.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    $cube = 1;\n\
    \    for ($i = 1; $i <= $a; $i++) {\n        $cube *= $i;\n    }\n    return $cube\
    \ == $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhzs9wrn.php:35\n\
    Stack trace:\n#0 /tmp/tmpwhzs9wrn.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwhzs9wrn.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxw39x5ty.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkt5o_9z.php:31\n\
    Stack trace:\n#0 /tmp/tmpqkt5o_9z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqkt5o_9z.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 11 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 13 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 17 === 0) {\n        return true;\n    }\n    if ($a % 19 === 0) {\n \
    \       return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a % 29 === 0) {\n        return true;\n    }\n    if ($a % 37\
    \ === 0) {\n        return true;\n    }\n    if ($a % 43 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 49 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 63 === 0) {\n        return true;\n    }\n    if ($a % 69 === 0) {\n \
    \       return true;\n    }\n    if ($a % 73 === 0) {\n        return true;\n\
    \    }\n    if ($a % 79 === 0) {\n        return true;\n    }\n    if ($a % 83\
    \ === 0) {\n        return true;\n    }\n    if ($a % 89 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 97 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 103 === 0) {\n        return true;\n    }\n    if ($a % 109 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 113 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 119 !== 0) {\n        return false;\n    }\n    if ($a %\
    \ 123 !== 0) {\n        return false;\n    }\n    if ($a % 129 !== 0) {\n    \
    \    return false;\n    }\n    if ($a % 137 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 143 !== 0) {\n        return false;\n    }\n    if ($a %\
    \ 149 !== 0) {\n        return false;\n    }\n    if ($a % 157 !== 0) {\n    \
    \    return false;\n    }\n    if ($a % 163 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 169 !== 0) {\n        return false;\n    }\n    if ($a %\
    \ 177 !== 0) {\n        return false;\n    }\n    if ($a % 183 !== 0) {\n    \
    \    return false;\n    }\n    if ($a % 189 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 197 !== 0) {\n        return false;\n    }\n    if ($a %\
    \ 203 !== 0) {\n        return false;\n    }\n    if ($a % 209 !== 0) {\n    \
    \    return false;\n    }\n    if ($a % 217 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 223 !== 0) {\n        return false;\n    }\n    if ($a %\
    \ 229 !== 0) {\n        return false;\n    }\n    if ($a % 237 !== 0) {\n    \
    \    return false;\n    }\n    if ($a % 243 !== 0) {\n        return false;\n\
    \    }\n    if ($\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp781txp0n.php on line 152

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6oo3vq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpo6oo3vq3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo6oo3vq3.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 180) {\n        return false;\n    }\n\
    \    if ($a > 9) {\n        return true;\n    }\n    if ($a % 3 === 0) {\n   \
    \     return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n   \
    \ }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsupq9gm.php:47\n\
    Stack trace:\n#0 /tmp/tmpxsupq9gm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxsupq9gm.php\
    \ on line 47\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a\
    \ % 5 == 0)\n        return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5tnm5g3.php:34\n\
    Stack trace:\n#0 /tmp/tmpk5tnm5g3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk5tnm5g3.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) return false;\n    if ($a % 2 == 0) return false;\n    if ($a\
    \ % 3 == 0) return false;\n    if ($a % 5 == 0) return false;\n    if ($a % 7\
    \ == 0) return false;\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozh9pgi_.php:34\n\
    Stack trace:\n#0 /tmp/tmpozh9pgi_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpozh9pgi_.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1000) {\n        return false;\n   \
    \ }\n    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 1) {\n        return false;\n    }\n    if ($a % 3 === 2) {\n        return\
    \ true;\n    }\n    if ($a % 3 === 3) {\n        return false;\n    }\n    if\
    \ ($a % 3 === 4) {\n        return true;\n    }\n    if ($a % 3 === 5) {\n   \
    \     return false;\n    }\n    if ($a % 3 === 6) {\n        return true;\n  \
    \  }\n    if ($a % 3 === 7) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 8) {\n        return true;\n    }\n    if ($a % 3 === 9) {\n        return false;\n\
    \    }\n    if ($a % 3 === 10) {\n        return true;\n    }\n    if ($a % 3\
    \ === 11) {\n        return false;\n    }\n    if ($a % 3 === 12) {\n        return\
    \ true;\n    }\n    if ($a % 3 === 13) {\n        return false;\n    }\n    if\
    \ ($a % 3 === 14) {\n        return true;\n    }\n    if ($a % 3 === 15) {\n \
    \       return false;\n    }\n    if ($a % 3 === 16) {\n        return true;\n\
    \    }\n    if ($a % 3 === 17) {\n        return false;\n    }\n    if ($a % 3\
    \ === 18) {\n        return true;\n    }\n    if ($a % 3 === 19) {\n        return\
    \ false;\n    }\n    if ($a % 3 === 20) {\n        return true;\n    }\n    if\
    \ ($a % 3 === 21) {\n        return false;\n    }\n    if ($a % 3 === 22) {\n\
    \        return true;\n    }\n    if ($a % 3 === 23) {\n        return false;\n\
    \    }\n    if ($a % 3 === 24) {\n        return true;\n    }\n    if ($a % 3\
    \ === 25) {\n        return false;\n    }\n    if ($a % 3 === 26) {\n        return\
    \ true;\n    }\n    if ($a % 3 === 27) {\n        return false;\n    }\n    if\
    \ ($a % 3 === 28) {\n        return true;\n    }\n    if ($a % 3 === 29) {\n \
    \       return false;\n    }\n    if ($a % 3 === 30) {\n        return true;\n\
    \    }\n    if ($a % 3 === 31) {\n        return false;\n    }\n    if ($a % 3\
    \ === 32) {\n        return true;\n    }\n    if ($a % 3 === 33) {\n        return\
    \ false;\n    }\n    if ($a % 3 === 34) {\n        return true;\n    }\n    if\
    \ ($a % 3 === 35) {\n        return false;\n    }\n    if ($a % 3 === 36) {\n\
    \        return true;\n    }\n    if ($a % 3 \nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_ql6yunp.php on line 140

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 9) {\n        return false;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a % 5 === 0) {\n\
    \        return true;\n    }\n    if ($a % 7 === 0) {\n        return true;\n\
    \    }\n    if ($a % 9 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl32snb6l.php:48\n\
    Stack trace:\n#0 /tmp/tmpl32snb6l.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl32snb6l.php\
    \ on line 48\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a%$a==0) && ($a%$a==0) && ($a%$a==0) && ($a%$a==0);\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeumeyzrx.php:28\n\
    Stack trace:\n#0 /tmp/tmpeumeyzrx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeumeyzrx.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxne64ibb.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1000) {\n        return false;\n   \
    \ }\n    if ($a % 2 !== 0) {\n        return false;\n    }\n    if ($a % 3 !==\
    \ 0) {\n        return false;\n    }\n    if ($a % 4 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 5 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 6 !== 0) {\n        return false;\n    }\n    if ($a % 7 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 8 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 9 !== 0) {\n        return false;\n    }\n    if ($a % 10\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 11 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 12 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 13 !== 0) {\n        return false;\n    }\n    if ($a % 14 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 15 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 16 !== 0) {\n        return false;\n    }\n    if ($a % 17\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 18 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 19 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 20 !== 0) {\n        return false;\n    }\n    if ($a % 21 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 22 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 23 !== 0) {\n        return false;\n    }\n    if ($a % 24\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 25 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 26 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 27 !== 0) {\n        return false;\n    }\n    if ($a % 28 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 29 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 30 !== 0) {\n        return false;\n    }\n    if ($a % 31\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 32 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 33 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 34 !== 0) {\n        return false;\n    }\n    if ($a % 35 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 36 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 37 !== 0) {\n        return false;\n    }\n    if ($a % 38\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 39 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 40 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 41 !== 0) {\n        return false;\n    }\n    if ($a % 42 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 43 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 44 !== 0) {\n        return false;\n    }\n    if ($\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3fhui9sg.php on line 158

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 5) {\n   \
    \     return false;\n    }\n    if ($a % 5 === 0) {\n        return false;\n \
    \   }\n    if ($a < 7) {\n        return true;\n    }\n    if ($a % 7 === 0) {\n\
    \        return true;\n    }\n    if ($a < 9) {\n        return false;\n    }\n\
    \    if ($a % 9 === 0) {\n        return false;\n    }\n    if ($a < 11) {\n \
    \       return true;\n    }\n    if ($a % 11 === 0) {\n        return true;\n\
    \    }\n    if ($a < 13) {\n        return false;\n    }\n    if ($a % 13 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 15) {\n        return true;\n\
    \    }\n    if ($a % 15 === 0) {\n        return true;\n    }\n    if ($a < 17)\
    \ {\n        return false;\n    }\n    if ($a % 17 === 0) {\n        return false;\n\
    \    }\n    if ($a < 19) {\n        return true;\n    }\n    if ($a % 19 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 21) {\n        return false;\n\
    \    }\n    if ($a % 21 === 0) {\n        return false;\n    }\n    if ($a < 23)\
    \ {\n        return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a < 25) {\n        return false;\n    }\n    if ($a % 25 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 27) {\n        return true;\n\
    \    }\n    if ($a % 27 === 0) {\n        return true;\n    }\n    if ($a < 29)\
    \ {\n        return false;\n    }\n    if ($a % 29 === 0) {\n        return false;\n\
    \    }\n    if ($a < 31) {\n        return true;\n    }\n    if ($a % 31 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 33) {\n        return false;\n\
    \    }\n    if ($a % 33 === 0) {\n        return false;\n    }\n    if ($a < 35)\
    \ {\n        return true;\n    }\n    if ($a % 35 === 0) {\n        return true;\n\
    \    }\n    if ($a < 37) {\n        return false;\n    }\n    if ($a % 37 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 39) {\n        return true;\n\
    \    }\n    if ($a % 39 === 0) {\n        return true;\n    }\n    if ($a < 41)\
    \ {\n        return false;\n    }\n    if ($a % 41 === 0) {\n        return false;\n\
    \    }\n    if ($a < 43) {\n        return true;\n    }\n    if ($a % 43 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 45) {\n        return false;\n\
    \    }\n    if ($a % 45 === 0) {\n        return false;\n    }\n    if ($a < 47\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_spcwxo2.php on line 158

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps466nwxl.php:35\n\
    Stack trace:\n#0 /tmp/tmps466nwxl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps466nwxl.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkt5o_9z.php:31\n\
    Stack trace:\n#0 /tmp/tmpqkt5o_9z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqkt5o_9z.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_fe5sd8.php:42\n\
    Stack trace:\n#0 /tmp/tmpw_fe5sd8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpw_fe5sd8.php\
    \ on line 42\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return false;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return false;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return false;\n    if ($a % 17 == 0)\n       \
    \ return false;\n    if ($a % 19 == 0)\n        return false;\n    if ($a % 21\
    \ == 0)\n        return false;\n    if ($a % 23 == 0)\n        return false;\n\
    \    if ($a % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n       \
    \ return false;\n    if ($a % 29 == 0)\n        return false;\n    if ($a % 31\
    \ == 0)\n        return false;\n    if ($a % 33 == 0)\n        return false;\n\
    \    if ($a % 35 == 0)\n        return false;\n    if ($a % 37 == 0)\n       \
    \ return false;\n    if ($a % 39 == 0)\n        return false;\n    if ($a % 41\
    \ == 0)\n        return false;\n    if ($a % 43 == 0)\n        return false;\n\
    \    if ($a % 45 == 0)\n        return false;\n    if ($a % 47 == 0)\n       \
    \ return false;\n    if ($a % 49 == 0)\n        return false;\n    if ($a % 51\
    \ == 0)\n        return false;\n    if ($a % 53 == 0)\n        return false;\n\
    \    if ($a % 55 == 0)\n        return false;\n    if ($a % 57 == 0)\n       \
    \ return false;\n    if ($a % 59 == 0)\n        return false;\n    if ($a % 61\
    \ == 0)\n        return false;\n    if ($a % 63 == 0)\n        return false;\n\
    \    if ($a % 65 == 0)\n        return false;\n    if ($a % 67 == 0)\n       \
    \ return false;\n    if ($a % 69 == 0)\n        return false;\n    if ($a % 71\
    \ == 0)\n        return false;\n    if ($a % 73 == 0)\n        return false;\n\
    \    if ($a % 75 == 0)\n        return false;\n    if ($a % 77 == 0)\n       \
    \ return false;\n    if ($a % 79 == 0)\n        return false;\n    if ($a % 81\
    \ == 0)\n        return false;\n    if ($a % 83 == 0)\n        return false;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return false;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return false;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return false;\n    if ($a % 97 == 0)\n       \
    \ return false;\n    if ($a % 99 == 0)\n        return false;\n    if ($a % 101\
    \ == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwsatiwdj.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            if ($a % $a\
    \ == 0) {\n                return true;\n            }\n        }\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps466nwxl.php:35\n\
    Stack trace:\n#0 /tmp/tmps466nwxl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps466nwxl.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0 && $a % $a === $a) {\n        return true;\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8ql8cv5.php:30\n\
    Stack trace:\n#0 /tmp/tmpp8ql8cv5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp8ql8cv5.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a > 180) {\n      \
    \  return false;\n    }\n    if ($a % 9 == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyflazkd.php:35\n\
    Stack trace:\n#0 /tmp/tmpeyflazkd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpeyflazkd.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsycbj12g.php:32\n\
    Stack trace:\n#0 /tmp/tmpsycbj12g.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsycbj12g.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 2 === 0) {\n \
    \       return true;\n    }\n    return iscube($a / 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf040pz2p.php:34\n\
    Stack trace:\n#0 /tmp/tmpf040pz2p.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpf040pz2p.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr50rehwx.php:39\n\
    Stack trace:\n#0 /tmp/tmpr50rehwx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpr50rehwx.php\
    \ on line 39\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6ql3xet.php:32\n\
    Stack trace:\n#0 /tmp/tmph6ql3xet.php(42): test()\n#1 {main}\n  thrown in /tmp/tmph6ql3xet.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_g4oaeub.php:39\n\
    Stack trace:\n#0 /tmp/tmp_g4oaeub.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_g4oaeub.php\
    \ on line 39\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cr61g6r.php:33\n\
    Stack trace:\n#0 /tmp/tmp6cr61g6r.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6cr61g6r.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 9 === 0) {\n        return true;\n\
    \    }\n    if ($a % 11 === 0) {\n        return true;\n    }\n    if ($a % 13\
    \ === 0) {\n        return true;\n    }\n    if ($a % 15 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 17 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 19 === 0) {\n        return true;\n    }\n    if ($a % 21 === 0) {\n \
    \       return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a % 25 === 0) {\n        return true;\n    }\n    if ($a % 27\
    \ === 0) {\n        return true;\n    }\n    if ($a % 29 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 31 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 33 === 0) {\n        return true;\n    }\n    if ($a % 35 === 0) {\n \
    \       return true;\n    }\n    if ($a % 37 === 0) {\n        return true;\n\
    \    }\n    if ($a % 39 === 0) {\n        return true;\n    }\n    if ($a % 41\
    \ === 0) {\n        return true;\n    }\n    if ($a % 43 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 45 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 47 === 0) {\n        return true;\n    }\n    if ($a % 49 === 0) {\n \
    \       return true;\n    }\n    if ($a % 51 === 0) {\n        return true;\n\
    \    }\n    if ($a % 53 === 0) {\n        return true;\n    }\n    if ($a % 55\
    \ === 0) {\n        return true;\n    }\n    if ($a % 57 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 59 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 61 === 0) {\n        return true;\n    }\n    if ($a % 63 === 0) {\n \
    \       return true;\n    }\n    if ($a % 65 === 0) {\n        return true;\n\
    \    }\n    if ($a % 67 === 0) {\n        return true;\n    }\n    if ($a % 69\
    \ === 0) {\n        return true;\n    }\n    if ($a % 71 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 73 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 75 === 0) {\n        return true;\n    }\n    if ($a % 77 === 0) {\n \
    \       return true;\n    }\n    if ($a % 79 === 0) {\n        return true;\n\
    \    }\n    if ($a % 81 === 0) {\n        return true;\n    }\n    if ($a % 83\
    \ === 0) {\n        return true;\n    }\n    if ($a % 85 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 87 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 89 === 0) {\n        return true;\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwkgtzcii.php on line 171

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6oo3vq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpo6oo3vq3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo6oo3vq3.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a > 1000) {\n        return false;\n   \
    \ }\n    if ($a < 1000) {\n        return true;\n    }\n    if ($a % 2 !== 0)\
    \ {\n        return false;\n    }\n    if ($a % 3 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 5 !== 0) {\n        return false;\n    }\n    if ($a % 7\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 9 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 11 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 13 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 17 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 19 !== 0) {\n        return false;\n    }\n    if ($a % 21\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 23 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 25 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 27 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 31 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 33 !== 0) {\n        return false;\n    }\n    if ($a % 35\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 37 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 39 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 41 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 45 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 47 !== 0) {\n        return false;\n    }\n    if ($a % 49\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 51 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 53 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 55 !== 0) {\n        return false;\n    }\n    if ($a % 57 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 59 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 61 !== 0) {\n        return false;\n    }\n    if ($a % 63\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 65 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 67 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 69 !== 0) {\n        return false;\n    }\n    if ($a % 71 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 73 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 75 !== 0) {\n        return false;\n    }\n    if ($a % 77\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 79 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 81 !== 0) {\n        return false;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfac5l9yd.php on line 168

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx96v85fi.php:32\n\
    Stack trace:\n#0 /tmp/tmpx96v85fi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx96v85fi.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 2 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 3 !== 0) {\n        return false;\n    }\n    if ($a % 4\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 5 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 6 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 7 !== 0) {\n        return false;\n    }\n    if ($a % 8 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 9 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 10 !== 0) {\n        return false;\n    }\n    if ($a % 11\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 12 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 13 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 14 !== 0) {\n        return false;\n    }\n    if ($a % 15 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 16 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 17 !== 0) {\n        return false;\n    }\n    if ($a % 18\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 19 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 20 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 21 !== 0) {\n        return false;\n    }\n    if ($a % 22 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 23 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 24 !== 0) {\n        return false;\n    }\n    if ($a % 25\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 26 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 28 !== 0) {\n        return false;\n    }\n    if ($a % 29 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 30 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 31 !== 0) {\n        return false;\n    }\n    if ($a % 32\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 33 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 34 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 35 !== 0) {\n        return false;\n    }\n    if ($a % 36 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 37 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 38 !== 0) {\n        return false;\n    }\n    if ($a % 39\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 40 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 41 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 42 !== 0) {\n        return false;\n    }\n    if ($a % 43 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 44 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 45 !== 0) {\n        return false;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfkiqr993.php on line 158

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 3 === 1) {\n        return true;\n  \
    \  }\n    if ($a < 27) {\n        return false;\n    }\n    if ($a % 3 === 2)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 3 === 3) {\n        return true;\n    }\n    if ($a < 243)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 4) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 5) {\n        return true;\n    }\n    if ($a < 3059) {\n        return false;\n\
    \    }\n    if ($a % 3 === 6) {\n        return true;\n    }\n    if ($a < 9191)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 7) {\n        return true;\n\
    \    }\n    if ($a < 33479) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 8) {\n        return true;\n    }\n    if ($a < 102937) {\n        return false;\n\
    \    }\n    if ($a % 3 === 9) {\n        return true;\n    }\n    if ($a < 345977)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 10) {\n        return true;\n\
    \    }\n    if ($a < 1059427) {\n        return false;\n    }\n    if ($a % 3\
    \ === 11) {\n        return true;\n    }\n    if ($a < 3483913) {\n        return\
    \ false;\n    }\n    if ($a % 3 === 12) {\n        return true;\n    }\n    if\
    \ ($a < 10695983) {\n        return false;\n    }\n    if ($a % 3 === 13) {\n\
    \        return true;\n    }\n    if ($a < 35255759) {\n        return false;\n\
    \    }\n    if ($a % 3 === 14) {\n        return true;\n    }\n    if ($a < 107971597)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 15) {\n        return true;\n\
    \    }\n    if ($a < 355728799) {\n        return false;\n    }\n    if ($a %\
    \ 3 === 16) {\n        return true;\n    }\n    if ($a < 1089348271) {\n     \
    \   return false;\n    }\n    if ($a % 3 === 17) {\n        return true;\n   \
    \ }\n    if ($a < 3628800799) {\n        return false;\n    }\n    if ($a % 3\
    \ === 18) {\n        return true;\n    }\n    if ($a < 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1hm1eogk.php on line 140

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppw93bteo.php:29\n\
    Stack trace:\n#0 /tmp/tmppw93bteo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppw93bteo.php\
    \ on line 29\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0 && $a % $a === $a) {\n        return true;\n    }\n   \
    \ return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8ql8cv5.php:30\n\
    Stack trace:\n#0 /tmp/tmpp8ql8cv5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpp8ql8cv5.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmm9q6yk.php:30\n\
    Stack trace:\n#0 /tmp/tmpbmm9q6yk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbmm9q6yk.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4crb3xw.php:34\n\
    Stack trace:\n#0 /tmp/tmpk4crb3xw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk4crb3xw.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx03bh5sz.php:42\n\
    Stack trace:\n#0 /tmp/tmpx03bh5sz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpx03bh5sz.php\
    \ on line 42\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0)\n        return false;\n    if ($a === 1)\n \
    \       return true;\n    if ($a === 2)\n        return true;\n    if ($a ===\
    \ 3)\n        return true;\n    if ($a === 4)\n        return true;\n    if ($a\
    \ === 5)\n        return true;\n    if ($a === 6)\n        return true;\n    if\
    \ ($a === 7)\n        return true;\n    if ($a === 8)\n        return true;\n\
    \    if ($a === 9)\n        return true;\n    if ($a === 10)\n        return true;\n\
    \    if ($a === 11)\n        return true;\n    if ($a === 12)\n        return\
    \ true;\n    if ($a === 13)\n        return true;\n    if ($a === 14)\n      \
    \  return true;\n    if ($a === 15)\n        return true;\n    if ($a === 16)\n\
    \        return true;\n    if ($a === 17)\n        return true;\n    if ($a ===\
    \ 18)\n        return true;\n    if ($a === 19)\n        return true;\n    if\
    \ ($a === 20)\n        return true;\n    if ($a === 21)\n        return true;\n\
    \    if ($a === 22)\n        return true;\n    if ($a === 23)\n        return\
    \ true;\n    if ($a === 24)\n        return true;\n    if ($a === 25)\n      \
    \  return true;\n    if ($a === 26)\n        return true;\n    if ($a === 27)\n\
    \        return true;\n    if ($a === 28)\n        return true;\n    if ($a ===\
    \ 29)\n        return true;\n    if ($a === 30)\n        return true;\n    if\
    \ ($a === 31)\n        return true;\n    if ($a === 32)\n        return true;\n\
    \    if ($a === 33)\n        return true;\n    if ($a === 34)\n        return\
    \ true;\n    if ($a === 35)\n        return true;\n    if ($a === 36)\n      \
    \  return true;\n    if ($a === 37)\n        return true;\n    if ($a === 38)\n\
    \        return true;\n    if ($a === 39)\n        return true;\n    if ($a ===\
    \ 40)\n        return true;\n    if ($a === 41)\n        return true;\n    if\
    \ ($a === 42)\n        return true;\n    if ($a === 43)\n        return true;\n\
    \    if ($a === 44)\n        return true;\n    if ($a === 45)\n        return\
    \ true;\n    if ($a === 46)\n        return true;\n    if ($a === 47)\n      \
    \  return true;\n    if ($a === 48)\n        return true;\n    if ($a === 49)\n\
    \        return true;\n    if ($a === 50)\n        return true;\n    if ($a ===\
    \ 51)\n        return true;\n    if ($a === 52)\n        return true;\n    if\
    \ ($a === 53)\n        return true;\n    if ($a === 54)\n        return true;\n\
    \    if ($a === 55)\n        return true;\n    if ($a === 56)\n        return\
    \ true;\n    if ($a === 57)\n        return true;\n    if ($a === 58)\n      \
    \  return true;\n    if ($a === \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjv7yzib4.php on line 138

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        if ($a % $a == 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxaepa966.php:36\n\
    Stack trace:\n#0 /tmp/tmpxaepa966.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxaepa966.php\
    \ on line 36\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwo7_ppw.php:27\n\
    Stack trace:\n#0 /tmp/tmpwwo7_ppw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwwo7_ppw.php\
    \ on line 27\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 6 == 0)\n        return true;\n    else\n        return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv79vl6n3.php:30\n\
    Stack trace:\n#0 /tmp/tmpv79vl6n3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv79vl6n3.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n  \
    \  }\n    if ($a % 7 === 0) {\n        return true;\n    }\n    if ($a % 9 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 11 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 13 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 17 === 0) {\n        return true;\n    }\n    if ($a % 19 === 0) {\n \
    \       return true;\n    }\n    if ($a % 23 === 0) {\n        return true;\n\
    \    }\n    if ($a % 29 === 0) {\n        return true;\n    }\n    if ($a % 31\
    \ === 0) {\n        return true;\n    }\n    if ($a % 37 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 43 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 49 === 0) {\n        return true;\n    }\n    if ($a % 53 === 0) {\n \
    \       return true;\n    }\n    if ($a % 59 === 0) {\n        return true;\n\
    \    }\n    if ($a % 63 === 0) {\n        return true;\n    }\n    if ($a % 69\
    \ === 0) {\n        return true;\n    }\n    if ($a % 73 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 79 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 83 === 0) {\n        return true;\n    }\n    if ($a % 89 === 0) {\n \
    \       return true;\n    }\n    if ($a % 97 === 0) {\n        return true;\n\
    \    }\n    if ($a % 103 === 0) {\n        return true;\n    }\n    if ($a % 109\
    \ === 0) {\n        return true;\n    }\n    if ($a % 113 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 119 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 123 === 0) {\n        return true;\n    }\n    if ($a % 129 === 0) {\n\
    \        return true;\n    }\n    if ($a % 135 === 0) {\n        return true;\n\
    \    }\n    if ($a % 141 === 0) {\n        return true;\n    }\n    if ($a % 147\
    \ === 0) {\n        return true;\n    }\n    if ($a % 153 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 159 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 165 === 0) {\n        return true;\n    }\n    if ($a % 171 === 0) {\n\
    \        return true;\n    }\n    if ($a % 177 === 0) {\n        return true;\n\
    \    }\n    if ($a % 183 === 0) {\n        return true;\n    }\n    if ($a % 189\
    \ === 0) {\n        return true;\n    }\n    if ($a % 195 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 201 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 209 === 0) {\n        return true;\n    }\n    if ($a % 215 === 0) {\n\
    \        return true;\n    }\n    if ($a % 221 === 0) {\n        return true;\n\
    \    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdgzo650b.php on line 169

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrkcmrex.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrkcmrex.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkrkcmrex.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3119) {\n        return true;\n\
    \    }\n    if ($a % 3119 !== 0) {\n        return false;\n    }\n    if ($a <\
    \ 7393) {\n        return false;\n    }\n    if ($a % 7393 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 3999) {\n        return true;\n    }\n    if ($a\
    \ % 3999 === 0) {\n        return false;\n    }\n    if ($a < 8031) {\n      \
    \  return false;\n    }\n    if ($a % 8031 === 0) {\n        return false;\n \
    \   }\n    if ($a < 24219) {\n        return true;\n    }\n    if ($a % 24219\
    \ === 0) {\n        return false;\n    }\n    if ($a < 72973) {\n        return\
    \ false;\n    }\n    if ($a % 72973 === 0) {\n        return false;\n    }\n \
    \   if ($a < 311919) {\n        return true;\n    }\n    if ($a % 311919 === 0)\
    \ {\n        return false;\n    }\n    if ($a < 739393) {\n        return false;\n\
    \    }\n    if ($a % 739393 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 399919) {\n        return true;\n    }\n    if ($a % 399919 === 0) {\n   \
    \     return false;\n    }\n    if ($a < 803031) {\n        return false;\n  \
    \  }\n    if ($a % 803031 === 0) {\n        return false;\n    }\n    if ($a <\
    \ 2421981) {\n        return true;\n    }\n    if ($a % 2421981 === 0) {\n   \
    \     return false;\n    }\n    if ($a < 7297473) {\n        return false;\n \
    \   }\n    if ($a % 7297473 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 31191981) {\n        return true;\n    }\n    if ($a % 31191981 === 0) {\n\
    \        return false;\n    }\n    if ($a < 73939393) {\n        return false;\n\
    \    }\n    if ($a \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprhvtxnrd.php on line 143

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk0do56m.php:33\n\
    Stack trace:\n#0 /tmp/tmpuk0do56m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuk0do56m.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 9) {\n        return true;\n    }\n\
    \    if ($a % 9 !== 0) {\n        return false;\n    }\n    if ($a < 27) {\n \
    \       return true;\n    }\n    if ($a % 27 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 81) {\n        return true;\n    }\n    if ($a % 81 !== 0)\
    \ {\n        return false;\n    }\n    if ($a < 243) {\n        return true;\n\
    \    }\n    if ($a % 243 !== 0) {\n        return false;\n    }\n    if ($a <\
    \ 729) {\n        return true;\n    }\n    if ($a % 729 !== 0) {\n        return\
    \ false;\n    }\n    if ($a < 3105) {\n        return true;\n    }\n    if ($a\
    \ % 3105 !== 0) {\n        return false;\n    }\n    if ($a < 15607) {\n     \
    \   return true;\n    }\n    if ($a % 15607 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 524287) {\n        return true;\n    }\n    if ($a % 524287\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 1048577) {\n        return\
    \ true;\n    }\n    if ($a % 1048577 !== 0) {\n        return false;\n    }\n\
    \    if ($a < 2097151) {\n        return true;\n    }\n    if ($a % 2097151 !==\
    \ 0) {\n        return false;\n    }\n    if ($a < 8388607) {\n        return\
    \ true;\n    }\n    if ($a % 8388607 !== 0) {\n        return false;\n    }\n\
    \    if ($a < 16777215) {\n        return true;\n    }\n    if ($a % 16777215\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 33554431) {\n        return\
    \ true;\n    }\n    if ($a % 33554431 !== 0) {\n        return false;\n    }\n\
    \    if ($a < 67108863) {\n        return true;\n    }\n    if ($a % 67108863\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 134217727) {\n        return\
    \ true;\n    }\n    if ($a % 134217727 !== 0) {\n        return false;\n    }\n\
    \    if ($a < 268435455) {\n        return true;\n    }\n    if ($a % 268435455\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 536870911) {\n        return\
    \ true;\n    }\n    if ($a % 536870911 !== 0) {\n        return false;\n    }\n\
    \    if ($a < 1073741823) {\n        return true;\n    }\n    if ($a % 1073741823\
    \ !== 0) {\n        return false;\n    }\n    if ($a < 2147483647) {\n       \
    \ return true;\n    }\n    if ($a % 2147483\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpymacn24y.php on line 137

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoelopl1a.php:33\n\
    Stack trace:\n#0 /tmp/tmpoelopl1a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpoelopl1a.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jpqg2k6.php:30\n\
    Stack trace:\n#0 /tmp/tmp8jpqg2k6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8jpqg2k6.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 9 === 0) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 27 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 81 === 0) {\n        return false;\n    }\n    if ($a < 243)\
    \ {\n        return true;\n    }\n    if ($a % 243 === 0) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 729 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 3105) {\n        return true;\n\
    \    }\n    if ($a % 3105 === 0) {\n        return true;\n    }\n    if ($a <\
    \ 7353) {\n        return false;\n    }\n    if ($a % 7353 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 10251) {\n        return true;\n    }\n    if ($a\
    \ % 10251 === 0) {\n        return true;\n    }\n    if ($a < 1048577) {\n   \
    \     return false;\n    }\n    if ($a % 1048577 === 0) {\n        return false;\n\
    \    }\n    if ($a < 1099511627775) {\n        return true;\n    }\n    if ($a\
    \ % 1099511627775 === 0) {\n        return true;\n    }\n    if ($a < 1125899906842623)\
    \ {\n        return false;\n    }\n    if ($a % 1125899906842623 === 0) {\n  \
    \      return false;\n    }\n    if ($a < 11529215046068469) {\n        return\
    \ true;\n    }\n    if ($a % 11529215046068469 === 0) {\n        return true;\n\
    \    }\n    if ($a < 1180591620717411301) {\n        return false;\n    }\n  \
    \  if ($a % 1180591620717411301 === 0) {\n        return false;\n    }\n    if\
    \ ($a < 1229743804651110131) {\n        return true;\n    }\n    if ($a % 1229743804651110131\
    \ === 0) {\n        return true;\n    }\n    if ($a < 1258291280262864771) {\n\
    \        return false;\n    }\n    if ($a % 1258291280262864771 === 0) {\n   \
    \     return false;\n    }\n    if ($a < 1287777787807857661) {\n        return\
    \ true;\n    }\n    if ($a % 1287777787807857661 === 0) {\n        return true;\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcwwnsr99.php on line 142

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsfq2bxj.php:37\n\
    Stack trace:\n#0 /tmp/tmpfsfq2bxj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfsfq2bxj.php\
    \ on line 37\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a%$a==0) && ($a%$a==0) && ($a%$a==0);\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57rdszgp.php:27\n\
    Stack trace:\n#0 /tmp/tmp57rdszgp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp57rdszgp.php\
    \ on line 27\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0 || $a > 180) {\n        return false;\n    }\n\
    \    $b = $a ** 3;\n    $c = $a ** 2;\n    $d = $a ** 1;\n    return ($b === $c\
    \ && $b === $d);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_r5mc8dt.php:35\n\
    Stack trace:\n#0 /tmp/tmp_r5mc8dt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_r5mc8dt.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 3) {\n        return false;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i68e7bw.php:51\n\
    Stack trace:\n#0 /tmp/tmp1i68e7bw.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp1i68e7bw.php\
    \ on line 51\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) return true;\n    if ($a % 5 == 0) return true;\n    if\
    \ ($a % 7 == 0) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jpqg2k6.php:30\n\
    Stack trace:\n#0 /tmp/tmp8jpqg2k6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8jpqg2k6.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6b6qews.php:32\n\
    Stack trace:\n#0 /tmp/tmpv6b6qews.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv6b6qews.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    $b = $a * $a;\n\
    \    $c = $a * $b;\n    $d = $a * $c;\n    $e = $a * $d;\n    $f = $a * $e;\n\
    \    $g = $a * $f;\n    $h = $a * $g;\n    $i = $a * $h;\n    $j = $a * $i;\n\
    \    $k = $a * $j;\n    $l = $a * $k;\n    return ($a + $b + $c + $d + $e + $f\
    \ + $g + $h + $i + $j + $k + $l == 180);\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51d7pczn.php:41\n\
    Stack trace:\n#0 /tmp/tmp51d7pczn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp51d7pczn.php\
    \ on line 41\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopfwklku.php:32\n\
    Stack trace:\n#0 /tmp/tmpopfwklku.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpopfwklku.php\
    \ on line 32\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n \
    \       return true;\n    }\n    $b = $a / 3;\n    return iscube($b) && iscube($b);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_17rk4m.php:34\n\
    Stack trace:\n#0 /tmp/tmp3_17rk4m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp3_17rk4m.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrkcmrex.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrkcmrex.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkrkcmrex.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4crb3xw.php:34\n\
    Stack trace:\n#0 /tmp/tmpk4crb3xw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk4crb3xw.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 1 !== 0 || $a < 0)\n        return false;\n    if ($a === 1)\n \
    \       return true;\n    if ($a === 2)\n        return true;\n    if ($a ===\
    \ 3)\n        return true;\n    if ($a === 4)\n        return true;\n    if ($a\
    \ === 5)\n        return true;\n    if ($a === 6)\n        return true;\n    if\
    \ ($a === 7)\n        return true;\n    if ($a === 8)\n        return true;\n\
    \    if ($a === 9)\n        return true;\n    if ($a === 10)\n        return true;\n\
    \    if ($a === 11)\n        return true;\n    if ($a === 12)\n        return\
    \ true;\n    if ($a === 13)\n        return true;\n    if ($a === 14)\n      \
    \  return true;\n    if ($a === 15)\n        return true;\n    if ($a === 16)\n\
    \        return true;\n    if ($a === 17)\n        return true;\n    if ($a ===\
    \ 18)\n        return true;\n    if ($a === 19)\n        return true;\n    if\
    \ ($a === 20)\n        return true;\n    if ($a === 21)\n        return true;\n\
    \    if ($a === 22)\n        return true;\n    if ($a === 23)\n        return\
    \ true;\n    if ($a === 24)\n        return true;\n    if ($a === 25)\n      \
    \  return true;\n    if ($a === 26)\n        return true;\n    if ($a === 27)\n\
    \        return true;\n    if ($a === 28)\n        return true;\n    if ($a ===\
    \ 29)\n        return true;\n    if ($a === 30)\n        return true;\n    if\
    \ ($a === 31)\n        return true;\n    if ($a === 32)\n        return true;\n\
    \    if ($a === 33)\n        return true;\n    if ($a === 34)\n        return\
    \ true;\n    if ($a === 35)\n        return true;\n    if ($a === 36)\n      \
    \  return true;\n    if ($a === 37)\n        return true;\n    if ($a === 38)\n\
    \        return true;\n    if ($a === 39)\n        return true;\n    if ($a ===\
    \ 40)\n        return true;\n    if ($a === 41)\n        return true;\n    if\
    \ ($a === 42)\n        return true;\n    if ($a === 43)\n        return true;\n\
    \    if ($a === 44)\n        return true;\n    if ($a === 45)\n        return\
    \ true;\n    if ($a === 46)\n        return true;\n    if ($a === 47)\n      \
    \  return true;\n    if ($a === 48)\n        return true;\n    if ($a === 49)\n\
    \        return true;\n    if ($a === 50)\n        return true;\n    if ($a ===\
    \ 51)\n        return true;\n    if ($a === 52)\n        return true;\n    if\
    \ ($a === 53)\n        return true;\n    if ($a === 54)\n        return true;\n\
    \    if ($a === 55)\n        return true;\n    if ($a === 56)\n        return\
    \ true;\n    if ($a === 57)\n        return true;\n    if ($a === 58)\n      \
    \  return true;\n    if ($a === \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjv7yzib4.php on line 138

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoqzqy0m.php:36\n\
    Stack trace:\n#0 /tmp/tmpyoqzqy0m.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyoqzqy0m.php\
    \ on line 36\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a % $a == 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifu_pqt4.php:28\n\
    Stack trace:\n#0 /tmp/tmpifu_pqt4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpifu_pqt4.php\
    \ on line 28\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns67sf26.php:31\n\
    Stack trace:\n#0 /tmp/tmpns67sf26.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpns67sf26.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkrkcmrex.php:35\n\
    Stack trace:\n#0 /tmp/tmpkrkcmrex.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkrkcmrex.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxw39x5ty.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    $b = $a * $a;\n    $c =\
    \ $a * $b;\n    $d = $a * $c;\n    $e = $a * $d;\n    $f = $a * $e;\n    $g =\
    \ $a * $f;\n    $h = $a * $g;\n    $i = $a * $h;\n    $j = $a * $i;\n    $k =\
    \ $a * $j;\n    $l = $a * $k;\n    $m = $a * $l;\n    $n = $a * $m;\n    $o =\
    \ $a * $n;\n    $p = $a * $o;\n    $q = $a * $p;\n    $r = $a * $q;\n    $s =\
    \ $a * $r;\n    $t = $a * $s;\n    $u = $a * $t;\n    $v = $a * $u;\n    $w =\
    \ $a * $v;\n    $x = $a * $w;\n    $y = $a * $x;\n    $z = $a * $y;\n    if ($a\
    \ == 1) {\n        return true;\n    }\n    if ($a == 0) {\n        return true;\n\
    \    }\n    if ($a == -1) {\n        return true;\n    }\n    if ($a > 1) {\n\
    \        return false;\n    }\n    if ($a < -1) {\n        return false;\n   \
    \ }\n    if ($a > 2) {\n        return false;\n    }\n    if ($a < -2) {\n   \
    \     return false;\n    }\n    if ($a > 3) {\n        return false;\n    }\n\
    \    if ($a < -3) {\n        return false;\n    }\n    if ($a > 4) {\n       \
    \ return false;\n    }\n    if ($a < -4) {\n        return false;\n    }\n   \
    \ if ($a > 5) {\n        return false;\n    }\n    if ($a < -5) {\n        return\
    \ false;\n    }\n    if ($a > 6) {\n        return false;\n    }\n    if ($a <\
    \ -6) {\n        return false;\n    }\n    if ($a > 7) {\n        return false;\n\
    \    }\n    if ($a < -7) {\n        return false;\n    }\n    if ($a > 8) {\n\
    \        return false;\n    }\n    if ($a < -8) {\n        return false;\n   \
    \ }\n    if ($a > 9) {\n        return false;\n    }\n    if ($a < -9) {\n   \
    \     return false;\n    }\n    if ($a > 10) {\n        return false;\n    }\n\
    \    if ($a < -10) {\n        return false;\n    }\n    if ($a > 11) {\n     \
    \   return false;\n    }\n    if ($a < -11) {\n        return false;\n    }\n\
    \    if ($a > 12) {\n        return false;\n    }\n    if ($a < -12) {\n     \
    \   return false;\n    }\n    if ($a > 13) {\n        return false;\n    }\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpym1e2oey.php on line 146

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    $a = $a % 180;\n\
    \    if ($a < 90 && $a > 90) {\n        return true;\n    }\n    if ($a < 180\
    \ && $a > 90) {\n        return false;\n    }\n    if ($a < 270 && $a > 90) {\n\
    \        return true;\n    }\n    if ($a < 360 && $a > 90) {\n        return false;\n\
    \    }\n    if ($a < 450 && $a > 90) {\n        return true;\n    }\n    if ($a\
    \ < 540 && $a > 90) {\n        return false;\n    }\n    if ($a < 640 && $a >\
    \ 90) {\n        return true;\n    }\n    if ($a < 720 && $a > 90) {\n       \
    \ return false;\n    }\n    if ($a < 900 && $a > 90) {\n        return true;\n\
    \    }\n    if ($a < 1080 && $a > 90) {\n        return false;\n    }\n    if\
    \ ($a < 1200 && $a > 90) {\n        return true;\n    }\n    if ($a < 1300 &&\
    \ $a > 90) {\n        return false;\n    }\n    if ($a < 1400 && $a > 90) {\n\
    \        return true;\n    }\n    if ($a < 1500 && $a > 90) {\n        return\
    \ false;\n    }\n    if ($a < 1600 && $a > 90) {\n        return true;\n    }\n\
    \    if ($a < 1700 && $a > 90) {\n        return false;\n    }\n    if ($a < 1800\
    \ && $a > 90) {\n        return true;\n    }\n    if ($a < 1900 && $a > 90) {\n\
    \        return false;\n    }\n    if ($a < 2000 && $a > 90) {\n        return\
    \ true;\n    }\n    if ($a < 2100 && $a > 90) {\n        return false;\n    }\n\
    \    if ($a < 2200 && $a > 90) {\n        return true;\n    }\n    if ($a < 2300\
    \ && $a > 90) {\n        return false;\n    }\n    if ($a < 2400 && $a > 90) {\n\
    \        return true;\n    }\n    if ($a < 2500 && $a > 90) {\n        return\
    \ false;\n    }\n    if ($a < 2600 && $a > 90) {\n        return true;\n    }\n\
    \    if ($a < 2700 && $a > 90) {\n        return false;\n    }\n    if ($a < 2800\
    \ && $a > 90) {\n        return true;\n    }\n    if ($a < 2900 && $a > 90) {\n\
    \        return false;\n    }\n    if ($a < 3000 && $a > 90) {\n        return\
    \ true;\n    }\n    if ($a < 3100 && $a > 90) {\n        return false;\n    }\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuetav76t.php on line 128

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 6 == 0) {\n        if ($a % 3 == 0) {\n            if ($a % 5 ==\
    \ 0) {\n                if ($a % 7 == 0) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0kjq42o.php:36\n\
    Stack trace:\n#0 /tmp/tmp_0kjq42o.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_0kjq42o.php\
    \ on line 36\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 1) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n \
    \   }\n    if ($a % 5 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 9 === 0) {\n        return true;\n\
    \    }\n    if ($a % 11 === 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdf3y0dis.php:48\n\
    Stack trace:\n#0 /tmp/tmpdf3y0dis.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdf3y0dis.php\
    \ on line 48\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n  \
    \      return false;\n    }\n    if ($a < 3) {\n        return true;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 9) {\n   \
    \     return false;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a < 27) {\n        return true;\n    }\n    if ($a % 3 === 2)\
    \ {\n        return true;\n    }\n    if ($a < 81) {\n        return false;\n\
    \    }\n    if ($a % 3 === 3) {\n        return true;\n    }\n    if ($a < 243)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 4) {\n        return true;\n\
    \    }\n    if ($a < 729) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 5) {\n        return true;\n    }\n    if ($a < 3059) {\n        return false;\n\
    \    }\n    if ($a % 3 === 6) {\n        return true;\n    }\n    if ($a < 9181)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 7) {\n        return true;\n\
    \    }\n    if ($a < 36369) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 8) {\n        return true;\n    }\n    if ($a < 75791) {\n        return false;\n\
    \    }\n    if ($a % 3 === 9) {\n        return true;\n    }\n    if ($a < 159919)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 10) {\n        return true;\n\
    \    }\n    if ($a < 511389) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 11) {\n        return true;\n    }\n    if ($a < 1028911) {\n        return\
    \ false;\n    }\n    if ($a % 3 === 12) {\n        return true;\n    }\n    if\
    \ ($a < 1525797) {\n        return false;\n    }\n    if ($a % 3 === 13) {\n \
    \       return true;\n    }\n    if ($a < 2033423) {\n        return false;\n\
    \    }\n    if ($a % 3 === 14) {\n        return true;\n    }\n    if ($a < 4049871)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 15) {\n        return true;\n\
    \    }\n    if ($a < 8051933) {\n        return false;\n    }\n    if ($a % 3\
    \ === 16) {\n        return true;\n    }\n    if ($a < 16363111) {\n        return\
    \ false;\n    }\n    if ($a % 3 === 17) {\n        return true;\n    }\n    if\
    \ ($a < 32768591) {\n        return false;\n    }\n    if ($a % 3 === 18) {\n\
    \        return true;\n    }\n    if ($a < 65536361) {\n        return false;\n\
    \    }\n    if ($\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5z9uj4am.php on line 143

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 10\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxw39x5ty.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    if ($a % 9 == 0)\n        return false;\n    if ($a\
    \ % 11 == 0)\n        return true;\n    if ($a % 13 == 0)\n        return false;\n\
    \    if ($a % 15 == 0)\n        return true;\n    if ($a % 17 == 0)\n        return\
    \ false;\n    if ($a % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n\
    \        return false;\n    if ($a % 23 == 0)\n        return true;\n    if ($a\
    \ % 25 == 0)\n        return false;\n    if ($a % 27 == 0)\n        return true;\n\
    \    if ($a % 29 == 0)\n        return false;\n    if ($a % 31 == 0)\n       \
    \ return true;\n    if ($a % 33 == 0)\n        return false;\n    if ($a % 35\
    \ == 0)\n        return true;\n    if ($a % 37 == 0)\n        return false;\n\
    \    if ($a % 39 == 0)\n        return true;\n    if ($a % 41 == 0)\n        return\
    \ false;\n    if ($a % 43 == 0)\n        return true;\n    if ($a % 45 == 0)\n\
    \        return false;\n    if ($a % 47 == 0)\n        return true;\n    if ($a\
    \ % 49 == 0)\n        return false;\n    if ($a % 51 == 0)\n        return true;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return true;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return true;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return true;\n    if ($a % 65 == 0)\n        return\
    \ false;\n    if ($a % 67 == 0)\n        return true;\n    if ($a % 69 == 0)\n\
    \        return false;\n    if ($a % 71 == 0)\n        return true;\n    if ($a\
    \ % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n        return true;\n\
    \    if ($a % 77 == 0)\n        return false;\n    if ($a % 79 == 0)\n       \
    \ return true;\n    if ($a % 81 == 0)\n        return false;\n    if ($a % 83\
    \ == 0)\n        return true;\n    if ($a % 85 == 0)\n        return false;\n\
    \    if ($a % 87 == 0)\n        return true;\n    if ($a % 89 == 0)\n        return\
    \ false;\n    if ($a % 91 == 0)\n        return true;\n    if ($a % 93 == 0)\n\
    \        return false;\n    if ($a % 95 == 0)\n        return true;\n    if ($a\
    \ % 97 == 0)\n        return false;\n    if ($a % 99 == 0)\n        return true;\n\
    \    if ($a % 101 == 0)\n        return false;\n    if ($a % 103\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxne64ibb.php on line 122

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk0do56m.php:33\n\
    Stack trace:\n#0 /tmp/tmpuk0do56m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuk0do56m.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % 3 == 0) {\n        if ($a % 5 == 0) {\n            if ($a % 7 ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4crb3xw.php:34\n\
    Stack trace:\n#0 /tmp/tmpk4crb3xw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk4crb3xw.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return false;\n    }\n    if ($a % 1 !== 0) {\n \
    \       return false;\n    }\n    if ($a > 1) {\n        return false;\n    }\n\
    \    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a % 5 === 0) {\n\
    \        return true;\n    }\n    if ($a % 7 === 0) {\n        return true;\n\
    \    }\n    if ($a % 9 === 0) {\n        return true;\n    }\n    if ($a % 11\
    \ === 0) {\n        return true;\n    }\n    if ($a % 13 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 15 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 17 === 0) {\n        return true;\n    }\n    if ($a % 19 === 0) {\n \
    \       return true;\n    }\n    if ($a % 21 === 0) {\n        return true;\n\
    \    }\n    if ($a % 23 === 0) {\n        return true;\n    }\n    if ($a % 25\
    \ === 0) {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 29 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 31 === 0) {\n        return true;\n    }\n    if ($a % 33 === 0) {\n \
    \       return true;\n    }\n    if ($a % 35 === 0) {\n        return true;\n\
    \    }\n    if ($a % 37 === 0) {\n        return true;\n    }\n    if ($a % 39\
    \ === 0) {\n        return true;\n    }\n    if ($a % 41 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 43 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 45 === 0) {\n        return true;\n    }\n    if ($a % 47 === 0) {\n \
    \       return true;\n    }\n    if ($a % 49 === 0) {\n        return true;\n\
    \    }\n    if ($a % 51 === 0) {\n        return true;\n    }\n    if ($a % 53\
    \ === 0) {\n        return true;\n    }\n    if ($a % 55 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 57 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 59 === 0) {\n        return true;\n    }\n    if ($a % 61 === 0) {\n \
    \       return true;\n    }\n    if ($a % 63 === 0) {\n        return true;\n\
    \    }\n    if ($a % 65 === 0) {\n        return true;\n    }\n    if ($a % 67\
    \ === 0) {\n        return true;\n    }\n    if ($a % 69 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 71 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 73 === 0) {\n        return true;\n    }\n    if ($a % 75 === 0) {\n \
    \       return true;\n    }\n    if ($a % 77 === 0) {\n        return true;\n\
    \    }\n    if ($a % 79 === 0) {\n        return true;\n    }\n    if ($a % 81\
    \ === 0) {\n        return true;\n    }\n    if ($a % 83 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 85 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 87 === 0) {\n        return true;\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph10_itqg.php on line 172

    '
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        if ($a % $a === 0) {\n            if ($a %\
    \ $a === 0) {\n                if ($a % $a === 0) {\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsfq2bxj.php:37\n\
    Stack trace:\n#0 /tmp/tmpfsfq2bxj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfsfq2bxj.php\
    \ on line 37\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ===\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk0do56m.php:33\n\
    Stack trace:\n#0 /tmp/tmpuk0do56m.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuk0do56m.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6oo3vq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpo6oo3vq3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo6oo3vq3.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0 || $a > 180) {\n        return false;\n    }\n    if ($a % 6 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cr61g6r.php:33\n\
    Stack trace:\n#0 /tmp/tmp6cr61g6r.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6cr61g6r.php\
    \ on line 33\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 != 0)\n        return\
    \ false;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 3 == 0 && $a\
    \ % 5 == 0)\n        return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x0i6nam.php:35\n\
    Stack trace:\n#0 /tmp/tmp7x0i6nam.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7x0i6nam.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a === 0) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkt5o_9z.php:31\n\
    Stack trace:\n#0 /tmp/tmpqkt5o_9z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqkt5o_9z.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmm9q6yk.php:30\n\
    Stack trace:\n#0 /tmp/tmpbmm9q6yk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbmm9q6yk.php\
    \ on line 30\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        return false;\n    }\n    if ($a % 3 === 0) {\n  \
    \      return true;\n    }\n    if ($a % 3 === 1) {\n        return false;\n \
    \   }\n    if ($a % 3 === 2) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qwqo0_r.php:38\n\
    Stack trace:\n#0 /tmp/tmp8qwqo0_r.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8qwqo0_r.php\
    \ on line 38\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n  \
    \      return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5i86qs5.php:35\n\
    Stack trace:\n#0 /tmp/tmpb5i86qs5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5i86qs5.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbu36n_d.php:34\n\
    Stack trace:\n#0 /tmp/tmpfbu36n_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfbu36n_d.php\
    \ on line 34\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a % $a == 0) {\n        return true;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswzyqewr.php:31\n\
    Stack trace:\n#0 /tmp/tmpswzyqewr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpswzyqewr.php\
    \ on line 31\n"
  timestamp: 1659730545
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0)\n        return false;\n    if ($a % 3 == 0)\n        return\
    \ true;\n    if ($a % 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n \
    \       return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpyfasxy.php:35\n\
    Stack trace:\n#0 /tmp/tmpdpyfasxy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdpyfasxy.php\
    \ on line 35\n"
  timestamp: 1659730545
