name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of array of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return null in case the\
  \ input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
  a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n//\
  \ \"ccc\"\nfunction longest($strings) {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $longest = null;\n    foreach ($strings as $string) {\n       \
    \ if ($longest === null || strlen($string) > strlen($longest)) {\n           \
    \ $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > count($longest)) {\n            $longest = $string;\n    \
    \    }\n    }\n\n    return $longest;\n}\n", "    if (empty($strings)) {\n   \
    \     return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n\n    $longest = array_shift($strings);\n  \
    \  foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n\n    return $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = array_reduce($strings, function ($carry, $string) {\n \
    \       return strlen($carry) > strlen($string) ? $carry : $string;\n    });\n\
    \    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    if (empty($strings)) {\n        return null;\n    }\n\n    $longest = array_reduce($strings,\
    \ function ($result, $string) {\n        return strlen($string) > strlen($result)\
    \ ? $string : $result;\n    });\n\n    return empty($longest) ? null : $longest;\n\
    }\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ array_shift($strings);\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (!$strings) {\n        return null;\n    }\n\
    \    $longest = array_shift($strings);\n    foreach ($strings as $string) {\n\
    \        if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    if (empty($strings)) {\n \
    \       return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $lengths = array_map('strlen', $strings);\n    foreach\
    \ ($lengths as $length) {\n        if ($length > strlen($longest)) {\n       \
    \     $longest = $length;\n        }\n    }\n    return $longest ? $strings[$longest]\
    \ : null;\n}\n", "    $longest = null;\n    foreach ($strings as $string) {\n\
    \        if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \        $longest = $string;\n        }\n    }\n    return $longest;\n}\n", " \
    \   $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    if (empty($strings)) {\n        return null;\n\
    \    }\n\n    $longest = array_shift($strings);\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n\n    return $longest;\n}\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = array_shift($strings);\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
