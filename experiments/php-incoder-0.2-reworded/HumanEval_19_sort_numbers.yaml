name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for this! I really appreciate it. I\
    \ will try this out and let you know how it goes. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nHi again, I have tried this out and it works great! However, I noticed\
    \ that when I put in a string with multiple numbers, it only sorts the first number.\
    \ For example, if I put in \"three one five\" it only sorts \"three\". Any ideas\
    \ on how to fix this? Thanks so much!\n<|/ c |>\n<| c |>\nHi again, I have tried\
    \ this out and it works great! However, I noticed that when I put in a string\
    \ with multiple numbers, it only sorts the first number. For example, if I put\
    \ in \"three one five\" it only sorts \"three\". Any ideas on how to fix this?\
    \ Thanks so much!\n<|/ c |>\n<| c |>\nHi again, I have tried this out and it works\
    \ great! However, I noticed that when I put in a string with multiple numbers,\
    \ it only sorts the first number. For example, if I put in \"three one five\"\
    \ it only sorts \"three\". Any ideas on how to fix this? Thanks so much!\n<|/\
    \ c |>\n<| c |>\nHi again, I have tried this out and it works great! However,\
    \ I noticed that when I put in a string with multiple numbers, it only sorts the\
    \ first number. For example, if I put in \"three one five\" it only sorts \"three\"\
    . Any ideas on how to fix this? Thanks so much!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your\
    \ solution, however it fails when given a string like \"one two three four five\
    \ six seven eight nine\"\n<|/ c |>\n<| c |>\n: I fixed the bug. Now it works with\
    \ any number of numbers and spaces between them.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if the numbers are in descending order. e.g. \"one two three four five six seven\
    \ eight nine\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a ", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\
    $string = \"one two three four five six seven eight nine\";\n$array = explode(\"\
    \ \", $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting a syntax error on line 4 of your code. I'm running PHP 5.3.10.\
    \ Could this be because I'm running a Windows machine?\n<|/ c |>\n<| c |>\nI tested\
    \ this on 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on 5.3.10 and it worked fine.\n<|/ c |>\n<| c |>\nI copied the code\
    \ exactly as you wrote it. I even tried copying your exact code into a new file\
    \ and it still didn't work. I'm running PHP 5.3.10. Could this be because I'm\
    \ running a Windows machine?\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and it\
    \ worked fine. Are you sure you copied the code correctly? I tested it on 5.3.10\
    \ and it worked fine.\n<|/ c |>\n<| c |>\nI copied the code exactly as you wrote\
    \ it. I even tried copying your exact code into a new file and it still didn't\
    \ work. I'm running PHP 5.3.10. Could this be because I'm running a Windows machine?\n\
    <|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip(",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `one three five`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code exactly. I'm\
    \ running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Jul 22 2011\
    \ 18:23:06)\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and 5.3.11. Both worked\
    \ fine. Are you sure you copied the code correctly? I tested it on 5.3.10 and\
    \ 5.3.11. Both worked fine.\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and 5.3.11.\
    \ Both worked fine. Are you sure you copied the code correctly? I tested it on\
    \ 5.3.10 and 5.3.11. Both worked fine.\n<|/ c |>\n<| a |>\n<code>\n<?php", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have a string with spaces in it.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a string with spaces in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string with\
    \ spaces in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string with spaces\
    \ in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| a |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    , \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a dscore=4 |>\n<code>\n$numbers = array(\"three\", \"one\",\
    \ \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\", \"one\", \"\
    five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n<?php", "    $numbers = explode(' ', $numbers);\n   \
    \ sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=4 tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work\
    \ if you have a string like \"one two three four\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three four\"\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\n    'one',\n\
    \    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n\
    \    'eight',\n    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n\
    \    'fourteen',\n    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n\
    \    'nineteen'\n);\n\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$number", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$string = 'one two three four five six seven eight\
    \ nine';\n$array = explode(' ', $string);\nsort($array);\n$string = implode('\
    \ ', $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer helped you solve your problem, please consider marking it as\
    \ accepted (click the check mark next to the answer).\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map(\"\
    intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n\
    $numbers = implode(\" \", $numbers);\necho $numbers;", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you have numbers\
    \ like \"one two three\"\n<|/ c |>\n<| c |>\n: I added a version that handles\
    \ that.\n<|/ c |>\n<| c |>\nI like the `explode` solution. Just a small improvement:\
    \ You could use `array_map` instead of `array_walk` since `array_walk` will call\
    \ `array_map` for each element of the array. `array_map` will call `strval` on\
    \ each element of the array and `strval` will convert all elements to strings.\
    \ `array_walk` will call `strval` on each element of the array and `strval` will\
    \ convert all elements to strings. `array_walk` will call `strval` on each element\
    \ of the array and `strval` will convert all elements to strings. `array_walk`\
    \ will call `strval` on each element of the array and `strval` will convert all\
    \ elements to strings. `array_walk` will call `strval` on each element of the\
    \ array and `strval` will convert all elements to strings. `array_walk` will call\
    \ `strval` on each element of the array and `strval` will convert all elements\
    \ to strings. `array_walk` will call `strval` on each element of the array and\
    \ `strval` will convert all elements to strings. `array_walk` will call `strval`\
    \ on each element of the array and `strval` will convert all elements to strings.\
    \ `array_walk` will call `strval` on each element of the array and `strval` will\
    \ convert all elements to strings. `array_walk` will call `strval` on each element\
    \ of the array and `strval` will convert all elements to strings. `array_walk`\
    \ will call `strval` on each element of the array and `strval` will convert all\
    \ elements to strings. `array_walk` will call `strval` on each element of the\
    \ array and `strval` will convert all elements to strings. `array_walk` will call\
    \ `strval` on each element of the array and `strval` will convert all elements\
    \ to strings. `array_walk` will call `strval` on each element of the array and\
    \ `strval` will convert all elements to strings. `array_walk` will call `strval`\
    \ on each element of the array and `strval` will ", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for me. `array_map` returns an array of strings. `sort` doesn't\
    \ work on strings.\n<|/ c |>\n<| c |>\n: It works for me. `array_map` converts\
    \ the strings to integers and `sort` sorts the integers. `array_map` returns a\
    \ new array with the converted strings. `implode` converts the integers back to\
    \ strings.\n<|/ c |>\n<| c |>\n: It works for me too. `array_map` converts the\
    \ strings to integers and `sort` sorts the integers. `array_map` returns a new\
    \ array with the converted strings. `implode` converts the integers back to strings.\n\
    <|/ c |>\n<| c |>\n: It works for me too. `array_map` converts the strings to\
    \ integers and `sort` sorts the integers. `array_map` returns a new array with\
    \ the converted strings. `implode` converts the integers back to strings.\n<|/\
    \ c |>\n<| c |>\n: It works for me too. `array_map` converts the strings to integers\
    \ and `sort` sorts the integers. `array_map` returns a new array with the converted\
    \ strings. `implode` converts the integers back to strings.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  \
    \  $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ one. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = \"one two three four five six seven eight nine\"\
    ;\n$array = explode(\" \", $string);\nsort($array);\n$string = implode(\" \",\
    \ $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=2 |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n \
    \   'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n\
    \    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n\
    \    'seventeen',\n    'eighteen',\n    'nineteen'\n);\n\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied it\
    \ correctly? I tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI copied the code exactly\
    \ as you wrote it. I also tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works fine. Are you sure you copied it correctly? I\
    \ tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI copied the code exactly as you\
    \ wrote it. I also tested it on PHP 5.3.10\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', explode('\
    \ ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $number", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 3, '0',\
    \ STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers =\
    \ array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 3, '0',\
    \ STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers =\
    \ array_combine($numbers, $numbers);\n$number", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be possible to do\
    \ this without using explode() and sort(). I'm sure there's a way to do this with\
    \ regular expressions, but I'm not a regex expert.\n<|/ c |>\n<| c |>\nI added\
    \ a regex solution to my answer. Hope it helps.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `one two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. `sort_numbers(\"one two three\")` returns `one three two`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. `sort_numbers(\"one two three\"\
    )` returns `one three two`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ `sort_numbers(\"one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. `sort_numbers(\"one two three\")` returns `one\
    \ three two`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to use the\
    \ `range()` function instead of `array_map()`.  `array_map()` will create a new\
    \ array every time it is called, whereas `range()` will create an array once.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I wanted to keep it simple and clear\
    \ for OP. `range()` is also a good solution, but I wanted to keep it simple.\n\
    <|/ c |>\n<| c |>\nI agree with you that `range()` is better, but I wanted to\
    \ keep it simple and clear for OP.  I agree that `array_map()` is better, but\
    \ I wanted to keep it simple and clear for OP.  I agree that `array_map()` is\
    \ better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three four five\
    \ six seven eight nine\")` returns `one two three four five six seven eight nine`.\n\
    <|/ c |>\n<| c |>\n: It works for me in PHP 5.3.10. Are you sure you're using\
    \ PHP 5.3.10? The code I posted is PHP 5.3.10's version of `sort`.\n<|/ c |>\n\
    <| c |>\n: I added a version that works in PHP 5.3.10 and 5.2.17. Both are tested\
    \ and verified.\n<|/ c |>\n<| c |>\n: I added a version that works in PHP 5.2.17\
    \ and 5.3.10. Both are tested and verified.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works in PHP 5.3.10 and 5.2.17. Both are tested and verified.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I'm a beginner in PHP and I didn't know about explode.\
    \ I'll try to use it next time.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ dscore=2 |>\n<code>\n$numbers = array(\n    'zero',\n    'one',\n    'two',\n\
    \    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n\
    \    'nine'\n);\n\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=4 tags=php,sorting,arrays |>\n<| a dscore=4 |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=3 |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=3 tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = \"three one five\";\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three` instead of\
    \ `one three two`.\n<|/ c |>\n<| c |>\n: I tested it and it works. Are you sure\
    \ you copied it correctly? I tested it with `sort_numbers(\"one two three\")`\
    \ returning `one three two`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a tags=php,sor", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('strtolower', $numbers);\n$numbers = array_filter($numbers);\n$numbers\
    \ = array_unique($numbers);\nsort($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you have numbers\
    \ like \"one two three\"\n<|/ c |>\n<| c |>\n: It does work. Try it: `$numbers\
    \ = explode(' ', \"one two three\");\nsort($numbers);\nprint_r($numbers);`\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works. I even tested it with a string like\
    \ \"one two three\" and it worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I even tested it with a string like \"one two three\" and it\
    \ worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even\
    \ tested it with a string like \"one two three\" and it worked. Try it yourself.\n\
    <|/ c |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays dscore=5 |>\n<| c |>\nThis doesn't work if you have\
    \ numbers like \"one two three\"\n<|/ c |>\n<| c |>\n: It does work. Try it: `$numbers\
    \ = explode(' ', \"one two three\");\nsort($numbers);\nprint_r($numbers);`\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works. I even tested it with a string like\
    \ \"one two three\" and it worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I even tested it with a string like \"one two three\" and it\
    \ worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even\
    \ tested it with a string like \"one two three\" and it worked. Try it yourself.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"one two three\")` returns `one two three` instead of `one three\
    \ two`.\n<|/ c |>\n<| c |>\n: I tested it and it works fine for me. `sort_numbers(\"\
    one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine for me. `sort_numbers(\"one two three\")` returns `one three\
    \ two`.\n<|/ c |>\n<| c |>\n: I tested it again and it works fine for me. `sort_numbers(\"\
    one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine for me. `sort_numbers(\"one two three\")` returns `one three\
    \ two`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"one two\
    \ three four five six seven eight nine\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\necho $string;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($v){\n    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_map(function($v){\n    return str_pad($v, 2, \"\
    0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n    return\
    \ str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for me. I am still trying to understand\
    \ how it works. I appreciate your help.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    , \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\"\
    , $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used PHP 5.3.10\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it before posting it, and\
    \ it worked for me. Are you sure you copied the code correctly?\n<|/ c |>\n<|\
    \ c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php", "   \
    \ $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_map(function($n){return str_pad($n, 2, \"0\", STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\n$numbers = array(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = implode($numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `one two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"one two three\")` returns `one two three` instead\
    \ of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three` instead of\
    \ `one three two`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers(\"one two three\")` returns `one two three`\
    \ instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three` instead of `one three two`.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it. I will try this out and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added a more complete example to my answer.\n<|/ c |>\n<|\
    \ c |>\nThanks again! I really appreciate it. I will try this out and see how\
    \ it goes. Thanks again!\n<|/ c |>\n<| c |>\nI added a more complete example to\
    \ my answer.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate it. I will\
    \ try this out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n\
    I suggest you to use regular expression to solve this problem. \n<code>\n<?php\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight|nine)\\b/';\n$replacement = '$1 ';\n\
    echo preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight|nine)\\b/';\n$replacement = '$1 ';\n\
    echo preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it would be better\
    \ to use the `sort` function instead of `usort`.\n<|/ c |>\n<| c |>\n: I agree,\
    \ `usort` is more appropriate for this situation. I've updated my answer to reflect\
    \ this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array('zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($number", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,php |>\n\
    <| a tags=sorting,php |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\necho\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    print_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n\
    $numbers = array_slice($numbers, 0, -1);\n$numbers = array_slice($numbers, -1);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 2, \"0\"\
    , STR_PAD_LEFT);\n}, $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 5);\n$numbers = array_slice($numbers, 5);\n$numbers = array_slice($numbers,\
    \ 0, -1);\n$numbers = array_slice($numbers, -1);\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers\
    \ = implode(' ', $numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = \"three one five\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php |>\n<| a\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 5);\n$numbers = array_slice($numbers, 5);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for numbers but for strings it doesn't work. For example, if I input \"\
    one two three\" it returns \"one two three\" instead of \"one three two\". Do\
    \ you know why this happens?\n<|/ c |>\n<| c |>\nIt works fine for me. I've added\
    \ a test case to my answer. Maybe you missed something in your test?\n<|/ c |>\n\
    <| c |>\nI tested it again and now it works fine. Thanks for your help!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ c |>\nThanks for your answer. I'm going to try this out and see how it works.\n\
    <|/ c |>\n<| c |>\nI added a more complete example to my answer.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. I tried it out and it works great. I'm going to\
    \ try and implement it into my code now and see how it works.\n<|/ c |>\n<| c\
    \ |>\nI added a more complete example to my answer.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm going to try this out\
    \ and see how it works.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three` instead of\
    \ `one three two`.\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Are\
    \ you sure you copied the code correctly? The function returns `one three two`\
    \ not `one two three`.\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ PHP 5.3.10-1ubuntu3.1 on Ubuntu 12.04.\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 5.3.10-1ubuntu3.1 on Ubuntu 12.04.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10-1ubuntu3.1\
    \ on Ubuntu 12.04.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "  $numbers =\
    \ explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like this solution, but\
    \ I wonder if it will work for strings with spaces in them. For example, `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`.\n<|/ c |>\n<| c |>\nYes, it will.\
    \ `explode` will split a string on spaces, `sort` will sort the array numerically\
    \ and `implode` will reassemble the array into a string.\n<|/ c |>\n<| c |>\n\
    Thanks so much for this! I used this solution and it worked perfectly. Thanks\
    \ again!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    $numbers = implode(\" \", $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    $numbers = implode(\" \", $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n$numbers = implode(\"\
    \ \", $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\nsort($numbers);\n$numbers = implode(\" \"\
    , $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a tags=php,sorting", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ |>\n<code>\n<?php\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers\
    \ = array_map('strtolower', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\necho $numbers;", "    $numbers = explode(' ', $numbers);\n  \
    \  sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like your solution, but I prefer a solution where I do not have\
    \ to change my existing code. Thanks though!\n<|/ c |>\n<| c |>\nI added a solution\
    \ where you do not have to change your existing code.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval', explode('\
    \ ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work. `explode` returns an array,\
    \ which `array_map` then tries to `intval` on. `array_map` expects a callback\
    \ function as its second argument, and `intval` isn't a callback.\n<|/ c |>\n\
    <| c |>\nYeah, I realized that after I posted it.  I edited my answer to reflect\
    \ that.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. `explode` returns an array, which `array_map` then tries to `intval`\
    \ on. `array_map` expects a callback function as its second argument, and `intval`\
    \ isn't a callback.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work. `explode` returns an array, which `array_map` then tries to\
    \ `intval` on. `array_map` expect", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `\"one two three\"`\n<|/ c |>\n<| c |>\n: It works for me on PHP 5.3.10. Are\
    \ you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it\
    \ exactly as you wrote it. I'm running PHP 5.3.10\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and it works fine. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and it works fine. Are you sure\
    \ you copied the code correctly?\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$string = \"one two three four five six seven eight nine\";\n$array = explode(\"\
    \ \", $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ if there are multiple numbers in the string that need to be sorted together.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used the example you provided in\
    \ your question. Can you provide an example where it doesn't work?\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are multiple numbers in the string that need\
    \ to be sorted together.\n<|/ c |>\n<| c |>\nI tested it and it works. I used\
    \ the example you provided in your question. Can you provide an example where\
    \ it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if there are multiple numbers\
    \ in the string that need to be sorted together.\n<|/ c |>\n<| a dscore=4 tags=php,sorting\
    \ |>\n<code>\n$numbers = \"one two three four five six seven eight nine\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are multiple numbers in\
    \ the string that need to be sorted together.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = \"one two three four five six seven eight nine\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort($numbers);\n$numbers = implode(\" \", $numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n<code>\n$numbers = \"one two three\
    \ four five six seven eight nine\";\n$numbers = explode(\" \", $numbers);\nsort($numbers);\n\
    $numbers = implode(\" \", $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work if there are multiple numbers in the string that need\
    \ to be sorted together.\n<|/ c |>\n<| c |>\nThis doesn't work if there are multiple\
    \ numbers in the string that need to be sorted together.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n$numbers = \"one two three four five six seven eight nine\";\n$numbers\
    \ = explode(\" \", $numbers);\nsort(", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"three\", \"one\", \"five\", \"\
    two\");\nsort($numbers);\nprint_r($numbers);", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer! I tested it and it works great! But I still\
    \ don't understand why my code didn't work. Could you please explain it to me?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tested it and it works great! But I still don't understand\
    \ why my code didn't work. Could you please explain it to me?\n<|/ c |>\n<| c\
    \ |>\nI added some comments to my answer.\n<|/ c |>\n<| a tags=php |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are\
    \ you sure you copied it correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and 5.2.17\
    \ and it works fine. Are you sure you copied the code correctly? I tested it on\
    \ http://writecodeonline.com/php/ and it works fine.\n<|/ c |>\n<| c |>\nYes,\
    \ I copied the code correctly. I'm running PHP 5.3.10\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\nsort($array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\nsort($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"`\n<|/ ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a |>\n<| a |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$numbers = array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution,\
    \ but I believe it would be better to use a `switch` statement to handle each\
    \ of the possible numbers, rather than a series of `if` statements.\n<|/ c |>\n\
    <| c |>\nI agree. I've edited my answer to include a switch statement to handle\
    \ each of the possible numbers. Thanks.\n<|/ c |>\n<| c |>\nI like this solution,\
    \ too, but I believe it would be better to use a switch statement to handle each\
    \ of the possible numbers, rather than a series of if statements.\n<|/ c |>\n\
    <| c |>\nI agree. I've edited my answer to include a switch statement to handle\
    \ each of the possible numbers. Thanks.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for my example, but when I try to use it on my real\
    \ data, it gives me this error: Warning: sort() expects parameter 1 to be array,\
    \ null given in /Applications/MAMP/htdocs/mysite/public_html/mysite/functions.php\
    \ on line 12\n<|/ c |>\n<| c |>\nIt sounds like your data isn't being read in\
    \ correctly. Can you post the code you're using to read in the data?\n<|/ c |>\n\
    <| c |>\nI added the code I used to read in the data to the original post. Thanks!\n\
    <|/ c |>\n<| c |>\nI updated my answer with a solution that should work for you.\n\
    <|/ c |>\n<| c |>\nThanks so much for your help! I really appreciate it!\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\nYou can use the usort function of PHP\
    \ to sort your array in ascending order. \n<code>\n<?php\n$array = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    , \"ten\");\nusort($array, create_function('$a, $b', 'return strcmp($a, $b);'));\n\
    print_r($array);", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\");\nsort($numbers);\n$numbers = implode($numbers);\necho\
    \ $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    );\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ if the numbers are in any order other than \"zero one two three four five six\
    \ seven eight nine\".\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting\
    \ it. The OP didn't specify what to do with numbers in other orders.\n<|/ c |>\n\
    <| c |>\n: I added a second solution that sorts numbers in any order.\n<|/ c |>\n\
    <| c |>\n: I added a third solution that sorts numbers in any order.\n<|/ c |>\n\
    <| c |>\n: I added a fourth solution that sorts numbers in any order.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    , \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\"\
    , \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ perfectly but i was looking for a solution without using any php functions.\
    \ I guess i will have to go with your solution. Thanks again\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode('\
    \ ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers\
    \ = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n$numbers = explode('\
    \ ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers\
    \ = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers\
    \ = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 tags=php,sorting |>\n<| a tags=php,", "    $numbers =\
    \ explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have more than\
    \ 9 numbers. Try `sort_numbers(\"three one five two seven eight nine\")`\n<|/\
    \ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nIt does, but\
    \ only because you used `sort` instead of `array_sort`\n<|/ c |>\n<| c |>\nYes,\
    \ I know. That's why I said \"it does.\" I didn't say it didn't work. I said it\
    \ didn't work if you used `sort` instead of `array_sort`.\n<|/ c |>\n<| c |>\n\
    I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I see what you mean. Yes, I see what you mean. Yes, I see what you mean. Yes,\
    \ I ", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$array\
    \ = array_map('strtolower', $array);\n$array = array_unique($array);\nsort($array);\n\
    $array = array_reverse($array);\n$array = array_map(function($v){\n    return\
    \ str_replace('nine', '9', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('zero', '1', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('one', '2', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('two', '3', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('three', '4', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('four', '5', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('five', '6', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('six', '7', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('seven', '8', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('eight', '9', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('nine', '0', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('ten', '10', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('eleven', '11', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('twelve', '12', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('thirteen', '13', $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace('four", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"one two three\")` returns `\"one two three\"`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.4.4 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.4.4 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.4.4 and it works. Are you sure you copied the code\
    \ correctly? I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$string = \"one two three\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `\"\
    one two three\"`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"one two three\")` returns `\"one two three\"`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")`\
    \ returns `\"one two three\"`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `\"one two three\"`\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    $string = \"one two three\";\n$array = explode(\" \", $string);\nsort($array);\n\
    $string = implode(\" \", ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns `\"\
    one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I used PHP\
    \ 5.3.10. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested\
    \ it again and it works. I used PHP 5.3.10. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\n: I tested it again and it works. I used PHP 5.3.10. Maybe\
    \ you have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested it again and\
    \ it works. I used PHP 5.3.10. Maybe you have a different PHP version?\n<|/ c\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one\
    \ five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it and\
    \ it works. I used PHP 5.3.10. Maybe you have a different PHP version?\n<|/ c\
    \ |>\n<| c |>\n: I tested it again and it works. I used PHP 5.3.10. Maybe you\
    \ have a different PHP version?\n<|/ c |>\n<| c |>\n: I tested it again and it\
    \ works. I used PHP 5.3.10. Maybe you have a different PHP version?\n<|/ c |>\n\
    <| c |>\n: I tested it again and it works. I used PHP 5.3.10. Maybe you have a\
    \ different PHP version?\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like\
    \ your solution, but I believe it would be better to use a foreach loop instead\
    \ of array_map.\n<|/ c |>\n<| c |>\nI agree with you, foreach is better than array_map.\n\
    <|/ c |>\n<| c |>\nI agree with you, foreach is better than array_map.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, foreach is better than array_map.\n<|/ c |>\n\
    <| c |>\nI agree with you, foreach is better than array_map.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post - you\
    \ can always comment on your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ sort an array in PHP and this is the way to do it.\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post - you can always comment on\
    \ your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](http://stackoverflow.com/help/privileges/comment).\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ sort an array in PHP and this is the way to do it.\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post - you can always comment on\
    \ your own posts, and once you have sufficient [reputation](http://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on ", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like your solution, however it fails when the numbers are in\
    \ descending order. `sort_numbers(\"three one five\")` returns `\"three five one\"\
    `.\n<|/ c |>\n<| c |>\nYes, I noticed that after I posted my answer. I've updated\
    \ my answer to fix it.\n<|/ c |>\n<| c |>\nThanks for your answer! I added a little\
    \ bit of code to make it work properly with negative numbers as well. `sort_numbers(\"\
    three one five two\")` returns `\"one two three five\"`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c\
    \ |>\nThis doesn't work if the numbers are already sorted (as in the question)\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require sorting (but does require\
    \ a space delimited string).\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\nprint_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to reverse the order of the array elements. Your answer reverses the\
    \ order of the array.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to reverse the order\
    \ of the array elements. Your answer reverses the order of the array.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to reverse the order of the array elements. Your answer reverses the order of\
    \ the array.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to reverse the order of the\
    \ array elements. Your answer reverses the order of the array.\n<|/ c |>\n<| a\
    \ tags=php,sorting |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to reverse the order of the array elements. Your answer reverses the order of\
    \ the array.\n<|/ c |>\n<| a tags=php,sorting |>\n", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one\
    \ five\")` returns `\"one three five\"`\n<|/ c |>\n<| c |>\n: It works for me.\
    \ Are you sure you copied it correctly? It works for me in PHP 5.3.6 and PHP 5.4.4.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does that work for you?\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThanks so much! I really appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, ", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `one two three`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.3\
    \ and it works. Are you sure you copied the code correctly?\n<|/ c |>\n<| c |>\n\
    Yes, I copied it exactly. I'm running PHP 5.3.3 on OS X 10.6.8. I'm going to try\
    \ it on another machine and see if I can get it to work.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.3 and it works. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.3 and it works. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_slice(", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there's a way to do this without using an array? I mean, is there a way to do\
    \ this without using an array?\n<|/ c |>\n<| c |>\n: Not that I know of. `explode`\
    \ will always return an array, so you have to either use an array, or a loop to\
    \ process each element of the array.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ doesn't use an array, but I still think it's better to use a loop.\n<|/ c |>\n\
    <| c |>\n: I added a version that doesn't use an array, but I still think it's\
    \ better to use a loop.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use\
    \ an array, but I still think it's better to use a loop.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ c |>\nI like your solution, but I prefer a solution where you do not need to\
    \ know the length of the array beforehand.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require knowing the length of the array beforehand.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\nsort($numbers);\n\
    $numbers = implode(\" \", $numbers);\necho $numbers;", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n \
    \   'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n);\n\n$numbers\
    \ = array_flip($numbers);\nksort($numbers);\n$numbers = array_flip($numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis answer should be the accepted one. Simple\
    \ and effective.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\nksort($numbers);\n$numbers = array_flip($numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=4 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\nksort($numbers);\n$numbers = array_flip($numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\nksort($numbers);\n$numbers = array_flip($numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\nksort($numbers);\n$numbers = array_flip($numbers);\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n$numbers = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_reverse($array);\n\
    print_r($array);", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ c |>\nThis doesn't work if the numbers are in any order other than ascending.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the numbers are in any order other than\
    \ ascending.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_map('strtolower',\
    \ $array);\nsort($array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n$array = array_map('ucfirst', $array);\n$array = array_map('ucfirst',\
    \ $array);\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($", "    $numbers =\
    \ explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers,\
    \ $numbers);\n$numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\"one\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, 3);\n\
    $numbers = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This doesn't work if there are multiple spaces between the numbers. For example,\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| c |>\nI added a version that handles multiple spaces.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\",\
    \ $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers\
    \ = implode(\" \", $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\",\
    \ $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers\
    \ = implode(\" \", $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\", $numbers);\n\
    sort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\"\
    \ \", $numbers);\n</code>\n<|/ a tags=php,sorting,string |>\n<| a dscore=1 |>\n\
    <code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\", $numbers);\n\
    sort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\"\
    \ \", $numbers);\n</code>\n<|/ a tags=php,sorting,string |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\",\
    \ $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n$numbers\
    \ = implode(\" \", $numbers);\n</code>\n<|/ a d", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't answer the question. He\
    \ wants to sort by number not alphabetically.\n<|/ c |>\n<| c |>\n: I added a\
    \ comment to the question asking for a clarification.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. He wants to sort by number not alphabetically. My answer does\
    \ that.\n<|/ c |>\n<| c |>\n: I added a comment to the question asking for a clarification.\n\
    <|/ c |>\n<| c |>\n: I added a comment to the question asking for a clarification.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. He wants to sort\
    \ by number not alphabetically.\n<|/ c |>\n<| c |>\n: I added a comment to the\
    \ question asking for a clarification.\n<|/ c |>\n<| c |>\n: I added a comment\
    \ to the question asking for a clarification.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't answer the question. He wants to sort by number not alphabetically.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\n\
    sort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your solution, however it only\
    \ works with numbers, not with words. For example: sort_numbers(\"one two three\"\
    ) returns \"one two three\", but sort_numbers(\"one two three four\") returns\
    \ \"one two three four\".\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ words as well.\n<|/ c |>\n<| c |>\nI like your solution, however it only works\
    \ with numbers, not with words. For example: sort_numbers(\"one two three\") returns\
    \ \"one two three\", but sort_numbers(\"one two three four\") returns \"one two\
    \ three four\".\n<|/ c |>\n<| c |>\n: I added a version that works with words\
    \ as well.\n<|/ c |>\n<| c |>\nI like your solution, however it only works with\
    \ numbers, not with words. For example: sort_numbers(\"one two three\") returns\
    \ \"one two three\", but sort_numbers(\"one two three four\") returns \"one two\
    \ three four\".\n<|/ c |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('intval', $array);\nsort($array);\n$array\
    \ = array_map('strval', $array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis worked\
    \ for me in PHP 5.3.10. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me in PHP\
    \ 5.3.10. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me in PHP 5.3.10. Thanks!\n\
    <|/ c |>\n<| c |>\nThis worked for me in PHP 5.3.10. Thanks!\n<|/ c |>\n<| c |>\n\
    This worked for me in PHP 5.3.10. Thanks!\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$array = array_map('intval', $array);\nsort($array);\n$array\
    \ = array_map('strval', $array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis worked\
    \ for me in PHP 5.3.10. Thanks!\n<|/ c |>\n<| c |>\nThis worked for me in PHP\
    \ 5.3.10. Thanks!\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$array = array_map('intval',\
    \ $array);\nsort($array);\n$array = array_map('strval', $array);\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| c |>\nThis worked for me in PHP 5.3.10. Thanks!\n\
    <|/ c |>\n<| a |>\n<code>\n$array = array('one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$array = array_map('intval', $array);\nsort($array);\n\
    $array = array_map", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Works perfectly and it's easy to understand.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's\
    \ easy to understand.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly and it's easy to understand.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly and it's easy to understand.\n<|/ c\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly and it's easy\
    \ to understand.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\"one\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_map(function($v){return $v+1;}, $numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_slice($numbers,\
    \ 0, 9);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"\
    , \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\"\
    , \"eighteen\", \"nineteen\");\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nI like this one. Very elegant. Thanks!\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $number", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for\
    \ me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c\
    \ |>\n<| c |>\nYes, it does. I tested it before posting.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\n\
    print_r($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant than my solution. Thanks!\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ my solution. Thanks!\n<|/ c |>\n<| c |>\nI like this solution, but I find it\
    \ a little hard to read. Is there a way to make it more readable?\n<|/ c |>\n\
    <| c |>\nI like it too, but I find it a little hard to read. Is there a way to\
    \ make it more readable?\n<|/ c |>\n<| c |>\nI like it too, but I find it a little\
    \ hard to read. Is there a way to make it more readable?\n<|/ c |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$numbers = \"three one five\";\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than my solution.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant\
    \ than my solution. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant than my solution. Thanks!\n<|/ c |>\n<| a tags=php,sorting,string\
    \ |>\n<code>\n$numbers = \"three one five\";\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis should be the accepted answer. Much more elegant than my solution.\
    \ Thanks!\n<|/ c |>\n<| a tags=php,sorting,string |>\n<code>\n$numbers = \"three\
    \ one five\";\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n\
    $numbers = \"three one five\";\n$numbers = explode(' ', $", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! But I already have this function in place and I cannot\
    \ change it. I am looking for a way to do it without changing the function.\n\
    <|/ c |>\n<| c |>\nOkay, I added a second solution that doesn't change the function\n\
    <|/ c |>\n<| c |>\nThanks again! I really appreciate it! But I already have this\
    \ function in place and I cannot change it. I am looking for a way to do it without\
    \ changing the function.\n<|/ c |>\n<| c |>\nOkay, I added a third solution that\
    \ doesn't change the function\n<|/ c |>\n<| c |>\nThanks again! I really appreciate\
    \ it! But I already have this function in place and I cannot change it. I am looking\
    \ for a way to do it without changing the function.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php |>\n<code>\n\
    <?php\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  \
    \  $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work for me. I'm getting `Array ( [0] => one [1] => two [2] => three [3] =>\
    \ four [4] => five [5] => six [6] => seven [7] => eight [8] => nine )` when I\
    \ run this code.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and PHP 5.4.4 and\
    \ it worked fine. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and PHP 5.4.4 and it worked fine. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and PHP 5.4.4 and\
    \ it worked fine. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.3.10 and PHP 5.4.4 and it worked fine. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for me. I'm getting `Array ( [0] => one [1] => two [2] => three\
    \ [3] => four [4] => five [5] => six [6] => seven [7] => eight [8] => nine )`\
    \ when I run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for me. I'm getting\
    \ `Array ( [0] => one [1] => two [2] => three [3] => four [4] => five [5] => six\
    \ [6] => seven [7] => eight [8] => nine )` when I run this code.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me. I'm getting `Array ( [0] => one [1] => two [2]\
    \ => three [3] => four [4] => five [5] => six [6] => seven [7] => eight [8] =>\
    \ nine )` when I run this code.\n<|/ c |>\n<| c |>\nThis doesn't work for me. ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n$numbers\
    \ = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count($numbers)-3);\n\
    $numbers = array_slice($numbers, 0, count($numbers)-3);\n$numbers = array_slice($numbers,\
    \ 0, count($numbers)-3);\n$numbers = array_slice($numbers, 0, count(", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\n\
    sort($array);\n$array = array_map(\"strval\", $array);\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$array\
    \ = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"strval\"\
    , $array);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\nsort($array);\n\
    $array = array_map(\"strval\", $array);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\n\
    sort($array);\n$array = array_map(\"strval\", $array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$array = array_map(\"intval\", $array);\nsort($array);\n$array = array_map(\"\
    strval\", $array);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$array = array_map(\"intval\", $array);\nsort($array);\n\
    $array = array_map(\"strval\", $array);\n</code>\n<|/ a tag", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like your solution, it's very elegant and simple.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your solution, it's very elegant and simple.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your solution, it's very elegant and simple.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your solution, it's very elegant and simple.\
    \ Thanks!\n<|/ c |>\n<| c |>\nI like your solution, it's very elegant and simple.\
    \ Thanks!\n<|/ c |>\n<| a dscore=5 tags=sorting,php |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\");\nsort($numbers);\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if you have numbers with leading zeros, e.g. \"001\", \"002\",\
    \ \"003\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have numbers with leading\
    \ zeros, e.g. \"001\", \"002\", \"003\"\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have numbers with leading zeros, e.g. \"001\", \"002\", \"003\"\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have numbers with leading zeros, e.g.\
    \ \"001\", \"002\", \"003\"\n<|/ c |>\n<| c |>\nThis doesn't work if you have\
    \ numbers with leading zeros, e.g. \"001\", \"002\", \"003\"\n<|/ c |>\n<| a tags=sorting,php\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have numbers with\
    \ leading zeros, e.g. \"001\", \"002\", \"003\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have numbers with leading zeros, e.g. \"001\", \"002\", \"003\"\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have numbers with leading zeros, e.g.\
    \ \"001\", \"002\", \"003\"\n<|/ c |>\n<| a tags=sorting,php |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\n</code>\n<|/", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\nsort($numbers);\nprint_r($numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"` instead of `\"\
    one three five\"`.\n<|/ c |>\n<| c |>\n: It works for me. `sort_numbers(\"three\
    \ one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it\
    \ on PHP 5.3.10 and PHP 5.2.17. Both work fine.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both work fine.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.2.17. Both work fine.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map(\"\
    intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"` instead of `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\"\
    )` returns `\"one three five\"` instead of `\"one three five\"`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns `\"\
    one three five\"` instead of `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    ` instead of `\"one three five\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"three one five\")` returns `\"one three five\"` instead of `\"\
    one three five\"`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$array = array_reverse($array);\n$array = array_merge($array);\n\
    $array = array_unique($array);\n$array = array_slice($array, 0, 3);\n$array =\
    \ array_slice($array, 1, count($array));\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$array\
    \ = array_reverse($array);\n$array = array_merge($array);\n$array = array_unique($array);\n\
    $array = array_slice($array, 0, 3);\n$array = array_slice($array, 1, count($array));\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"one\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$array = array_reverse($array);\n$array = array_merge($array);\n$array = array_unique($array);\n\
    $array = array_slice($array, 0, 3);\n$array = array_slice($array, 1, count($array));\n\
    </code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    $array = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$array = array_reverse($array);\n$array = array_merge($array);\n\
    $array = array_unique($array);\n$array = array_slice($array, 0, 3);\n$array =\
    \ array_slice($array, 1, count($array));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"one\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\", \"seven\", \"eight\", \"nine\");\n$array = array_reverse($array);\n\
    $array = array_merge($array);\n$array = array_unique($array);\n$array = array_slice($array,\
    \ 0, 3);\n$array = array_slice($array, 1, count($array));\n</code>\n<|/ a tag",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but\
    \ I feel like it would be better to use a regular expression to match numbers.\
    \ `preg_replace('/[^0-9]+/', '', $numbers)` would remove all non-numeric characters.\
    \ Then you could use `preg_split('/\\s+/', $numbers)` to split on whitespace.\n\
    <|/ c |>\n<| c |>\nI agree that regex would be better, but I wanted to keep it\
    \ simple for OP's benefit and because I didn't want to overcomplicate things.\
    \ I added your suggestion to the answer.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I feel like it would be better to use a regular expression to match numbers.\
    \ `preg_replace('/[^0-9]+/', '', $numbers)` would remove all non-numeric characters.\
    \ Then you could use `preg_split('/\\s+/', $numbers)` to split on whitespace.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I feel like it would be better to\
    \ use a regular expression to match numbers. `preg_replace('/[^0-9]+/', '', $numbers)`\
    \ would remove all non-numeric characters. Then you could use `preg_split('/\\\
    s+/', $numbers)` to split on whitespace.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I feel like it would be better to use a regular expression to match numbers.\
    \ `preg_replace('/[^0-9]+/', '', $numbers)` would remove all non-numeric characters.\
    \ Then you could use `preg_split('/\\s+/', $numbers)` to split on whitespace.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = \"one two three four five\
    \ six seven eight nine\";\n$numbers = preg_replace('/[^0-9]+/', '', $numbers);\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like\
    \ how you used `explode()` and `sort()` instead of `preg_split()`\n<|/ c |>\n\
    <| c |>\nI like how you used `explode()` and `sort()` instead of `preg_split()`\n\
    <|/ c |>\n<| c |>\nI like how you used `explode()` and `sort()` instead of `preg_split()`\n\
    <|/ c |>\n<| c |>\nI like how you used `explode()` and `sort()` instead of `preg_split()`\n\
    <|/ c |>\n<| c |>\nI like how you used `explode()` and `sort()` instead of `preg_split()`\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
