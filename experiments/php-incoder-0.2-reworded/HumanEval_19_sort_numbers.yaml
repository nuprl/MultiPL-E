name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$number",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for this! I really appreciate it. I\
    \ will try this out and let you know how it goes. Thanks again!\n<|/ c |>\n<|\
    \ c |>\nHi again, I have tried this out and it works great! However, I noticed\
    \ that when I put in a string with multiple numbers, it only sorts the first number.\
    \ For example, if I put in \"three one five\" it only sorts \"three\". Any ideas\
    \ on how to fix this? Thanks so much!\n<|/ c |>\n<| c |>\nHi again, I have tried\
    \ this out and it works great! However, I noticed that when I put in a string\
    \ with multiple numbers, it only sorts the first number. For example, if I put\
    \ in \"three one five\" it only sorts \"three\". Any ideas on how to fix this?\
    \ Thanks so much!\n<|/ c |>\n<| c |>\nHi again, I have tried this out and it works\
    \ great! However, I noticed that when I put in a string with multiple numbers,\
    \ it only sorts the first number. For example, if I put in \"three one five\"\
    \ it only sorts \"three\". Any ideas on how to fix this? Thanks so much!\n<|/\
    \ c |>\n<| c |>\nHi again, I have tried this out and it works great! However,\
    \ I noticed that when I put in a string with multiple numbers, it only sorts the\
    \ first number. For example, if I put in \"three one five\" it only sorts \"three\"\
    . Any ideas on how to fix this? Thanks so much!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your\
    \ solution, however it fails when given a string like \"one two three four five\
    \ six seven eight nine\"\n<|/ c |>\n<| c |>\n: I fixed the bug. Now it works with\
    \ any number of numbers and spaces between them.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if the numbers are in descending order. e.g. \"one two three four five six seven\
    \ eight nine\"\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $numbers = explode(' ', $numbers);\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a ", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\
    $string = \"one two three four five six seven eight nine\";\n$array = explode(\"\
    \ \", $string);\nsort($array);\n$string = implode(\" \", $array);\necho $string;",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for\
    \ me. I'm getting a syntax error on line 4 of your code. I'm running PHP 5.3.10.\
    \ Could this be because I'm running a Windows machine?\n<|/ c |>\n<| c |>\nI tested\
    \ this on 5.3.10 and it worked fine. Are you sure you copied the code correctly?\
    \ I tested it on 5.3.10 and it worked fine.\n<|/ c |>\n<| c |>\nI copied the code\
    \ exactly as you wrote it. I even tried copying your exact code into a new file\
    \ and it still didn't work. I'm running PHP 5.3.10. Could this be because I'm\
    \ running a Windows machine?\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and it\
    \ worked fine. Are you sure you copied the code correctly? I tested it on 5.3.10\
    \ and it worked fine.\n<|/ c |>\n<| c |>\nI copied the code exactly as you wrote\
    \ it. I even tried copying your exact code into a new file and it still didn't\
    \ work. I'm running PHP 5.3.10. Could this be because I'm running a Windows machine?\n\
    <|/ c |>\n<| a tags=sorting,php,arrays |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip(",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `one three five`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine for me. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code exactly. I'm\
    \ running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Jul 22 2011\
    \ 18:23:06)\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and 5.3.11. Both worked\
    \ fine. Are you sure you copied the code correctly? I tested it on 5.3.10 and\
    \ 5.3.11. Both worked fine.\n<|/ c |>\n<| c |>\nI tested it on 5.3.10 and 5.3.11.\
    \ Both worked fine. Are you sure you copied the code correctly? I tested it on\
    \ 5.3.10 and 5.3.11. Both worked fine.\n<|/ c |>\n<| a |>\n<code>\n<?php", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n\
    <code>\n$numbers = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if\
    \ you have a string with spaces in it.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have a string with spaces in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string with\
    \ spaces in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"\
    three\", \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work if you have a string with spaces\
    \ in it.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a dscore=4 |>\n<| a |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    , \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ dscore=4 |>\n<| a dscore=4 |>\n<code>\n$numbers = array(\"three\", \"one\",\
    \ \"five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array(\"three\", \"one\", \"\
    five\", \"two\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks so much for this! I really appreciate it!\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n<?php", "    $numbers = explode(' ', $numbers);\n   \
    \ sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=4 tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work\
    \ if you have a string like \"one two three four\"\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"one two three four\"\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    </code>\n<|/ a dscore=4 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    $numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"\
    seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\");\n$numbers = array_reverse($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n</code>\n<|/ a ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\n    'one',\n\
    \    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n\
    \    'eight',\n    'nine',\n    'ten',\n    'eleven',\n    'twelve',\n    'thirteen',\n\
    \    'fourteen',\n    'fifteen',\n    'sixteen',\n    'seventeen',\n    'eighteen',\n\
    \    'nineteen'\n);\n\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$number", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$string = 'one two three four five six seven eight\
    \ nine';\n$array = explode(' ', $string);\nsort($array);\n$string = implode('\
    \ ', $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer helped you solve your problem, please consider marking it as\
    \ accepted (click the check mark next to the answer).\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n", "  $numbers = explode(' ', $numbers);\n \
    \ sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array(\"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\"\
    , \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers = array_map(\"\
    intval\", $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\n\
    $numbers = implode(\" \", $numbers);\necho $numbers;", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you have numbers\
    \ like \"one two three\"\n<|/ c |>\n<| c |>\n: I added a version that handles\
    \ that.\n<|/ c |>\n<| c |>\nI like the `explode` solution. Just a small improvement:\
    \ You could use `array_map` instead of `array_walk` since `array_walk` will call\
    \ `array_map` for each element of the array. `array_map` will call `strval` on\
    \ each element of the array and `strval` will convert all elements to strings.\
    \ `array_walk` will call `strval` on each element of the array and `strval` will\
    \ convert all elements to strings. `array_walk` will call `strval` on each element\
    \ of the array and `strval` will convert all elements to strings. `array_walk`\
    \ will call `strval` on each element of the array and `strval` will convert all\
    \ elements to strings. `array_walk` will call `strval` on each element of the\
    \ array and `strval` will convert all elements to strings. `array_walk` will call\
    \ `strval` on each element of the array and `strval` will convert all elements\
    \ to strings. `array_walk` will call `strval` on each element of the array and\
    \ `strval` will convert all elements to strings. `array_walk` will call `strval`\
    \ on each element of the array and `strval` will convert all elements to strings.\
    \ `array_walk` will call `strval` on each element of the array and `strval` will\
    \ convert all elements to strings. `array_walk` will call `strval` on each element\
    \ of the array and `strval` will convert all elements to strings. `array_walk`\
    \ will call `strval` on each element of the array and `strval` will convert all\
    \ elements to strings. `array_walk` will call `strval` on each element of the\
    \ array and `strval` will convert all elements to strings. `array_walk` will call\
    \ `strval` on each element of the array and `strval` will convert all elements\
    \ to strings. `array_walk` will call `strval` on each element of the array and\
    \ `strval` will convert all elements to strings. `array_walk` will call `strval`\
    \ on each element of the array and `strval` will ", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers =\
    \ array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for me. `array_map` returns an array of strings. `sort` doesn't\
    \ work on strings.\n<|/ c |>\n<| c |>\n: It works for me. `array_map` converts\
    \ the strings to integers and `sort` sorts the integers. `array_map` returns a\
    \ new array with the converted strings. `implode` converts the integers back to\
    \ strings.\n<|/ c |>\n<| c |>\n: It works for me too. `array_map` converts the\
    \ strings to integers and `sort` sorts the integers. `array_map` returns a new\
    \ array with the converted strings. `implode` converts the integers back to strings.\n\
    <|/ c |>\n<| c |>\n: It works for me too. `array_map` converts the strings to\
    \ integers and `sort` sorts the integers. `array_map` returns a new array with\
    \ the converted strings. `implode` converts the integers back to strings.\n<|/\
    \ c |>\n<| c |>\n: It works for me too. `array_map` converts the strings to integers\
    \ and `sort` sorts the integers. `array_map` returns a new array with the converted\
    \ strings. `implode` converts the integers back to strings.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  \
    \  $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this\
    \ one. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| c |>\nI like this one\
    \ too. Very concise and easy to understand.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$string = \"one two three four five six seven eight nine\"\
    ;\n$array = explode(\" \", $string);\nsort($array);\n$string = implode(\" \",\
    \ $array);\necho $string;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=2 |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array(\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n \
    \   'six',\n    'seven',\n    'eight',\n    'nine',\n    'ten',\n    'eleven',\n\
    \    'twelve',\n    'thirteen',\n    'fourteen',\n    'fifteen',\n    'sixteen',\n\
    \    'seventeen',\n    'eighteen',\n    'nineteen'\n);\n\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = ", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1\
    \ |>\n<code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"three one five\")` returns `\"one three five\"\
    `\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you sure you copied it\
    \ correctly? I tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI copied the code exactly\
    \ as you wrote it. I also tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and it works fine. Are you sure you copied it correctly? I\
    \ tested it on PHP 5.3.10\n<|/ c |>\n<| c |>\nI copied the code exactly as you\
    \ wrote it. I also tested it on PHP 5.3.10\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n\
    $numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval', explode('\
    \ ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ explode(' ', $numbers));\nsort($numbers);\n$numbers = implode(' ', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', explode(' ', $numbers));\nsort($numbers);\n$numbers =\
    \ implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', explode(' ', $numbers));\n\
    sort($numbers);\n$numbers = implode(' ', $number", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 3, '0',\
    \ STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers =\
    \ array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_values($numbers);\n$numbers = array_slice($numbers, 0, 9);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 3, '0',\
    \ STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_combine($numbers, $numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_values($numbers);\n$numbers\
    \ = array_slice($numbers, 0, 9);\n$numbers = array_map(function($number) {\n \
    \   return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers =\
    \ array_combine($numbers, $numbers);\n$number", "    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder if it would be possible to do\
    \ this without using explode() and sort(). I'm sure there's a way to do this with\
    \ regular expressions, but I'm not a regex expert.\n<|/ c |>\n<| c |>\nI added\
    \ a regex solution to my answer. Hope it helps.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$numbers = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `one two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. `sort_numbers(\"one two three\")` returns `one three two`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. `sort_numbers(\"one two three\"\
    )` returns `one three two`.\n<|/ c |>\n<| c |>\nI tested it and it works fine.\
    \ `sort_numbers(\"one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine. `sort_numbers(\"one two three\")` returns `one\
    \ three two`.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to use the\
    \ `range()` function instead of `array_map()`.  `array_map()` will create a new\
    \ array every time it is called, whereas `range()` will create an array once.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I wanted to keep it simple and clear\
    \ for OP. `range()` is also a good solution, but I wanted to keep it simple.\n\
    <|/ c |>\n<| c |>\nI agree with you that `range()` is better, but I wanted to\
    \ keep it simple and clear for OP.  I agree that `array_map()` is better, but\
    \ I wanted to keep it simple and clear for OP.  I agree that `array_map()` is\
    \ better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple and clear for OP.  I agree that `array_map()`\
    \ is better, but I wanted to keep it simple ", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three four five\
    \ six seven eight nine\")` returns `one two three four five six seven eight nine`.\n\
    <|/ c |>\n<| c |>\n: It works for me in PHP 5.3.10. Are you sure you're using\
    \ PHP 5.3.10? The code I posted is PHP 5.3.10's version of `sort`.\n<|/ c |>\n\
    <| c |>\n: I added a version that works in PHP 5.3.10 and 5.2.17. Both are tested\
    \ and verified.\n<|/ c |>\n<| c |>\n: I added a version that works in PHP 5.2.17\
    \ and 5.3.10. Both are tested and verified.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that works in PHP 5.3.10 and 5.2.17. Both are tested and verified.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I'm a beginner in PHP and I didn't know about explode.\
    \ I'll try to use it next time.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php", "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ dscore=2 |>\n<code>\n$numbers = array(\n    'zero',\n    'one',\n    'two',\n\
    \    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n\
    \    'nine'\n);\n\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=2 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php",
  "    $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a dscore=4 tags=php,sorting,arrays |>\n<| a dscore=4 |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=3 |>\n<code>\n\
    $numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=3 tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers\
    \ = array(\"three\", \"one\", \"five\");\n", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = explode(' ', $numbers);\nsort($numbers);\n\
    $numbers = implode(' ', $numbers);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = \"three one five\";\n$numbers = explode(' ', $numbers);\n\
    sort($numbers);\n$numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three` instead of\
    \ `one three two`.\n<|/ c |>\n<| c |>\n: I tested it and it works. Are you sure\
    \ you copied it correctly? I tested it with `sort_numbers(\"one two three\")`\
    \ returning `one three two`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\n$numbers = array(\"three\"\
    , \"one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=4\
    \ |>\n<| a dscore=4 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=3 |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\"\
    );\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"three\", \"\
    one\", \"five\");\nsort($numbers);\nprint_r($numbers);\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\n<code>\n$numbers = array(\"three\", \"one\", \"five\");\nsort($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a tags=php,sor", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers\
    \ = array_map('strtolower', $numbers);\n$numbers = array_filter($numbers);\n$numbers\
    \ = array_unique($numbers);\nsort($numbers);\n$numbers = array_reverse($numbers);\n\
    $numbers = implode(' ', $numbers);\necho $numbers;", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you have numbers\
    \ like \"one two three\"\n<|/ c |>\n<| c |>\n: It does work. Try it: `$numbers\
    \ = explode(' ', \"one two three\");\nsort($numbers);\nprint_r($numbers);`\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works. I even tested it with a string like\
    \ \"one two three\" and it worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I even tested it with a string like \"one two three\" and it\
    \ worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even\
    \ tested it with a string like \"one two three\" and it worked. Try it yourself.\n\
    <|/ c |>\n<| a |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\n</code>\n\
    <|/ a tags=php,sorting,arrays dscore=5 |>\n<| c |>\nThis doesn't work if you have\
    \ numbers like \"one two three\"\n<|/ c |>\n<| c |>\n: It does work. Try it: `$numbers\
    \ = explode(' ', \"one two three\");\nsort($numbers);\nprint_r($numbers);`\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works. I even tested it with a string like\
    \ \"one two three\" and it worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I even tested it with a string like \"one two three\" and it\
    \ worked. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it and it works. I even\
    \ tested it with a string like \"one two three\" and it worked. Try it yourself.\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$numbers = array(\"one\", \"\
    two\", \"three\", \"four\", \"five\", \"six\", \"", "  $numbers = explode(' ',\
    \ $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"one two three\")` returns `one two three` instead of `one three\
    \ two`.\n<|/ c |>\n<| c |>\n: I tested it and it works fine for me. `sort_numbers(\"\
    one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine for me. `sort_numbers(\"one two three\")` returns `one three\
    \ two`.\n<|/ c |>\n<| c |>\n: I tested it again and it works fine for me. `sort_numbers(\"\
    one two three\")` returns `one three two`.\n<|/ c |>\n<| c |>\n: I tested it again\
    \ and it works fine for me. `sort_numbers(\"one two three\")` returns `one three\
    \ two`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a |>\n<| a tags=php,sorting |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n", " \
    \ $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = array_unique($numbers);\n\
    $numbers = array_slice($numbers, 0, 9);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_merge($numbers, $numbers);\n$numbers = ", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"one two\
    \ three four five six seven eight nine\";\n$array = explode(\" \", $string);\n\
    sort($array);\n$string = implode(\" \", $array);\necho $string;", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers\
    \ = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\"\
    , \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\");\n$numbers\
    \ = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n$numbers\
    \ = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n$numbers\
    \ = array_map(function($v){\n    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_map(function($v){\n    return str_pad($v, 2, \"\
    0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n    return\
    \ str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_map(function($v){\n\
    \    return str", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| a dscore=0 |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = ",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n \
    \ return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for me. I am still trying to understand\
    \ how it works. I appreciate your help.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"\
    thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\"\
    , \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\"\
    , \"nineteen\");\n$numbers = array_map(\"intval\", $numbers);\nsort($numbers);\n\
    $numbers = array_map(\"strval\", $numbers);\n$numbers = implode(\" \", $numbers);\n\
    echo $numbers;", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return\
    \ implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_map(\"intval\"\
    , $numbers);\nsort($numbers);\n$numbers = array_map(\"strval\", $numbers);\nprint_r($numbers);",
  "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ',\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"three one five\")` returns `\"one three five\"`.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I used PHP 5.3.10\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used PHP 5.3.10\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip(", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\n: I tested it before posting it, and\
    \ it worked for me. Are you sure you copied the code correctly?\n<|/ c |>\n<|\
    \ c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers = array('one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>", "    $numbers = explode('\
    \ ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a |>\n<code>\n<?php", "    $numbers\
    \ = explode(' ', $numbers);\n    sort($numbers);\n    return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php", "   \
    \ $numbers = explode(' ', $numbers);\n    sort($numbers);\n    return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$numbers = array(\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\"\
    , \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"\
    );\n$numbers = array_reverse($numbers);\n$numbers = array_merge($numbers, $numbers);\n\
    $numbers = array_unique($numbers);\n$numbers = array_slice($numbers, 0, 10);\n\
    $numbers = array_map(function($n){return str_pad($n, 2, \"0\", STR_PAD_LEFT);},\
    \ $numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\n$numbers = array(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n\
    \  return implode(' ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\"zero\", \"one\", \"two\", \"three\", \"\
    four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n$numbers = array_reverse($numbers);\n\
    $numbers = implode($numbers);\necho $numbers;", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `one two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers(\"one two three\")` returns `one two three` instead\
    \ of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three` instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `sort_numbers(\"one two three\")` returns `one two three` instead of\
    \ `one three two`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug. Thanks for pointing it out!\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for me. `sort_numbers(\"one two three\")` returns `one two three`\
    \ instead of `one three two`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    one two three\")` returns `one two three` instead of `one three two`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns `one\
    \ two three` instead of `one three two`.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>", "  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  return implode('\
    \ ', $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it. I will try this out and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added a more complete example to my answer.\n<|/ c |>\n<|\
    \ c |>\nThanks again! I really appreciate it. I will try this out and see how\
    \ it goes. Thanks again!\n<|/ c |>\n<| c |>\nI added a more complete example to\
    \ my answer.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate it. I will\
    \ try this out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n\
    I suggest you to use regular expression to solve this problem. \n<code>\n<?php\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight|nine)\\b/';\n$replacement = '$1 ';\n\
    echo preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight|nine)\\b/';\n$replacement = '$1 ';\n\
    echo preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and see how it goes. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'one two three four five six seven eight nine';\n$pattern = '/(?:^|\\\
    s)(one|two|three|four|five|six|seven|eight", "  $numbers = explode(' ', $numbers);\n\
    \  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I believe it would be better\
    \ to use the `sort` function instead of `usort`.\n<|/ c |>\n<| c |>\n: I agree,\
    \ `usort` is more appropriate for this situation. I've updated my answer to reflect\
    \ this.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array('zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($number", "  $numbers = explode('\
    \ ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n}", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=sorting,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\
    $numbers = array_map('intval', $numbers);\nsort($numbers);\n$numbers = array_map('strval',\
    \ $numbers);\necho implode(' ', $numbers);\n</code>\n<|/ a tags=sorting,php |>\n\
    <| a tags=sorting,php |>\n<code>\n<?php\n$numbers = array('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n$numbers = array_map('intval',\
    \ $numbers);\nsort($numbers);\n$numbers = array_map('strval', $numbers);\necho\
    \ implode(' ', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array('one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine');\n$numbers = array_map('intval', $numbers);\nsort($numbers);\n\
    $numbers = array_map('strval', $numbers);\necho implode(' ', $numbers);", "  $numbers\
    \ = explode(' ', $numbers);\n  sort($numbers);\n  return implode(' ', $numbers);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\n$numbers\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_flip($numbers);\n$numbers = array_flip($numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_flip($numbers);\n$"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
