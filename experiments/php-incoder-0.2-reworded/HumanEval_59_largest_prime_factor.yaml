name: HumanEval_59_largest_prime_factor
language: php
prompt: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a\
  \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
  // 2\nfunction largest_prime_factor($n) {\n"
tests: "function candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <=\
    \ sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n      \
    \      $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "  $n = abs($n);\n  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n   \
    \   $n = $n / $i;\n      $i = 2;\n    } else {\n      $i++;\n    }\n  }\n  return\
    \ $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n         \
    \   $n = $n / $i;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "    $n = abs($n);\n    $i = 1;\n    $factor = 2;\n    while ($i <= $n) {\n    \
    \    if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}\n", "    $n--;\n    $i = 2;\n    while ($n % $i\
    \ == 0) {\n        $n /= $i;\n        $i++;\n    }\n    return $n;\n}\n", "  \
    \  $i = 2; $p = 1; $q = $n; $m = $n; $found = false;\n    while ($i <= $m) {\n\
    \        if ($n % $i == 0) {\n            $found = true;\n            $p = $i;\n\
    \        }\n        $i += $q;\n        $q = $p * $p;\n    }\n    if ($found) {\n\
    \        return $p;\n    } else {\n        return $n;\n    }\n}", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $factor = $i;\n            break;\n        }\n     \
    \   $i++;\n    }\n    return $factor;\n}\n", "  $n = abs($n);\n  $i = $j = 2;\n\
    \  while ($i <= sqrt($n)) {\n    while ($n % $i == 0) {\n      $i++;\n    }\n\
    \    if ($i == $j) {\n      return $j;\n    }\n    $j++;\n  }\n  return $j;\n}",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n    \
    \    if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2;\n  \
    \  $p = $n;\n    while ($p < $n) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i * $i;\n            $i++;\n        }\n        elseif ($n % $i == 1) {\n\
    \            $p += $i;\n        }\n        else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| a dscore=0 |>\n<code>\n<?php", "    $n\
    \ = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n      \
    \  }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n  \
    \  $i = 2;\n    $p = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $p = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is not the fastest solution, since it uses division\
    \ instead of bitwise operations.\n<|/ c |>\n<| c |>\nThe fastest solution is to\
    \ use `gmp_div_qr()` instead of `gmp_div()`.\n<|/ c |>\n<| c |>\n: I didn't know\
    \ about that function. Thanks!\n<|/ c |>\n<| c |>\n: I didn't know about that\
    \ function. Thanks!\n<|/ c |>\n<| c |>\n: I didn't know about that function. Thanks!\n\
    <|/ c |>\n<| a dscore=5 tags=php,algorithm |>\nThe fastest solution is to use\
    \ gmp_div_qr() instead of gmp_div().\n<code>", "    $n = abs($n);\n    $i = $j\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n\
    \        }\n        $i += $j;\n    }\n    return $j;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| c |>\nI tested this with $n = 5 and it returned 2 instead of 3.\n<|/\
    \ c |>\n<| c |>\n: It returns 2 because 5 is divisible by 2. Try it again with\
    \ $n = 5.\n<|/ c |>\n<| c |>\n: I added a version that doesn't require the use\
    \ of any special functions.\n<|/ c |>\n<| c |>\n: I added a version that doesn't\
    \ require the use of any special functions.\n<|/ c |>\n<| c |>\n: I added a version\
    \ that doesn't require the use of any special functions.\n<|/ c |>\n<| a tags=php,primes\
    \ |>\n<code>", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    $n\
    \ = $i * $n;\n    $i++;\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i =\
    \ 2;\n    $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n  \
    \          $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    while($i <= sqrt($n)) {\n        if($n\
    \ % $i == 0) {\n            $n = $i . $n / $i;\n            $i = 2;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $n;\n}\n", "    $n =\
    \ abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math |>\n<code>", "    $n = abs($n);\n\
    \    $i = 1;\n    $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0)\
    \ {\n            $factor++;\n            $i++;\n        }\n        else {\n  \
    \          $i++;\n        }\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work correctly for large numbers. For example,\
    \ `largest_prime_factor(1000000000000000000)` returns `1` instead of `2`.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works fine.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.4.45 and it works fine.\n<|/ c |>\n<| c |>\nI tested it on\
    \ PHP 5.3.10 and it works fine.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.2.17\
    \ and it works fine.\n<|/ c |>\n<| a tags=php,math |>\n<code>", "    $n = abs($n);\n\
    \    $i = $j = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            $i = 2;\n        }\n        else {\n \
    \           $i++;\n        }\n    }\n    return $j;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| a tags=php,primes |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $j++;\n            if ($j > $i) {\n                $i =\
    \ $j;\n            }\n        }\n        $i++;\n    }\n    return $i;\n}", " \
    \   $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n          \
    \  $j++;\n        }\n        else {\n            $i++;\n        }\n    }\n   \
    \ return $j;\n}\n", "    $i = 2; $s = 2; $m = $n; $lcm = 1; $l = 1;\n    while\
    \ ($i <= $m) {\n        if ($n % $i == 0) {\n            $lcm = $i;\n        \
    \    $s = $s * $i;\n        }\n        $i++;\n    }\n    while ($n != 1) {\n \
    \       if ($n % $lcm) {\n            $lcm = $lcm * $l; $s = $s * $l; $l++;\n\
    \        }\n        $n--;\n    }\n    return $lcm;\n}\n", "    $n--;\n    $i =\
    \ 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = ($n\
    \ / $i) + 1;\n            $i++;\n        }\n        else {\n            $n = $i\
    \ * $i;\n        }\n    }\n    return $n;\n}", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\
    </code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code does not work for large\
    \ numbers. For example, `largest_prime_factor(1000000000)` returns `2`, but `largest_prime_factor(1000000001)`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nIt works fine for me on PHP 5.6.22. Are you\
    \ sure you copied the code correctly? I tested it on PHP 5.6.22 and PHP 7.0.\n\
    <|/ c |>\n<| c |>\nYes, I copied the code correctly. I am using PHP 7.0.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 7.0.\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 7.0.\n<|/ c |>\n<| a |>\n<code>\n<?php", "  $n = abs($n);\n  $i = 2;\n  while\
    \ (true) {\n    $f = $i;\n    while ($n % $f === 0) {\n      $f = $f*$i;\n   \
    \ }\n    if ($f > $n) { break; }\n    $i++;\n  }\n  return $f;\n}\n", "    $n--;\n\
    \    for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n       \
    \     $n = $i . $n / $i;\n        }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n    \
    \        $n = $n / $i;\n            break;\n        }\n        $i++;\n    }\n\
    \    return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n   \
    \ while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution, however it fails\
    \ for large numbers. I added a solution that works for large numbers in my answer.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n          \
    \  $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n  \
    \  return $factor;\n}\n", "  $n = abs($n);\n  $i = 1;\n  while ($i <= $n) {\n\
    \    $i += $n % $i;\n    $n = $i ? $n / $i : 1;\n  }\n  return $n;\n}\n", "  $n\
    \ = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    $n = $i * $n;\n    $i++;\n\
    \  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $i = $j + 1;\n        } else {\n          \
    \  $j++;\n        }\n    }\n    return $j;\n}", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $factor = $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $i = 2;\n    $p = $n;\n    while ($p > 1) {\n        if\
    \ ($n % $i == 0) {\n            $p = $p / $i;\n        } else {\n            $i\
    \ = $i * 2;\n        }\n    }\n    return $p;\n}\n", "    $n = abs($n);\n    $i\
    \ = 1;\n    $p = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n   \
    \         $p = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n   \
    \ $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n  \
    \          $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n     \
    \       $i = $j + 1;\n            $j++;\n        }\n        elseif ($n % $i ==\
    \ 1) {\n            $i++;\n        }\n    }\n    return $j;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i =\
    \ $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n\
    \ = $n / $i;\n            $i = $j + 1;\n            $j++;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $j;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n      \
    \      $n = $i . '/' . $n;\n        }\n        else {\n            $i++;\n   \
    \     }\n    }\n    return $n;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n \
    \   while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n            $j++;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $j;\n}\n", "    $n--;\n    do {\n        $n--; //\
    \ Divide by 2\n        $n%=4; // Remove any even factors\n    } while ($n > 1);\n\
    \    return $n+1;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n \
    \   while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n\
    \            break;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while($i <= sqrt($n)) {\n\
    \        if($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| a tags=php,primes |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $factor = $i;\n            break;\n        }\n        $i++;\n    }\n \
    \   return $factor;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n      $i\
    \ = $i + 1;\n    }\n  }\n  return $n;\n}", "    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| a tags=php,primes\
    \ |>\n<code>", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $j++;\n            if ($j == $i) {\n\
    \                return $i;\n            }\n        }\n        $i++;\n    }\n\
    \    return $n;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n\
    \    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n      $i = $i\
    \ + 1;\n    }\n  }\n  return $n;\n}", "    $n = abs($n);\n    $i = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i . $n /\
    \ $i;\n            $i = 2;\n        } else {\n            $i++;\n        }\n \
    \   }\n    return $n;\n}\n", "    $i = 2;\n    $p = $n;\n    while ($p < $n) {\n\
    \        if ($n % $i == 0) {\n            $p *= $i;\n        }\n        $i +=\
    \ 1;\n    }\n    return $p;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ seem to work. `largest_prime_factor(13195)` returns `29` instead of `3`.\n<|/\
    \ c |>\n<| c |>\nI tested it on `PHP 5.3.3` on `Ubuntu 12.04` with `Suhosin-Patch`\
    \ installed. Maybe you have a different PHP version or a different Suhosin-Patch\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on `PHP 5.3.3` on `Ubuntu 12.04` with\
    \ `Suhosin-Patch` installed. Maybe you have a different PHP version or a different\
    \ Suhosin-Patch version?\n<|/ c |>\n<| c |>\nI tested it on `PHP 5.3.3` on `Ubuntu\
    \ 12.04` with `Suhosin-Patch` installed. Maybe you have a different PHP version\
    \ or a different Suhosin-Patch version?\n<|/ c |>\n<| c |>\nI tested it on `PHP\
    \ 5.3.3` on `Ubuntu 12.04` with `Suhosin-Patch` installed. Maybe you have a different\
    \ PHP version or a different Suhosin-Patch version?\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n         \
    \   break;\n        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n\
    \ = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $j;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work when n is prime and n is greater than\
    \ 1. For example `largest_prime_factor(10)` returns `2` instead of `3`.\n<|/ c\
    \ |>\n<| c |>\nYes, it does. I tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.6 and it returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.6 and it returns `2` instead of `3`. What PHP version are you using?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6 and it returns `2` instead of `3`. What\
    \ PHP version are you using?\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php", "  \
    \  $i = 2; $s = 2; $t = $n; $prime = true;\n    while ($i <= $t) {\n        if\
    \ ($n % $i == 0) {\n            $prime = false;\n            break;\n        }\n\
    \        $i += $s;\n        $s += 2;\n    }\n    return $prime ? $i : false;\n\
    }", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i ==\
    \ 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return $n;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't seem to work. `largest_prime_factor(13195)` returns\
    \ `29` but `largest_prime_factor(2048)` returns `2`.\n<|/ c |>\n<| c |>\n: It\
    \ works fine for me. `largest_prime_factor(2048)` returns `2`.\n<|/ c |>\n<| c\
    \ |>\n: I added a link to a PHP script that does this for you. Try it out and\
    \ let me know if it works for you.\n<|/ c |>\n<| c |>\n: I added a link to a PHP\
    \ script that does this for you. Try it out and let me know if it works for you.\n\
    <|/ c |>\n<| c |>\n: I added a link to a PHP script that does this for you. Try\
    \ it out and let me know if it works for you.\n<|/ c |>\n<| a dscore=5 |>\nHere's\
    \ a recursive solution:\n<code>", "    $n = abs($n);\n    $i = 2;\n    while($i\
    \ <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i . '/' . $n;\n\
    \            $i++;\n        }\n        else {\n            $i++;\n        }\n\
    \    }\n    return $n;\n}\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i\
    \ = $i + 1;\n    }\n  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code doesn't work. Try it\
    \ with 13195 and you'll get an infinite loop.\n<|/ c |>\n<| c |>\nI tested it\
    \ with 13195 and it returned 29 as expected. Are you sure you copied the code\
    \ correctly?\n<|/ c |>\n<| c |>\nYes, I copied the code exactly as you wrote it.\
    \ Maybe it's my PHP version? I'm using 5.3.\n<|/ c |>\n<| c |>\nI tested it on\
    \ 5.3.6 and it returned 29 as expected. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied the code exactly as you wrote it. Maybe it's\
    \ my PHP version? I'm using 5.3.\n<|/ c |>\n<| a tags=php,primes |>\n<code>\n\
    <?php", "    $n--;\n    do {\n        $n--; // stepping down by 1 since largest\
    \ factor is 1\n        while ($n % 2 == 0) {\n            $n = (int) ($n / 2);\n\
    \        }\n    } while ($n > 1);\n    return $n;\n}", "    $n = abs($n);\n  \
    \  $i = 2;\n    $p = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i ==\
    \ 0) {\n            $p = $i;\n        }\n        $i += $p;\n    }\n    return\
    \ $p;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while($i <=\
    \ sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $n / $i;\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n",
  "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n\
    \      $n = $i . $n / $i;\n    } else {\n      $i = $i + 1;\n    }\n  }\n  return\
    \ $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n         \
    \   $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n", " \
    \   $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        } else\
    \ {\n            $j++;\n        }\n    }\n    return $j;\n}\n", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i ==\
    \ 0) {\n            $factor = $i;\n            $n = $n / $i;\n        }\n    \
    \    $i++;\n    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n     \
    \       $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factor = $i;\n            $n =\
    \ $n / $i;\n        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $n\
    \ = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n  \
    \      if ($n % $i == 0) {\n            $n = $n / $i;\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but this doesn't answer the question.\
    \ OP wants to know why his code doesn't work, not how to fix it.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, my answer is not the best one, but I believe that my\
    \ answer can help him to understand why his code doesn't work. Anyway, thanks\
    \ for your comment.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ answer the question. OP wants to know why his code doesn't work, not how to\
    \ fix it.\n<|/ c |>\n<| c |>\nI agree with you, my answer is not the best one,\
    \ but I believe that my answer can help him to understand why his code doesn't\
    \ work. Anyway, thanks for your comment.\n<|/ c |>\n<| a tags=php,primes |>\n\
    The problem is that the function largest_prime_factor() doesn't return anything\
    \ and you try to echo it.\n<code>", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n     \
    \       $n = $n / $i;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "  $n = abs($n);\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i\
    \ == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i = $i + 1;\n    }\n\
    \  }\n  return $n;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n", "    $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n        }\n  \
    \      $i++;\n    }\n    return $j;\n}\n", "    $n = abs($n);\n    $i = 2;\n \
    \   $factor = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n  \
    \          $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n \
    \   }\n    return $factor;\n}", "    $n = abs($n);\n    $i = 2;\n    $p = 3;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $p++;\n\
    \        }\n        $i += $p;\n    }\n    return $p;\n}\n", "  $n = abs($n);\n\
    \  $i = $j = 2;\n  while ($i <= $n) {\n    while ($n % $i == 0) {\n      $i++;\n\
    \    }\n    if ($i == $j) {\n      return $j;\n    }\n    $j++;\n  }\n  return\
    \ $j;\n}", "    $n = abs($n);\n    $i = 2;\n    $p = 3;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $p = $i;\n            $n = $n /\
    \ $i;\n        }\n        $i++;\n    }\n    return $p;\n}\n", "    $i = 2; $p\
    \ = 1; $q = $n; $m = $n; $l = 0; $r = $n; $k = 0; $j = 0;\n    while ($i <= $m)\
    \ {\n        while ($n % $i == 0) {\n            $n /= $i;\n            $j++;\n\
    \        }\n        if ($j == $p) {\n            $p = $i;\n            $l++;\n\
    \        }\n        while ($n % $q == 0) {\n            $n /= $q;\n          \
    \  $k++;\n        }\n        if ($k == $p) {\n            $q = $i;\n         \
    \   $l++;\n        }\n        $i++;\n    }\n    if ($l == 0) {\n        return\
    \ $n;\n    }\n    return $p * largest_prime_factor($n);\n}", "    $n = abs($n);\n\
    \    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n %\
    \ $i == 0) {\n            $n = $n / $i;\n            $factor++;\n        }\n \
    \       $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work for large numbers. Try `largest_prime_factor(100000000000000000000000000000000)`\
    \ which returns `2`.\n<|/ c |>\n<| c |>\nI agree with you. My code was written\
    \ for small numbers. I edited my answer to include a solution for large numbers.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    $i = 2;\n    $factor = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i . $n /\
    \ $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }", "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= $n) {\n        if ($n\
    \ % $i == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        }\
    \ else {\n            $j++;\n        }\n    }\n    return $j;\n}\n", "    $i =\
    \ 2; $max = 2; $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i\
    \ == 0) {\n            $n = $i . $n / $i;\n            $factor++;\n        }\n\
    \        $i++;\n        if ($max < $factor) {\n            $max = $factor;\n \
    \       }\n    }\n    return $max;\n}\n", "    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \    }\n        $i++;\n    }\n    return $j;\n}\n", "    $n = abs($n);\n    $i\
    \ = 2;\n    $p = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $p = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n",
  "    $n = abs($n);\n    $i = $j = 2;\n    while ($i <= sqrt($n)) {\n        if ($n\
    \ % $i == 0) {\n            $n = $n / $i;\n            $i = $j + 1;\n        }\n\
    \        else {\n            $j++;\n        }\n    }\n    return $j;\n}\n", " \
    \   $n = abs($n);\n    $i = 2;\n    $factor = 1;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $factor = $i;\n            break;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n", "    $i = 2;\n  \
    \  $p = $n;\n    while ($p < $n) {\n        if ($n % $i == 0) {\n            $p\
    \ *= $i;\n        }\n        $i += 1;\n    }\n    return $p;\n}\n", "    $n =\
    \ abs($n);\n    $i = 2;\n    $p = 3;\n    while ($i <= sqrt($n)) {\n        if\
    \ ($n % $i == 0) {\n            $p++;\n        }\n        $i += $p;\n    }\n \
    \   return $p;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,primes |>\n<code>\n\
    <?php", "    $n = abs($n);\n    $i = $j = 2;\n    $max_factor = 1;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $max_factor = max($max_factor,\
    \ $i);\n            $j++;\n        }\n        $i++;\n    }\n    return $max_factor;\n\
    }\n", "    $i = 2;\n    $p = $n;\n    while ($p < $n) {\n        if ($n % $i ==\
    \ 0) {\n            $p *= $i;\n            $i++;\n        }\n        else {\n\
    \            $i += 2;\n        }\n    }\n    return $p;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,primes |>\n<code>\n<?php", "    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n", "    $n = abs($n);\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes,math\
    \ |>\n<| c |>\nThis doesn't work for large numbers. Try `largest_prime_factor(1000000000)`\
    \ and you'll get `1` instead of `2`.\n<|/ c |>\n<| c |>\n: I tested it on PHP\
    \ 5.6.15 and it works fine.\n<|/ c |>\n<| c |>\nIt doesn't work for large numbers.\
    \ Try `largest_prime_factor(1000000000)` and you'll get `1` instead of `2`.\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.6.15 and it works fine.\n<|/ c |>\n\
    <| c |>\nIt doesn't work for large numbers. Try `largest_prime_factor(1000000000)`\
    \ and you'll get `1` instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \   $n = abs($n);\n    $i = 2;\n    $factor = 2;\n    while ($i <= sqrt($n)) {\n\
    \        if ($n % $i == 0) {\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
