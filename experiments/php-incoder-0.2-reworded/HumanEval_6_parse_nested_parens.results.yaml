language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_counter = 0;\n  $paren_level_counter_string = \"\";\n\
    \  foreach (explode(\" \", $paren_string) as $paren) {\n    if ($paren == \"(\"\
    ) {\n      $paren_stack[] = $paren_level;\n      $paren_level_counter++;\n   \
    \   $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n    } else if ($paren == \")\") {\n      $paren_level_counter--;\n\
    \      $paren_level_counter_string = $paren_level_counter;\n      $paren_level_string\
    \ = $paren_level_counter_string;\n      if ($paren_level_counter == 0) {\n   \
    \     $paren_stack_string = $paren_stack_string;\n        $paren_level = $paren_stack[count($paren_stack)\
    \ - 1];\n      }\n    }\n    if ($paren_level_counter > 0) {\n      $paren_level_counter_string\
    \ = $paren_level_counter;\n      $paren_level_string = $paren_level_counter_string;\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgzzztss.php:44\n\
    Stack trace:\n#0 /tmp/tmpdgzzztss.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdgzzztss.php\
    \ on line 44\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = \"\";\n    $paren_stack[$paren_level] .= $paren_string;\n\
    \    while ($paren_level > 0) {\n        $paren_level--;\n        $paren_string\
    \ = $paren_stack[$paren_level];\n        $paren_array = explode(\" \", $paren_string);\n\
    \        $paren_stack[$paren_level] = \"\";\n        foreach ($paren_array as\
    \ $paren_string) {\n            $paren_stack[$paren_level] .= $paren_string;\n\
    \            $paren_level++;\n        }\n    }\n    return $paren_array;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h53bag2.php:31\n\
    Stack trace:\n#0 /tmp/tmp4h53bag2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4h53bag2.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 1;\n  $paren_level_max_count_index[2] = 2;\n  $paren_level_max_count_index[3]\
    \ = 3;\n  $paren_level_max_count_index[4] = 4;\n  $paren_level_max_count_index[5]\
    \ = 5;\n  $paren_level_max_count_index[6] = 6;\n  $paren_level_max_count_index[7]\
    \ = 7;\n  $paren_level_max_count_index[8] = 8;\n  $paren_level_max_count_index[9]\
    \ = 9;\n  $paren_level_max_count_index[10] = 10;\n  $paren_level_max_count_index[11]\
    \ = 11;\n  $paren_level_max_count_index[12] = 12;\n  $paren_level_max_count_index[13]\
    \ = 13;\n  $paren_level_max_count_index[14] = 14;\n  $paren_level_max_count_index[15]\
    \ = 15;\n  $paren_level_max_count_index[16] = 16;\n  $paren_level_max_count_index[17]\
    \ = 17;\n  $paren_level_max_count_index[18] = 18;\n  $paren_level_max_count_index[19]\
    \ = 19;\n  $paren_level_max_count_index[20] = 20;\n  $paren_level_max_count_index[21]\
    \ = 21;\n  $paren_level_max_count_index[22] = 22;\n  $paren_level_max_count_index[23]\
    \ = 23;\n  $paren_level_max_count_index[24] = 24;\n  $paren_level_max_count_index[25]\
    \ = 25;\n  $paren_level_max_count_index[26] = 26;\n  $paren_level_max_count_index[27]\
    \ = 27;\n  $paren_level_max_count_index[28] = 28;\n  $paren_level_max_count_index[29]\
    \ = 29;\n  $paren_level_max_count_index[30] = 30;\n  $paren_level_max_count_index[31]\
    \ = 31;\n  $paren_level_max_count_index[32] = 32;\n  $paren_level_max_count_index[33]\
    \ = 33;\n  $paren_level_max_count_index[34] = 34;\n  $paren_level_max_count_index[35]\
    \ = 35;\n  $paren_level_max_count_index[36] = 36;\n  $paren_level_max_count_index[37]\
    \ = 37;\n  $paren_level_max_count_index\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq711xplq.php on line 53

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = -1;\n  $paren_level_max_index[1] =\
    \ -1;\n  $paren_level_max_index[2] = -1;\n  $paren_level_max_index[3] = -1;\n\
    \  $paren_level_max_index[4] = -1;\n  $paren_level_max_index[5] = -1;\n  $paren_level_max_index[6]\
    \ = -1;\n  $paren_level_max_index[7] = -1;\n  $paren_level_max_index[8] = -1;\n\
    \  $paren_level_max_index[9] = -1;\n  $paren_level_max_index[10] = -1;\n  $paren_level_max_index[11]\
    \ = -1;\n  $paren_level_max_index[12] = -1;\n  $paren_level_max_index[13] = -1;\n\
    \  $paren_level_max_index[14] = -1;\n  $paren_level_max_index[15] = -1;\n  $paren_level_max_index[16]\
    \ = -1;\n  $paren_level_max_index[17] = -1;\n  $paren_level_max_index[18] = -1;\n\
    \  $paren_level_max_index[19] = -1;\n  $paren_level_max_index[20] = -1;\n  $paren_level_max_index[21]\
    \ = -1;\n  $paren_level_max_index[22] = -1;\n  $paren_level_max_index[23] = -1;\n\
    \  $paren_level_max_index[24] = -1;\n  $paren_level_max_index[25] = -1;\n  $paren_level_max_index[26]\
    \ = -1;\n  $paren_level_max_index[27] = -1;\n  $paren_level_max_index[28] = -1;\n\
    \  $paren_level_max_index[29] = -1;\n  $paren_level_max_index[30] = -1;\n  $paren_level_max_index[31]\
    \ = -1;\n  $paren_level_max_index[32] = -1;\n  $paren_level_max_index[33] = -1;\n\
    \  $paren_level_max_index[34] = -1;\n  $paren_level_max_index[35] = -1;\n  $paren_level_max_index[36]\
    \ = -1;\n  $paren_level_max_index[37] = -1;\n  $paren_level_max_index[38] = -1;\n\
    \  $paren_level_max_index[39] = -1;\n  $paren_level_max_index[40] = -1;\n  $paren_level_max_index[41]\
    \ = -1;\n  $paren_level_max_index[42] = -1;\n  $paren_level_max_index[43] = -1;\n\
    \  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5b8f1kz6.php on line 59

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack = array();\n  $paren_level_stack_string = \"\"\
    ;\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_strings[] = $paren_level_stack_string;\n  $paren_level_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_dfjhtl1.php on line 54

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count = explode(' ', $paren_string);\n\
    \  foreach ($paren_levels_count as $paren_level_count) {\n    $paren_level_count\
    \ = intval($paren_level_count);\n    if ($paren_level_count > 0) {\n      $paren_levels[$paren_level]\
    \ = $paren_level_count;\n      $paren_levels_count[$paren_level] = $paren_level_count;\n\
    \      $paren_level++;\n    }\n  }\n  $paren_level_count = array_sum($paren_levels_count);\n\
    \  for ($i = 0; $i < $paren_levels_count; $i++) {\n    $paren_level = $paren_level\
    \ - $paren_levels_count[$i];\n    $paren_array[$i] = $paren_level;\n  }\n  return\
    \ $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,string |>\n<| a tags=php,parentheses,string\
    \ |>\n<code>\n<?php\n$paren_levels = array();\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[] = 1;\n$paren_levels[]\
    \ = 1;\n$paren_levels[] = \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbid71f52.php on line 28

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_array\
    \ = array();\n  $paren_level = 0;\n  $paren_stack = array();\n  $paren_stack[]\
    \ = -1;\n  $paren_stack_string = '';\n  $paren_stack_string_count = 0;\n  $paren_stack_string\
    \ = implode('', $paren_stack);\n  $paren_stack_string_count = strlen($paren_stack_string);\n\
    \  while ($paren_stack_string != '') {\n    $paren_stack_string = substr($paren_stack_string,\
    \ 0, $paren_stack_string_count);\n    $paren_stack_string_count = strlen($paren_stack_string);\n\
    \    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_string = '';\n    $paren_stack_string_count = 0;\n    $paren_stack_string\
    \ = implode('', $paren_stack);\n    $paren_stack_string_count = strlen($paren_stack_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    foreach ($paren_array as\
    \ $key => $value) {\n      if ($paren_stack[$paren_stack_string_count] == $key)\
    \ {\n        $paren_level++;\n      }\n      if ($paren_stack_string_count+1 ==\
    \ $key) {\n        $paren_level--;\n      }\n      if ($paren_level == 0) {\n\
    \        $paren_stack_string = substr($paren_stack_string, 0, $paren_stack_string_count);\n\
    \        $paren_stack_string_count = strlen($paren_stack_string);\n      }\n \
    \     $paren_stack[$paren_stack_string_count] = $key;\n      $paren_stack_string_count++;\n\
    \    }\n    $paren_string = implode(' ', $paren_array);\n  }\n  return $paren_array;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fs3p7uj.php:51\n\
    Stack trace:\n#0 /tmp/tmp_fs3p7uj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_fs3p7uj.php\
    \ on line 51\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n        }\n     \
    \   $max_level_array[] = $level;\n    }\n    return $max_level_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,regex |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\nThis regex will match any number\
    \ of nested parentheses:\n<code>\n/\\((?:[^()]*|\\((?:[^()]*|\\([^()]*\\))*\\\
    ))*\\)/\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses\
    \ such as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such\
    \ as \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as\
    \ \"(()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"(()())\"\
    \n<|/ c |>\n<| a tags=php,parentheses,regex |>\n<code>\n$string = \"(()())\";\n\
    preg_match_all('/\\(([^()]+)\\)/', $string, $matches);\nprint_r($matches);\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work for nested parentheses such as \"\
    (()())\"\n<|/ c |>\n<| c |>\nIt does work for nested parentheses such as \"\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkj08hgyv.php on line 25

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $level++;\n    } else if ($paren == \")\") {\n      $level--;\n      if\
    \ ($level == 0) {\n        $paren_levels[] = $level;\n      }\n    }\n  }\n  return\
    \ $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsio0dqh.php:29\n\
    Stack trace:\n#0 /tmp/tmpwsio0dqh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwsio0dqh.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[] = $paren_level;\n    } else if ($char == ')') {\n      $paren_level\
    \ = $paren_stack[count($paren_stack) - 1];\n      unset($paren_stack[count($paren_stack)\
    \ - 1]);\n    } else {\n      $paren_array[] = $paren_level;\n    }\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppec24a3o.php:29\n\
    Stack trace:\n#0 /tmp/tmppec24a3o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppec24a3o.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack = array();\n\
    \  $paren_level_stack[] = 0;\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps_ap3r1r.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^)]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqm31gs9z.php on line 35

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $parens\
    \ = preg_split('/\\s+/', $paren_string);\n    $levels = array();\n    $level =\
    \ 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(') {\n      \
    \      $levels[$level] = $level;\n            $level++;\n        } else if ($paren\
    \ == ')') {\n            $levels[$level] = $level;\n            $level--;\n  \
    \      }\n    }\n    return $levels;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bhl4jff.php:29\n\
    Stack trace:\n#0 /tmp/tmp6bhl4jff.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6bhl4jff.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $opening_paren_level = 0;\n  $opening_paren_char = '';\n  $closing_brackets\
    \ = 0;\n  $opening_paren_chars = array();\n  $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n  $opening_paren_level++;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $char = $paren_string[$i];\n    if ($char == '(') {\n      $paren_array[$paren_level]++;\n\
    \      $opening_paren_chars[$opening_paren_level] = $char;\n      $opening_paren_level++;\n\
    \    } else if ($char == ')') {\n      $paren_array[$paren_level]--;\n      $closing_brackets++;\n\
    \      $opening_paren_level--;\n      if ($paren_array[$paren_level] == 0) {\n\
    \        $opening_paren_level--;\n        $opening_paren_chars[$opening_paren_level]\
    \ = $opening_paren_char;\n      }\n    } else if ($char == ' ') {\n      $opening_paren_chars[$opening_paren_level]\
    \ = $char;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopf1ru78.php:43\n\
    Stack trace:\n#0 /tmp/tmpopf1ru78.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpopf1ru78.php\
    \ on line 43\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end\
    \ = 0;\n  $paren_levels = array();\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end] =\
    \ $paren_level;\n  $paren_level++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjfl1tyzy.php on line 51

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == \"(\") {\n            $max_level++;\n        } else if ($level ==\
    \ \")\") {\n            $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91fmalty.php:29\n\
    Stack trace:\n#0 /tmp/tmp91fmalty.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp91fmalty.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[] = $paren_level;\n    } else if ($char == ')') {\n      $paren_level\
    \ = $paren_stack[count($paren_stack) - 1];\n      array_pop($paren_stack);\n \
    \   } else {\n      $paren_array[] = $paren_level;\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0m_5bvq.php:29\n\
    Stack trace:\n#0 /tmp/tmpv0m_5bvq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv0m_5bvq.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string] = 0;\n\
    \    while (count($paren_stack) > 0) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        if ($paren_levels[$paren_string]\
    \ == 1) {\n            $paren_array[] = $paren_string;\n        }\n        if\
    \ ($paren_levels[$paren_string] == 2) {\n            $paren_array[] = $paren_string;\n\
    \            $paren_stack[] = $paren_string;\n        }\n    }\n    return $paren_array;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja69k69d.php:31\n\
    Stack trace:\n#0 /tmp/tmpja69k69d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpja69k69d.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $max_level++;\n        } else {\n         \
    \   $max_level--;\n        }\n        if ($max_level > $max_level_array[0]) {\n\
    \            $max_level_array = $max_level;\n        }\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bvryu95.php:29\n\
    Stack trace:\n#0 /tmp/tmp5bvryu95.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5bvryu95.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 0;\n  $paren_level_max_count_index[2] = 0;\n  $paren_level_max_count_index[3]\
    \ = 0;\n  $paren_level_max_count_index[4] = 0;\n  $paren_level_max_count_index[5]\
    \ = 0;\n  $paren_level_max_count_index[6] = 0;\n  $paren_level_max_count_index[7]\
    \ = 0;\n  $paren_level_max_count_index[8] = 0;\n  $paren_level_max_count_index[9]\
    \ = 0;\n  $paren_level_max_count_index[10] = 0;\n  $paren_level_max_count_index[11]\
    \ = 0;\n  $paren_level_max_count_index[12] = 0;\n  $paren_level_max_count_index[13]\
    \ = 0;\n  $paren_level_max_count_index[14] = 0;\n  $paren_level_max_count_index[15]\
    \ = 0;\n  $paren_level_max_count_index[16] = 0;\n  $paren_level_max_count_index[17]\
    \ = 0;\n  $paren_level_max_count_index[18] = 0;\n  $paren_level_max_count_index[19]\
    \ = 0;\n  $paren_level_max_count_index[20] = 0;\n  $paren_level_max_count_index[21]\
    \ = 0;\n  $paren_level_max_count_index[22] = 0;\n  $paren_level_max_count_index[23]\
    \ = 0;\n  $paren_level_max_count_index[24] = 0;\n  $paren_level_max_count_index[25]\
    \ = 0;\n  $paren_level_max_count_index[26] = 0;\n  $paren_level_max_count_index[27]\
    \ = 0;\n  $paren_level_max_count_index[28] = 0;\n  $paren_level_max_count_index[29]\
    \ = 0;\n  $paren_level_max_count_index[30] = 0;\n  $paren_level_max_count_index[31]\
    \ = 0;\n  $paren_level_max_count_index[32] = 0;\n  $paren_level_max_count_index[33]\
    \ = 0;\n  $paren_level_max_count_index[34] = 0;\n  $paren_level_max_count_index[35]\
    \ = 0;\n  $paren_level_max_count_index[36] = 0;\n  $paren_level_max_count_index[37]\
    \ = 0;\n  $paren_level_max_count_index[38] = 0;\n  $paren_level_max_count_index[39]\
    \ = 0;\n  $paren_level_max_count_index[40] = 0;\n  $paren_level_max_count_index[41]\
    \ = 0;\n  $paren_level_max_count_index[42] = 0;\n  $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb0dtsgc5.php on line 58

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_levels = array();\n    $paren_array_levels_count\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_max_index\
    \ = array();\n    $paren_array_levels_count_max_index[0] = 0;\n    for ($i = 0;\
    \ $i < $paren_array_count; $i++) {\n        $paren_array_levels[$i] = $i;\n  \
    \      $paren_array_levels_count[$i] = 1;\n        $paren_array_levels_count_max[$i]\
    \ = $paren_array_levels_count_max[$i];\n        $paren_array_levels_count_max_index[$i]\
    \ = $i;\n    }\n    for ($i = 0; $i < $paren_array_count; $i++) {\n        for\
    \ ($j = $i + 1; $j < $paren_array_count; $j++) {\n            if ($paren_array_levels[$i]\
    \ > $paren_array_levels[$j]) {\n                $paren_array_levels_count_max[$j]\
    \ = $paren_array_levels_count_max[$i];\n                $paren_array_levels_count_max_index[$j]\
    \ = $i;\n            } else {\n                if ($paren_array_levels_count[$i]\
    \ > $paren_array_levels_count[$j]) {\n                    $paren_array_levels_count_max[$j]\
    \ = $paren_array_levels_count_max[$i];\n                    $paren_array_levels_count_max_index[$j]\
    \ = $i;\n                }\n            }\n        }\n    }\n    $paren_array_levels_count_max[$paren_array_levels_count_max_index[$paren_array_count\
    \ - 1]] = $paren_array_levels_count_max[$paren_array_count - 1];\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 1] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 2] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 3] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 4] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 5] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_count\
    \ - 6] = $paren_array_count - 1;\n    $paren_array_levels_count_max_index[$paren_array_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr_sxame0.php on line 42

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_level_string\
    \ = \"\";\n  $paren_level_stack = array();\n  $paren_level_stack_string = \"\"\
    ;\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string\
    \ = \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string =\
    \ \"\";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\
    \";\n  $paren_level_stack_string = \"\";\n  $paren_level_stack_string = \"\";\n\
    \  $paren_level_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjginqm2z.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = str_repeat(\"()\", count($paren_string));\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n \
    \ $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string\
    \ = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string =\
    \ str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n \
    \ $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string\
    \ = str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string =\
    \ str_replace(\"()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"\
    ()\", \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\"\
    , \"()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"\
    ()\", $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\"\
    , $paren_stack_string);\n  $paren_stack_string = str_replace(\"()\", \"()\", $paren_stack_string);\n\
    \  $paren_stack_string = str_replace(\"()\", \"()\", $\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmmlzmcnr.php on line 36

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array, explode('\
    \ ', $paren_string));\n    foreach ($paren_array as $paren_string) {\n      if\
    \ ($paren_string == '(') {\n        $paren_level++;\n        $paren_stack[] =\
    \ $paren_string;\n      } else if ($paren_string == ')') {\n        $paren_level--;\n\
    \        $paren_stack[] = $paren_string;\n      } else if ($paren_level == 0)\
    \ {\n        $paren_stack[] = $paren_string;\n      }\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpxq5exg_n.php on line 23

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_size; $i++) {\n        $level = 0;\n       \
    \ $paren_array[$i] = \"(\" . $paren_array[$i] . \")\";\n        $paren_string\
    \ = str_replace($paren_array[$i], \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\[[^()]*\\]/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\[[^()]*\\]/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $paren_string);\n        $paren_string\
    \ = preg_replace(\"/\\([^()]*\\)/\", \"\", $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgkwis12v.php on line 37

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ === \"(\") {\n            $max_level++;\n            $max_level_paren_array[$i]\
    \ = $max_level;\n        } else {\n            $max_level--;\n        }\n    }\n\
    \    $max_level_paren_array_length = count($max_level_paren_array);\n    $max_level_paren_array_index\
    \ = 0;\n    for ($i = 0; $i < $max_level_paren_array_length; $i++) {\n       \
    \ if ($max_level_paren_array[$i] === 0) {\n            $max_level_paren_array_index\
    \ = $i;\n            break;\n        }\n    }\n    $nested_paren_array = [];\n\
    \    for ($i = 0; $i < $max_level_paren_array_length; $i++) {\n        if ($max_level_paren_array[$i]\
    \ > 0) {\n            $nested_paren_array[$i] = $max_level_paren_array[$i];\n\
    \        }\n    }\n    return $nested_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyxcr0nm.php:42\n\
    Stack trace:\n#0 /tmp/tmpxyxcr0nm.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxyxcr0nm.php\
    \ on line 42\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 1;\n  $paren_level_max_count_index[2] = 2;\n  $paren_level_max_count_index[3]\
    \ = 3;\n  $paren_level_max_count_index[4] = 4;\n  $paren_level_max_count_index[5]\
    \ = 5;\n  $paren_level_max_count_index[6] = 6;\n  $paren_level_max_count_index[7]\
    \ = 7;\n  $paren_level_max_count_index[8] = 8;\n  $paren_level_max_count_index[9]\
    \ = 9;\n  $paren_level_max_count_index[10] = 10;\n  $paren_level_max_count_index[11]\
    \ = 11;\n  $paren_level_max_count_index[12] = 12;\n  $paren_level_max_count_index[13]\
    \ = 13;\n  $paren_level_max_count_index[14] = 14;\n  $paren_level_max_count_index[15]\
    \ = 15;\n  $paren_level_max_count_index[16] = 16;\n  $paren_level_max_count_index[17]\
    \ = 17;\n  $paren_level_max_count_index[18] = 18;\n  $paren_level_max_count_index[19]\
    \ = 19;\n  $paren_level_max_count_index[20] = 20;\n  $paren_level_max_count_index[21]\
    \ = 21;\n  $paren_level_max_count_index[22] = 22;\n  $paren_level_max_count_index[23]\
    \ = 23;\n  $paren_level_max_count_index[24] = 24;\n  $paren_level_max_count_index[25]\
    \ = 25;\n  $paren_level_max_count_index[26] = 26;\n  $paren_level_max_count_index[27]\
    \ = 27;\n  $paren_level_max_count_index[28] = 28;\n  $paren_level_max_count_index[29]\
    \ = 29;\n  $paren_level_max_count_index[30] = 30;\n  $paren_level_max_count_index[31]\
    \ = 31;\n  $paren_level_max_count_index[32] = 32;\n  $paren_level_max_count_index[33]\
    \ = 33;\n  $paren_level_max_count_index[34] = 34;\n  $paren_level_max_count_index[35]\
    \ = 35;\n  $paren_level_max_count_index[36] = 36;\n  $paren_level_max_count_index[37]\
    \ = 37;\n  $paren_level_max_count_index\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq711xplq.php on line 53

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = $paren_stack[$paren_level];\n        $paren_level\
    \ = count($paren_stack);\n        $paren_stack[$paren_level] = $paren_string;\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06mf1e7h.php:26\n\
    Stack trace:\n#0 /tmp/tmp06mf1e7h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp06mf1e7h.php\
    \ on line 26\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_stack[$paren_level]\
    \ !== null) {\n    $paren_level++;\n    $paren_stack[$paren_level] = $paren_stack[$paren_level\
    \ - 1];\n  }\n  $paren_level--;\n  while ($paren_level > 0) {\n    $paren_string\
    \ = $paren_stack[$paren_level];\n    $paren_level--;\n    $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpvcfz3y8u.php on line 14

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_size; $i++) {\n        $paren_array[$i] =\
    \ trim($paren_array[$i]);\n        if ($paren_array[$i] === \"()\") {\n      \
    \      $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n \
    \       } else {\n            $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgkpumnn.php:29\n\
    Stack trace:\n#0 /tmp/tmplgkpumnn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplgkpumnn.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack = array_reverse($paren_stack);\n\
    \  foreach (explode(\" \", $paren_string) as $char) {\n    if ($char == \"(\"\
    ) {\n      $paren_level++;\n      $paren_stack[] = array();\n      $paren_stack\
    \ = array_reverse($paren_stack);\n    } else if ($char == \")\") {\n      $paren_level--;\n\
    \      $paren_stack = array_reverse($paren_stack);\n      $paren_stack[] = array();\n\
    \      $paren_stack = array_reverse($paren_stack);\n    }\n    if ($paren_level\
    \ == 0) {\n      $paren_array[] = $paren_level;\n    }\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhsve1d1.php:36\n\
    Stack trace:\n#0 /tmp/tmprhsve1d1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprhsve1d1.php\
    \ on line 36\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo6cxpwzb.php on line 32

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_stack = array();\n    for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n      $char = $paren_string[$i];\n      if ($char === '(') {\n        $paren_stack[]\
    \ = $char;\n      } else if ($char === ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n        $paren_level = count($paren_stack);\n\
    \      }\n    }\n    $paren_array[] = $paren_level;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmprq4wve0i.php on line 25

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = \"\";\n    $paren_stack[$paren_level] .= $paren_string;\n\
    \    while ($paren_level > 0) {\n        $paren_level--;\n        $paren_stack[$paren_level]\
    \ = \"\";\n        $paren_stack[$paren_level] .= $paren_stack[$paren_level - 1];\n\
    \        $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n    }\n  \
    \  $paren_stack[$paren_level] = \"\";\n    $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n\
    \    $paren_stack[$paren_level] .= $paren_stack[$paren_level];\n    $paren_stack[$paren_level]\
    \ .= $paren_stack[$paren_level];\n    return $paren_stack;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7phq3ycn.php:31\n\
    Stack trace:\n#0 /tmp/tmp7phq3ycn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7phq3ycn.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = array();\n  $paren_stack[$paren_level + 1] = array();\n\
    \  $paren_stack[$paren_level + 1][$paren_level] = 1;\n  $paren_stack[$paren_level\
    \ + 1][$paren_level + 1] = 1;\n  foreach (explode(\" \", $paren_string) as $paren)\
    \ {\n    if ($paren == \"(\") {\n      $paren_level++;\n      $paren_stack[$paren_level]\
    \ = array();\n      $paren_stack[$paren_level + 1] = array();\n      $paren_stack[$paren_level\
    \ + 1][$paren_level] = 1;\n      $paren_stack[$paren_level + 1][$paren_level +\
    \ 1] = 1;\n    } else if ($paren == \")\") {\n      $paren_level--;\n      $paren_stack[$paren_level]\
    \ = array();\n      $paren_stack[$paren_level + 1] = array();\n      $paren_stack[$paren_level\
    \ + 1][$paren_level] = 1;\n      $paren_stack[$paren_level + 1][$paren_level +\
    \ 1] = 1;\n    } else if ($paren == \" \") {\n      $paren_stack[$paren_level][$paren_level]++;\n\
    \      $paren_stack[$paren_level + 1][$paren_level]++;\n    }\n  }\n  $paren_stack[$paren_level][$paren_level]++;\n\
    \  $paren_stack[$paren_level + 1][$paren_level]++;\n  return $paren_stack;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyhrgl72.php:43\n\
    Stack trace:\n#0 /tmp/tmpzyhrgl72.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzyhrgl72.php\
    \ on line 43\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfytkryw8.php on line 33

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $max_level++;\n        } else if ($paren ==\
    \ \")\") {\n            $max_level--;\n            if ($max_level < 0) {\n   \
    \             return false;\n            }\n        } else {\n            if ($max_level\
    \ > 0) {\n                return false;\n            }\n        }\n        $max_level_array[]\
    \ = $max_level;\n    }\n    return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8b9gnsxh.php:34\n\
    Stack trace:\n#0 /tmp/tmp8b9gnsxh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8b9gnsxh.php\
    \ on line 34\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while (count($paren_stack) > 0) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_level = count($paren_stack) - 1;\n  \
    \  $paren_array = explode(\" \", $paren_string);\n    foreach ($paren_array as\
    \ $paren_element) {\n      if ($paren_element == \"(\") {\n        $paren_stack[]\
    \ = $paren_element;\n      } else if ($paren_element == \")\") {\n        $paren_stack\
    \ = array_merge($paren_stack, array_slice($paren_stack, 0, $paren_level));\n \
    \     }\n    }\n  }\n  return $paren_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposu4it4m.php:32\n\
    Stack trace:\n#0 /tmp/tmposu4it4m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmposu4it4m.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n\
    \            $level++;\n        } else if ($paren == \")\") {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = $level;\n       \
    \     }\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppt3i6wgc.php:29\n\
    Stack trace:\n#0 /tmp/tmppt3i6wgc.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppt3i6wgc.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    $paren_array =\
    \ explode(' ', $paren_string);\n    foreach ($paren_array as $paren_string) {\n\
    \      if ($paren_string == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n      }\n    }\n  }\n  return $paren_level;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8n5lcvr.php:33\n\
    Stack trace:\n#0 /tmp/tmph8n5lcvr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph8n5lcvr.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_counter = 0;\n    $paren_level_counter_string = \"\
    \";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string = \"\";\n    $paren_level_counter_string\
    \ = \"\";\n    $paren_level_counter_string\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp23s8_ibl.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_index\
    \ = array();\n  $paren_level_max_index[0] = 0;\n  $paren_level_max_index[1] =\
    \ 0;\n  $paren_level_max_index[2] = 0;\n  $paren_level_max_index[3] = 0;\n  $paren_level_max_index[4]\
    \ = 0;\n  $paren_level_max_index[5] = 0;\n  $paren_level_max_index[6] = 0;\n \
    \ $paren_level_max_index[7] = 0;\n  $paren_level_max_index[8] = 0;\n  $paren_level_max_index[9]\
    \ = 0;\n  $paren_level_max_index[10] = 0;\n  $paren_level_max_index[11] = 0;\n\
    \  $paren_level_max_index[12] = 0;\n  $paren_level_max_index[13] = 0;\n  $paren_level_max_index[14]\
    \ = 0;\n  $paren_level_max_index[15] = 0;\n  $paren_level_max_index[16] = 0;\n\
    \  $paren_level_max_index[17] = 0;\n  $paren_level_max_index[18] = 0;\n  $paren_level_max_index[19]\
    \ = 0;\n  $paren_level_max_index[20] = 0;\n  $paren_level_max_index[21] = 0;\n\
    \  $paren_level_max_index[22] = 0;\n  $paren_level_max_index[23] = 0;\n  $paren_level_max_index[24]\
    \ = 0;\n  $paren_level_max_index[25] = 0;\n  $paren_level_max_index[26] = 0;\n\
    \  $paren_level_max_index[27] = 0;\n  $paren_level_max_index[28] = 0;\n  $paren_level_max_index[29]\
    \ = 0;\n  $paren_level_max_index[30] = 0;\n  $paren_level_max_index[31] = 0;\n\
    \  $paren_level_max_index[32] = 0;\n  $paren_level_max_index[33] = 0;\n  $paren_level_max_index[34]\
    \ = 0;\n  $paren_level_max_index[35] = 0;\n  $paren_level_max_index[36] = 0;\n\
    \  $paren_level_max_index[37] = 0;\n  $paren_level_max_index[38] = 0;\n  $paren_level_max_index[39]\
    \ = 0;\n  $paren_level_max_index[40] = 0;\n  $paren_level_max_index[41] = 0;\n\
    \  $paren_level_max_index[42] = 0;\n  $paren_level_max_index[43] = 0;\n  $paren_level_max_index[44]\
    \ = 0;\n  $paren_level_max_index[45] = 0;\n  $paren_level_max_index[46] = 0;\n\
    \  $paren_level_max_index\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpw0h6_vkl.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_length =\
    \ count($paren_array);\n  $max_level = 0;\n  $max_level_paren_array = [];\n  for\
    \ ($i = 0; $i < $paren_array_length; $i++) {\n    $paren_array[$i] = trim($paren_array[$i]);\n\
    \    if ($paren_array[$i] === \"()\") {\n      $max_level++;\n      $max_level_paren_array[$i]\
    \ = $max_level;\n    }\n  }\n  $paren_array_length = count($max_level_paren_array);\n\
    \  for ($i = 0; $i < $paren_array_length; $i++) {\n    for ($j = 0; $j < $paren_array_length;\
    \ $j++) {\n      if ($max_level_paren_array[$i] > $max_level_paren_array[$j])\
    \ {\n        $max_level = $max_level_paren_array[$i];\n      }\n    }\n  }\n \
    \ return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpese1u9ia.php:35\n\
    Stack trace:\n#0 /tmp/tmpese1u9ia.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpese1u9ia.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ {\n      $paren_stack[$paren_level][] = $char;\n    }\n  }\n  $paren_stack[$paren_level][]\
    \ = array();\n  $paren_array[] = $paren_level;\n  $paren_array[] = $paren_stack;\n\
    \  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0nid0uw.php:37\n\
    Stack trace:\n#0 /tmp/tmpo0nid0uw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo0nid0uw.php\
    \ on line 37\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[] = $char;\n      $paren_level++;\n    } else if ($char ==\
    \ ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_array[]\
    \ = count($paren_stack);\n      }\n    }\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6c9rtv4m.php:30\n\
    Stack trace:\n#0 /tmp/tmp6c9rtv4m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6c9rtv4m.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_len = count($paren_stack);\n    $paren_stack[0] = 0;\n    $paren_stack_len--;\n\
    \    foreach (explode(\" \", $paren_string) as $char) {\n        if ($char ==\
    \ \"(\") {\n            $paren_stack[$paren_stack_len] = $paren_stack[$paren_stack_len\
    \ - 1] + 1;\n        } else if ($char == \")\") {\n            $paren_stack[$paren_stack_len]\
    \ = $paren_stack[$paren_stack_len - 1];\n            $paren_stack_len--;\n   \
    \         if ($paren_stack_len == 0) {\n                $paren_array[] = $paren_stack[0];\n\
    \            }\n        }\n    }\n    return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8mg5pe7.php:33\n\
    Stack trace:\n#0 /tmp/tmp_8mg5pe7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_8mg5pe7.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  $paren_levels[$paren_string] = 0;\n  while\
    \ ($paren_stack) {\n    $paren_string = array_pop($paren_stack);\n    $paren_levels[$paren_string]++;\n\
    \    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    foreach ($paren_array as $paren_string) {\n      if ($paren_levels[$paren_string]\
    \ == $paren_level) {\n        $paren_levels[$paren_string] = 0;\n      }\n   \
    \ }\n  }\n  return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhtaz_zj.php:31\n\
    Stack trace:\n#0 /tmp/tmpnhtaz_zj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnhtaz_zj.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = trim($paren_stack[$paren_level - 1]);\n        $paren_level\
    \ = count($paren_stack) - 1;\n        $paren_array = array_merge($paren_array,\
    \ explode(\" \", $paren_string));\n    }\n    return $paren_array;\n}\n</code>\n\
    <|/ a tags=php,parentheses,regex |>\n<| c |>\nThis doesn't seem to work. `parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")` returns `array(2, 3, 1, 3)` instead of `array(2,\
    \ 3, 1, 4)`.\n<|/ c |>\n<| c |>\n: It works for me. `parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")` returns `array(2, 3, 1, 4)`.\n<|/ c |>\n<| c |>\n:\
    \ I tested it on PHP 5.3.10 and PHP 5.2.17. Both worked. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17.\
    \ Both worked. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\n: I\
    \ tested it on PHP 5.3.10 and PHP 5.2.17. Both worked. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$paren_array=array();\n\
    $paren_level=0;\n$paren_stack=array();\n$paren_stack[$paren_level]=\"(()()) ((()))\
    \ () ((())()())\";\n$paren_string=trim($paren_stack[$paren_level]);\n$paren_level=count($paren_stack)-1;\n\
    $paren_array=array_merge($paren_array,explode(\" \",$paren_string));\nprint_r($paren_array);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3h80q4hf.php on line 19

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n \
    \       if ($paren == \"(\") {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   } elseif ($paren == \")\") {\n            $level--;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   }\n        $max_level_array[] = $level;\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7eqh3gh.php:34\n\
    Stack trace:\n#0 /tmp/tmps7eqh3gh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps7eqh3gh.php\
    \ on line 34\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ - 1);\n    $paren_stack_string = str_repeat(\"(\", $paren_level - 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level - 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6jcg0zqb.php on line 40

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level =\
    \ array_pop($paren_stack);\n        $paren_array[] = $paren_level;\n        if\
    \ ($paren_level > 0) {\n            $paren_stack[$paren_level - 1] .= $paren_string;\n\
    \        }\n    }\n    return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyvt3g4k.php:28\n\
    Stack trace:\n#0 /tmp/tmpkyvt3g4k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkyvt3g4k.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_count[0] = 0;\n    $paren_stack[0]\
    \ = 0;\n    $paren_stack_count[1] = 0;\n    $paren_stack[1] = 0;\n    $paren_stack_count[2]\
    \ = 0;\n    $paren_stack[2] = 0;\n    $paren_stack_count[3] = 0;\n    $paren_stack[3]\
    \ = 0;\n    $paren_stack_count[4] = 0;\n    $paren_stack[4] = 0;\n    $paren_stack_count[5]\
    \ = 0;\n    $paren_stack[5] = 0;\n    $paren_stack_count[6] = 0;\n    $paren_stack[6]\
    \ = 0;\n    $paren_stack_count[7] = 0;\n    $paren_stack[7] = 0;\n    $paren_stack_count[8]\
    \ = 0;\n    $paren_stack[8] = 0;\n    $paren_stack_count[9] = 0;\n    $paren_stack[9]\
    \ = 0;\n    $paren_stack_count[10] = 0;\n    $paren_stack[10] = 0;\n    $paren_stack_count[11]\
    \ = 0;\n    $paren_stack[11] = 0;\n    $paren_stack_count[12] = 0;\n    $paren_stack[12]\
    \ = 0;\n    $paren_stack_count[13] = 0;\n    $paren_stack[13] = 0;\n    $paren_stack_count[14]\
    \ = 0;\n    $paren_stack[14] = 0;\n    $paren_stack_count[15] = 0;\n    $paren_stack[15]\
    \ = 0;\n    $paren_stack_count[16] = 0;\n    $paren_stack[16] = 0;\n    $paren_stack_count[17]\
    \ = 0;\n    $paren_stack[17] = 0;\n    $paren_stack_count[18] = 0;\n    $paren_stack[18]\
    \ = 0;\n    $paren_stack_count[19] = 0;\n    $paren_stack[19] = 0;\n    $paren_stack_count[20]\
    \ = 0;\n    $paren_stack[20] = 0;\n    $paren_stack_count[21] = 0;\n    $paren_stack[21]\
    \ = 0;\n    $paren_stack_count[22] = 0;\n    $paren_stack[22] = 0;\n    $paren_stack_count[23]\
    \ = 0;\n    $paren_stack[23] = 0;\n    $paren_stack_count[24] = 0;\n    $paren_stack[24]\
    \ = 0;\n    $paren_stack_count[25] = 0;\n    $paren_stack[25] = 0;\n    $paren_stack_count[26]\
    \ = 0;\n    $paren_stack[26] = 0;\n    $paren_stack_count[27] = 0;\n    $paren_stack[27]\
    \ = 0;\n    $paren_stack_count[28] = 0;\n    $paren_stack[28] = 0;\n    $paren_stack_count[29]\
    \ = 0;\n    $paren_stack\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn3n71s7p.php on line 72

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_count; $i++) {\n        $paren_array[$i] =\
    \ trim($paren_array[$i]);\n        if ($paren_array[$i] === \"()\") {\n      \
    \      $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n \
    \       } else {\n            $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfrv2bky.php:29\n\
    Stack trace:\n#0 /tmp/tmpnfrv2bky.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnfrv2bky.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n   \
    \   $level++;\n    } else if ($paren == \")\") {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfksbi0_.php:31\n\
    Stack trace:\n#0 /tmp/tmpjfksbi0_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjfksbi0_.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdabzx_ir.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $parens =\
    \ preg_split('/\\s*\\((?=\\()/', $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($parens as $paren) {\n    if ($paren == '(') {\n    \
    \  $level++;\n      $paren_levels[$level] = $level;\n    } elseif ($paren == ')')\
    \ {\n      $level--;\n      $paren_levels[$level] = $level;\n    }\n  }\n  $max_level\
    \ = max($paren_levels);\n  $nested_level = 0;\n  foreach ($paren_levels as $level\
    \ => $paren_level) {\n    if ($paren_level == $max_level) {\n      $nested_level++;\n\
    \    }\n  }\n  return $nested_level;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpq7a8o386.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7a8o386.php:36\n\
    Stack trace:\n#0 /tmp/tmpq7a8o386.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq7a8o386.php\
    \ on line 36\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_count\
    \ = count($paren_array);\n    $paren_array_levels = array();\n    $paren_array_levels_count\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_max_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_max = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_min = array();\n    $paren_array_levels_count_min_index\
    \ = array();\n    $paren_array_levels_count_\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2p3o9waf.php on line 53

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $parens\
    \ = preg_split('/\\s*\\((?!\\?)/', $paren_string);\n    $levels = array();\n \
    \   $level = 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(')\
    \ {\n            $levels[$level]++;\n        } else {\n            $levels[$level]--;\n\
    \        }\n        $level++;\n    }\n    return $levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg81b0csr.php:28\n\
    Stack trace:\n#0 /tmp/tmpg81b0csr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpg81b0csr.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $paren_stack[] = $paren;\n      $paren_level++;\n    } else if ($paren\
    \ == ')') {\n      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_array[]\
    \ = count($paren_stack);\n      }\n      $paren_stack = array_pop($paren_stack);\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx3v9_6f.php:31\n\
    Stack trace:\n#0 /tmp/tmpfx3v9_6f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfx3v9_6f.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        if\
    \ ($level > $max_level) {\n            $max_level = $level;\n            $max_level_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89ydd3z7.php:31\n\
    Stack trace:\n#0 /tmp/tmp89ydd3z7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp89ydd3z7.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_count = array();\n  $paren_stack_count[0] = 0;\n  $paren_stack[0]\
    \ = '';\n  $paren_stack_count[1] = 0;\n  $paren_stack[1] = '';\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_stack[$paren_level]\
    \ .= $char;\n      $paren_stack_count[$paren_level]++;\n      $paren_level++;\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      if ($paren_level\
    \ == 0) {\n        $paren_stack[$paren_level] .= $char;\n        $paren_stack_count[$paren_level]++;\n\
    \        $paren_level++;\n      } else {\n        $paren_stack_count[$paren_level]--;\n\
    \      }\n    }\n  }\n  while ($paren_stack_count[$paren_level] > 0) {\n    $paren_level--;\n\
    \  }\n  while ($paren_stack_count[$paren_level] > 0) {\n    $paren_stack_count[$paren_level]--;\n\
    \    $paren_stack[$paren_level] .= $paren_stack[$paren_level + 1];\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9q_xqa_c.php:47\n\
    Stack trace:\n#0 /tmp/tmp9q_xqa_c.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9q_xqa_c.php\
    \ on line 47\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while (count($paren_stack) > 0) {\n\
    \        $paren_string = array_pop($paren_stack);\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = explode(\" \", $paren_string);\n        foreach ($paren_array\
    \ as $paren_item) {\n            if ($paren_item == \"(\") {\n               \
    \ $paren_stack[] = $paren_item;\n            } else if ($paren_item == \")\")\
    \ {\n                $paren_stack = array_merge($paren_stack, array_slice($paren_stack,\
    \ 0, $paren_level));\n            }\n        }\n    }\n    return $paren_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpje69q3wm.php:32\n\
    Stack trace:\n#0 /tmp/tmpje69q3wm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpje69q3wm.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\\
    (\\(\\(\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp18lr_wdl.php on line 17

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level--;\n    $paren_array\
    \ = explode(' ', $paren_string);\n    foreach ($paren_array as $key => $value)\
    \ {\n      if ($value == '(') {\n        $paren_stack[$paren_level][] = $value;\n\
    \        $paren_level++;\n      } else if ($value == ')') {\n        $paren_level--;\n\
    \      }\n    }\n  }\n  return $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,regex\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to do this\
    \ without using regex. I'm looking for a way to do this without using recursion.\n\
    <|/ c |>\n<| c |>\nI added a non-regex solution. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nThanks for your solution. I'm going to try it out and see if it works.\n\
    <|/ c |>\n<| c |>\nI added a non-regex solution. Hope it helps.\n<|/ c |>\n<|\
    \ c |>\nI added a non-regex solution. Hope it helps.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI came up with a solution that doesn't use recursion and doesn't use regex.\
    \ I'm posting it here in case anyone else is looking for a way to do this without\
    \ using recursion.\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgc6qu1ff.php on line 27

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = array();\n  $paren_level_max_count_index[0] = 0;\n  $paren_level_max_count_index[1]\
    \ = 0;\n  $paren_level_max_count_index[2] = 0;\n  $paren_level_max_count_index[3]\
    \ = 0;\n  $paren_level_max_count_index[4] = 0;\n  $paren_level_max_count_index[5]\
    \ = 0;\n  $paren_level_max_count_index[6] = 0;\n  $paren_level_max_count_index[7]\
    \ = 0;\n  $paren_level_max_count_index[8] = 0;\n  $paren_level_max_count_index[9]\
    \ = 0;\n  $paren_level_max_count_index[10] = 0;\n  $paren_level_max_count_index[11]\
    \ = 0;\n  $paren_level_max_count_index[12] = 0;\n  $paren_level_max_count_index[13]\
    \ = 0;\n  $paren_level_max_count_index[14] = 0;\n  $paren_level_max_count_index[15]\
    \ = 0;\n  $paren_level_max_count_index[16] = 0;\n  $paren_level_max_count_index[17]\
    \ = 0;\n  $paren_level_max_count_index[18] = 0;\n  $paren_level_max_count_index[19]\
    \ = 0;\n  $paren_level_max_count_index[20] = 0;\n  $paren_level_max_count_index[21]\
    \ = 0;\n  $paren_level_max_count_index[22] = 0;\n  $paren_level_max_count_index[23]\
    \ = 0;\n  $paren_level_max_count_index[24] = 0;\n  $paren_level_max_count_index[25]\
    \ = 0;\n  $paren_level_max_count_index[26] = 0;\n  $paren_level_max_count_index[27]\
    \ = 0;\n  $paren_level_max_count_index[28] = 0;\n  $paren_level_max_count_index[29]\
    \ = 0;\n  $paren_level_max_count_index[30] = 0;\n  $paren_level_max_count_index[31]\
    \ = 0;\n  $paren_level_max_count_index[32] = 0;\n  $paren_level_max_count_index[33]\
    \ = 0;\n  $paren_level_max_count_index[34] = 0;\n  $paren_level_max_count_index[35]\
    \ = 0;\n  $paren_level_max_count_index[36] = 0;\n  $paren_level_max_count_index[37]\
    \ = 0;\n  $paren_level_max_count_index[38] = 0;\n  $paren_level_max_count_index[39]\
    \ = 0;\n  $paren_level_max_count_index[40] = 0;\n  $paren_level_max_count_index[41]\
    \ = 0;\n  $paren_level_max_count_index[42] = 0;\n  $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb0dtsgc5.php on line 58

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count_max = array();\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == \"(\") {\n      $paren_levels[]\
    \ = 1;\n      $paren_levels_count[] = 1;\n      $paren_levels_count_max[] = 1;\n\
    \    } elseif ($paren == \")\") {\n      $paren_levels[] = $paren_levels[count($paren_levels)\
    \ - 1];\n      $paren_levels_count[] = $paren_levels_count[count($paren_levels)\
    \ - 1];\n      $paren_levels_count_max[] = $paren_levels_count_max[count($paren_levels)\
    \ - 1];\n    } else {\n      $paren_levels[] = $paren_levels[count($paren_levels)\
    \ - 1];\n      $paren_levels_count[] = $paren_levels_count[count($paren_levels)\
    \ - 1];\n      $paren_levels_count_max[] = $paren_levels_count_max[count($paren_levels)\
    \ - 1];\n    }\n  }\n  $max_level = 0;\n  $max_level_count = 0;\n  $max_level_count_max\
    \ = 0;\n  foreach ($paren_levels as $i => $level) {\n    if ($level > $max_level)\
    \ {\n      $max_level = $level;\n      $max_level_count = $paren_levels_count[$i];\n\
    \      $max_level_count_max = $paren_levels_count_max[$i];\n    }\n  }\n  $nested_parens\
    \ = array();\n  foreach ($paren_levels as $i => $level) {\n    if ($level == $max_level)\
    \ {\n      $nested_parens[] = $max_level_count;\n    }\n  }\n  return $nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph83ogvp2.php:51\n\
    Stack trace:\n#0 /tmp/tmph83ogvp2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmph83ogvp2.php\
    \ on line 51\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    $paren_levels[$paren_string] = 0;\n\
    \    while (count($paren_stack)) {\n        $paren_string = array_pop($paren_stack);\n\
    \        $paren_levels[$paren_string]++;\n        $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n        foreach ($paren_array as $paren_string)\
    \ {\n            $paren_stack[] = $paren_string;\n            $paren_levels[$paren_string]\
    \ = $paren_levels[$paren_string] + 1;\n        }\n    }\n    return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpefyraw6m.php on line 18

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = 0;\n  $paren_stack_string_index = 0;\n  $paren_stack_string_count = 0;\n \
    \ $paren_stack_string_index = 0;\n  while ($paren_stack_string_index < strlen($paren_string))\
    \ {\n    $paren_stack_string = substr($paren_string, $paren_stack_string_index);\n\
    \    $paren_stack_string_count++;\n    if ($paren_stack_string_index < strlen($paren_string))\
    \ {\n      if ($paren_stack_string[strlen($paren_stack_string) - 1] == ')') {\n\
    \        $paren_stack_string_count--;\n      }\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string_count--;\n    }\n    if ($paren_stack_string[strlen($paren_stack_string)\
    \ - 1] == ')') {\n      $paren_stack_string\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppvyrfc25.php on line 60

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_len = count($paren_stack);\n  $paren_stack_pointer = -1;\n  $paren_stack_pointer_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos = 0;\n  $paren_stack_pointer_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos = 0;\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n \
    \ $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos =\
    \ 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_len = count($paren_stack);\n\
    \  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos\
    \ = 0;\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_len\
    \ = count($paren_stack);\n  $paren_stack_pointer_pos_pos_pos_pos_pos_pos_pos_pos_pos_pos_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2rdnukq4.php on line 41

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\[[^\\(\\)]*\\]/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^\\(\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\\
    (\\)]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\\
    )]*\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\([^\\(\\)]*\\)/', '', $paren_string);\n\
    \  $paren_string\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7u8djhwd.php on line 34

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $paren_array_max_depth = 0;\n    $paren_array_current_depth\
    \ = 0;\n    $paren_array_current_index = 0;\n    $paren_array_current_string =\
    \ \"\";\n    $paren_array_current_string_index = 0;\n    $paren_array_current_string_value\
    \ = \"\";\n    $paren_array_current_string_length = 0;\n    $paren_array_current_string_char\
    \ = \"\";\n    $paren_array_current_string_char_length = 0;\n    $paren_array_current_string_char_offset\
    \ = 0;\n    $paren_array_current_string_char_offset_end = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren_array_current_string_char_offset_start = 0;\n    $paren_array_current_string_char_offset_start\
    \ = 0;\n    $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1l7op10v.php on line 57

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    $paren_levels = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $level++;\n        } else if\
    \ ($paren == \")\") {\n            $level--;\n            if ($level == 0) {\n\
    \                $paren_levels[] = $level;\n            }\n        }\n       \
    \ if ($level > $max_level) {\n            $max_level = $level;\n        }\n  \
    \  }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9lu5eec.php:33\n\
    Stack trace:\n#0 /tmp/tmpa9lu5eec.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa9lu5eec.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\)/', '()', $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\\
    ]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\([^()]*\\)/', '()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n\
    \  $paren_string = preg_replace('/\\([^()]*\\)/', '()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\[[^()]*\\]/', '[]', $paren_string);\n  $paren_string = preg_replace('/\\\
    ([^()]*\\\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmb_ep_4e.php on line 32

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count[0]\
    \ = 0;\n  $paren_level_max_count[1] = 0;\n  $paren_level_max_count[2] = 0;\n \
    \ $paren_level_max_count[3] = 0;\n  $paren_level_max_count[4] = 0;\n  $paren_level_max_count[5]\
    \ = 0;\n  $paren_level_max_count[6] = 0;\n  $paren_level_max_count[7] = 0;\n \
    \ $paren_level_max_count[8] = 0;\n  $paren_level_max_count[9] = 0;\n  $paren_level_max_count[10]\
    \ = 0;\n  $paren_level_max_count[11] = 0;\n  $paren_level_max_count[12] = 0;\n\
    \  $paren_level_max_count[13] = 0;\n  $paren_level_max_count[14] = 0;\n  $paren_level_max_count[15]\
    \ = 0;\n  $paren_level_max_count[16] = 0;\n  $paren_level_max_count[17] = 0;\n\
    \  $paren_level_max_count[18] = 0;\n  $paren_level_max_count[19] = 0;\n  $paren_level_max_count[20]\
    \ = 0;\n  $paren_level_max_count[21] = 0;\n  $paren_level_max_count[22] = 0;\n\
    \  $paren_level_max_count[23] = 0;\n  $paren_level_max_count[24] = 0;\n  $paren_level_max_count[25]\
    \ = 0;\n  $paren_level_max_count[26] = 0;\n  $paren_level_max_count[27] = 0;\n\
    \  $paren_level_max_count[28] = 0;\n  $paren_level_max_count[29] = 0;\n  $paren_level_max_count[30]\
    \ = 0;\n  $paren_level_max_count[31] = 0;\n  $paren_level_max_count[32] = 0;\n\
    \  $paren_level_max_count[33] = 0;\n  $paren_level_max_count[34] = 0;\n  $paren_level_max_count[35]\
    \ = 0;\n  $paren_level_max_count[36] = 0;\n  $paren_level_max_count[37] = 0;\n\
    \  $paren_level_max_count[38] = 0;\n  $paren_level_max_count[39] = 0;\n  $paren_level_max_count[40]\
    \ = 0;\n  $paren_level_max_count[41] = 0;\n  $paren_level_max_count[42] = 0;\n\
    \  $paren_level_max_count[43] = 0;\n  $paren_level_max_count[44] = 0;\n  $paren_level_max_count[45]\
    \ = 0;\n  $paren_level_max_count[46] = 0;\n  $paren_level_max_count[47] = 0;\n\
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdabzx_ir.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $parens =\
    \ preg_split('/\\s+/', $paren_string);\n  $level = 0;\n  $max_level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($parens as $paren) {\n    if ($paren == '(') {\n    \
    \  $level++;\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    } else if ($paren == ')') {\n      $level--;\n      if ($level <\
    \ 0) {\n        $level = 0;\n      }\n    }\n    $paren_levels[] = $level;\n \
    \ }\n  return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1vipux0.php:35\n\
    Stack trace:\n#0 /tmp/tmpr1vipux0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr1vipux0.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = \"\";\n    $paren_stack[$paren_level] .= $paren_string;\n\
    \    while ($paren_level > 0) {\n        $paren_level--;\n        $paren_string\
    \ = $paren_stack[$paren_level];\n        $paren_array = array_merge($paren_array,\
    \ explode(\" \", $paren_string));\n    }\n    return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjt8532_t.php:26\n\
    Stack trace:\n#0 /tmp/tmpjt8532_t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjt8532_t.php\
    \ on line 26\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgzic81tb.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    $paren_level = 0;\n    $paren_array[0] = $paren_array[0];\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $level++;\n            $paren_level++;\n        } elseif ($paren == \"\
    )\") {\n            $level--;\n            $paren_level--;\n            if ($level\
    \ == 0) {\n                $max_level = $paren_level;\n            }\n       \
    \ }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4meo5ee.php:33\n\
    Stack trace:\n#0 /tmp/tmph4meo5ee.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph4meo5ee.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_last_char = \"\";\n  $paren_stack_last_char_pos = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\
    \  $paren_stack_last_char_length = 0;\n  $paren_stack_last_char_length = 0;\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpds1b_1x2.php on line 77

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = array();\n \
    \   $paren_level = 0;\n    $paren_stack = array();\n    $paren_stack[] = -1;\n\
    \    $paren_stack_string = \"\";\n    $paren_stack_string = str_repeat(\"(\",\
    \ $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\")\", $paren_level - 1);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level - 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level - 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\"(\", $paren_level\
    \ + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level + 1);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    (\", $paren_level + 1);\n    $paren_stack_string = str_repeat(\")\", $paren_level\
    \ + 1);\n    $paren_stack\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpskaf1gxa.php on line 41

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_stack = array();\n    $paren_array = explode(\" \", $paren_string);\n\
    \    for ($i = 0; $i < count($paren_array); $i++) {\n      if ($paren_array[$i]\
    \ === \"(\") {\n        $paren_stack[] = $paren_array[$i];\n      } else if ($paren_array[$i]\
    \ === \")\") {\n        $paren_stack[count($paren_stack) - 1] .= $paren_array[$i];\n\
    \      }\n    }\n  }\n  return $paren_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccvrq8c9.php:33\n\
    Stack trace:\n#0 /tmp/tmpccvrq8c9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpccvrq8c9.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = \"\";\n  $paren_stack[$paren_level + 1] = \"\"\
    ;\n  $paren_stack[$paren_level + 2] = \"\";\n  $paren_stack[$paren_level + 3]\
    \ = \"\";\n  $paren_stack[$paren_level + 4] = \"\";\n  $paren_stack[$paren_level\
    \ + 5] = \"\";\n  $paren_stack[$paren_level + 6] = \"\";\n  $paren_stack[$paren_level\
    \ + 7] = \"\";\n  $paren_stack[$paren_level + 8] = \"\";\n  $paren_stack[$paren_level\
    \ + 9] = \"\";\n  $paren_stack[$paren_level + 10] = \"\";\n  $paren_stack[$paren_level\
    \ + 11] = \"\";\n  $paren_stack[$paren_level + 12] = \"\";\n  $paren_stack[$paren_level\
    \ + 13] = \"\";\n  $paren_stack[$paren_level + 14] = \"\";\n  $paren_stack[$paren_level\
    \ + 15] = \"\";\n  $paren_stack[$paren_level + 16] = \"\";\n  $paren_stack[$paren_level\
    \ + 17] = \"\";\n  $paren_stack[$paren_level + 18] = \"\";\n  $paren_stack[$paren_level\
    \ + 19] = \"\";\n  $paren_stack[$paren_level + 20] = \"\";\n  $paren_stack[$paren_level\
    \ + 21] = \"\";\n  $paren_stack[$paren_level + 22] = \"\";\n  $paren_stack[$paren_level\
    \ + 23] = \"\";\n  $paren_stack[$paren_level + 24] = \"\";\n  $paren_stack[$paren_level\
    \ + 25] = \"\";\n  $paren_stack[$paren_level + 26] = \"\";\n  $paren_stack[$paren_level\
    \ + 27] = \"\";\n  $paren_stack[$paren_level + 28] = \"\";\n  $paren_stack[$paren_level\
    \ + 29] = \"\";\n  $paren_stack[$paren_level + 30] = \"\";\n  $paren_stack[$paren_level\
    \ + 31] = \"\";\n  $paren_stack[$paren_level + 32] = \"\";\n  $paren_stack[$paren_level\
    \ + 33] = \"\";\n  $paren_stack[$paren_level + 34] = \"\";\n  $paren_stack[$paren_level\
    \ + 35] = \"\";\n  $paren_stack[$paren_level + 36] = \"\";\n  $paren_stack[$paren_level\
    \ + 37] = \"\";\n  $paren_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3p02rbtj.php on line 50

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\((/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_string);\n  $paren_string = \nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphc3zx0w4.php on line 34

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_length =\
    \ count($paren_array);\n  $max_level = 0;\n  $max_level_length = 0;\n  for ($i\
    \ = 0; $i < $paren_array_length; $i++) {\n    $paren_array[$i] = trim($paren_array[$i]);\n\
    \    if ($paren_array[$i] === \"()\") {\n      $max_level++;\n      $max_level_length++;\n\
    \    }\n    if ($paren_array[$i] === \"(()\") {\n      $max_level++;\n      $max_level_length++;\n\
    \    }\n    if ($paren_array[$i] === \")\") {\n      $max_level--;\n      $max_level_length--;\n\
    \    }\n    if ($paren_array[$i] === \")()\") {\n      $max_level--;\n      $max_level_length--;\n\
    \    }\n  }\n  return array($max_level, $max_level_length);\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdr8xjv9.php:39\n\
    Stack trace:\n#0 /tmp/tmpcdr8xjv9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcdr8xjv9.php\
    \ on line 39\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7vx7pou3.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count[0] = 0;\n    $paren_level_max_count[1] = 0;\n    $paren_level_max_count[2]\
    \ = 0;\n    $paren_level_max_count[3] = 0;\n    $paren_level_max_count[4] = 0;\n\
    \    $paren_level_max_count[5] = 0;\n    $paren_level_max_count[6] = 0;\n    $paren_level_max_count[7]\
    \ = 0;\n    $paren_level_max_count[8] = 0;\n    $paren_level_max_count[9] = 0;\n\
    \    $paren_level_max_count[10] = 0;\n    $paren_level_max_count[11] = 0;\n  \
    \  $paren_level_max_count[12] = 0;\n    $paren_level_max_count[13] = 0;\n    $paren_level_max_count[14]\
    \ = 0;\n    $paren_level_max_count[15] = 0;\n    $paren_level_max_count[16] =\
    \ 0;\n    $paren_level_max_count[17] = 0;\n    $paren_level_max_count[18] = 0;\n\
    \    $paren_level_max_count[19] = 0;\n    $paren_level_max_count[20] = 0;\n  \
    \  $paren_level_max_count[21] = 0;\n    $paren_level_max_count[22] = 0;\n    $paren_level_max_count[23]\
    \ = 0;\n    $paren_level_max_count[24] = 0;\n    $paren_level_max_count[25] =\
    \ 0;\n    $paren_level_max_count[26] = 0;\n    $paren_level_max_count[27] = 0;\n\
    \    $paren_level_max_count[28] = 0;\n    $paren_level_max_count[29] = 0;\n  \
    \  $paren_level_max_count[30] = 0;\n    $paren_level_max_count[31] = 0;\n    $paren_level_max_count[32]\
    \ = 0;\n    $paren_level_max_count[33] = 0;\n    $paren_level_max_count[34] =\
    \ 0;\n    $paren_level_max_count[35] = 0;\n    $paren_level_max_count[36] = 0;\n\
    \    $paren_level_max_count[37] = 0;\n    $paren_level_max_count[38] = 0;\n  \
    \  $paren_level_max_count[39] = 0;\n    $paren_level_max_count[40] = 0;\n    $paren_level_max_count[41]\
    \ = 0;\n    $paren_level_max_count[42] = 0;\n    $paren_level_max_count[43] =\
    \ 0;\n    $paren_level_max_count[44] = 0;\n    $paren_level_max_count[45] = 0;\n\
    \    $paren_level_max_count[46] = 0;\n    $paren_level_max_count[47] = 0;\n  \
    \  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvgyl7vti.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count_index\
    \ = 0;\n  $paren_level_max_count_index2 = 0;\n  $paren_level_max_count_index3\
    \ = 0;\n  $paren_level_max_count_index4 = 0;\n  $paren_level_max_count_index5\
    \ = 0;\n  $paren_level_max_count_index6 = 0;\n  $paren_level_max_count_index7\
    \ = 0;\n  $paren_level_max_count_index8 = 0;\n  $paren_level_max_count_index9\
    \ = 0;\n  $paren_level_max_count_index10 = 0;\n  $paren_level_max_count_index11\
    \ = 0;\n  $paren_level_max_count_index12 = 0;\n  $paren_level_max_count_index13\
    \ = 0;\n  $paren_level_max_count_index14 = 0;\n  $paren_level_max_count_index15\
    \ = 0;\n  $paren_level_max_count_index16 = 0;\n  $paren_level_max_count_index17\
    \ = 0;\n  $paren_level_max_count_index18 = 0;\n  $paren_level_max_count_index19\
    \ = 0;\n  $paren_level_max_count_index20 = 0;\n  $paren_level_max_count_index21\
    \ = 0;\n  $paren_level_max_count_index22 = 0;\n  $paren_level_max_count_index23\
    \ = 0;\n  $paren_level_max_count_index24 = 0;\n  $paren_level_max_count_index25\
    \ = 0;\n  $paren_level_max_count_index26 = 0;\n  $paren_level_max_count_index27\
    \ = 0;\n  $paren_level_max_count_index28 = 0;\n  $paren_level_max_count_index29\
    \ = 0;\n  $paren_level_max_count_index30 = 0;\n  $paren_level_max_count_index31\
    \ = 0;\n  $paren_level_max_count_index32 = 0;\n  $paren_level_max_count_index33\
    \ = 0;\n  $paren_level_max_count_index34 = 0;\n  $paren_level_max_count_index35\
    \ = 0;\n  $paren_level_max_count_index36 = 0;\n  $paren_level_max_count_index37\
    \ = 0;\n  $paren_level_max_count_index38 = 0;\n  $paren_level_max_count_index39\
    \ = 0;\n  $paren_level_max_count_index40 = 0;\n  $paren_level_max_count_index41\
    \ = 0;\n  $paren_level_max_count_index42 = 0;\n  $paren_level_max_count_index43\
    \ = 0;\n  $paren_level_max_count_index44 = 0;\n  $paren_level_max_count_index45\
    \ = 0;\n  $paren_level_max_count_index46 = 0;\n  $paren_level_max_count_index47\
    \ = 0;\n  $paren_level_max_count_index48\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1h8d9t_h.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_open = false;\n\
    \    $paren_closed = false;\n    $paren_level_string = \"\";\n    $paren_level_array\
    \ = array();\n    $paren_level_array[0] = 0;\n    $paren_level_array[1] = 0;\n\
    \    $paren_level_array[2] = 0;\n    $paren_level_array[3] = 0;\n    $paren_level_array[4]\
    \ = 0;\n    $paren_level_array[5] = 0;\n    $paren_level_array[6] = 0;\n    $paren_level_array[7]\
    \ = 0;\n    $paren_level_array[8] = 0;\n    $paren_level_array[9] = 0;\n    $paren_level_array[10]\
    \ = 0;\n    $paren_level_array[11] = 0;\n    $paren_level_array[12] = 0;\n   \
    \ $paren_level_array[13] = 0;\n    $paren_level_array[14] = 0;\n    $paren_level_array[15]\
    \ = 0;\n    $paren_level_array[16] = 0;\n    $paren_level_array[17] = 0;\n   \
    \ $paren_level_array[18] = 0;\n    $paren_level_array[19] = 0;\n    $paren_level_array[20]\
    \ = 0;\n    $paren_level_array[21] = 0;\n    $paren_level_array[22] = 0;\n   \
    \ $paren_level_array[23] = 0;\n    $paren_level_array[24] = 0;\n    $paren_level_array[25]\
    \ = 0;\n    $paren_level_array[26] = 0;\n    $paren_level_array[27] = 0;\n   \
    \ $paren_level_array[28] = 0;\n    $paren_level_array[29] = 0;\n    $paren_level_array[30]\
    \ = 0;\n    $paren_level_array[31] = 0;\n    $paren_level_array[32] = 0;\n   \
    \ $paren_level_array[33] = 0;\n    $paren_level_array[34] = 0;\n    $paren_level_array[35]\
    \ = 0;\n    $paren_level_array[36] = 0;\n    $paren_level_array[37] = 0;\n   \
    \ $paren_level_array[38] = 0;\n    $paren_level_array[39] = 0;\n    $paren_level_array[40]\
    \ = 0;\n    $paren_level_array[41] = 0;\n    $paren_level_array[42] = 0;\n   \
    \ $paren_level_array[43] = 0;\n    $paren_level_array[44] = 0;\n    $paren_level_array[45]\
    \ = 0;\n    $paren_level_array[46] = 0;\n    $paren_level_array[47] = 0;\n   \
    \ $paren_level_array[48] = 0;\n    $paren_level_array[49] = 0;\n    $paren_level_array[50]\
    \ = 0;\n    $paren_level_array[51] = 0;\n    $paren_level_array[52] = 0;\n   \
    \ $paren_level_array[53] = 0;\n    $paren_level_array[54] = 0;\n    $paren_level_array[55]\
    \ = 0;\n    $paren_level_array[56] = 0;\n    $paren_level_array[57] = 0;\n   \
    \ $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp0rophax.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_length; $i++) {\n        $level = 0;\n     \
    \   $paren_array[$i] = \"(\" . $paren_array[$i] . \")\";\n        for ($j = $i;\
    \ $j < $paren_array_length; $j++) {\n            if ($paren_array[$j] === \"(\"\
    ) {\n                $level++;\n            } else if ($paren_array[$j] === \"\
    )\") {\n                $level--;\n            }\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n            $max_level_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vulzupl.php:35\n\
    Stack trace:\n#0 /tmp/tmp7vulzupl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7vulzupl.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level =\
    \ array_pop($paren_stack);\n        $paren_array[] = $paren_level;\n        if\
    \ ($paren_level > 0) {\n            $paren_stack[$paren_level - 1] .= $paren_string;\n\
    \        } else {\n            $paren_stack[$paren_level] = $paren_string;\n \
    \       }\n    }\n    return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0zui8yj.php:30\n\
    Stack trace:\n#0 /tmp/tmpc0zui8yj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc0zui8yj.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_size\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_size; $i++) {\n        $paren_array[$i] =\
    \ trim($paren_array[$i]);\n        if ($paren_array[$i] === \"()\") {\n      \
    \      $max_level++;\n            $max_level_paren_array[$i] = $max_level;\n \
    \       } else {\n            $max_level--;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplgkpumnn.php:29\n\
    Stack trace:\n#0 /tmp/tmplgkpumnn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplgkpumnn.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_open = false;\n\
    \    $paren_closed = false;\n    $paren_level_string = \"\";\n    $paren_level_array\
    \ = array();\n    $paren_level_array[0] = 0;\n    $paren_level_array[1] = 0;\n\
    \    $paren_level_array[2] = 0;\n    $paren_level_array[3] = 0;\n    $paren_level_array[4]\
    \ = 0;\n    $paren_level_array[5] = 0;\n    $paren_level_array[6] = 0;\n    $paren_level_array[7]\
    \ = 0;\n    $paren_level_array[8] = 0;\n    $paren_level_array[9] = 0;\n    $paren_level_array[10]\
    \ = 0;\n    $paren_level_array[11] = 0;\n    $paren_level_array[12] = 0;\n   \
    \ $paren_level_array[13] = 0;\n    $paren_level_array[14] = 0;\n    $paren_level_array[15]\
    \ = 0;\n    $paren_level_array[16] = 0;\n    $paren_level_array[17] = 0;\n   \
    \ $paren_level_array[18] = 0;\n    $paren_level_array[19] = 0;\n    $paren_level_array[20]\
    \ = 0;\n    $paren_level_array[21] = 0;\n    $paren_level_array[22] = 0;\n   \
    \ $paren_level_array[23] = 0;\n    $paren_level_array[24] = 0;\n    $paren_level_array[25]\
    \ = 0;\n    $paren_level_array[26] = 0;\n    $paren_level_array[27] = 0;\n   \
    \ $paren_level_array[28] = 0;\n    $paren_level_array[29] = 0;\n    $paren_level_array[30]\
    \ = 0;\n    $paren_level_array[31] = 0;\n    $paren_level_array[32] = 0;\n   \
    \ $paren_level_array[33] = 0;\n    $paren_level_array[34] = 0;\n    $paren_level_array[35]\
    \ = 0;\n    $paren_level_array[36] = 0;\n    $paren_level_array[37] = 0;\n   \
    \ $paren_level_array[38] = 0;\n    $paren_level_array[39] = 0;\n    $paren_level_array[40]\
    \ = 0;\n    $paren_level_array[41] = 0;\n    $paren_level_array[42] = 0;\n   \
    \ $paren_level_array[43] = 0;\n    $paren_level_array[44] = 0;\n    $paren_level_array[45]\
    \ = 0;\n    $paren_level_array[46] = 0;\n    $paren_level_array[47] = 0;\n   \
    \ $paren_level_array[48] = 0;\n    $paren_level_array[49] = 0;\n    $paren_level_array[50]\
    \ = 0;\n    $paren_level_array[51] = 0;\n    $paren_level_array[52] = 0;\n   \
    \ $paren_level_array[53] = 0;\n    $paren_level_array[54] = 0;\n    $paren_level_array[55]\
    \ = 0;\n    $paren_level_array[56] = 0;\n    $paren_level_array[57] = 0;\n   \
    \ $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp0rophax.php on line 73

    '
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while ($paren_stack) {\n        $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n        $paren_level = count($paren_stack);\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack = array_slice($paren_stack, 0, $paren_level);\n    }\n \
    \   return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $parens\
    \ = preg_split('/[\\(\\)]/', $paren_string);\n    $level = 0;\n    $max_level\
    \ = 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(') {\n    \
    \        $level++;\n        } else if ($paren == ')') {\n            $level--;\n\
    \            if ($level < 0) {\n                $max_level = $level;\n       \
    \         break;\n            }\n        }\n    }\n    return array($max_level,\
    \ $level);\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qbhw2sx.php:31\n\
    Stack trace:\n#0 /tmp/tmp1qbhw2sx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1qbhw2sx.php\
    \ on line 31\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_length =\
    \ count($paren_array);\n  $max_level = 0;\n  $max_level_length = 0;\n  $level\
    \ = 0;\n  $level_length = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == \"(\") {\n      $level++;\n      $level_length++;\n    } else if ($paren\
    \ == \")\") {\n      $level--;\n      $level_length--;\n      if ($level < 0)\
    \ {\n        $max_level = $level;\n        $max_level_length = $level_length;\n\
    \      }\n    }\n  }\n  return array($max_level, $max_level_length);\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qy24vf6.php:35\n\
    Stack trace:\n#0 /tmp/tmp0qy24vf6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0qy24vf6.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_length; $i++) {\n        $level = 0;\n     \
    \   for ($j = 0; $j < $i; $j++) {\n            if ($paren_array[$j] == $paren_array[$i])\
    \ {\n                $level++;\n            }\n        }\n        if ($level >\
    \ $max_level) {\n            $max_level = $level;\n            $max_level_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdcjky2g.php:32\n\
    Stack trace:\n#0 /tmp/tmphdcjky2g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphdcjky2g.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = array_pop($paren_stack);\n        $paren_level--;\n\
    \        $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhqe48_v.php:25\n\
    Stack trace:\n#0 /tmp/tmpmhqe48_v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmhqe48_v.php\
    \ on line 25\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[$paren_level] = $paren_string;\n\
    \  while ($paren_level > 0) {\n    $paren_string = trim($paren_stack[$paren_level\
    \ - 1]);\n    $paren_level = count($paren_stack);\n    if ($paren_string == '')\
    \ {\n      break;\n    }\n    $paren_array = array_merge($paren_array, explode('\
    \ ', $paren_string));\n    $paren_stack[$paren_level] = '';\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_aj5fus.php:30\n\
    Stack trace:\n#0 /tmp/tmp9_aj5fus.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9_aj5fus.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1qdrpdb8.php on line 77

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '(', $paren_string);\n    $paren_string = preg_replace('/\\(\\\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5ihq_bsu.php on line 36

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[] = $paren_level;\n      $paren_level++;\n    } else if ($char\
    \ == ')') {\n      $paren_level = $paren_stack[count($paren_stack) - 1];\n   \
    \   $paren_stack = array_reverse($paren_stack);\n    }\n  }\n  $paren_stack =\
    \ array_reverse($paren_stack);\n  $paren_array[] = $paren_level;\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuscd5hm3.php:30\n\
    Stack trace:\n#0 /tmp/tmpuscd5hm3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuscd5hm3.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \    if ($paren_level == 0 && count($paren_stack[$paren_level]) == 0) {\n    \
    \  $paren_array[] = count($paren_stack);\n    }\n    $paren_stack[$paren_level][]\
    \ = $char;\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9yre9wq.php:34\n\
    Stack trace:\n#0 /tmp/tmpg9yre9wq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg9yre9wq.php\
    \ on line 34\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ === '(') {\n      $paren_level++;\n      $paren_stack[$paren_level][] = array();\n\
    \    } else if ($char === ')') {\n      $paren_level--;\n      $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char === ' ') {\n      $paren_stack[$paren_level][]\
    \ = array();\n    }\n  }\n  foreach ($paren_stack as $level) {\n    $paren_array[]\
    \ = count($level);\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparfopysk.php:36\n\
    Stack trace:\n#0 /tmp/tmparfopysk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmparfopysk.php\
    \ on line 36\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    $paren_level++;\n    while ($paren_level\
    \ > 0) {\n        $paren_string = array_pop($paren_stack);\n        $paren_array\
    \ = array_merge($paren_array, explode(' ', $paren_string));\n        $paren_level--;\n\
    \    }\n    return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4eb4l2qb.php:26\n\
    Stack trace:\n#0 /tmp/tmp4eb4l2qb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4eb4l2qb.php\
    \ on line 26\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_len = count($paren_stack);\n  $paren_stack[$paren_stack_len] =\
    \ $paren_level;\n  foreach (explode(' ', $paren_string) as $char) {\n    if ($char\
    \ == '(') {\n      $paren_level++;\n      $paren_stack[$paren_stack_len] = $paren_level;\n\
    \    } else if ($char == ')') {\n      $paren_level--;\n      $paren_stack[$paren_stack_len]\
    \ = $paren_level;\n    }\n    if ($paren_level == 0) {\n      $paren_array[] =\
    \ $paren_stack[$paren_stack_len];\n    }\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt36ca_j.php:33\n\
    Stack trace:\n#0 /tmp/tmpnt36ca_j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnt36ca_j.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom\
    \ = -1;\n    $paren_stack_top = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top\
    \ = -1;\n    $paren_stack_bottom = -1;\n    $paren_stack_top = -1;\n    $paren_stack_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1qdrpdb8.php on line 77

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char === '(') {\n\
    \      $paren_stack[] = $paren_level;\n    } else if ($char === ')') {\n     \
    \ $paren_level = $paren_stack[count($paren_stack) - 1];\n      $paren_stack =\
    \ array_reverse($paren_stack);\n      $paren_array[] = $paren_level;\n    }\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd3xlmxo.php:28\n\
    Stack trace:\n#0 /tmp/tmppd3xlmxo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppd3xlmxo.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_pointer = -1;\n    $paren_stack_pointer_length = count($paren_stack);\n\
    \    $paren_stack_pointer_length_max = count($paren_stack) - 1;\n    $paren_stack_pointer_length_min\
    \ = 0;\n    $paren_stack_pointer_length_min_max = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_min_max = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_pointer_length_max_min = 0;\n    $paren_stack_pointer_length_max_min\
    \ = 0;\n    $paren_stack_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpaco8nso2.php on line 56

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack)\
    \ - 1;\n    $paren_array = array();\n    $paren_stack = array();\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == \"(\") {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == \")\") {\n        $paren_stack[count($paren_stack)\
    \ - 1] = $paren_string;\n      } else if ($paren_string == \"(\") {\n        $paren_stack[]\
    \ = $paren_string;\n      } else if ($paren_string == \")\") {\n        $paren_stack[count($paren_stack)\
    \ - 1] = $paren_string;\n      }\n    }\n  }\n  return $paren_level;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpulmffquy.php:37\n\
    Stack trace:\n#0 /tmp/tmpulmffquy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpulmffquy.php\
    \ on line 37\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_levels = array();\n  $paren_levels_string = \"\"\
    ;\n  $paren_levels_array = array();\n  $paren_levels_array_string = \"\";\n  $paren_levels_array_strings\
    \ = array();\n  $paren_levels_array_strings_string = \"\";\n  $paren_levels_array_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_string = \"\";\n  $paren_levels_array_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_string = \"\";\n \
    \ $paren_levels_array_strings_strings_strings_strings = array();\n  $paren_levels_array_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings = array();\n\
    \  $paren_levels_array_strings_strings_strings_strings_strings_string = \"\";\n\
    \  $paren_levels_array_strings_strings_strings_strings_strings_strings = array();\n\
    \  $paren_levels_array_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = array();\n  $paren_levels_array_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\";\n  $paren_levels_array_strings_strings_strings_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6f2f_kk8.php on line 36

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_counter = 0;\n    $paren_level_counter_max = 0;\n\
    \    $paren_level_counter_max_string = \"\";\n    $paren_level_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max = 0;\n    $paren_level_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter = 0;\n    $paren_level_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_string = \"\";\n\
    \    $paren_level_counter_max_counter_max_counter_max_counter_max = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_string\
    \ = \"\";\n    $paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt5in19d8.php on line 41

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    $level = 0;\n    $paren_level\
    \ = 0;\n    $paren_level_stack = array();\n    $paren_level_stack[$paren_level_stack_key]\
    \ = $paren_level_stack_key;\n    foreach ($paren_array as $paren_item) {\n   \
    \     if ($paren_item == '(') {\n            $level++;\n            $paren_level_stack[$level]\
    \ = $level;\n        } else if ($paren_item == ')') {\n            $level--;\n\
    \            $paren_level_stack[$level] = $level;\n            if ($level == 0)\
    \ {\n                $paren_level_stack_key = $paren_level_stack[$level];\n  \
    \          }\n        } else if ($paren_item == '') {\n            $level = 0;\n\
    \        }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvayh0aut.php:40\n\
    Stack trace:\n#0 /tmp/tmpvayh0aut.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvayh0aut.php\
    \ on line 40\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_counter = 0;\n    $paren_level_counter_string = \"\
    \";\n    $paren_level_counter_array = [];\n    $paren_level_counter_array[] =\
    \ -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array[]\
    \ = -1;\n    $paren_level_counter_array[] = -1;\n    $paren_level_counter_array\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsx0t4ug_.php on line 62

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = $paren_string;\n\
    \  $paren_stack_string = \"\";\n  while (count($paren_stack)) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_stack_string = $paren_stack_string .\
    \ $paren_string;\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\)/', '($1)',\
    \ $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = preg_replace('/\\(([^()]+)\\\
    )/', '(', $paren_stack_string);\n    $paren_stack_string = \nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmg8t60kf.php on line 33

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\)/', '(()', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\\
    )\\)/', '(()()', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\\
    (\\)\\)\\)/', '(()()()', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\)\\)\\)\\)/', '(()()()()', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)/', '(()()()()()', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)/', '(()()()()()()',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\\
    )\\)\\)\\)\\)\\)\\)/', '(()()()()()()()', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)/', '(()()()()()()()()()', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgk50vfoa.php on line 18

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_top = count($paren_stack);\n    $paren_stack[$paren_stack_top]\
    \ = '';\n    $paren_stack[$paren_stack_top] .= $paren_string;\n    while ($paren_stack_top\
    \ > 0) {\n        $paren_stack_top -= 1;\n        $paren_string = $paren_stack[$paren_stack_top];\n\
    \        $paren_array = explode(' ', $paren_string);\n        $paren_level = 0;\n\
    \        foreach ($paren_array as $paren_element) {\n            if ($paren_element\
    \ == '(') {\n                $paren_level += 1;\n            } elseif ($paren_element\
    \ == ')') {\n                $paren_level -= 1;\n            }\n            if\
    \ ($paren_level == 0) {\n                $paren_stack[$paren_stack_top] .= $paren_element;\n\
    \            }\n        }\n    }\n    return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6wodd4v.php:38\n\
    Stack trace:\n#0 /tmp/tmpa6wodd4v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa6wodd4v.php\
    \ on line 38\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_count = array();\n  $paren_stack_count[$paren_stack] = 1;\n  $paren_array[$paren_stack]\
    \ = $paren_string;\n  while ($paren_stack_count[$paren_stack] > 0) {\n    $paren_stack_count[$paren_stack]--;\n\
    \    $paren_level++;\n    $paren_stack = array_pop($paren_stack);\n    $paren_stack_count[$paren_stack]++;\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmp0s1oxfq3.php on line 12\n\nWarning:\
    \ Illegal offset type in /tmp/tmp0s1oxfq3.php on line 13\n\nWarning: Illegal offset\
    \ type in /tmp/tmp0s1oxfq3.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0s1oxfq3.php:28\nStack trace:\n#0 /tmp/tmp0s1oxfq3.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0s1oxfq3.php on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = $paren_string;\n    while (count($paren_stack) > 0) {\n\
    \        $paren_string = array_pop($paren_stack);\n        $paren_array = array_merge($paren_array,\
    \ explode(' ', $paren_string));\n        foreach ($paren_array as $paren_string)\
    \ {\n            $paren_level++;\n            $paren_array = array_merge($paren_array,\
    \ explode(')', $paren_string));\n        }\n    }\n    return $paren_level;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a recursive function\
    \ which counts the number of nested parentheses in a string. \n<code>\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp44f8f9go.php on line 22

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$paren_level]++;\n    } else if ($char == ')') {\n      $paren_stack[$paren_level]--;\n\
    \      if ($paren_stack[$paren_level] == 0) {\n        $paren_level--;\n     \
    \ }\n    }\n    $paren_array[] = $paren_level;\n  }\n  return $paren_array;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for single parentheses but fails for multiple parentheses e.g. \"(()())\
    \ ()\" returns array(2, 1, 1, 1). Can you please suggest a solution for multiple\
    \ parentheses?\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for\
    \ multiple parentheses.\n<|/ c |>\n<| a tags=php,parentheses,regex |>\n<code>\n\
    <?php\n$string = \"(()()) ()\";\n$paren_array = array();\n$paren_level = 0;\n\
    $paren_stack = array();\nforeach (explode(' ', $string) as $char) {\n    if ($char\
    \ == '(') {\n        $paren_stack[$paren_level]++;\n    } else if ($char == ')')\
    \ {\n        $paren_stack[$paren_level]--;\n        if ($paren_stack[$paren_level]\
    \ == 0) {\n            $paren_level--;\n        }\n    }\n    $paren_array[] =\
    \ $paren_level;\n}\nprint_r($paren_array);\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0qxzfoso.php on line 24

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_last_char = \"\";\n  $paren_stack_last_char_count =\
    \ 0;\n  $paren_stack_last_char_pos = 0;\n  $paren_stack_last_char_pos_count =\
    \ 0;\n  $paren_stack_last_char_pos_string = \"\";\n  $paren_stack_last_char_pos_string_count\
    \ = 0;\n  $paren_stack_last_char_pos_string_pos = 0;\n  while ($paren_stack_string)\
    \ {\n    $paren_stack_last_char_pos_string_count++;\n    $paren_stack_last_char_pos_string_pos\
    \ = strpos($paren_stack_string, \" \", $paren_stack_last_char_pos_string_pos);\n\
    \    if ($paren_stack_last_char_pos_string_pos === false) {\n      $paren_stack_last_char_pos_string_count--;\n\
    \      $paren_stack_last_char_pos_string = \"\";\n    } else {\n      $paren_stack_last_char_pos_string_count--;\n\
    \      $paren_stack_last_char_pos_string = substr($paren_stack_string, 0, $paren_stack_last_char_pos_string_pos);\n\
    \    }\n    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_string_count--;\n    $paren_stack_last_char_pos_string_count--;\n\
    \    $paren_stack_last_char_pos_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk5nm4wli.php on line 56

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      if ($paren_level == 0) {\n        $paren_array[]\
    \ = count($paren_stack[$paren_level]) - 1;\n      }\n      $paren_stack[$paren_level][]\
    \ = array();\n    }\n  }\n  return $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,string\
    \ |>\n<| a tags=php,parentheses,string |>\n<code>\n<?php\n$string = '(()()) ((()))\
    \ () ((())()())';\n$parens = array();\n$parens_level = 0;\n$parens_stack = array();\n\
    $parens_stack[] = array();\n$parens_stack[] = array();\nforeach (explode(' ',\
    \ $string) as $char) {\n    if ($char == '(') {\n        $parens_level++;\n  \
    \      $parens_stack[$parens_level][] = array();\n    } else if ($char == ')')\
    \ {\n        $parens_level--;\n        if ($parens_level == 0) {\n           \
    \ $parens[] = count($parens_stack[$parens_level]) - 1;\n        }\n        $parens_stack[$parens_level][]\
    \ = array();\n    }\n}\nprint_r($parens);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$string = '(()()) ((())) () ((())()())';\n$parens = array();\n\
    $parens_level = 0;\n$parens_stack = array();\n$parens_stack[] = array();\n$parens_stack[]\
    \ = array();\nforeach (explode(' ', $string) as $char) {\n    if ($char == '(')\
    \ {\n        $parens_level++;\n        $parens_stack[$parens_level][] = array();\n\
    \    } else if ($char == ')') {\n        $parens_level--;\n        if ($parens_level\
    \ == 0) {\n            $parens[] = count($parens_stack[$parens_level]) - 1;\n\
    \        }\n        $parens_stack[$parens_level][] = array();\n    }\n}\nprint_r($parens);\n\
    </code>\n<|/ a tag\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5fjv0col.php on line 27

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n \
    \ $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\\
    (([^()]+)\\)/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\\
    )/', '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/',\
    \ '\\1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\\
    1', $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(([^()]+)\\)/', '\\1', $paren_string);\n\
    \  $paren_string = preg_replace('/\\((\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpro895gdg.php on line 31

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\\
    )/', '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\([^\\(\\)]*\\)/',\
    \ '', $paren_string);\n    $paren_string\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpruxf7sb6.php on line 34

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack)\
    \ - 1;\n    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, count($paren_stack) - 1);\n \
    \ }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgp2vvvc3.php:26\n\
    Stack trace:\n#0 /tmp/tmpgp2vvvc3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgp2vvvc3.php\
    \ on line 26\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array, explode('\
    \ ', $paren_string));\n    foreach ($paren_array as $key => $value) {\n      if\
    \ ($value == '(') {\n        $paren_level++;\n      } else if ($value == ')')\
    \ {\n        $paren_level--;\n      }\n      if ($paren_level == 0) {\n      \
    \  break;\n      }\n    }\n  }\n  return $paren_array;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = '(()()) ((())) () ((())()())';\n\
    $array = preg_split('/\\s+/', $string);\n$array = array_filter($array);\n$array\
    \ = array_count_values($array);\n$array = array_keys($array);\n$array = array_slice($array,\
    \ 0, -1);\n$array = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($array);\n$array = array_values($array);\n$array\
    \ = array_map(function($v){return $v+1;}, $array);\n$array = array_combine($array,\
    \ $array);\n$array = array_flip($\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkem3x4l1.php on line 28

    '
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack)\
    \ - 1;\n    $paren_array = array();\n    $paren_stack = array();\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    foreach ($paren_array as $paren_element)\
    \ {\n      if ($paren_element == \"(\") {\n        $paren_stack[] = $paren_element;\n\
    \      } else if ($paren_element == \")\") {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n        $paren_level--;\n      }\n    }\n  }\n\
    \  return $paren_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoyi3ogs.php:35\n\
    Stack trace:\n#0 /tmp/tmpdoyi3ogs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdoyi3ogs.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = $paren_stack[$paren_level];\n        $paren_level\
    \ = count($paren_stack);\n        $paren_array[] = $paren_level;\n        $paren_stack[$paren_level]\
    \ = '';\n        $paren_level--;\n        foreach (explode(' ', $paren_string)\
    \ as $paren_char) {\n            if ($paren_char == '(') {\n                $paren_stack[$paren_level]\
    \ .= '(';\n            } else if ($paren_char == ')') {\n                $paren_stack[$paren_level]\
    \ .= ')';\n            } else if ($paren_char == ' ') {\n                $paren_stack[$paren_level]\
    \ .= ' ';\n            }\n        }\n    }\n    return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnu65esj.php:36\n\
    Stack trace:\n#0 /tmp/tmptnu65esj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptnu65esj.php\
    \ on line 36\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbpbsheh1.php on line 38

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_array = array();\n  $paren_level\
    \ = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string_count = 0;\n  $paren_stack_string_index = 0;\n\
    \  $paren_stack_strings[] = $paren_string;\n  $paren_stack_string_counts[] = 1;\n\
    \  while ($paren_stack_string_index < count($paren_stack_strings)) {\n    $paren_string\
    \ = $paren_stack_strings[$paren_stack_string_index];\n    $paren_stack_string_counts[$paren_stack_string_index]\
    \ += 1;\n    $paren_stack_string_index += 1;\n    if ($paren_stack_string_counts[$paren_stack_string_index]\
    \ > 1) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index] ==\
    \ 1) {\n      if ($paren_stack_string_index == count($paren_stack_strings) - 1)\
    \ {\n        $paren_stack_string_index = 0;\n        $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n      }\n      if ($paren_stack_string_counts[$paren_stack_string_index]\
    \ == 2) {\n        $paren_stack_string_index += 1;\n        $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n      }\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index]\
    \ == 0) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index] ==\
    \ 1) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index] ==\
    \ 2) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index] ==\
    \ 3) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n    }\n    if ($paren_stack_string_counts[$paren_stack_string_index] ==\
    \ 4) {\n      $paren_stack_string_index += 1;\n      $paren_stack_string_counts[$paren_stack_string_index]\
    \ = 1;\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu3hc3puo.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $parens = array();\n    $level\
    \ = 0;\n    $paren_level = 0;\n    $paren_char = '';\n    $paren_char_count =\
    \ 0;\n    $paren_chars[] = $paren_char;\n    $parens[] = $parens;\n    $paren_levels[]\
    \ = $paren_level;\n    $paren_char_counts[] = $paren_char_count;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $level++;\n            $paren_char\
    \ = $char;\n            $paren_char_count = 1;\n        } else if ($char === ')')\
    \ {\n            $level--;\n            $paren_char_count--;\n            if ($level\
    \ === 0) {\n                $paren_char_counts[$i] = $paren_char_count;\n    \
    \            $paren_char = '';\n                $parens[$i] = $parens;\n     \
    \           $paren_levels[$i] = $paren_level;\n            }\n        } else if\
    \ ($level > 0) {\n            $paren_char_count++;\n        }\n    }\n    return\
    \ $parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbz9tqwz.php:45\n\
    Stack trace:\n#0 /tmp/tmpxbz9tqwz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxbz9tqwz.php\
    \ on line 45\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,regex |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = '(()()) ((())) () ((())()())';\n$paren_array\
    \ = array();\n$paren_level = 0;\n$paren_stack = array();\n$paren_stack[] = array();\n\
    $paren_stack[] = array();\nforeach (explode(' ', $string) as $char) {\n    if\
    \ ($char == '(') {\n        $paren_level++;\n        $paren_stack[$paren_level][]\
    \ = array();\n    } else if ($char == ')') {\n        $paren_level--;\n      \
    \  $paren_stack[$paren_level][] = array();\n    } else if ($char == ' ') {\n \
    \       $paren_stack[$paren_level][] = array();\n    }\n}\nforeach ($paren_stack\
    \ as $level) {\n    $paren_array[] = count($level);\n}\nprint_r($paren_array);\n\
    </code>\n<|/ a tags=php,parentheses,regex |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = '(()()) ((())) () ((())()())';\n$paren_array = array();\n$paren_level\
    \ = 0;\n$paren_stack = array();\n$paren_stack[] = array();\n$paren_stack[] = array();\n\
    foreach (explode(' ', $string) as $char) {\n    if ($char == '(') {\n        $paren_level++;\n\
    \        $paren_stack[$paren_level][] = array();\n    } else if ($char == ')')\
    \ {\n        $paren_level--;\n        $paren_stack[$paren_level][] = array();\n\
    \    } else if ($\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmv9coehj.php on line 29

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count = count($paren_levels_count);\n\
    \  $paren_levels_count[$paren_levels_count] = 1;\n  foreach (explode(\" \", $paren_string)\
    \ as $paren_string) {\n    if ($paren_level == $paren_levels_count[$paren_levels_count])\
    \ {\n      $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n    \
    \  $paren_levels_count[$paren_levels_count] = 1;\n      $paren_level += 1;\n \
    \   }\n    if ($paren_level == $paren_levels_count[$paren_levels_count]) {\n \
    \     $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n      $paren_levels_count[$paren_levels_count]\
    \ = 1;\n      $paren_level += 1;\n    }\n    if ($paren_level == $paren_levels_count[$paren_levels_count])\
    \ {\n      $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n    \
    \  $paren_levels_count[$paren_levels_count] = 1;\n      $paren_level += 1;\n \
    \   }\n    if ($paren_level == $paren_levels_count[$paren_levels_count]) {\n \
    \     $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n      $paren_levels_count[$paren_levels_count]\
    \ = 1;\n      $paren_level += 1;\n    }\n    if ($paren_level == $paren_levels_count[$paren_levels_count])\
    \ {\n      $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n    \
    \  $paren_levels_count[$paren_levels_count] = 1;\n      $paren_level += 1;\n \
    \   }\n    if ($paren_level == $paren_levels_count[$paren_levels_count]) {\n \
    \     $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n      $paren_levels_count[$paren_levels_count]\
    \ = 1;\n      $paren_level += 1;\n    }\n    if ($paren_level == $paren_levels_count[$paren_levels_count])\
    \ {\n      $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n    \
    \  $paren_levels_count[$paren_levels_count] = 1;\n      $paren_level += 1;\n \
    \   }\n    if ($paren_level == $paren_levels_count[$paren_levels_count]) {\n \
    \     $paren_levels_count[$paren_levels_count] += 1;\n    } else {\n      $paren_levels_count[$paren_levels_count]\
    \ = 1;\n      $paren_level += 1;\n    }\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp51f22sri.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $paren) {\n    if ($paren == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($paren == \")\"\
    ) {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else if ($paren == \"\") {\n      $paren_stack[$paren_level][] = array();\n\
    \    } else {\n      $paren_stack[$paren_level][] = $paren;\n    }\n  }\n  foreach\
    \ ($paren_stack as $level => $parens) {\n    if ($level == 0) {\n      $paren_array[]\
    \ = $parens;\n    } else {\n      $paren_array[] = array_pop($parens);\n    }\n\
    \  }\n  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0b7okwlh.php:40\n\
    Stack trace:\n#0 /tmp/tmp0b7okwlh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0b7okwlh.php\
    \ on line 40\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $parens\
    \ = preg_split('/\\s+/', $paren_string);\n  $parens_levels = array();\n  $parens_levels_len\
    \ = count($parens);\n  for ($i = 0; $i < $parens_levels_len; $i++) {\n    $parens_levels[$i]\
    \ = $parens_levels_len - 1 - $i;\n  }\n  $parens_levels_len = count($parens_levels);\n\
    \  $max_level = 0;\n  $max_level_len = 0;\n  for ($i = 0; $i < $parens_levels_len;\
    \ $i++) {\n    $level = $parens_levels[$i];\n    if ($level > $max_level) {\n\
    \      $max_level = $level;\n      $max_level_len = $i;\n    }\n  }\n  $parens_levels\
    \ = array_reverse($parens_levels);\n  $parens_levels_len = count($parens_levels);\n\
    \  $parens_levels_len = max($parens_levels_len, 1);\n  $parens_levels_len = min($parens_levels_len,\
    \ count($parens));\n  $parens_levels_len = max($parens_levels_len, 1);\n  $parens_levels_len\
    \ = min($parens_levels_len, count($parens));\n  $parens_levels_len = max($parens_levels_len,\
    \ 1);\n  $parens_levels_len = min($parens_levels_len, count($parens));\n  $parens_levels_len\
    \ = max($parens_levels_len, 1);\n  $parens_levels_len = min($parens_levels_len,\
    \ count($parens));\n  $parens_levels_len = max($parens_levels_len, 1);\n  $parens_levels_len\
    \ = min($parens_levels_len, count($parens));\n  $parens_levels_len = max($parens_levels_len,\
    \ 1);\n  $parens_levels_len = min($parens_levels_len, count($parens));\n  $parens_levels_len\
    \ = max($parens_levels_len, 1);\n  $parens_levels_len = min($parens_levels_len,\
    \ count($parens));\n  $parens_levels_len = max($parens_levels_len, 1);\n  $parens_levels_len\
    \ = min($parens_levels_len, count($parens));\n  $parens_levels_len = max($parens_levels_len,\
    \ 1);\n  $parens_levels_len = min($parens_levels_len, count($parens));\n  $parens_levels_len\
    \ = max($parens_levels_len, 1);\n  $parens_levels_len = min($parens_levels_\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpscwkz5jl.php on line 47

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_size = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n    $level = 0;\n    $paren_array[$i] = \"(\" . $paren_array[$i] .\
    \ \")\";\n    for ($j = $i; $j < $paren_array_size; $j++) {\n      if ($paren_array[$i]\
    \ == $paren_array[$j]) {\n        $level++;\n      }\n    }\n    if ($level >\
    \ $max_level) {\n      $max_level = $level;\n      $max_level_array = $paren_array;\n\
    \    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpios_w6j_.php:33\n\
    Stack trace:\n#0 /tmp/tmpios_w6j_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpios_w6j_.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_array = array_merge($paren_array, explode('\
    \ ', $paren_string));\n    $paren_level++;\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ array_slice($paren_stack, 0, -1));\n      }\n    }\n  }\n  return $paren_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7helplp3.php:32\n\
    Stack trace:\n#0 /tmp/tmp7helplp3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7helplp3.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    $paren_array =\
    \ explode(\" \", $paren_string);\n    foreach ($paren_array as $paren_string)\
    \ {\n      if ($paren_string == \"(\") {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == \")\") {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n        $paren_level--;\n      }\n    }\n  }\n\
    \  return $paren_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowtiek40.php:35\n\
    Stack trace:\n#0 /tmp/tmpowtiek40.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpowtiek40.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = \"\";\n  $paren_stack_string = $paren_string;\n  $paren_stack_string = trim($paren_stack_string);\n\
    \  $paren_stack_string = preg_replace('/\\s+/', '', $paren_stack_string);\n  $paren_stack_string\
    \ = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\\
    (/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/',\
    \ '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '',\
    \ $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n\
    \  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string\
    \ = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\\
    )/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/',\
    \ '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '',\
    \ $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n\
    \  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string\
    \ = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\\
    )/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/',\
    \ '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '',\
    \ $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n\
    \  $paren_stack_string = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string\
    \ = preg_replace('/\\)/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\\
    )/', '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/',\
    \ '', $paren_stack_string);\n  $paren_stack_string = preg_replace('/\\)/', '',\
    \ $paren_stack_string);\n  $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6yq_ou4l.php on line 38

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_max = array();\n    $paren_stack_max_count\
    \ = array();\n    $paren_stack_count = array();\n    $paren_stack_max_count =\
    \ array();\n    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n  \
    \  $paren_stack_count = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count\
    \ = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count =\
    \ array();\n    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n\
    \    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n  \
    \  $paren_stack_max_count = array();\n    $paren_stack_count = array();\n    $paren_stack_max_count\
    \ = array();\n    $paren_stack_count = array();\n    $paren_stack_max_count =\
    \ array();\n    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n  \
    \  $paren_stack_count = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count\
    \ = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count =\
    \ array();\n    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n\
    \    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n  \
    \  $paren_stack_max_count = array();\n    $paren_stack_count = array();\n    $paren_stack_max_count\
    \ = array();\n    $paren_stack_count = array();\n    $paren_stack_max_count =\
    \ array();\n    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n\
    \    $paren_stack_count = array();\n    $paren_stack_max_count = array();\n  \
    \  $paren_stack_count = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count\
    \ = array();\n    $paren_stack_max_count = array();\n    $paren_stack_count =\
    \ array();\n    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n\
    \    $paren_stack_max_count = array();\n    $paren_stack_count = array();\n  \
    \  $paren_stack_max_count = \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplpk0lfkk.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level = array_pop($paren_stack);\n\
    \    $paren_array[] = $paren_level;\n    if ($paren_level == 0) {\n      $paren_stack[$paren_level]\
    \ = $paren_string;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewcnepwf.php:28\n\
    Stack trace:\n#0 /tmp/tmpewcnepwf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpewcnepwf.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n    for\
    \ ($i = 0; $i < $paren_array_size; $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n\
    \        if ($paren_array[$i] === '(') {\n            $max_level++;\n        \
    \    $max_level_array[$i] = $max_level;\n        } else if ($paren_array[$i] ===\
    \ ')') {\n            $max_level--;\n            $max_level_array[$i] = $max_level;\n\
    \        }\n    }\n    return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkytrqix.php:30\n\
    Stack trace:\n#0 /tmp/tmpfkytrqix.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfkytrqix.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack_size = count($paren_stack);\n  $paren_stack[0] = 0;\n  $paren_stack[count($paren_stack)\
    \ - 1] = 0;\n  foreach (explode(\" \", $paren_string) as $char) {\n    if ($char\
    \ == \"(\") {\n      $paren_stack[$paren_stack_size] = $paren_stack[$paren_stack_size]\
    \ + 1;\n      $paren_stack_size = $paren_stack_size;\n    } else if ($char ==\
    \ \")\") {\n      $paren_stack[$paren_stack_size] = $paren_stack[$paren_stack_size]\
    \ - 1;\n      $paren_stack_size = $paren_stack_size;\n      if ($paren_stack[$paren_stack_size]\
    \ == 0) {\n        $paren_level = $paren_level + 1;\n      }\n    }\n  }\n  while\
    \ ($paren_stack[$paren_stack_size] != 0) {\n    $paren_level = $paren_level -\
    \ 1;\n    $paren_stack_size = $paren_stack_size;\n  }\n  $paren_array[] = $paren_level;\n\
    \  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfzpd9sl.php:38\n\
    Stack trace:\n#0 /tmp/tmppfzpd9sl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppfzpd9sl.php\
    \ on line 38\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode(\"\
    \ \", $paren_string) as $paren) {\n    if ($paren == \"(\") {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($paren == \")\"\
    ) {\n      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n  \
    \  } else {\n      $paren_stack[$paren_level][] = $paren;\n    }\n  }\n  foreach\
    \ ($paren_stack as $i => $paren_level) {\n    if ($paren_level == 1) {\n     \
    \ $paren_array[] = $i;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg833dwzr.php:37\n\
    Stack trace:\n#0 /tmp/tmpg833dwzr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg833dwzr.php\
    \ on line 37\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_level_count\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_count = array();\n\
    \    $paren_level_max_count_index = 0;\n    $paren_level_max_count_index2 = 0;\n\
    \    $paren_level_max_count_index3 = 0;\n    $paren_level_max_count_index4 = 0;\n\
    \    $paren_level_max_count_index5 = 0;\n    $paren_level_max_count_index6 = 0;\n\
    \    $paren_level_max_count_index7 = 0;\n    $paren_level_max_count_index8 = 0;\n\
    \    $paren_level_max_count_index9 = 0;\n    $paren_level_max_count_index10 =\
    \ 0;\n    $paren_level_max_count_index11 = 0;\n    $paren_level_max_count_index12\
    \ = 0;\n    $paren_level_max_count_index13 = 0;\n    $paren_level_max_count_index14\
    \ = 0;\n    $paren_level_max_count_index15 = 0;\n    $paren_level_max_count_index16\
    \ = 0;\n    $paren_level_max_count_index17 = 0;\n    $paren_level_max_count_index18\
    \ = 0;\n    $paren_level_max_count_index19 = 0;\n    $paren_level_max_count_index20\
    \ = 0;\n    $paren_level_max_count_index21 = 0;\n    $paren_level_max_count_index22\
    \ = 0;\n    $paren_level_max_count_index23 = 0;\n    $paren_level_max_count_index24\
    \ = 0;\n    $paren_level_max_count_index25 = 0;\n    $paren_level_max_count_index26\
    \ = 0;\n    $paren_level_max_count_index27 = 0;\n    $paren_level_max_count_index28\
    \ = 0;\n    $paren_level_max_count_index29 = 0;\n    $paren_level_max_count_index30\
    \ = 0;\n    $paren_level_max_count_index31 = 0;\n    $paren_level_max_count_index32\
    \ = 0;\n    $paren_level_max_count_index33 = 0;\n    $paren_level_max_count_index34\
    \ = 0;\n    $paren_level_max_count_index35 = 0;\n    $paren_level_max_count_index36\
    \ = 0;\n    $paren_level_max_count_index37 = 0;\n    $paren_level_max_count_index38\
    \ = 0;\n    $paren_level_max_count_index39 = 0;\n    $paren_level_max_count_index40\
    \ = 0;\n    $paren_level_max_count_index41 = 0;\n    $paren_level_max_count_index42\
    \ = 0;\n    $paren_level_max_count_index43 = 0;\n    $paren_level_max_count_index44\
    \ = 0;\n    $paren_level_max_count_index45 = 0;\n    $paren_level_max_count_index46\
    \ = 0;\n    $paren_level_max_count_index47 = 0;\n    $paren_level_max_count_index48\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4ess68g9.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    $paren_array =\
    \ explode(' ', $paren_string);\n    foreach ($paren_array as $paren_string) {\n\
    \      if ($paren_string == '(') {\n        $paren_stack[] = $paren_string;\n\
    \      } else if ($paren_string == ')') {\n        $paren_stack = array_merge($paren_stack,\
    \ array_reverse($paren_stack));\n      }\n    }\n  }\n  return $paren_level;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8n5lcvr.php:33\n\
    Stack trace:\n#0 /tmp/tmph8n5lcvr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph8n5lcvr.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == \"(\") {\n            $max_level++;\n            $max_level_array[]\
    \ = $max_level;\n        } else if ($level == \")\") {\n            $max_level--;\n\
    \            $max_level_array[] = $max_level;\n        }\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0od9mii1.php:28\n\
    Stack trace:\n#0 /tmp/tmp0od9mii1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0od9mii1.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_level++;\n      $paren_stack[] = array();\n\
    \    } elseif ($char == ')') {\n      $paren_level--;\n      $paren_stack = array_pop($paren_stack);\n\
    \    } elseif ($char == ' ') {\n      if ($paren_level == 0) {\n        $paren_array[]\
    \ = count($paren_stack);\n      }\n    }\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ikp0bk5.php:33\n\
    Stack trace:\n#0 /tmp/tmp7ikp0bk5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7ikp0bk5.php\
    \ on line 33\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$paren_level]++;\n    } else if ($char == ')') {\n      $paren_stack[$paren_level]--;\n\
    \      if ($paren_stack[$paren_level] == 0) {\n        $paren_level--;\n     \
    \ }\n    }\n    $paren_array[] = $paren_level;\n  }\n  return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sjzxyak.php:30\n\
    Stack trace:\n#0 /tmp/tmp_sjzxyak.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_sjzxyak.php\
    \ on line 30\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ {\n      $paren_stack[$paren_level][] = $char;\n    }\n  }\n  $paren_level =\
    \ 0;\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvtnm_60.php:35\n\
    Stack trace:\n#0 /tmp/tmprvtnm_60.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprvtnm_60.php\
    \ on line 35\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end\
    \ = 0;\n  $paren_levels = array();\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_start++;\n\
    \  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end]\
    \ = $paren_level;\n  $paren_level++;\n  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_start++;\n\
    \  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end]\
    \ = $paren_level;\n  $paren_level++;\n  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n  $paren_start++;\n\
    \  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n  $paren_levels[$paren_end]\
    \ = $paren_level;\n  $paren_level++;\n  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start]\
    \ = $paren_level;\n  $paren_levels[$paren_end] = $paren_level;\n  $paren_level++;\n\
    \  $paren_start++;\n  $paren_end++;\n  $paren_levels[$paren_start] = $paren_level;\n\
    \  $paren_levels[$paren_end] = $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzmv1yrsf.php on line 60

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    if ($paren_string === '') {\n      $paren_level--;\n\
    \    } else {\n      $paren_array[] = $paren_level;\n      $paren_level++;\n \
    \     $paren_stack = array_merge($paren_stack, $paren_string);\n    }\n  }\n \
    \ return $paren_array;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, this works\
    \ great! I modified it slightly to allow for nested parentheses inside parentheses.\n\
    <|/ c |>\n<| a tags=php,regex |>\nThis regex will match all nested parentheses\
    \ up to a certain depth:\n<code>\n\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\\
    ()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\\()[^()]*+(?:\\((?!\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2x2tf7_e.php on line 24

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === \"()\") {\n            $max_level++;\n        } else if ($paren_array[$i]\
    \ === \"(()\") {\n            $max_level++;\n        } else if ($paren_array[$i]\
    \ === \")\") {\n            $max_level--;\n        }\n    }\n    return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0owuwlo.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0owuwlo.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu0owuwlo.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_start = 0;\n  $paren_end\
    \ = 0;\n  $paren_levels = array();\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[]\
    \ = $paren_level;\n  $paren_levels[] = $paren_level;\n  $paren_levels[] = $paren_level;\n\
    \  $paren_levels[] = $paren_level;\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpddbwxsmv.php on line 63

    '
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array();\n    $paren_stack = array();\n    $paren_array =\
    \ explode(' ', $paren_string);\n    foreach ($paren_array as $paren_string) {\n\
    \      $paren_stack[] = $paren_string;\n      if ($paren_string == '(') {\n  \
    \      $paren_stack[] = $paren_string;\n      }\n      if ($paren_string == ')')\
    \ {\n        $paren_stack[count($paren_stack) - 1] = $paren_string;\n      }\n\
    \    }\n  }\n  return $paren_level;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack_string = \"\";\n    $paren_level_string\
    \ = \"\";\n    $paren_level_stack = array();\n    $paren_level_stack_string =\
    \ \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_stack_string = \"\";\n    $paren_level_stack_string\
    \ = \"\";\n    $paren_level_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm4avh1er.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  foreach (explode('\
    \ ', $paren_string) as $char) {\n    if ($char == '(') {\n      $paren_level++;\n\
    \      $paren_stack[$paren_level][] = array();\n    } else if ($char == ')') {\n\
    \      $paren_level--;\n      $paren_stack[$paren_level][] = array();\n    } else\
    \ if ($char == ' ') {\n      $paren_stack[$paren_level][] = array();\n    }\n\
    \  }\n  foreach ($paren_stack as $level) {\n    $paren_array[] = count($level);\n\
    \  }\n  return $paren_array;\n}\n</code>\n<|/ a tags=php,parentheses,string |>\n\
    <| c |>\nI like your solution. Just a small comment: I believe that `parse_nested_parens`\
    \ should return an array of integers instead of an array of arrays. So the function\
    \ should return `array(2, 3, 1, 3)` instead of `array(array(2, 3, 1, 3))`.\n<|/\
    \ c |>\n<| c |>\nThanks, I fixed the return type to make it consistent with the\
    \ OP's original code.\n<|/ c |>\n<| a tags=php,parentheses,string |>\n<code>\n\
    $string = \"(()()) ((())) () ((())()())\";\n$array = preg_split(\"/[\\(\\)]/\"\
    , $string);\n$array = array_filter($array);\n$array = array_map(function($a){\n\
    \    return strlen($a) > 1 ? strlen($a) - 1 : 0;\n}, $array);\n$array = array_unique($array);\n\
    $array = array_values($array);\n$array = array_filter($array);\n$array = array_map(function($a){\n\
    \    return $a[0];\n}, $array);\n$array = array_unique($array);\n$array = array_values($array);\n\
    print_r($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution. Just\
    \ a small comment: I believe that `parse_nested_parens` should return an array\
    \ of integers instead of an array of arrays. So the function should return `array(2,\
    \ 3, 1, 3)` instead of `array(array(2, 3, 1, 3))`.\n<|/ c |>\n<| c |>\nI agree\
    \ with you. My code returns an array of integers instead of an array of arrays.\
    \ I thought it would be more clear to return an array of arrays. But it seems\
    \ that it would be more clear\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmasucwow.php on line 29

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n    $paren_stack[] = -1;\n\
    \    $paren_stack[] = -1;\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6dij9__e.php on line 73

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string\
    \ = str_repeat(\"(\", $paren_level);\n  $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n  while ($paren_level > 0) {\n    $paren_level--;\n    $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n    $paren_stack_string =\
    \ str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\"(\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat($paren_stack_string, $paren_level);\n    $paren_stack_string =\
    \ str_repeat(\"(\", $paren_level);\n    $paren_stack_string = str_repeat($paren_stack_string,\
    \ $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack_string = str_repeat(\"\
    )\", $paren_level);\n    $paren_stack_string = str_repeat(\")\", $paren_level);\n\
    \    $paren_stack_string = str_repeat(\")\", $paren_level);\n    $paren_stack_string\
    \ = str_repeat(\")\", $paren_level);\n    $paren_stack\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1t4jpc_5.php on line 41

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $paren_array_length =\
    \ count($paren_array);\n  $max_level = 0;\n  $max_level_array = [];\n  for ($i\
    \ = 0; $i < $paren_array_length; $i++) {\n    $level = 0;\n    for ($j = 0; $j\
    \ < $i; $j++) {\n      if ($paren_array[$j] == $paren_array[$i]) {\n        $level++;\n\
    \      }\n    }\n    if ($level > $max_level) {\n      $max_level = $level;\n\
    \      $max_level_array = $paren_array;\n    }\n  }\n  return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsie0mln.php:32\n\
    Stack trace:\n#0 /tmp/tmpzsie0mln.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzsie0mln.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[$paren_level] = $paren_string;\n  while ($paren_level > 0) {\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_level = array_pop($paren_stack);\n\
    \    $paren_array[] = $paren_level;\n    $paren_stack[$paren_level] = $paren_string;\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfs_9max.php:26\n\
    Stack trace:\n#0 /tmp/tmpdfs_9max.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdfs_9max.php\
    \ on line 26\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren_string) {\n \
    \       $paren_array = explode(\"(\", $paren_string);\n        $level = 0;\n \
    \       foreach ($paren_array as $paren_string) {\n            $paren_array =\
    \ explode(\")\", $paren_string);\n            $level++;\n        }\n        $max_level\
    \ = max($level, $max_level);\n        $max_level_array[] = $level;\n    }\n  \
    \  return $max_level_array;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis\
    \ doesn't seem to work. `parse_nested_parens(\"(()()) ((())) () ((())()())\")`\
    \ returns `array(2, 3, 1, 3)` which is not correct.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I guess you didn't copy the code correctly. Can you please\
    \ post the code you used?\n<|/ c |>\n<| c |>\nI tested it and it works. I guess\
    \ you didn't copy the code correctly. Can you please post the code you used?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I guess you didn't copy the code\
    \ correctly. Can you please post the code you used?\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I guess you didn't copy the code correctly. Can you please\
    \ post the code you used?\n<|/ c |>\n<| a tags=php,regex |>\nThis regex will match\
    \ all nested parentheses up to a certain depth:\n<code>\n\\((?!\\((?!\\((?!\\\
    ((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\\
    ((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\\
    ((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\((?!\\\
    ((?!\\((\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8j_rquwp.php on line 23

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(' ', $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = array_pop($paren_stack);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    foreach ($paren_array as $paren_string) {\n      if ($paren_string == \"\
    (\") {\n        $paren_level++;\n      } else if ($paren_string == \")\") {\n\
    \        $paren_level--;\n      }\n      if ($paren_level == 0) {\n        $paren_stack[]\
    \ = $paren_string;\n      }\n    }\n  }\n  return $paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730747
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = count($paren_stack);\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  $paren_stack_string--;\n  $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6lwnls0k.php on line 61

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $parens\
    \ = preg_split('/\\s+/', $paren_string);\n    $levels = array();\n    $max_level\
    \ = 0;\n    foreach ($parens as $paren) {\n        if ($paren == '(') {\n    \
    \        $levels[] = 1;\n        } else if ($paren == ')') {\n            $levels[]\
    \ = count($levels) - 1;\n        } else {\n            $levels[] = count($levels);\n\
    \        }\n        if (count($levels) > $max_level) {\n            $max_level\
    \ = count($levels);\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79fxp7lz.php:32\n\
    Stack trace:\n#0 /tmp/tmp79fxp7lz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp79fxp7lz.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqxus6usy.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_array = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n    }\n    if ($level > 0) {\n      $paren_array[]\
    \ = $level;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvgxq_tz.php:28\n\
    Stack trace:\n#0 /tmp/tmpkvgxq_tz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkvgxq_tz.php\
    \ on line 28\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_stack[$paren_level]\
    \ !== null) {\n        $paren_level++;\n        $paren_string = $paren_stack[$paren_level];\n\
    \        $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \        $paren_stack[$paren_level] = null;\n    }\n    return $paren_array;\n\
    }\n</code>\n<|/ a tags=php,parentheses,regex |>\n<| c |>\nThanks for your answer.\
    \ Your code works well for simple cases, but fails for more complex cases. E.g.\
    \ `((()))` has three levels of nesting while `((()()))` has four.\n<|/ c |>\n\
    <| c |>\nI updated my answer to handle nested parentheses correctly.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works well for simple cases, but fails\
    \ for more complex cases. E.g. `((()))` has three levels of nesting while `((()()))`\
    \ has four.\n<|/ c |>\n<| c |>\nI updated my answer to handle nested parentheses\
    \ correctly.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works well\
    \ for simple cases, but fails for more complex cases. E.g. `((()))` has three\
    \ levels of nesting while `((()()))` has four.\n<|/ c |>\n<| a dscore=1 |>\nI\
    \ wrote a recursive function which should do the job:\n<code>\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph075q0tv.php on line 20

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_length; $i++) {\n        $level = 0;\n     \
    \   for ($j = 0; $j < $i; $j++) {\n            if ($paren_array[$j] == $paren_array[$i])\
    \ {\n                $level++;\n            }\n        }\n        if ($level >\
    \ $max_level) {\n            $max_level = $level;\n            $max_level_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphdcjky2g.php:32\n\
    Stack trace:\n#0 /tmp/tmphdcjky2g.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphdcjky2g.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = -1;\n  $paren_stack_string = \"\";\n  $paren_stack_string_count\
    \ = count($paren_stack);\n  $paren_stack_string = $paren_stack_string_count;\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack_string = $paren_stack[$paren_stack_string];\n\
    \  while ($paren_stack_string != 0) {\n    $paren_stack_string--;\n    $paren_stack_string\
    \ = $paren_stack[$paren_stack_string];\n    $paren_stack_string_count--;\n  }\n\
    \  $paren_stack_string--;\n  $paren_stack\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuio34hko.php on line 64

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\)/', ') ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(([^()]+)\\)/', '($1)', $paren_string);\n\
    \    $paren_string = preg_replace('/\\\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8b2ifsbk.php on line 31

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = array();\n \
    \   $paren_level = 0;\n    $paren_open = -1;\n    $paren_close = -1;\n    $paren_level_string\
    \ = \"\";\n    $paren_level_array = array();\n    $paren_level_array[0] = 0;\n\
    \    $paren_level_array[1] = 0;\n    $paren_level_array[2] = 0;\n    $paren_level_array[3]\
    \ = 0;\n    $paren_level_array[4] = 0;\n    $paren_level_array[5] = 0;\n    $paren_level_array[6]\
    \ = 0;\n    $paren_level_array[7] = 0;\n    $paren_level_array[8] = 0;\n    $paren_level_array[9]\
    \ = 0;\n    $paren_level_array[10] = 0;\n    $paren_level_array[11] = 0;\n   \
    \ $paren_level_array[12] = 0;\n    $paren_level_array[13] = 0;\n    $paren_level_array[14]\
    \ = 0;\n    $paren_level_array[15] = 0;\n    $paren_level_array[16] = 0;\n   \
    \ $paren_level_array[17] = 0;\n    $paren_level_array[18] = 0;\n    $paren_level_array[19]\
    \ = 0;\n    $paren_level_array[20] = 0;\n    $paren_level_array[21] = 0;\n   \
    \ $paren_level_array[22] = 0;\n    $paren_level_array[23] = 0;\n    $paren_level_array[24]\
    \ = 0;\n    $paren_level_array[25] = 0;\n    $paren_level_array[26] = 0;\n   \
    \ $paren_level_array[27] = 0;\n    $paren_level_array[28] = 0;\n    $paren_level_array[29]\
    \ = 0;\n    $paren_level_array[30] = 0;\n    $paren_level_array[31] = 0;\n   \
    \ $paren_level_array[32] = 0;\n    $paren_level_array[33] = 0;\n    $paren_level_array[34]\
    \ = 0;\n    $paren_level_array[35] = 0;\n    $paren_level_array[36] = 0;\n   \
    \ $paren_level_array[37] = 0;\n    $paren_level_array[38] = 0;\n    $paren_level_array[39]\
    \ = 0;\n    $paren_level_array[40] = 0;\n    $paren_level_array[41] = 0;\n   \
    \ $paren_level_array[42] = 0;\n    $paren_level_array[43] = 0;\n    $paren_level_array[44]\
    \ = 0;\n    $paren_level_array[45] = 0;\n    $paren_level_array[46] = 0;\n   \
    \ $paren_level_array[47] = 0;\n    $paren_level_array[48] = 0;\n    $paren_level_array[49]\
    \ = 0;\n    $paren_level_array[50] = 0;\n    $paren_level_array[51] = 0;\n   \
    \ $paren_level_array[52] = 0;\n    $paren_level_array[53] = 0;\n    $paren_level_array[54]\
    \ = 0;\n    $paren_level_array[55] = 0;\n    $paren_level_array[\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkzrz3vc6.php on line 72

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[] =\
    \ array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[] = array();\n  $paren_stack[] = array();\n  $paren_stack[]\
    \ = array();\n  $paren_stack[]\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgzic81tb.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ \"(\") {\n            $level++;\n        } else if ($paren == \")\") {\n   \
    \         $level--;\n            if ($level < 0) {\n                $max_level\
    \ = $level;\n            }\n        }\n    }\n    return $max_level;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwdzhfen.php:29\n\
    Stack trace:\n#0 /tmp/tmpmwdzhfen.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmwdzhfen.php\
    \ on line 29\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  $paren_levels = array();\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == \"(\") {\n      $level++;\n      $paren_levels[$level] = $level;\n\
    \    } elseif ($paren == \")\") {\n      $level--;\n      $paren_levels[$level]\
    \ = $level;\n      if ($level == 0) {\n        $max_level = $level;\n      }\n\
    \    }\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihq379mb.php:32\n\
    Stack trace:\n#0 /tmp/tmpihq379mb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpihq379mb.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  $paren_stack[] = $paren_string;\n  while ($paren_stack) {\n    $paren_string\
    \ = $paren_stack[count($paren_stack) - 1];\n    $paren_level = count($paren_stack);\n\
    \    $paren_array = array_merge($paren_array, explode(\" \", $paren_string));\n\
    \    $paren_stack = array_slice($paren_stack, 0, $paren_level);\n  }\n  return\
    \ $paren_array;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Your code works well for nested parentheses but not for nested brackets. E.g.\
    \ (()) has maximum two levels of nesting while ((())) has three.\n<|/ c |>\n<|\
    \ c |>\nI updated my answer with a function that will handle nested brackets.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works well for nested parentheses\
    \ but not for nested brackets. E.g. (()) has maximum two levels of nesting while\
    \ ((())) has three.\n<|/ c |>\n<| c |>\nI updated my answer with a function that\
    \ will handle nested brackets.\n<|/ c |>\n<| a tags=php,parentheses,brackets |>\n\
    <code>\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbvutmvfc.php on line 20

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_level_count = array();\n\
    \  $paren_level_max = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n\
    \  $paren_level_max_count = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count\
    \ = array();\n  $paren_level_max_count = array();\n  $paren_level_max_count =\
    \ array();\n  $paren_level_max_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7vx7pou3.php on line 66

    '
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = array();\n  $paren_level = 0;\n  $paren_stack = array();\n\
    \  foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$paren_level]++;\n    } else if ($char == ')') {\n      $paren_stack[$paren_level]--;\n\
    \      if ($paren_stack[$paren_level] == 0) {\n        $paren_level--;\n     \
    \ }\n    }\n    if ($paren_stack[$paren_level] == 0) {\n      $paren_array[] =\
    \ $paren_level;\n    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfp4qsxl_.php:32\n\
    Stack trace:\n#0 /tmp/tmpfp4qsxl_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfp4qsxl_.php\
    \ on line 32\n"
  timestamp: 1659730742
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()())\
    \ ((())) () ((())()())\")\n// array(2, 3, 1, 3)\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = array();\n    $paren_level = 0;\n    $paren_stack = array();\n\
    \    $paren_stack[$paren_level] = $paren_string;\n    while ($paren_level > 0)\
    \ {\n        $paren_string = $paren_stack[$paren_level];\n        $paren_level\
    \ = array_search($paren_string, $paren_stack);\n        $paren_array[] = $paren_level;\n\
    \        $paren_stack[$paren_level] = $paren_string;\n    }\n    return $paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qt5m3jj.php:26\n\
    Stack trace:\n#0 /tmp/tmp6qt5m3jj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6qt5m3jj.php\
    \ on line 26\n"
  timestamp: 1659730742
