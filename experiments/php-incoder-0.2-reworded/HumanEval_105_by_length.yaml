name: HumanEval_105_by_length
language: php
prompt: "<?php\n// Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length(array(2,\
  \ 1, 1, 4, 5, 8, 2, 3))\n// array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\")\n// If the array is empty, return an empty array:\n\
  // >>> by_length(array())\n// array()\n// If the array has any strange number ignore\
  \ it:\n// >>> by_length(array(1, -1, 55))\n// array(\"One\")\nfunction by_length($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
  \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
  , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  if (empty($arr)) {\n    return array();\n  }\n  $result = array();\n\
    \  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i] = $arr[$i];\n\
    \  }\n  sort($result);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i] = str_replace(range(1,\
    \ 9), array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"), $result[$i]);\n  }\n  return $result;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$array = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n$array = array_reverse($array);\n$array = array_map(function($v){\n    return\
    \ str_replace(\"One\", \"1\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Two\", \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Three\", \"3\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Four\", \"4\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Five\", \"5\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Six\", \"6\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Seven\", \"7\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Eight\", \"8\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Nine\", \"9\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"0\", \"0\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"1\", \"1\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"2\", \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"3\", \"3\", $v);\n}, $array);\n$array = array_map(function($v){",
  "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, $arr);\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) return array();\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i] ==\
    \ $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n", "  if (!$arr) {\n\
    \    return array();\n  }\n  $len = count($arr);\n  if ($len < 2) {\n    return\
    \ $arr;\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max)\
    \ {\n      $result[] = name_by_index($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n", "  $result = array();\n  foreach ($arr as $item) {\n    if ($item >= 1 &&\
    \ $item <= 9) {\n      $result[] = array($item, 'One');\n    } elseif ($item >=\
    \ 10 && $item <= 99) {\n      $result[] = array($item, 'Two');\n    } elseif ($item\
    \ >= 100 && $item <= 999) {\n      $result[] = array($item, 'Three');\n    } elseif\
    \ ($item >= 1000 && $item <= 9999) {\n      $result[] = array($item, 'Four');\n\
    \    } elseif ($item >= 10000 && $item <= 99999) {\n      $result[] = array($item,\
    \ 'Five');\n    } elseif ($item >= 100000 && $item <= 999999) {\n      $result[]\
    \ = array($item, 'Six');\n    } elseif ($item >= 1000000 && $item <= 9999999)\
    \ {\n      $result[] = array($item, 'Seven');\n    } elseif ($item >= 10000000\
    \ && $item <= 99999999) {\n      $result[] = array($item, 'Eight');\n    } elseif\
    \ ($item >= 100000000 && $item <= 999999999) {\n      $result[] = array($item,\
    \ 'Nine');\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `by_length(array(2, -1,\
    \ 4, 5, 8, 2, 3))` returns `array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")`\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers. I didn't test it thoroughly though.\n<|/ c |>\n<| c |>\nI added a fix\
    \ for negative numbers. I didn't test it thoroughly though.\n<|/ c |>\n<| c |>\n\
    I added a fix for negative numbers. I didn't test it thoroughly though.\n<|/ c\
    \ |>\n<| c |>\nI added a fix for negative numbers. I didn't test it thoroughly\
    \ though.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array, function($v){\n    return\
    \ $v >= 1 && $v <= 9;\n});\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return $v >= 10 && $v <= 99 ? $v : ", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $digit) {\n    $result[] = array_search($digit, range(1, 9));\n  }\n  return\
    \ $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $length = count($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    } else if ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else if\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Eight';\n    } else if ($arr[$i]\
    \ == $max - 2) {\n      $result[] = 'Seven';\n    } else if ($arr[$i] == $max\
    \ - 3) {\n      $result[] = 'Six';\n    } else if ($arr[$i] == $max - 4) {\n \
    \     $result[] = 'Five';\n    } else if ($arr[$i] == $max - 5) {\n      $result[]\
    \ = 'Four';\n    } else if ($arr[$i] == $max - 6) {\n      $result[] = 'Three';\n\
    \    } else if ($arr[$i] == $max - 7) {\n      $result[] = 'Two';\n    } else\
    \ if ($arr[$i] == $max - 8) {\n      $result[] = 'One';\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to\
    \ work if there are multiple numbers with the same number of digits. For example,\
    \ `by_length(array(2, 1, 1, 4, 5, 8, 2, 3))` returns `array(\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")` instead of `array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\", \"\
    Nine\")`.\n<|/ c |>\n<| c |>\nI added a version that works with multiple numbers\
    \ with the same number of digits. I added a comment to the code explaining what\
    \ each line does.\n<|/ c |>\n<| c |>\nThanks for your answer! I added a version\
    \ that works with multiple numbers with the same number of digits. I added a comment\
    \ to the code explaining what each line does.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with multiple numbers with the same number of digits. I added a comment\
    \ to the code explaining what each line does.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n$lengths\
    \ = array_count_values($arr);\n$min = $lengths[0];\n$max = $lengths[max($lengths)];\n\
    foreach($arr as $", "  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i] <= $max) {\n \
    \     $result[] = name_by_number($reversed[$i]);\n    }\n  }\n  return $result;\n\
    }\n", "  $result = array();\n  foreach ($arr as $item) {\n    if ($item >= 1 &&\
    \ $item <= 9) {\n      $result[] = array($item);\n    }\n  }\n  if (count($result)\
    \ == 0) {\n    return array();\n  }\n  sort($result);\n  $result = array_reverse($result);\n\
    \  foreach ($result as $item) {\n    $result[$item[0]] = $item[1];\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($numbers as $number)\
    \ {\n    if ($number >= 1 && $number <= 9) {\n        $result[] = $number;\n \
    \   }\n}\nsort($result);\n$result = array_reverse($result);\nforeach ($result\
    \ as $number) {\n    $result[$number] = $number == 1 ? 'One' : $number == 2 ?\
    \ 'Two' : $number == 3 ? 'Three' : $number == 4 ? 'Four' : $number == 5 ? 'Five'\
    \ : $number == 6 ? 'Six' : $number == 7 ? 'Seven' : $number == 8 ? 'Eight' : $number\
    \ == 9 ? 'Nine' : '';\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2,\
    \ 3);\n$result = array();\nforeach ($numbers as $number) {\n    if ($number >=\
    \ 1 && $number <= 9) {\n        $result[] = $number;\n    }\n}\nsort($result);\n\
    $result = array_reverse($result);\nforeach ($result as $number) {\n    $result[$number]\
    \ = $number == 1 ? 'One' : $number == 2 ? 'Two' : $number == 3 ? 'Three' : $number\
    \ == 4 ? 'Four' : $number == 5 ? 'Five' : $number == 6 ? 'Six' : $number == 7\
    \ ? 'Seven' : $number == 8 ? 'Eight' : $number == 9 ? 'Nine' : '';\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($numbers as $number) {\n\
    \    if ($number >= 1 && $number <= 9) {\n        $result[] = $number;\n    }\n\
    }\nsort($result);\n$result = array_reverse($result);\nforeach ($result as $number)\
    \ {\n", "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n\
    \  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[$key] = array($value,\
    \ $key);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    array(\"One\", 1),\n    array(\"\
    Two\", 2),\n    array(\"Three\", 3),\n    array(\"Four\", 4),\n    array(\"Five\"\
    , 5),\n    array(\"Six\", 6),\n    array(\"Seven\", 7),\n    array(\"Eight\",\
    \ 8),\n    array(\"Nine\", 9),\n);\n\n$result = array();\nforeach ($array as $key\
    \ => $value) {\n    $result[$value[1]] = $value[0];\n}\n\n$result = array_flip($result);\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\n    array(\"One\", 1),\n    array(\"Two\", 2),\n\
    \    array(\"Three\", 3),\n    array(\"Four\", 4),\n    array(\"Five\", 5),\n\
    \    array(\"Six\", 6),\n    array(\"Seven\", 7),\n    array(\"Eight\", 8),\n\
    \    array(\"Nine\", 9),\n);\n\n$result = array();\nforeach ($array as $key =>\
    \ $value) {\n    $result[$value[1]] = $value[0];\n}\n\n$result = array_flip($result);\n\
    print_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\n    array(\"One\", 1),\n    array(\"Two\", 2),\n    array(\"Three\"\
    , 3),\n    array(\"Four\", 4),\n    array(\"Five\", 5),\n    array(\"Six\", 6),\n\
    \    array(\"Seven\", 7),\n    array(\"Eight\", 8),\n    array(\"Nine\", 9),\n\
    );\n\n$result = array();\nforeach ($array as $key => $value) {\n    $result[$value[1]]\
    \ = $value[0];\n}\n\n$result = array_flip($result);\nprint_r($", "  $result =\
    \ array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  return $result;\n}\n",
  "  $len = count($arr);\n  if ($len == 0) return array();\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n\
    \    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n", "  $result = array();\n\
    \  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, $arr);\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[$key] = array($value, $key);\n    }\n  }\n\
    \  return $result;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n    return\
    \ array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min == $max)\
    \ {\n    return array($min);\n  }\n  $len = strlen($min);\n  $arr = array_reverse($arr);\n\
    \  $arr = array_map(function($v) use ($len) {\n    return str_pad($v, $len, \"\
    0\", STR_PAD_LEFT);\n  }, $arr);\n  return $arr;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array\
    \ = array_filter($array, function($v){\n    return $v > 0 && $v < 10;\n});\n$array\
    \ = array_map(function($v){\n    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n\
    }, $array);\n$array = array_merge($array, array_fill(0, 9, \"One\"));\n$array\
    \ = array_reverse($array);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array,\
    \ function($v){\n    return $v > 0 && $v < 10;\n});\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($array,\
    \ array_fill(0, 9, \"One\"));\n$array = array_reverse($array);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array = array(2, 1, 1,\
    \ 4, 5, 8, 2, 3);\n$array = array_filter($array, function($v){\n    return $v\
    \ > 0 && $v < 10;\n});\n$array = array_map(function($v){\n    return str_pad($v,\
    \ 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($array, array_fill(0,\
    \ 9, \"One\"));\n$array = array_reverse($array);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$array = array(2, 1, 1, 4, 5, 8, 2, 3);\n$array = array_filter($array,\
    \ function($v){\n    return $v > 0 && $v < 10;\n});\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_merge($",
  "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[] = array('name' => $value, 'value' => $key);\n\
    \    }\n  }\n  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n\
    \  }\n  $sorted = array();\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $sorted[$value] = $key;\n    }\n  }\n  ksort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  foreach ($reversed as $key => $value)\
    \ {\n    $sorted[$key] = $arr[$value];\n  }\n  return $sorted;\n}\n", "  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  if ($min == $max) {\n    return array($min);\n  }\n  $digits\
    \ = range($min, $max);\n  array_reverse($digits);\n  $names = array();\n  foreach\
    \ ($digits as $digit) {\n    $names[] = $names[count($names) - 1] . ($digit <\
    \ 10 ? \"One\" : \"Two\") . ($digit < 100 ? \"Three\" : \"Four\") . ($digit <\
    \ 1000 ? \"Five\" : \"Six\") . ($digit < 10000 ? \"Seven\" : \"Eight\") . ($digit\
    \ < 100000 ? \"Nine\" : \"Ten\");\n  }\n  return $names;\n}\n", "  $result = array();\n\
    \  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $result[$value] = $key;\n    }\n  }\n  return $result;\n}\n", "  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  array_multisort($result,\
    \ SORT_DESC, $arr);\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\n    array('name' => 'One', 'id' => 1),\n    array('name' => 'Two',\
    \ 'id' => 2),\n    array('name' => 'Three', 'id' => 3),\n    array('name' => 'Four',\
    \ 'id' => 4),\n    array('name' => 'Five', 'id' => 5),\n    array('name' => 'Six',\
    \ 'id' => 6),\n    array('name' => 'Seven', 'id' => 7),\n    array('name' => 'Eight',\
    \ 'id' => 8),\n    array('name' => 'Nine', 'id' => 9),\n    array('name' => 'Ten',\
    \ 'id' => 10),\n    array('name' => 'Eleven', 'id' => 11),\n    array('name' =>\
    \ 'Twelve', 'id' => 12),\n    array('name' => 'Thirteen', 'id' => 13),\n    array('name'\
    \ => 'Fourteen', 'id' => 14),\n    array('name' => 'Fifteen', 'id' => 15),\n \
    \   array('name' => 'Sixteen', 'id' => 16),\n    array('name' => 'Seventeen',\
    \ 'id' => 17),\n    array('name' => 'Eighteen', 'id' => 18),\n    array('name'\
    \ => 'Nineteen', 'id' => 19),\n    array('name' => 'Twenty', 'id' => 20),\n  \
    \  array('name' => 'Twenty-one', 'id' => 21),\n    array('name' => 'Twenty-two',\
    \ 'id' => 22),\n    array('name' => 'Twenty-three', 'id' => 23),\n    array('name'\
    \ => 'Twenty-four', 'id' => 24),\n    array('name' => 'Twenty-five', 'id' => 25),\n\
    \    array('name' => 'Twenty-six', 'id' => 26),\n    array('name' => 'Twenty-seven',\
    \ 'id' => 27),\n    array('name' => 'Twenty-eight', 'id' => 28),\n    array('name'\
    \ => 'Twenty-nine', 'id' => 29),"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
