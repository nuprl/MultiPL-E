language: php
name: HumanEval_2_truncate_number
results:
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql4yju5_.php:18\n\
    Stack trace:\n#0 /tmp/tmpql4yju5_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpql4yju5_.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = preg_replace('/\\\
    .$/', '', $decimals);\n    $decimals = preg_replace('/\\./', '', $decimals);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return\
    \ $number - ($number % 1);\n    } else {\n        return 0;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv3_xggx.php:25\n\
    Stack trace:\n#0 /tmp/tmppv3_xggx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppv3_xggx.php\
    \ on line 25\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx34n8mht.php:24\n\
    Stack trace:\n#0 /tmp/tmpx34n8mht.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx34n8mht.php\
    \ on line 24\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[0] . '.' . substr($parts[1], -1);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7819hjfk.php:18\n\
    Stack trace:\n#0 /tmp/tmp7819hjfk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7819hjfk.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = round($number, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoc_j4ng.php:23\n\
    Stack trace:\n#0 /tmp/tmppoc_j4ng.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppoc_j4ng.php\
    \ on line 23\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        return\
    \ 1;\n    }\n    if ($integer > 0 && $number >= 1) {\n        $decimals = strlen($number)\
    \ - strlen(floor($number)) + 1;\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39wngomb.php:28\n\
    Stack trace:\n#0 /tmp/tmp39wngomb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp39wngomb.php\
    \ on line 28\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number);\n  }\n  return $number;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89gu4qah.php:22\n\
    Stack trace:\n#0 /tmp/tmp89gu4qah.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp89gu4qah.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $factor = 1;\n    $decimals\
    \ = 0;\n    while ($number >= $factor) {\n        $decimals++;\n        $factor\
    \ *= 10;\n    }\n    return round($number / $factor, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwcd0j9h.php:26\n\
    Stack trace:\n#0 /tmp/tmpqwcd0j9h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqwcd0j9h.php\
    \ on line 26\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10) / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoivyymb.php:17\n\
    Stack trace:\n#0 /tmp/tmpeoivyymb.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeoivyymb.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf4lzi0g.php:18\n\
    Stack trace:\n#0 /tmp/tmpvf4lzi0g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvf4lzi0g.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdoyj777.php:22\n\
    Stack trace:\n#0 /tmp/tmpsdoyj777.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsdoyj777.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz00n9d9.php:18\n\
    Stack trace:\n#0 /tmp/tmpxz00n9d9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxz00n9d9.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works great for me. Just a small\
    \ correction: It should be `return substr($number, 0, $decimals);` instead of\
    \ `return $number;`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7qsxpll3.php on line 15

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxje53vn7.php:18\n\
    Stack trace:\n#0 /tmp/tmpxje53vn7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxje53vn7.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0.0;\n    }\n    if ($integer > 0 && $integer < PHP_INT_MAX) {\n\
    \        return $integer;\n    }\n    if ($integer < 0) {\n        $decimals =\
    \ floor((-$number) * LOG10E);\n        $integer = 0;\n    }\n    return round($number\
    \ - $integer + $decimals, $decimals);\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpjt638c.php:29\n\
    Stack trace:\n#0 /tmp/tmpvpjt638c.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvpjt638c.php\
    \ on line 29\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number > 0\
    \ ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51r1rz79.php:18\n\
    Stack trace:\n#0 /tmp/tmp51r1rz79.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp51r1rz79.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz00n9d9.php:18\n\
    Stack trace:\n#0 /tmp/tmpxz00n9d9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxz00n9d9.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjb4lzki.php:18\n\
    Stack trace:\n#0 /tmp/tmpjjb4lzki.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjjb4lzki.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - ($number % 1);\n    }\n  \
    \  return 0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafnxdms2.php:22\n\
    Stack trace:\n#0 /tmp/tmpafnxdms2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpafnxdms2.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = max($decimals, 0);\n    $integer = floor($number);\n    $integer\
    \ = max($integer, 0);\n    return $integer / pow(10, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6z9woo6.php:22\n\
    Stack trace:\n#0 /tmp/tmpc6z9woo6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc6z9woo6.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10) / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoivyymb.php:17\n\
    Stack trace:\n#0 /tmp/tmpeoivyymb.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeoivyymb.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer % 1;\n    return $integer + ($decimals > 0 ? $decimals\
    \ : 0);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI needed a solution\
    \ that would work for any number of decimal places so I came up with this:\n<code>\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmixv08qb.php on line 16

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, strlen($parts[1]) - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42fwxb9t.php:18\n\
    Stack trace:\n#0 /tmp/tmp42fwxb9t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp42fwxb9t.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkif1v2j9.php:22\n\
    Stack trace:\n#0 /tmp/tmpkif1v2j9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkif1v2j9.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $decimals =\
    \ strlen($decimals) < 2 ? 0 : substr($decimals, -2);\n    return $parts[0] . '.'\
    \ . str_pad($decimals, 2, '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpkz70ia.php:20\n\
    Stack trace:\n#0 /tmp/tmprpkz70ia.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprpkz70ia.php\
    \ on line 20\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $integer + $decimals / 2;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fn4id5j.php:22\n\
    Stack trace:\n#0 /tmp/tmp8fn4id5j.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8fn4id5j.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz00n9d9.php:18\n\
    Stack trace:\n#0 /tmp/tmpxz00n9d9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxz00n9d9.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = $number - ($decimals - 1);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36eu72i6.php:22\n\
    Stack trace:\n#0 /tmp/tmp36eu72i6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp36eu72i6.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer =\
    \ $parts[0];\n    if ($decimals == '')\n        return $integer;\n    else\n \
    \       return $integer . '.' . substr($decimals, 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3diuv1ry.php:23\n\
    Stack trace:\n#0 /tmp/tmp3diuv1ry.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3diuv1ry.php\
    \ on line 23\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $number < 1 ? 1 : $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zkgvgl2.php:18\n\
    Stack trace:\n#0 /tmp/tmp7zkgvgl2.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7zkgvgl2.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz_2lred.php:18\n\
    Stack trace:\n#0 /tmp/tmpqz_2lred.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqz_2lred.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0.0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppt4aprq5.php:22\n\
    Stack trace:\n#0 /tmp/tmppt4aprq5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppt4aprq5.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqt11f1m.php:20\n\
    Stack trace:\n#0 /tmp/tmpnqt11f1m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnqt11f1m.php\
    \ on line 20\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45oecq7a.php:22\n\
    Stack trace:\n#0 /tmp/tmp45oecq7a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp45oecq7a.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer < 0 ? 0 : $integer;\n    return $integer + $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fh_b91w.php:22\n\
    Stack trace:\n#0 /tmp/tmp8fh_b91w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8fh_b91w.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyyqblet.php:24\n\
    Stack trace:\n#0 /tmp/tmpgyyqblet.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgyyqblet.php\
    \ on line 24\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxje53vn7.php:18\n\
    Stack trace:\n#0 /tmp/tmpxje53vn7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxje53vn7.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx34n8mht.php:24\n\
    Stack trace:\n#0 /tmp/tmpx34n8mht.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx34n8mht.php\
    \ on line 24\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * pow(10, floor(log10($number) + 1))) / pow(10, floor(log10($number)));\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4l_qt8md.php:17\n\
    Stack trace:\n#0 /tmp/tmp4l_qt8md.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4l_qt8md.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? round($number - $integer\
    \ - $decimals, $decimals) : round($number - $integer, $decimals);\n}\n</code>\n\
    <|/ a tags=php,rounding |>\n<| c |>\nThis doesn't work for negative numbers, it\
    \ just returns 0.\n<|/ c |>\n<| a tags=php,rounding |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphs60ku0m.php on line 16

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = max($decimals, 0);\n    $integer = floor($number);\n    $integer\
    \ = max($integer, 0);\n    return $integer / pow(10, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6z9woo6.php:22\n\
    Stack trace:\n#0 /tmp/tmpc6z9woo6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpc6z9woo6.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals < 0)\
    \ {\n        return $number;\n    }\n    $integer = substr($number, 0, $decimals);\n\
    \    $remainder = substr($number, $decimals);\n    return $integer . '.' . substr($remainder,\
    \ 0, 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8t437e4.php:23\n\
    Stack trace:\n#0 /tmp/tmpn8t437e4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpn8t437e4.php\
    \ on line 23\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz00n9d9.php:18\n\
    Stack trace:\n#0 /tmp/tmpxz00n9d9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxz00n9d9.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql4yju5_.php:18\n\
    Stack trace:\n#0 /tmp/tmpql4yju5_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpql4yju5_.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer == $number) {\n    return\
    \ $integer;\n  }\n  while ($number >= 1) {\n    $decimals++;\n    $number /= 10;\n\
    \  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsjye1qli.php:26\n\
    Stack trace:\n#0 /tmp/tmpsjye1qli.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsjye1qli.php\
    \ on line 26\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number > 0\
    \ ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51r1rz79.php:18\n\
    Stack trace:\n#0 /tmp/tmp51r1rz79.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp51r1rz79.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number - $integer);\n    }\n    return $decimals\
    \ ? round($number, $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla80pyp4.php:22\n\
    Stack trace:\n#0 /tmp/tmpla80pyp4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpla80pyp4.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n\n    $decimals = 1;\n    $integer\
    \ = floor($number);\n    while ($integer > $number) {\n        $decimals++;\n\
    \        $integer = floor($number);\n    }\n\n    return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsjgxyq7.php:28\n\
    Stack trace:\n#0 /tmp/tmpgsjgxyq7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgsjgxyq7.php\
    \ on line 28\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiem26pd8.php:18\n\
    Stack trace:\n#0 /tmp/tmpiem26pd8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiem26pd8.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkif1v2j9.php:22\n\
    Stack trace:\n#0 /tmp/tmpkif1v2j9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkif1v2j9.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, strlen($parts[1]) - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42fwxb9t.php:18\n\
    Stack trace:\n#0 /tmp/tmp42fwxb9t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp42fwxb9t.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd78met_8.php:22\n\
    Stack trace:\n#0 /tmp/tmpd78met_8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd78met_8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        return\
    \ 0;\n    }\n    if ($integer > 0 && $number >= 1) {\n        $decimals = floor($number\
    \ - $integer);\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1g9jhcie.php:28\n\
    Stack trace:\n#0 /tmp/tmp1g9jhcie.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1g9jhcie.php\
    \ on line 28\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql4yju5_.php:18\n\
    Stack trace:\n#0 /tmp/tmpql4yju5_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpql4yju5_.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer < 0 ? 0 : $integer;\n    return $integer + $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fh_b91w.php:22\n\
    Stack trace:\n#0 /tmp/tmp8fh_b91w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp8fh_b91w.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: -1
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = 1;\n    $integer\
    \ = floor($number);\n    while ($number > $integer) {\n        $decimals++;\n\
    \        $integer = floor($number);\n    }\n    return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730934
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - ($number % 1);\n    }\n  \
    \  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0n5348t6.php:22\n\
    Stack trace:\n#0 /tmp/tmp0n5348t6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp0n5348t6.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ct8wm74.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ct8wm74.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3ct8wm74.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf4lzi0g.php:18\n\
    Stack trace:\n#0 /tmp/tmpvf4lzi0g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvf4lzi0g.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppt4aprq5.php:22\n\
    Stack trace:\n#0 /tmp/tmppt4aprq5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppt4aprq5.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $decimals;\n    }\n    $decimals = $number - $integer;\n \
    \   return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4onexmg.php:25\n\
    Stack trace:\n#0 /tmp/tmpz4onexmg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpz4onexmg.php\
    \ on line 25\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval(floor($number));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqklu_o98.php:17\n\
    Stack trace:\n#0 /tmp/tmpqklu_o98.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpqklu_o98.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqobyb9xu.php:22\n\
    Stack trace:\n#0 /tmp/tmpqobyb9xu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqobyb9xu.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer =\
    \ $parts[0];\n    if ($decimals == '')\n        return $integer;\n    return $integer\
    \ . '.' . substr($decimals, 0, 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwctd9ni.php:22\n\
    Stack trace:\n#0 /tmp/tmpzwctd9ni.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzwctd9ni.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $integer;\n    }\n    if ($integer > 0) {\n        $decimals\
    \ = $integer - $integer;\n    }\n    return round($number - $integer + $decimals,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqynehsj.php:25\n\
    Stack trace:\n#0 /tmp/tmpsqynehsj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpsqynehsj.php\
    \ on line 25\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $number > 0 ? substr($number,\
    \ 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphg9imzah.php:18\n\
    Stack trace:\n#0 /tmp/tmphg9imzah.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphg9imzah.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n    }\n    return $number;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for negative numbers. `truncate_number(-3)` returns\
    \ `-3` instead of `-1`.\n<|/ c |>\n<| c |>\nI fixed the negative number issue,\
    \ thanks for pointing it out.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx74p7xzr.php on line 17

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84ujy1d1.php:21\n\
    Stack trace:\n#0 /tmp/tmp84ujy1d1.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp84ujy1d1.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kgizi40.php:22\n\
    Stack trace:\n#0 /tmp/tmp6kgizi40.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6kgizi40.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        return\
    \ 1;\n    }\n    if ($integer > 0 && $number >= 1) {\n        $decimals = strlen($number)\
    \ - strlen($integer);\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltn4f5h5.php:28\n\
    Stack trace:\n#0 /tmp/tmpltn4f5h5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpltn4f5h5.php\
    \ on line 28\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = 1;\n    $integer\
    \ = floor($number);\n    while ($integer % 10 == 0) {\n        $decimals++;\n\
    \        $integer /= 10;\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2ywq1i1.php:26\n\
    Stack trace:\n#0 /tmp/tmpn2ywq1i1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpn2ywq1i1.php\
    \ on line 26\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $integer;\n    }\n    if ($integer < 0) {\n        $decimals\
    \ = floor($number * log10($number));\n        $number = $integer + $decimals;\n\
    \    }\n    return $number - $decimals;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcanuqff7.php:26\n\
    Stack trace:\n#0 /tmp/tmpcanuqff7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcanuqff7.php\
    \ on line 26\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10 + 0.5) / 10;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72iv90w2.php:17\n\
    Stack trace:\n#0 /tmp/tmp72iv90w2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp72iv90w2.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk0gha2w.php:20\n\
    Stack trace:\n#0 /tmp/tmpgk0gha2w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgk0gha2w.php\
    \ on line 20\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . ($parts[1] / pow(10,\
    \ strlen($parts[1]) - 1));\n}\n</code>\n<|/ a tags=php,number-formatting |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-7.5)`.\n\
    <|/ c |>\n<| a tags=php,number-formatting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3vgv68tu.php on line 12

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd78met_8.php:22\n\
    Stack trace:\n#0 /tmp/tmpd78met_8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd78met_8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  return\
    \ $decimals > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthoal_8c.php:19\n\
    Stack trace:\n#0 /tmp/tmpthoal_8c.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpthoal_8c.php\
    \ on line 19\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = preg_replace('/\\\
    .$/', '', $decimals);\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7og9ge9.php:19\n\
    Stack trace:\n#0 /tmp/tmpn7og9ge9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn7og9ge9.php\
    \ on line 19\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddc_70bl.php:18\n\
    Stack trace:\n#0 /tmp/tmpddc_70bl.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpddc_70bl.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $remainder = $number - $decimal_part;\n\
    \    if ($remainder >= 0.5) {\n        return $decimal_part + 1;\n    }\n    return\
    \ $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58r4vk47.php:22\n\
    Stack trace:\n#0 /tmp/tmp58r4vk47.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp58r4vk47.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return floor($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxe5pj41g.php:22\n\
    Stack trace:\n#0 /tmp/tmpxe5pj41g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxe5pj41g.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    return $number - intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  return\
    \ ($decimals > 1) ? substr($number, 0, $decimals - 1) : $number;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqvlkiza.php:19\n\
    Stack trace:\n#0 /tmp/tmpwqvlkiza.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwqvlkiza.php\
    \ on line 19\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to make it work with negative numbers?\n<|/ c |>\n<| c |>\n: Yes, just\
    \ replace `floor` with `ceil`.\n<|/ c |>\n<| c |>\nI added a version that works\
    \ with negative numbers. I tested it on PHP 5.3.10 and it works.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that works with negative numbers. I tested it on PHP\
    \ 5.3.10 and it works.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers. I tested it on PHP 5.3.10 and it works.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmposb3c_41.php on line 16

    '
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ct8wm74.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ct8wm74.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3ct8wm74.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd78met_8.php:22\n\
    Stack trace:\n#0 /tmp/tmpd78met_8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd78met_8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45oecq7a.php:22\n\
    Stack trace:\n#0 /tmp/tmp45oecq7a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp45oecq7a.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddc_70bl.php:18\n\
    Stack trace:\n#0 /tmp/tmpddc_70bl.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpddc_70bl.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    $number = floor($number);\n  }\n  return $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrrdgpnc.php:22\n\
    Stack trace:\n#0 /tmp/tmpsrrdgpnc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsrrdgpnc.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd78met_8.php:22\n\
    Stack trace:\n#0 /tmp/tmpd78met_8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd78met_8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiem26pd8.php:18\n\
    Stack trace:\n#0 /tmp/tmpiem26pd8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiem26pd8.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - intval($number * pow(10, $decimals));\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn4n12mg.php:22\n\
    Stack trace:\n#0 /tmp/tmpdn4n12mg.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdn4n12mg.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n  }\n  return $number;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfobc0nc8.php:22\n\
    Stack trace:\n#0 /tmp/tmpfobc0nc8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfobc0nc8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyq37px4.php:18\n\
    Stack trace:\n#0 /tmp/tmpeyq37px4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpeyq37px4.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $decimals % 2\
    \ ? $number - ceil($number / 2) * pow(2, $decimals) : $number;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmtdnxyt.php:20\n\
    Stack trace:\n#0 /tmp/tmprmtdnxyt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprmtdnxyt.php\
    \ on line 20\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kgizi40.php:22\n\
    Stack trace:\n#0 /tmp/tmp6kgizi40.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6kgizi40.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6ocwjwt.php:17\n\
    Stack trace:\n#0 /tmp/tmpo6ocwjwt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpo6ocwjwt.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $decimals;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rau1ppl.php:20\n\
    Stack trace:\n#0 /tmp/tmp0rau1ppl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0rau1ppl.php\
    \ on line 20\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, strlen($parts[1]) - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42fwxb9t.php:18\n\
    Stack trace:\n#0 /tmp/tmp42fwxb9t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp42fwxb9t.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeh7gzns.php:17\n\
    Stack trace:\n#0 /tmp/tmpgeh7gzns.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgeh7gzns.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    $number = floor($number);\n    $number = $number - ($number\
    \ % 1);\n    $number = $number / pow(10, $decimals);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uan_q_e.php:24\n\
    Stack trace:\n#0 /tmp/tmp6uan_q_e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6uan_q_e.php\
    \ on line 24\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer < $number)\
    \ {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $integer . '.' . str_pad('', $decimals, '0');\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuomssr4.php:22\n\
    Stack trace:\n#0 /tmp/tmpxuomssr4.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxuomssr4.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $decimals >\
    \ 0 ? substr($number, 0, $decimals) : $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8zdnget.php:18\n\
    Stack trace:\n#0 /tmp/tmpg8zdnget.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg8zdnget.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxje53vn7.php:18\n\
    Stack trace:\n#0 /tmp/tmpxje53vn7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxje53vn7.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf4lzi0g.php:18\n\
    Stack trace:\n#0 /tmp/tmpvf4lzi0g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvf4lzi0g.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbmh3ags.php:18\n\
    Stack trace:\n#0 /tmp/tmpdbmh3ags.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbmh3ags.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n  }\n  return $number;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfobc0nc8.php:22\n\
    Stack trace:\n#0 /tmp/tmpfobc0nc8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfobc0nc8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqobyb9xu.php:22\n\
    Stack trace:\n#0 /tmp/tmpqobyb9xu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqobyb9xu.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeh7gzns.php:17\n\
    Stack trace:\n#0 /tmp/tmpgeh7gzns.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgeh7gzns.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd78met_8.php:22\n\
    Stack trace:\n#0 /tmp/tmpd78met_8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpd78met_8.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0kul1us.php:22\n\
    Stack trace:\n#0 /tmp/tmpx0kul1us.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx0kul1us.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6ocwjwt.php:17\n\
    Stack trace:\n#0 /tmp/tmpo6ocwjwt.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpo6ocwjwt.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiem26pd8.php:18\n\
    Stack trace:\n#0 /tmp/tmpiem26pd8.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiem26pd8.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjb4lzki.php:18\n\
    Stack trace:\n#0 /tmp/tmpjjb4lzki.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjjb4lzki.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0.0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    $integer = $integer < 0 ? 0 : $integer;\n    return $integer + ($decimals\
    \ > 0 ? $decimals : 0);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevyjrs8y.php:22\n\
    Stack trace:\n#0 /tmp/tmpevyjrs8y.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpevyjrs8y.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    return $number - floor($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? round($number - $integer\
    \ - $decimals, $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j8ltcgq.php:22\n\
    Stack trace:\n#0 /tmp/tmp6j8ltcgq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6j8ltcgq.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    return $number - intval($number);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxje53vn7.php:18\n\
    Stack trace:\n#0 /tmp/tmpxje53vn7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxje53vn7.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer =\
    \ $parts[0];\n    if ($decimals == '0') {\n        return $integer;\n    }\n \
    \   return $integer . '.' . substr($decimals, 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbowxodz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbowxodz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkbowxodz.php\
    \ on line 23\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $integer < $number) {\n   \
    \     $decimals = $integer - $integer;\n    }\n    return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ajrwvkj.php:25\n\
    Stack trace:\n#0 /tmp/tmp6ajrwvkj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6ajrwvkj.php\
    \ on line 25\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwebhxtaj.php:17\n\
    Stack trace:\n#0 /tmp/tmpwebhxtaj.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpwebhxtaj.php\
    \ on line 17\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zwja72n.php:21\n\
    Stack trace:\n#0 /tmp/tmp9zwja72n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9zwja72n.php\
    \ on line 21\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql4yju5_.php:18\n\
    Stack trace:\n#0 /tmp/tmpql4yju5_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpql4yju5_.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ak2si8p.php:22\n\
    Stack trace:\n#0 /tmp/tmp_ak2si8p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_ak2si8p.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number < 1\
    \ ? 1 : $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a8jdfka.php:18\n\
    Stack trace:\n#0 /tmp/tmp2a8jdfka.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2a8jdfka.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvf4lzi0g.php:18\n\
    Stack trace:\n#0 /tmp/tmpvf4lzi0g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvf4lzi0g.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n  }\n  return floor($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k8kiuxp.php:22\n\
    Stack trace:\n#0 /tmp/tmp_k8kiuxp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_k8kiuxp.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll689_ic.php:18\n\
    Stack trace:\n#0 /tmp/tmpll689_ic.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpll689_ic.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ct8wm74.php:18\n\
    Stack trace:\n#0 /tmp/tmp3ct8wm74.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp3ct8wm74.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $decimals > 0 ? substr($number,\
    \ 0, $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kywyeqz.php:18\n\
    Stack trace:\n#0 /tmp/tmp5kywyeqz.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5kywyeqz.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3k9wgoh.php:18\n\
    Stack trace:\n#0 /tmp/tmpa3k9wgoh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa3k9wgoh.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfs_8g2t.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfs_8g2t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmfs_8g2t.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddc_70bl.php:18\n\
    Stack trace:\n#0 /tmp/tmpddc_70bl.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpddc_70bl.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer == $number) {\n    return\
    \ $decimals;\n  }\n  while ($integer < $number) {\n    $decimals++;\n    $integer\
    \ += floor($number / $decimals);\n  }\n  return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkh0s7kwm.php:26\n\
    Stack trace:\n#0 /tmp/tmpkh0s7kwm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkh0s7kwm.php\
    \ on line 26\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer =\
    \ $parts[0];\n    if ($decimals > 0) {\n        return $integer . '.' . substr($decimals,\
    \ 0, 1);\n    }\n    return $integer;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc599xzzl.php:23\n\
    Stack trace:\n#0 /tmp/tmpc599xzzl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc599xzzl.php\
    \ on line 23\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - ($number % 1);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo2sns2_.php:22\n\
    Stack trace:\n#0 /tmp/tmpyo2sns2_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyo2sns2_.php\
    \ on line 22\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehavryod.php:18\n\
    Stack trace:\n#0 /tmp/tmpehavryod.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpehavryod.php\
    \ on line 18\n"
  timestamp: 1659730929
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $number < 1 ? '0.' . str_pad('',\
    \ $decimals, '0') : $number;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitlcb783.php:18\n\
    Stack trace:\n#0 /tmp/tmpitlcb783.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpitlcb783.php\
    \ on line 18\n"
  timestamp: 1659730929
