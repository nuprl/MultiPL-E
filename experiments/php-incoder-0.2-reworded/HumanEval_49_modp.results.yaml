language: php
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1)\
    \ {\n    return $p;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p == 1)\
    \ {\n    return $n;\n  }\n  if ($p == 2) {\n    return $n % 2 ? $n : $n + 1;\n\
    \  }\n  if ($p == 3) {\n    return $n % 3 ? $n : $n + 1;\n  }\n  if ($p == 4)\
    \ {\n    return $n % 4 ? $n : $n + 1;\n  }\n  if ($p == 5) {\n    return $n %\
    \ 5 ? $n : $n + 1;\n  }\n  if ($p == 6) {\n    return $n % 6 ? $n : $n + 1;\n\
    \  }\n  if ($p == 7) {\n    return $n % 7 ? $n : $n + 1;\n  }\n  if ($p == 8)\
    \ {\n    return $n % 8 ? $n : $n + 1;\n  }\n  if ($p == 9) {\n    return $n %\
    \ 9 ? $n : $n + 1;\n  }\n  if ($p == 10) {\n    return $n % 10 ? $n : $n + 1;\n\
    \  }\n  if ($p == 11) {\n    return $n % 11 ? $n : $n + 1;\n  }\n  if ($p == 12)\
    \ {\n    return $n % 12 ? $n : $n + 1;\n  }\n  if ($p == 13) {\n    return $n\
    \ % 13 ? $n : $n + 1;\n  }\n  if ($p == 14) {\n    return $n % 14 ? $n : $n +\
    \ 1;\n  }\n  if ($p == 15) {\n    return $n % 15 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 16) {\n    return $n % 16 ? $n : $n + 1;\n  }\n  if ($p == 17) {\n    return\
    \ $n % 17 ? $n : $n + 1;\n  }\n  if ($p == 18) {\n    return $n % 18 ? $n : $n\
    \ + 1;\n  }\n  if ($p == 19) {\n    return $n % 19 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 20) {\n    return $n % 20 ? $n : $n + 1;\n  }\n  if ($p == 21) {\n    return\
    \ $n % 21 ? $n : $n + 1;\n  }\n  if ($p == 22) {\n    return $n % 22 ? $n : $n\
    \ + 1;\n  }\n  if ($p == 23) {\n    return $n % 23 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 24) {\n    return $n % 24 ? $n : $n + 1;\n  }\n  if ($p == \nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5wckltsl.php on line 98

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac7ltpg9.php:23\n\
    Stack trace:\n#0 /tmp/tmpac7ltpg9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpac7ltpg9.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  if ($n == $p) {\n    return $n;\n  }\n  if ($n == 0) {\n    return $p;\n  }\n\
    \  if ($n == $p - 1) {\n    return $n;\n  }\n  if ($n == $p + 1) {\n    return\
    \ $p;\n  }\n  $m = (int) ($p * log($n) / log($p));\n  return $n % $p ? $m : $n;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56hplb59.php:47\n\
    Stack trace:\n#0 /tmp/tmp56hplb59.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp56hplb59.php\
    \ on line 47\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  $n = $n & $p;\n\
    \  $n = ($n >> 1) + ($n & 1);\n  return $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jtnlpr4.php:30\n\
    Stack trace:\n#0 /tmp/tmp3jtnlpr4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3jtnlpr4.php\
    \ on line 30\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n &\
    \ $p;\n  $n = ($n >> 16) & 0xffff;\n  $n = ($n >> 8) & 0xffff;\n  $n = $n & 0xffff;\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvl5pz_qs.php:26\n\
    Stack trace:\n#0 /tmp/tmpvl5pz_qs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvl5pz_qs.php\
    \ on line 26\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0 || $p < 0)\n    return null;\n  if ($p === 0)\n    return $n;\n  if ($p ===\
    \ 1)\n    return $n % $p;\n  if ($n % $p === 0)\n    return $p;\n  $r = $n % $p;\n\
    \  return $r === 0 ? $p : $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3aki50s.php:32\n\
    Stack trace:\n#0 /tmp/tmpn3aki50s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn3aki50s.php\
    \ on line 32\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n    return 0;\n  }\n  if\
    \ ($n == $p) {\n    return 1;\n  }\n  if ($n == ($p << 1)) { // n << 1\n    return\
    \ $n;\n  }\n  if ($p == ($n << 1)) { // n << 1\n    return $p;\n  }\n  $n1 = $n\
    \ & -p;\n  $p1 = $p & -$n;\n  if ($n1 == 0) {\n    return $p1;\n  }\n  if ($p1\
    \ == 0) {\n    return $n1;\n  }\n  $n2 = $n1 >> 1;\n  $p2 = $p1 >> 1;\n  if ($n2\
    \ == 0) {\n    return $p2;\n  }\n  if ($p2 == 0) {\n    return $n2;\n  }\n  $n3\
    \ = $n2 >> 1;\n  $p3 = $p2 >> 1;\n  if ($n3 == 0) {\n    return $p3;\n  }\n  if\
    \ ($p3 == 0) {\n    return $n3;\n  }\n  $n4 = $n3 >> 1;\n  $p4 = $p3 >> 1;\n \
    \ if ($n4 == 0) {\n    return $p4;\n  }\n  if ($p4 == 0) {\n    return $n4;\n\
    \  }\n  $n5 = $n4 >> 1;\n  $p5 = $p4 >> 1;\n  if ($n5 == 0) {\n    return $p5;\n\
    \  }\n  if ($p5 == 0) {\n    return $n5;\n  }\n  $n6 = $n5 >> 1;\n  $p6 = $p5\
    \ >> 1;\n  if ($n6 == 0) {\n    return $p6;\n  }\n  if ($p6 == 0) {\n    return\
    \ $n6;\n  }\n  $n7 = $n6 >> 1;\n  $p7 = $p6 >> 1;\n  if ($n7 == 0) {\n    return\
    \ $p7;\n  }\n  if ($p7 == 0) {\n    return $n7;\n  }\n  $n8 = $n7 >> 1;\n  $p8\
    \ = $p7 >> 1;\n  if ($n8 == 0) {\n    return $p8;\n  }\n  if ($p8 == 0) {\n  \
    \  return $n8;\n  }\n  $n9 = $n8 >> 1;\n  $p9 = $p8 >> 1;\n  if ($n9 == 0) {\n\
    \    return $p9;\n  }\n  if ($p9 == 0) {\n    return $n9;\n  }\n  $n10 = $n9 >>\
    \ 1;\n  $p10 = $p9 >> 1;\n  if ($n10 == 0) {\n    return $p10;\n  }\n  if ($p10\
    \ == 0) {\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdkbgeklj.php on line 121

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvx5rov9.php:25\n\
    Stack trace:\n#0 /tmp/tmpnvx5rov9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvx5rov9.php\
    \ on line 25\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwhmfz__.php:23\n\
    Stack trace:\n#0 /tmp/tmpxwhmfz__.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxwhmfz__.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85rtm_zp.php:22\n\
    Stack trace:\n#0 /tmp/tmp85rtm_zp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp85rtm_zp.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n ^\
    \ $p;\n  $n = $n ^ ($n >> 16);\n  $n = $n ^ ($n >> 8);\n  $n = $n ^ ($n >> 4);\n\
    \  $n = $n ^ ($n >> 2);\n  $n = $n ^ ($n >> 1);\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhlhuyjp.php:28\n\
    Stack trace:\n#0 /tmp/tmpbhlhuyjp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbhlhuyjp.php\
    \ on line 28\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvx5rov9.php:25\n\
    Stack trace:\n#0 /tmp/tmpnvx5rov9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvx5rov9.php\
    \ on line 25\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n \
    \ if ($p == 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  if ($p < $n) {\n    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n  \
    \  return $p;\n  }\n  return $p;\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkpb427a.php:46\n\
    Stack trace:\n#0 /tmp/tmpfkpb427a.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfkpb427a.php\
    \ on line 46\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvx5rov9.php:25\n\
    Stack trace:\n#0 /tmp/tmpnvx5rov9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvx5rov9.php\
    \ on line 25\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n \
    \ if ($p == 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  if ($p < $n) {\n    return $n;\n  }\n  $m = (int) ($p / $n);\n  return ($n\
    \ % $m) * modp($n, $m);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9g2b_89c.php:44\n\
    Stack trace:\n#0 /tmp/tmp9g2b_89c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9g2b_89c.php\
    \ on line 44\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvx5rov9.php:25\n\
    Stack trace:\n#0 /tmp/tmpnvx5rov9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvx5rov9.php\
    \ on line 25\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n  $n = $n * $p;\n  if ($n < $p) {\n\
    \    return $n;\n  }\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_v354sy6.php:30\n\
    Stack trace:\n#0 /tmp/tmp_v354sy6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_v354sy6.php\
    \ on line 30\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n    return 0;\n  }\n  if\
    \ ($n == $p) {\n    return 1;\n  }\n  if ($n == ($p << 1)) {\n    return $n;\n\
    \  }\n  if ($p == ($n << 1)) {\n    return $p;\n  }\n  $m = $n % $p;\n  if ($m\
    \ == 0) {\n    return $p;\n  }\n  return modp($p - $m, $p) + $m;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpqh4kbppt.php on line 28

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvx5rov9.php:25\n\
    Stack trace:\n#0 /tmp/tmpnvx5rov9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvx5rov9.php\
    \ on line 25\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n &\
    \ $p;\n  $n = ($n >> 1) + ($n & 1);\n  $n = ($n >> 2) + ($n & 2);\n  $n = ($n\
    \ >> 4) + ($n & 4);\n  $n = ($n >> 8) + ($n & 8);\n  $n = ($n >> 16) + ($n & 16);\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6iw86kt_.php:28\n\
    Stack trace:\n#0 /tmp/tmp6iw86kt_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6iw86kt_.php\
    \ on line 28\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n -\
    \ (int) $n;\n  $p = $p - (int) $p;\n  if ($n < 0 || $p < 0) {\n    return null;\n\
    \  }\n  if ($n == 0) {\n    return 1;\n  }\n  if ($p == 0) {\n    return $n;\n\
    \  }\n  if ($n == $p) {\n    return $n;\n  }\n  if ($p < $n) {\n    return $n\
    \ % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb42rtqc.php:39\n\
    Stack trace:\n#0 /tmp/tmpsb42rtqc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsb42rtqc.php\
    \ on line 39\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  if ($n == $p) {\n    return 0;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n\
    \  if ($n == 1) {\n    return $p;\n  }\n  if ($n == 2) {\n    return $p + $p;\n\
    \  }\n  if ($n == 3) {\n    return $p + 2 * $p;\n  }\n  if ($n == 4) {\n    return\
    \ $p + 3 * $p;\n  }\n  if ($n == 5) {\n    return $p + 4 * $p;\n  }\n  if ($n\
    \ == 6) {\n    return $p + 5 * $p;\n  }\n  if ($n == 7) {\n    return $p + 6 *\
    \ $p;\n  }\n  if ($n == 8) {\n    return $p + 7 * $p;\n  }\n  if ($n == 9) {\n\
    \    return $p + 8 * $p;\n  }\n  if ($n == 10) {\n    return $p + 9 * $p;\n  }\n\
    \  if ($n == 11) {\n    return $p + 10 * $p;\n  }\n  if ($n == 12) {\n    return\
    \ $p + 11 * $p;\n  }\n  if ($n == 13) {\n    return $p + 12 * $p;\n  }\n  if ($n\
    \ == 14) {\n    return $p + 13 * $p;\n  }\n  if ($n == 15) {\n    return $p +\
    \ 14 * $p;\n  }\n  if ($n == 16) {\n    return $p + 15 * $p;\n  }\n  if ($n ==\
    \ 17) {\n    return $p + 16 * $p;\n  }\n  if ($n == 18) {\n    return $p + 17\
    \ * $p;\n  }\n  if ($n == 19) {\n    return $p + 18 * $p;\n  }\n  if ($n == 20)\
    \ {\n    return $p + 19 * $p;\n  }\n  if ($n == 21) {\n    return $p + 20 * $p;\n\
    \  }\n  if ($n == 22) {\n    return $p + 21 * $p;\n  }\n  if ($n == 23) {\n  \
    \  return $p + 22 * $p;\n  }\n  if ($n == 24) {\n    return $p + 23 * $p;\n  }\n\
    \  if ($n == 25) {\n    return $p + 24 * $p;\n  }\n  if ($n == 26) {\n    return\
    \ $p + 25 * $p;\n  }\n  if ($n == 27) {\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2bv11eyu.php on line 126

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return $n;\n  }\n  if\
    \ ($n == 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n\
    \  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n\
    \  }\n  $m = (int) ($p * log($n) / log($p));\n  return $n % $p ? $m : $n;\n}\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyey0e_w4.php:39\n\
    Stack trace:\n#0 /tmp/tmpyey0e_w4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyey0e_w4.php\
    \ on line 39\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    $n = (-$n) % $p;\n  }\n  return $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qe_uitb.php:26\n\
    Stack trace:\n#0 /tmp/tmp7qe_uitb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7qe_uitb.php\
    \ on line 26\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0)\
    \ {\n    return 1;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $m = (int)\
    \ ($p / $n);\n  $r = $p % $n;\n  return $m == 0 ? $r : modp($m, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l3a5a9w.php:42\n\
    Stack trace:\n#0 /tmp/tmp_l3a5a9w.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_l3a5a9w.php\
    \ on line 42\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return $n;\n  }\n  if\
    \ ($p === 0) {\n    return $n;\n  }\n  if ($n === $p) {\n    return 0;\n  }\n\
    \  if ($n === 0) {\n    return $p;\n  }\n  if ($p === 1) {\n    return $n;\n \
    \ }\n  if ($p === 2) {\n    return $n + 1;\n  }\n  if ($p === 3) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 4) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 5) {\n    return $n + ($n % 2);\n  }\n  if ($p === 6) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 7) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 8) {\n    return $n + ($n % 2);\n  }\n  if ($p === 9) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 10) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 11) {\n    return $n + ($n % 2);\n  }\n  if ($p === 12) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 13) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 14) {\n    return $n + ($n % 2);\n  }\n  if ($p === 15) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 16) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 17) {\n    return $n + ($n % 2);\n  }\n  if ($p === 18) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 19) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 20) {\n    return $n + ($n % 2);\n  }\n  if ($p === 21) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 22) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 23) {\n    return $n + ($n % 2);\n  }\n  if ($p === 24) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($p === 25) {\n    return $n + ($n % 2);\n  }\n  if\
    \ ($p === 26) {\n    return $n + ($n % 2);\n  }\n  if ($p === 27) {\n    return\
    \ $n + ($n % 2);\n  }\n  if ($\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbyb40nk9.php on line 110

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n &\
    \ $p;\n  $n = ($n >> 1) + ($n & 1);\n  return $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgdtc8ykv.php:24\n\
    Stack trace:\n#0 /tmp/tmpgdtc8ykv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgdtc8ykv.php\
    \ on line 24\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = $n %\
    \ $p;\n  if ($n < 0)\n    $n += $p;\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_65_w1uv.php:26\n\
    Stack trace:\n#0 /tmp/tmp_65_w1uv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_65_w1uv.php\
    \ on line 26\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    return -modp(abs($n), $p);\n  }\n  $n = intval($n);\n  $p = intval($p);\n\
    \  if ($n === 0) {\n    return 0;\n  }\n  if ($p === 0) {\n    return $n;\n  }\n\
    \  if ($p > $n) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9vpqlpy.php:37\n\
    Stack trace:\n#0 /tmp/tmpi9vpqlpy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpi9vpqlpy.php\
    \ on line 37\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n \
    \ if ($p == 0) {\n    return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n\
    \  if ($p < $n) {\n    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n  \
    \  return $p;\n  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuq89e9rj.php:47\n\
    Stack trace:\n#0 /tmp/tmpuq89e9rj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuq89e9rj.php\
    \ on line 47\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: -11
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n <\
    \ 0) {\n    $n = -$n;\n  }\n  if ($p < 0) {\n    $p = -$p;\n  }\n  if ($n == 0\
    \ || $p == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n \
    \ if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return modp($p -\
    \ $n, $p);\n  }\n  if ($p < $n) {\n    return modp($n, $p - $n);\n  }\n  $r =\
    \ $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return modp($r, $p);\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  if ($p === 0) {\n    return 0;\n\
    \  }\n  if ($p > $n) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpvlenef.php:38\n\
    Stack trace:\n#0 /tmp/tmpgpvlenef.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgpvlenef.php\
    \ on line 38\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwe0i58i.php:22\n\
    Stack trace:\n#0 /tmp/tmphwe0i58i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwe0i58i.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85rtm_zp.php:22\n\
    Stack trace:\n#0 /tmp/tmp85rtm_zp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp85rtm_zp.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n    return 0;\n  }\n  if\
    \ ($n == $p) {\n    return 1;\n  }\n  if ($n == ($p - 1)) {\n    return $n;\n\
    \  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog3p3ohu.php:37\n\
    Stack trace:\n#0 /tmp/tmpog3p3ohu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpog3p3ohu.php\
    \ on line 37\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return ($n\
    \ % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbjbzuhz.php:23\n\
    Stack trace:\n#0 /tmp/tmpkbjbzuhz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbjbzuhz.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0)\n    return null;\n  if ($p >\
    \ $n)\n    return null;\n  if ($n == 0)\n    return 0;\n  if ($n == 1)\n    return\
    \ 1;\n  if ($p == 1)\n    return $n;\n  if ($p % 2 == 0)\n    return $n - ($n\
    \ / 2);\n  return $n - ($p / 2);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbig467r.php:36\n\
    Stack trace:\n#0 /tmp/tmpcbig467r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcbig467r.php\
    \ on line 36\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return null;\n  }\n  if\
    \ ($p === 0) {\n    return 1;\n  }\n  if ($p === 1) {\n    return $n;\n  }\n \
    \ if ($n % $p === 0) {\n    return $n;\n  }\n  return modp($n / $p, $p);\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuo0sfmz.php:36\n\
    Stack trace:\n#0 /tmp/tmpfuo0sfmz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfuo0sfmz.php\
    \ on line 36\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n += $p;\n    if ($n < 0)\n   \
    \   $n = (-$p) + $n;\n  }\n  if ($p < 0) {\n    $p += $n;\n    if ($p < 0)\n \
    \     $p = (-$n) + $p;\n  }\n  return $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5jccf54.php:35\n\
    Stack trace:\n#0 /tmp/tmpq5jccf54.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq5jccf54.php\
    \ on line 35\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85rtm_zp.php:22\n\
    Stack trace:\n#0 /tmp/tmp85rtm_zp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp85rtm_zp.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpac7ltpg9.php:23\n\
    Stack trace:\n#0 /tmp/tmpac7ltpg9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpac7ltpg9.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    return\
    \ ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85rtm_zp.php:22\n\
    Stack trace:\n#0 /tmp/tmp85rtm_zp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp85rtm_zp.php\
    \ on line 22\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p ==\
    \ 0) {\n    return $n;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p <\
    \ 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + modp($n / $p, $p);\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvdg98n4.php:38\n\
    Stack trace:\n#0 /tmp/tmpxvdg98n4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxvdg98n4.php\
    \ on line 38\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0 || $p < 0) {\n    return null;\n  }\n  if\
    \ ($p === 0) {\n    return 1;\n  }\n  if ($p > $n) {\n    return null;\n  }\n\
    \  if ($n === 0) {\n    return $p;\n  }\n  if ($n === $p) {\n    return $n;\n\
    \  }\n  if ($n !== $p && $n % $p === 0) {\n    return $n % $p;\n  }\n  if ($n\
    \ % $p === 0) {\n    return $p + ($n - $p) % $p;\n  }\n  return $n % $p;\n}\n\
    </code>\n<|/ a tags=php,modular-arithmetic |>\n<| c |>\nThis code doesn't work\
    \ for negative numbers. I added a fix for negative numbers and it works perfectly.\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis code doesn't work for negative numbers. I added\
    \ a fix for negative numbers and it works perfectly. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp24_jwhej.php on line 39

    '
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  $n = (int)\
    \ $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n    $p = -$p;\n  }\n\
    \  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p) + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1mjsdh4.php:31\n\
    Stack trace:\n#0 /tmp/tmpf1mjsdh4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf1mjsdh4.php\
    \ on line 31\n"
  timestamp: 1659730887
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n  return $n\
    \ % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngus6fv5.php:23\n\
    Stack trace:\n#0 /tmp/tmpngus6fv5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpngus6fv5.php\
    \ on line 23\n"
  timestamp: 1659730887
