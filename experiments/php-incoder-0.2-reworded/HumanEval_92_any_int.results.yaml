language: php
name: HumanEval_92_any_int
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9f6u7g1.php:37\n\
    Stack trace:\n#0 /tmp/tmpg9f6u7g1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpg9f6u7g1.php\
    \ on line 37\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y)) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x - $y)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x - $y - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x - $y - $z)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x - $y - $z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x - $y - $z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x - $y - $z - $x - $y)) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z + $x - $y - $z - $x - $y)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $x - $y - $z - $x - $y - $z)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z + $x - $y - $z - $x - $y - $z)) {\n   \
    \     return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z - $x - $y - $z\
    \ - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z + $x - $y - $z\
    \ - $x - $y - $z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ - $x - $y - $z - $x - $y - $z - $x - $y)) {\n        return true;\n    }\n \
    \   if ($x == $y * ($z + $x - $y - $z - $x - $y - $z - $x - $y)) {\n        return\
    \ true;\n    }\n    if ($x == \nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbpyxi9ap.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9f6u7g1.php:37\n\
    Stack trace:\n#0 /tmp/tmpg9f6u7g1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpg9f6u7g1.php\
    \ on line 37\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y\
    \ / ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ ** 3) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 3) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) ** 4) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) ** 4) {\n        return true;\n  \
    \  }\n    if ($x == $y % ($z - 1) ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $y ** ($z - 1) ** 4) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - 1) ** 5) {\n        return true;\n    }\n    if ($x == $y / ($z - 1)\
    \ ** 5) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** 5) {\n\
    \        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 5) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - 1) ** 6) {\n        return true;\n  \
    \  }\n    if ($x == $y / ($z - 1) ** 6) {\n        return true;\n    }\n    if\
    \ ($x == $y % ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y\
    \ ** ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** 7) {\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe8zs_5tj.php on line 123

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y\
    \ / ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ ** 3) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 3) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) ** 4) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) ** 4) {\n        return true;\n  \
    \  }\n    if ($x == $y % ($z - 1) ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $y ** ($z - 1) ** 4) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - 1) ** 5) {\n        return true;\n    }\n    if ($x == $y / ($z - 1)\
    \ ** 5) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** 5) {\n\
    \        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 5) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - 1) ** 6) {\n        return true;\n  \
    \  }\n    if ($x == $y / ($z - 1) ** 6) {\n        return true;\n    }\n    if\
    \ ($x == $y % ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y\
    \ ** ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** 7) {\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe8zs_5tj.php on line 123

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    if ($x == $z\
    \ / $y) {\n        return true;\n    }\n    if ($x == $z % $y) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl648aujr.php:55\n\
    Stack trace:\n#0 /tmp/tmpl648aujr.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpl648aujr.php\
    \ on line 55\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z / $y) {\n        return true;\n    }\n    if ($x == $z\
    \ % $y) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm23ujinh.php:51\n\
    Stack trace:\n#0 /tmp/tmpm23ujinh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpm23ujinh.php\
    \ on line 51\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z + $x) * $z) {\n        return true;\n    }\n   \
    \ if ($x == $y * ($z - $x) * $z) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z + $x) * $z) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ - $x) * $z) {\n        return true;\n    }\n    if ($x == $y * ($z + $x) * $z)\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z + $x) * $z) {\n        return true;\n    }\n   \
    \ if ($x == $y * ($z - $x) * $z) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z + $x) * $z) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ - $x) * $z) {\n        return true;\n    }\n    if ($x == $y * ($z + $x) * $z)\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3noxgasf.php on line 100

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x + 1)) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ - $x - 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x + $y))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $x - $y + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x - $y - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $x - $y + $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x - $y - $x)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $x + 1)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $x - 1)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $x + $y)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $x - $y)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $x - $y + 1)) {\n        return true;\n    }\n \
    \   if ($x == $y * ($z - $x - $y - $x - $y - 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x - $y - $x - $y + $x)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $x - $y - $x - $y - $x)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $x - $y - $x - $y - $x + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x - $y - $x - $y - $x - 1)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z - $x - $y - $x - \nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpou0q2oh5.php on line 94

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    return ($x == $y + $z && is_int($x) && is_int($y) && is_int($z));\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq2vh5ac.php:22\n\
    Stack trace:\n#0 /tmp/tmpwq2vh5ac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwq2vh5ac.php\
    \ on line 22\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp894bjiad.php:28\n\
    Stack trace:\n#0 /tmp/tmp894bjiad.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp894bjiad.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y\
    \ / ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ ** 3) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 3) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) ** 4) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) ** 4) {\n        return true;\n  \
    \  }\n    if ($x == $y % ($z - 1) ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $y ** ($z - 1) ** 4) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - 1) ** 5) {\n        return true;\n    }\n    if ($x == $y / ($z - 1)\
    \ ** 5) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** 5) {\n\
    \        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 5) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - 1) ** 6) {\n        return true;\n  \
    \  }\n    if ($x == $y / ($z - 1) ** 6) {\n        return true;\n    }\n    if\
    \ ($x == $y % ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y\
    \ ** ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** 7) {\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe8zs_5tj.php on line 123

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vvzyimc.php:27\n\
    Stack trace:\n#0 /tmp/tmp0vvzyimc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0vvzyimc.php\
    \ on line 27\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_si7n6n4.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    return ($x == $y + $z && is_int($x) && is_int($y) && is_int($z));\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq2vh5ac.php:22\n\
    Stack trace:\n#0 /tmp/tmpwq2vh5ac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwq2vh5ac.php\
    \ on line 22\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z || $y === $z) {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3c392wb.php:26\n\
    Stack trace:\n#0 /tmp/tmpy3c392wb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy3c392wb.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lw18dxt.php:33\n\
    Stack trace:\n#0 /tmp/tmp0lw18dxt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0lw18dxt.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c |>\nIt does\
    \ work, try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c |>\nIt doesn't work.\
    \ Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c |>\nIt does work, try it\
    \ with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8a89a6hl.php on line 26

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z + 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x) * ($z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x)) {\n        return true;\n    }\n  \
    \  if ($x == $y * ($z - $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z - $x) * ($z + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z + $x) * ($z - $x)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z + $x) * ($z + $x) * ($z + $x))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * ($z - $x) * ($z\
    \ - $x\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe_3sj4rs.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdrezz5e.php:34\n\
    Stack trace:\n#0 /tmp/tmpwdrezz5e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwdrezz5e.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z || $y == $z) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz263qz_r.php:27\n\
    Stack trace:\n#0 /tmp/tmpz263qz_r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz263qz_r.php\
    \ on line 27\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z + 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x) * ($z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x)) {\n        return true;\n    }\n  \
    \  if ($x == $y * ($z - $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z - $x) * ($z + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z + $x) * ($z - $x)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z + $x) * ($z + $x) * ($z + $x))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * ($z - $x) * ($z\
    \ - $x\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe_3sj4rs.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $sum = $x + $y;\n    if ($sum == $z) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_dysrr.php:26\n\
    Stack trace:\n#0 /tmp/tmpyp_dysrr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyp_dysrr.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z / $y) {\n        return true;\n    }\n    if ($x == $z\
    \ % $y) {\n        return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,math |>\n<code>\n<?php\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoxonedue.php on line 44

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $sum = $x + $y;\n    if ($sum == $z) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_dysrr.php:26\n\
    Stack trace:\n#0 /tmp/tmpyp_dysrr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyp_dysrr.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) * ($x - 1))\
    \ {\n        return true;\n    }\n    if ($x == $y / ($z - 1) * ($x - 1)) {\n\
    \        return true;\n    }\n    if ($x == $y % ($z - 1) * ($x - 1)) {\n    \
    \    return true;\n    }\n    if ($x == $y ** ($z - 1) * ($x - 1)) {\n       \
    \ return true;\n    }\n    if ($x == $y * ($z - 1) / ($x - 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) / ($x - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y % ($z - 1) / ($x - 1)) {\n        return true;\n    }\n\
    \    if ($x == $y ** ($z - 1) / ($x - 1)) {\n        return true;\n    }\n   \
    \ if ($x == $y * ($z - 1) % ($x - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y / ($z - 1) % ($x - 1)) {\n        return true;\n    }\n    if ($x == $y\
    \ % ($z - 1) % ($x - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z\
    \ - 1) % ($x - 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** ($x - 1)) {\n        return true;\n    }\n    if ($x == $y / ($z - 1) **\
    \ ($x - 1)) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** ($x\
    \ - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** ($x -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) * ($x - 1) **\
    \ ($y - 1)) {\n        return true;\n    }\n    if ($x == $y / ($z - 1) * ($x\
    \ - 1) ** ($y - 1)) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ \nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp24ou75v1.php on line 100

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $sum = $x + $y;\n    if ($sum == $z) {\n        return true;\n    }\n\
    \    if ($sum > $z) {\n        return false;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0iwr7mo.php:29\n\
    Stack trace:\n#0 /tmp/tmpp0iwr7mo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpp0iwr7mo.php\
    \ on line 29\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $x_int = (int)$x;\n    $y_int = (int)$y;\n    $z_int = (int)$z;\n   \
    \ if ($x_int == $y_int + $z_int) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9f8cmyng.php:28\n\
    Stack trace:\n#0 /tmp/tmp9f8cmyng.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9f8cmyng.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z + 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x) * ($z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x)) {\n        return true;\n    }\n  \
    \  if ($x == $y * ($z - $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z - $x) * ($z + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z + $x) * ($z - $x)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z + $x) * ($z + $x) * ($z + $x))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * ($z - $x) * ($z\
    \ - $x\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe_3sj4rs.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z * $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z / $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z % $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z ** $z)) {\n        return true;\n    }\n    if ($x == $y * ($z *\
    \ ($z - 1))) {\n        return true;\n    }\n    if ($x == $y * ($z * ($z + 1)))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z * ($z - $z))) {\n   \
    \     return true;\n    }\n    if ($x == $y * ($z * ($z + $z))) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z * ($z * $z))) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z * ($z / $z))) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z * ($z % $z))) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z * ($z ** $z))) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z * ($z * ($z - 1)))) {\n        return true;\n    }\n    if ($x == $y *\
    \ ($z * ($z * ($z + 1)))) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ * ($z * ($z - $z)))) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ * ($z * ($z + $z)))) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ * ($z * ($z * $z)))) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ * ($z * ($z / $z)))) {\n        return true;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfdutgbom.php on line 100

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuej6y1v.php:29\n\
    Stack trace:\n#0 /tmp/tmpfuej6y1v.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfuej6y1v.php\
    \ on line 29\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z * $y) {\n        return true;\n    }\n    if ($x == $z\
    \ / $y) {\n        return true;\n    }\n    if ($x == $z % $y) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1afnyzj.php:54\n\
    Stack trace:\n#0 /tmp/tmpv1afnyzj.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpv1afnyzj.php\
    \ on line 54\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fd5v57k.php:49\n\
    Stack trace:\n#0 /tmp/tmp9fd5v57k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9fd5v57k.php\
    \ on line 49\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z / $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z % $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z ** $z)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z * ($z - 1))) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z * ($z + 1))) {\n        return true;\n    }\n    if ($x == $y * ($z *\
    \ ($z - $z))) {\n        return true;\n    }\n    if ($x == $y * ($z * ($z + $z)))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z * ($z / $z))) {\n   \
    \     return true;\n    }\n    if ($x == $y * ($z * ($z % $z))) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z * ($z ** $z))) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z * ($z * ($z - 1)))) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z * ($z * ($z + 1)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z - $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z + $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z / $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z % $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z ** $z)))) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z * ($z * ($z\nfunction candidate(...$args) {\n  \
    \  return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7brlw2_w.php on line 97

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) * ($z - 2)) {\n        return true;\n    }\n    if ($x\
    \ == $y / ($z - 1) * ($z - 2)) {\n        return true;\n    }\n    if ($x == $y\
    \ % ($z - 1) * ($z - 2)) {\n        return true;\n    }\n    if ($x == $y ** ($z\
    \ - 1) * ($z - 2)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ / ($z - 2)) {\n        return true;\n    }\n    if ($x == $y / ($z - 1) / ($z\
    \ - 2)) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) / ($z - 2))\
    \ {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) / ($z - 2)) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) % ($z - 2)) {\n    \
    \    return true;\n    }\n    if ($x == $y / ($z - 1) % ($z - 2)) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) % ($z - 2)) {\n        return true;\n\
    \    }\n    if ($x == $y ** ($z - 1) % ($z - 2)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - 1) ** ($z - 2)) {\n        return true;\n    }\n\
    \    if ($x == $y / ($z - 1) ** ($z - 2)) {\n        return true;\n    }\n   \
    \ if ($\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0s9l4jro.php on line 100

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vvzyimc.php:27\n\
    Stack trace:\n#0 /tmp/tmp0vvzyimc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0vvzyimc.php\
    \ on line 27\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y\
    \ / ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ ** 3) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 3) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) ** 4) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) ** 4) {\n        return true;\n  \
    \  }\n    if ($x == $y % ($z - 1) ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $y ** ($z - 1) ** 4) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - 1) ** 5) {\n        return true;\n    }\n    if ($x == $y / ($z - 1)\
    \ ** 5) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** 5) {\n\
    \        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 5) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - 1) ** 6) {\n        return true;\n  \
    \  }\n    if ($x == $y / ($z - 1) ** 6) {\n        return true;\n    }\n    if\
    \ ($x == $y % ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y\
    \ ** ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** 7) {\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe8zs_5tj.php on line 123

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `any_int(3.6, -2.2,\
    \ 2)`.\n<|/ c |>\n<| c |>\nIt works. Try it with `any_int(3.6, -2.2, 2)`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c\
    \ |>\n<| c |>\nIt works. Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c\
    \ |>\nIt works. Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmf0idexw.php on line 22

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z / $x)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z % $x)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z ** $x)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z * ($x - 1))) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z * ($x + 1))) {\n        return true;\n    }\n    if ($x == $y * ($z *\
    \ ($x - $z))) {\n        return true;\n    }\n    if ($x == $y * ($z * ($x + $z)))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z * ($z - $x))) {\n   \
    \     return true;\n    }\n    if ($x == $y * ($z * ($z + $x))) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z * ($z / $x))) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z * ($z % $x))) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z * ($z ** $x))) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z * ($z * ($x - 1)))) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z * ($z * ($x + 1)))) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z * ($z * ($x - $z)))) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z * ($z * ($x + $z)))) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z * ($z * ($z - $x)))) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z * ($z * ($z + $x)))) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z * ($\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjyr8wkhd.php on line 100

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z || $y === $z) {\n        return true;\n  \
    \  }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3c392wb.php:26\n\
    Stack trace:\n#0 /tmp/tmpy3c392wb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy3c392wb.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fd5v57k.php:49\n\
    Stack trace:\n#0 /tmp/tmp9fd5v57k.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9fd5v57k.php\
    \ on line 49\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp894bjiad.php:28\n\
    Stack trace:\n#0 /tmp/tmp894bjiad.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp894bjiad.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphniaopb0.php:46\n\
    Stack trace:\n#0 /tmp/tmphniaopb0.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphniaopb0.php\
    \ on line 46\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z / 2)) {\n        return true;\n    }\n    if ($x == $y * ($z % 2))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z ** 2)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z ** 3)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z ** 4)) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z ** 5)) {\n        return true;\n    }\n    if ($x == $y * ($z ** 6)) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z ** 7)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z ** 8)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z ** 9)) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z ** 10)) {\n        return true;\n    }\n    if ($x == $y * ($z ** 11))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z ** 12)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z ** 13)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z ** 14)) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z ** 15)) {\n        return true;\n    }\n    if ($x == $y * ($z ** 16))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z ** 17)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z ** 18)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z ** 19)) {\n        return true;\n    }\n    if ($x ==\
    \ $y * ($z ** 20)) {\n        return true;\n    }\n    if ($x == $y * ($z ** 21))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z ** 22)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z ** 23)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z ** 24)) {\n        return true;\n    }\n    if (\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp52fgp9eo.php on line 115

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y / ($z - 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y % ($z - 1)) {\n        return true;\n    }\n    if ($x == $y ** ($z -\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - 1) ** 2) {\n  \
    \      return true;\n    }\n    if ($x == $y / ($z - 1) ** 2) {\n        return\
    \ true;\n    }\n    if ($x == $y % ($z - 1) ** 2) {\n        return true;\n  \
    \  }\n    if ($x == $y ** ($z - 1) ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y\
    \ / ($z - 1) ** 3) {\n        return true;\n    }\n    if ($x == $y % ($z - 1)\
    \ ** 3) {\n        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 3) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1) ** 4) {\n        return\
    \ true;\n    }\n    if ($x == $y / ($z - 1) ** 4) {\n        return true;\n  \
    \  }\n    if ($x == $y % ($z - 1) ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $y ** ($z - 1) ** 4) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - 1) ** 5) {\n        return true;\n    }\n    if ($x == $y / ($z - 1)\
    \ ** 5) {\n        return true;\n    }\n    if ($x == $y % ($z - 1) ** 5) {\n\
    \        return true;\n    }\n    if ($x == $y ** ($z - 1) ** 5) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - 1) ** 6) {\n        return true;\n  \
    \  }\n    if ($x == $y / ($z - 1) ** 6) {\n        return true;\n    }\n    if\
    \ ($x == $y % ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y\
    \ ** ($z - 1) ** 6) {\n        return true;\n    }\n    if ($x == $y * ($z - 1)\
    \ ** 7) {\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe8zs_5tj.php on line 123

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x < $y ||\
    \ $y < $z) {\n        return false;\n    }\n    if ($x < $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nznewj2.php:32\n\
    Stack trace:\n#0 /tmp/tmp3nznewj2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3nznewj2.php\
    \ on line 32\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdrezz5e.php:34\n\
    Stack trace:\n#0 /tmp/tmpwdrezz5e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwdrezz5e.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_i3y3x8.php:31\n\
    Stack trace:\n#0 /tmp/tmps_i3y3x8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmps_i3y3x8.php\
    \ on line 31\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z / $y) {\n        return true;\n    }\n    if ($x == $z\
    \ % $y) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm23ujinh.php:51\n\
    Stack trace:\n#0 /tmp/tmpm23ujinh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpm23ujinh.php\
    \ on line 51\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `any_int(3.6, -2.2, 2)`\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it with `any_int(3.6, -2.2, 2)` which returns `true`.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work. Try it with `any_int(3.6, -2.2, 2)`\n<|/ c |>\n<| c |>\n\
    It works. I tested it with `any_int(3.6, -2.2, 2)` which returns `true`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work. Try it with `any_int(3.6, -2.2, 2)`\n<|/ c |>\n\
    <| a tags=php,math |>\n<code>\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6i23hqwf.php on line 26

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if ($y\
    \ === $z) {\n        return true;\n    }\n    if ($x === $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpheo_ehyf.php:31\n\
    Stack trace:\n#0 /tmp/tmpheo_ehyf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpheo_ehyf.php\
    \ on line 31\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    if ($x == $z\
    \ / $y) {\n        return true;\n    }\n    if ($x == $z % $y) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt58exu2.php:54\n\
    Stack trace:\n#0 /tmp/tmptt58exu2.php(64): test()\n#1 {main}\n  thrown in /tmp/tmptt58exu2.php\
    \ on line 54\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    if ($x == $z\
    \ / $y) {\n        return true;\n    }\n    if ($x == $z % $y) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe\
    \ this would fail for `any_int(3.6, -2.2, 2)` since `3.6 - 2.2 = -0.6` which is\
    \ not equal to `2`.\n<|/ c |>\n<| c |>\nI believe this would fail for `any_int(3.6,\
    \ -2.2, 2)` since `3.6 - 2.2 = -0.6` which is not equal to `2`.\n<|/ c |>\n<|\
    \ c |>\nYes, I believe it would. But I believe that would not be a problem for\
    \ OP's purposes.\n<|/ c |>\n<| c |>\nI believe this would fail for `any_int(3.6,\
    \ -2.2, 2)` since `3.6 - 2.2 = -0.6` which is not equal to `2`.\n<|/ c |>\n<|\
    \ c |>\nI believe this would fail for `any_int(3.6, -2.2, 2)` since `3.6 - 2.2\
    \ = -0.6` which is not equal to `2`.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3jr4a3eq.php on line 47

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if ($y\
    \ === $z) {\n        return true;\n    }\n    if ($x === $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplok2idnf.php:32\n\
    Stack trace:\n#0 /tmp/tmplok2idnf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplok2idnf.php\
    \ on line 32\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    return ($x == $y + $z && is_int($x) && is_int($y) && is_int($z));\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq2vh5ac.php:22\n\
    Stack trace:\n#0 /tmp/tmpwq2vh5ac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwq2vh5ac.php\
    \ on line 22\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `any_int(3.6, -2.2, 2)`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the function to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the function to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the function to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the function to the answer.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoueljmue.php on line 26

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$a = 5;\n$b = 3;\n$c = 7;\n$sum = $a + $b + $c;\n$sum2 =\
    \ $a + $b - $c;\n$sum3 = $a + $b * $c;\n$sum4 = $a + $b % $c;\n$sum5 = $a + $b\
    \ % $c;\n$sum6 = $a + $b / $c;\n$sum7 = $a + $b / $c;\n$sum8 = $a + $b % $c;\n\
    $sum9 = $a + $b % $c;\n$sum10 = $a + $b % $c;\n$sum11 = $a + $b % $c;\n$sum12\
    \ = $a + $b % $c;\n$sum13 = $a + $b % $c;\n$sum14 = $a + $b % $c;\n$sum15 = $a\
    \ + $b % $c;\n$sum16 = $a + $b % $c;\n$sum17 = $a + $b % $c;\n$sum18 = $a + $b\
    \ % $c;\n$sum19 = $a + $b % $c;\n$sum20 = $a + $b % $c;\n$sum21 = $a + $b % $c;\n\
    $sum22 = $a + $b % $c;\n$sum23 = $a + $b % $c;\n$sum24 = $a + $b % $c;\n$sum25\
    \ = $a + $b % $c;\n$sum26 = $a + $b % $c;\n$sum27 = $a + $b % $c;\n$sum28 = $a\
    \ + $b % $c;\n$sum29 = $a + $b % $c;\n$sum30 = $a + $b % $c;\n$sum31 = $a + $b\
    \ % $c;\n$sum32 = $a + $b % $c;\n$sum33 = $a + $b % $c;\n$sum34 = $a + $b % $c;\n\
    $sum35 = $a + $b % $c;\n$sum36 = $a + $b % $c;\n$sum37 = $a + $b % $c;\n$sum38\
    \ = $a + $b % $c;\n$sum39 = $a + $b % $c;\n$sum40 = $a + $b % $c;\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyok9jaqb.php on line 26

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $sum = $x + $y;\n    if ($sum == $z) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_dysrr.php:26\n\
    Stack trace:\n#0 /tmp/tmpyp_dysrr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyp_dysrr.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfuej6y1v.php:29\n\
    Stack trace:\n#0 /tmp/tmpfuej6y1v.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfuej6y1v.php\
    \ on line 29\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately,\
    \ this doesn't work when there are more than 3 numbers. For example, `any_int(5,\
    \ 2, 7, 8)` returns `true` instead of `false`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to account for that.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately, this doesn't work when there are more than 3\
    \ numbers. For example, `any_int(5, 2, 7, 8)` returns `true` instead of `false`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| a tags=php |>\nI believe this should work:\n<code>\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvhivqi91.php on line 29

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z * $y) {\n \
    \       return true;\n    }\n    if ($x == $z / $y) {\n        return true;\n\
    \    }\n    if ($x == $z % $y) {\n        return true;\n    }\n    if ($x == $z\
    \ / $y) {\n        return true;\n    }\n    if ($x == $z % $y) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl648aujr.php:55\n\
    Stack trace:\n#0 /tmp/tmpl648aujr.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpl648aujr.php\
    \ on line 55\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z + 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x) * ($z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x)) {\n        return true;\n    }\n  \
    \  if ($x == $y * ($z - $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z - $x) * ($z + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z + $x) * ($z - $x)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z + $x) * ($z + $x) * ($z + $x))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * ($z - $x) * ($z\
    \ - $x\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe_3sj4rs.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9f6u7g1.php:37\n\
    Stack trace:\n#0 /tmp/tmpg9f6u7g1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpg9f6u7g1.php\
    \ on line 37\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z / $y) {\n        return true;\n    }\n    if ($x == $z\
    \ % $y) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm23ujinh.php:51\n\
    Stack trace:\n#0 /tmp/tmpm23ujinh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpm23ujinh.php\
    \ on line 51\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xkmhd8p.php:26\n\
    Stack trace:\n#0 /tmp/tmp6xkmhd8p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xkmhd8p.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z || $y === $z) {\n        return true;\n  \
    \  }\n    if (is_float($x) && is_float($y) && is_float($z)) {\n        return\
    \ $x === $y || $x === $z || $y === $z;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_6yhatj.php:29\n\
    Stack trace:\n#0 /tmp/tmp8_6yhatj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8_6yhatj.php\
    \ on line 29\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x + 1)) {\n        return true;\n    }\n    if ($x == $y * ($z\
    \ - $x - 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y\
    \ + 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y - 1))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z + 1))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z - 1))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z - $x +\
    \ 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z -\
    \ $x - 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x - $y -\
    \ $z - $x - $y + 1)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $x - $y - $z - $x - $y - 1)) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z - $x - $y - $z - $x - $y - $z + 1)) {\n        return true;\n    }\n \
    \   if ($x == $y * ($z - $x - $y - $z - $x - $y - $z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $x - $y - $z - $x - $y - $z - $x + 1)) {\n  \
    \      return true;\n    }\n    if ($x == $y * ($z - $x - $y - $z - $x - $y -\
    \ $z - $x - 1)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x -\
    \ $y - $z - $x - $y - $z - $x - $y + 1)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z - $x - $y - $z - $x - $y - $z - $x - $y - 1)) {\n        return\
    \ true;\n    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm55zg76u.php on line 104

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    return ($x == $y + $z && is_int($x) && is_int($y) && is_int($z));\n}\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq2vh5ac.php:22\n\
    Stack trace:\n#0 /tmp/tmpwq2vh5ac.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwq2vh5ac.php\
    \ on line 22\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't seem to work. `any_int(5, 2, 7)` returns `true` but `any_int(3, 2, 2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI added a version that works with floats\
    \ and integers. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with floats and integers. I tested it and it works.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr2ugmgi2.php on line 26

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if ($y\
    \ === $z) {\n        return true;\n    }\n    if ($x === $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplok2idnf.php:32\n\
    Stack trace:\n#0 /tmp/tmplok2idnf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplok2idnf.php\
    \ on line 32\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x == $y * ($z -\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z + $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z - $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $z)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z - $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z + $\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj13efww8.php on line 109

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo8v8nhz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvo8v8nhz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvo8v8nhz.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $x_is_int = (int) $x;\n    $y_is_int = (int) $y;\n    $z_is_int = (int)\
    \ $z;\n    if ($x_is_int == $y_is_int && $x_is_int == $z_is_int) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7dimxtt.php:28\n\
    Stack trace:\n#0 /tmp/tmpi7dimxtt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi7dimxtt.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    $sum = $x + $y;\n    $sum2 = $sum * $sum;\n    $sum3 = $sum2 * $sum;\n\
    \    $sum4 = $sum3 * $sum;\n    $sum5 = $sum4 * $sum;\n    $sum6 = $sum5 * $sum;\n\
    \    $sum7 = $sum6 * $sum;\n    $sum8 = $sum7 * $sum;\n    $sum9 = $sum8 * $sum;\n\
    \    $sum10 = $sum9 * $sum;\n    $sum11 = $sum10 * $sum;\n    $sum12 = $sum11\
    \ * $sum;\n    $sum13 = $sum12 * $sum;\n    $sum14 = $sum13 * $sum;\n    $sum15\
    \ = $sum14 * $sum;\n    $sum16 = $sum15 * $sum;\n    $sum17 = $sum16 * $sum;\n\
    \    $sum18 = $sum17 * $sum;\n    $sum19 = $sum18 * $sum;\n    $sum20 = $sum19\
    \ * $sum;\n    $sum21 = $sum20 * $sum;\n    $sum22 = $sum21 * $sum;\n    $sum23\
    \ = $sum22 * $sum;\n    $sum24 = $sum23 * $sum;\n    $sum25 = $sum24 * $sum;\n\
    \    $sum26 = $sum25 * $sum;\n    $sum27 = $sum26 * $sum;\n    $sum28 = $sum27\
    \ * $sum;\n    $sum29 = $sum28 * $sum;\n    $sum30 = $sum29 * $sum;\n    $sum31\
    \ = $sum30 * $sum;\n    $sum32 = $sum31 * $sum;\n    $sum33 = $sum32 * $sum;\n\
    \    $sum34 = $sum33 * $sum;\n    $sum35 = $sum34 * $sum;\n    $sum36 = $sum35\
    \ * $sum;\n    $sum37 = $sum36 * $sum;\n    $sum38 = $sum37 * $sum;\n    $sum39\
    \ = $sum38 * $sum;\n    $sum40 = $sum39 * $sum;\n    $sum41 = $sum40 * $sum;\n\
    \    $sum42 = $sum41 * $sum;\n    $sum43 = $sum42 * $sum;\n    $sum44 = $sum43\
    \ * $sum;\n    $sum45 = $sum44 * $sum;\n    $sum46 = $sum45 * $sum;\n    $sum47\
    \ = $sum46 * $sum;\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuyl9dxq7.php on line 80

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z) {\n        return true;\n    }\n    if ($y\
    \ == $z) {\n        return true;\n    }\n    if ($x == $z) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5es32qr.php:31\n\
    Stack trace:\n#0 /tmp/tmpa5es32qr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa5es32qr.php\
    \ on line 31\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $x)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $x)) {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z + $x) * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z + 1)) {\n        return true;\n   \
    \ }\n    if ($x == $y * ($z - $x) * ($z - $x)) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x)) {\n        return true;\n    }\n  \
    \  if ($x == $y * ($z - $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z - $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z + $x) * ($z + $x) * $z) {\n        return true;\n    }\n\
    \    if ($x == $y * ($z - $x) * ($z - $x) * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + $x) * ($z - $x) * ($z + 1)) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z - $x) * ($z + $x) * ($z - $x)) {\n    \
    \    return true;\n    }\n    if ($x == $y * ($z + $x) * ($z + $x) * ($z + $x))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z - $x) * ($z - $x) * ($z\
    \ - $x\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe_3sj4rs.php on line 88

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vvzyimc.php:27\n\
    Stack trace:\n#0 /tmp/tmp0vvzyimc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0vvzyimc.php\
    \ on line 27\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $y ** $z) {\n\
    \        return true;\n    }\n    if ($x == $y * ($z - 1)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z + 1)) {\n        return true;\n    }\n    if ($x\
    \ == $y * ($z - $z)) {\n        return true;\n    }\n    if ($x == $y * ($z +\
    \ $z)) {\n        return true;\n    }\n    if ($x == $y * ($z / $z)) {\n     \
    \   return true;\n    }\n    if ($x == $y * ($z % $z)) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z ** $z)) {\n        return true;\n    }\n    if\
    \ ($x == $y * ($z * ($z - 1))) {\n        return true;\n    }\n    if ($x == $y\
    \ * ($z * ($z + 1))) {\n        return true;\n    }\n    if ($x == $y * ($z *\
    \ ($z - $z))) {\n        return true;\n    }\n    if ($x == $y * ($z * ($z + $z)))\
    \ {\n        return true;\n    }\n    if ($x == $y * ($z * ($z / $z))) {\n   \
    \     return true;\n    }\n    if ($x == $y * ($z * ($z % $z))) {\n        return\
    \ true;\n    }\n    if ($x == $y * ($z * ($z ** $z))) {\n        return true;\n\
    \    }\n    if ($x == $y * ($z * ($z * ($z - 1)))) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z * ($z * ($z + 1)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z - $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z + $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z / $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z % $z)))) {\n        return true;\n  \
    \  }\n    if ($x == $y * ($z * ($z * ($z ** $z)))) {\n        return true;\n \
    \   }\n    if ($x == $y * ($z * ($z * ($z\nfunction candidate(...$args) {\n  \
    \  return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7brlw2_w.php on line 97

    '
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y * $z) {\n        return\
    \ true;\n    }\n    if ($x == $y / $z) {\n        return true;\n    }\n    if\
    \ ($x == $y % $z) {\n        return true;\n    }\n    if ($x == $z / $y) {\n \
    \       return true;\n    }\n    if ($x == $z % $y) {\n        return true;\n\
    \    }\n    if ($x == $z / $y) {\n        return true;\n    }\n    if ($x == $z\
    \ % $y) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm23ujinh.php:51\n\
    Stack trace:\n#0 /tmp/tmpm23ujinh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpm23ujinh.php\
    \ on line 51\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        if (is_int($x) && is_int($y) && is_int($z))\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vvzyimc.php:27\n\
    Stack trace:\n#0 /tmp/tmp0vvzyimc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0vvzyimc.php\
    \ on line 27\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x === $y || $x === $z) {\n        return true;\n    }\n    if ($y\
    \ === $z) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmperrl6_4d.php:28\n\
    Stack trace:\n#0 /tmp/tmperrl6_4d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmperrl6_4d.php\
    \ on line 28\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    if ($x == $y + $z) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpk9e_o_.php:36\n\
    Stack trace:\n#0 /tmp/tmpcpk9e_o_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcpk9e_o_.php\
    \ on line 36\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    return ($x == $y || $x == $z || $y == $z) ? true : false;\n}\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljdyc7l0.php:22\n\
    Stack trace:\n#0 /tmp/tmpljdyc7l0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpljdyc7l0.php\
    \ on line 22\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3y07ykru.php:34\n\
    Stack trace:\n#0 /tmp/tmp3y07ykru.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3y07ykru.php\
    \ on line 34\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y || $x == $z || $y == $z) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvq5dx0g.php:26\n\
    Stack trace:\n#0 /tmp/tmprvq5dx0g.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprvq5dx0g.php\
    \ on line 26\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    if ($x == $y -\
    \ $z) {\n        return true;\n    }\n    if ($x == $y - $z) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1hdds3f.php:33\n\
    Stack trace:\n#0 /tmp/tmpd1hdds3f.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd1hdds3f.php\
    \ on line 33\n"
  timestamp: 1659730368
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int($x, $y, $z)\
    \ {\n    if ($x == $y + $z) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19qvkod_.php:25\n\
    Stack trace:\n#0 /tmp/tmp19qvkod_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp19qvkod_.php\
    \ on line 25\n"
  timestamp: 1659730368
