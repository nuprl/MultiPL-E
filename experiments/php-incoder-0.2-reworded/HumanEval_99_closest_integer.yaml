name: HumanEval_99_closest_integer
language: php
prompt: "<?php\n// Create a function that takes a value (string) representing a number\n\
  // and returns the closest integer to it. If the number is equidistant\n// from\
  \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
  10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
  \ from zero means that if the given number is equidistant\n// from two integers,\
  \ the one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer($value) {\n"
tests: "function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = floatval($value);\n\
    \  $closest = round($value, 0);\n  if ($closest == $value) {\n    return $value;\n\
    \  }\n  $difference = $value - $closest;\n  if ($difference > 0) {\n    return\
    \ $closest;\n  }\n  return $value - 1;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value && $closest_integer > 0) {\n    $closest_integer\
    \ = ($closest_integer + $value) / 2;\n  }\n  return $closest_integer;\n}\n", " \
    \   $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer < $value ? $closest_integer + 1 : $closest_integer - 1;\n\
    \    return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value)\
    \ : ceil($value);\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  while ($closest_integer == $value)\
    \ {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n    return $closest_integer;\n\
    }\n", "  $value = floatval($value);\n  $closest = null;\n  $closestDiff = null;\n\
    \  $closestDiffAbs = null;\n  $closestDiffAbsMax = null;\n  $closestDiffAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbs =\
    \ null;\n  $closestDiffAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMax", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n  while ($closest_integer\
    \ - $value >= 1) {\n    $closest_integer -= 1;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  }\n  return $closest_integer;\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  // Convert the value to a float\n  $value = floatval($value);\n  // If\
    \ the value is equidistant from two integers, round it away from zero.\n  if ($value\
    \ % 1 == 0) {\n    return round($value);\n  }\n  // Otherwise, return the integer\
    \ value.\n  return $value;\n}", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? $closest_integer : $closest_integer\
    \ + 1;\n    return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $value <= $closest_integer ? $value : $closest_integer;\n\
    \  $closest_integer = $value >= $closest_integer ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest = $value;\n\
    \  $closestDiff = abs($value - $closest);\n  foreach ($values as $value) {\n \
    \   $diff = $value - $closest;\n    if ($diff < $closestDiff) {\n      $closestDiff\
    \ = $diff;\n      $closest = $value;\n    }\n  }\n  return $closest;\n}", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0\
    \ && $closest_integer < $value) {\n    $closest_integer = $closest_integer + 1;\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest =\
    \ null;\n  $closestDistance = null;\n  $closestDistanceAbs = null;\n  $closestDistanceAbsSq\
    \ = null;\n  $closestDistanceSq = null;\n  $closestDistanceSqAbs = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqMin = null;\n  $closestDistanceSqMinAbs = null;\n\
    \  $closestDistanceSqMinAbsSq = null;\n  $closestDistanceSqMax = null;\n  $closestDistanceSqMaxAbs\
    \ = null;\n  $closestDistanceSqMaxAbsSq = null;\n  $closestDistanceSqMinMax =\
    \ null;\n  $closestDistanceSqMinMaxAbs = null;\n  $closestDistanceSqMinMaxAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxSq = null;\n  $closestDistanceSqMinMaxSqAbs\
    \ = null;\n  $closestDistanceSqMinMaxSqAbsSq = null;\n  $closestDistanceSqMinMaxSqMin\
    \ = null;\n  $closestDistanceSqMinMaxSqMinAbs = null;\n  $closestDistanceSqMinMaxSqMinAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMax = null;\n  $closestDistanceSqMinMaxSqMaxAbs\
    \ = null;\n  $closestDistanceSqMinMaxSqMaxAbsSq = null;\n  $closestDistanceSqMinMaxSqMaxSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMaxSqAbs = null;\n  $closestDistanceSqMinMaxSqMaxSqAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMax = null;\n  $closestDistanceSqMinMaxSqMinMaxAbs\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxAbsSq = null;\n  $closestDistanceSqMinMaxSqMinMaxSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqAbs = null;\n  $closestDistanceSqMinMaxSqMinMaxSqAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMin = null;\n  $closestDistanceSqMinMaxSqMinMaxSqAbs\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqAbsSq = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMin\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMinAbs = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMinAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMax = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMaxAbs\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMaxAbsSq = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMaxSq\
    \ = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMaxSqAbs = null;\n  $closestDistanceSqMinMaxSqMinMaxSqMaxSqAbs",
  "  $value = abs($value);\n  $closest = null;\n  $closestDistance = null;\n  foreach\
    \ ($values as $v) {\n    $d = abs($v - $value);\n    if ($d < $closestDistance)\
    \ {\n      $closestDistance = $d;\n      $closest = $v;\n    }\n  }\n  return\
    \ $closest;\n}", "  // If the given value is an integer, return it.\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is a float, convert it\
    \ to a string and strip the\n  // decimal point. Otherwise, return the original\
    \ value.\n  $value = strval($value);\n  $value = preg_replace('/\\./', '', $value);\n\
    \  return intval($value);\n}", "  $value = abs($value);\n  $closest_integer =\
    \ $value;\n  $closest_integer = ($value - $closest_integer) < 0.5 ? $closest_integer\
    \ + 1 : $closest_integer - 1;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value\
    \ ? $closest_integer : $value);\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  foreach ($GLOBALS['hooks']['Filter_Plugin_Admin_System_Closest_Integer']\
    \ as $fpname => $fpclass) {\n    $fpreturn = $fpclass->invoke($value);\n    if\
    \ ($fpreturn !== NULL) {\n      $closest_integer = $fpreturn;\n    }\n  }\n  return\
    \ $closest_integer;\n}\n\n/**\n * Returns the number of days between two dates\n\
    \ *\n * @param string $date1 The first date\n * @param string $date2 The second\
    \ date\n *\n * @return int The number of days between the two dates\n */", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ > 0 ? $closest_integer : 0;\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach (range(0, 10) as $i) {\n\
    \    $diff = $value - $i;\n    if ($diff < 0) {\n      $diff = -$diff;\n    }\n\
    \    if ($closestDiff === null || $diff < $closestDiff) {\n      $closestDiff\
    \ = $diff;\n      $closest = $i;\n    }\n  }\n  return $closest;\n}\n", "  $value\
    \ = floatval($value);\n  $difference = abs($value - $value);\n  $closest = $value;\n\
    \  if ($difference == 0) {\n    return $value;\n  }\n  foreach ([10, 5, 2.5, 1.2,\
    \ 0.8, 0.6, 0.4, 0.2, 0.0] as $factor) {\n    if ($difference < $factor * $closest)\
    \ {\n      $closest = $factor;\n    }\n  }\n  return $closest;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"10\", \"\
    15.3\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\",\
    \ \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\"\
    , \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14.5\", \"14", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value >=\
    \ $closest_integer) ? $value : $closest_integer;\n  $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == 0) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < 1) {\n    $closest_integer = $closest_integer * 10;\n  }\n  while ($closest_integer\
    \ > 9) {\n    $closest_integer = $closest_integer / 10;\n  }\n  return $closest_integer;\n\
    }\n", "  // If the given value is negative, return 0\n  if ($value < 0) {\n  \
    \  return 0;\n  }\n\n  // If the given value is equidistant from two integers,\
    \ round it away\n  // from zero.\n  if (abs($value) == abs($value % 10)) {\n \
    \   return round($value);\n  }\n\n  // Otherwise, return the closest integer to\
    \ the given value\n  return round($value / 10) * 10;\n}", "  // Convert the value\
    \ to a float\n  $value = floatval($value);\n  // If the value is zero, return\
    \ zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is negative,\
    \ return the negative of the closest integer\n  if ($value < 0) {\n    return\
    \ -closest_integer(abs($value));\n  }\n  // If the value is positive, return the\
    \ closest integer\n  return round($value);\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `closest_integer(\"\
    -10\")`.\n<|/ c |>\n<| c |>\nI added a note to the answer. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for\
    \ positive numbers but for negative numbers it returns `0` instead of `-`\n<|/\
    \ c |>\n<| c |>\nI added a note to the answer. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works fine for positive numbers\
    \ but for negative numbers it returns `0` instead of `-`\n<|/ c |>\n<| a tags=php,rounding\
    \ |>\n<code>", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == 0) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n  return $closest_integer;\n}\n", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n  $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n  return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value < $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer < $value) ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == 0) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < 1) {\n    $closest_integer = $closest_integer * 10;\n\
    \  }\n  while ($closest_integer > 9) {\n    $closest_integer = $closest_integer\
    \ / 10;\n  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value - floor($value)) < 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest = null;\n  $closestDistance = null;\n\
    \  foreach ($integers as $integer) {\n    $distance = $integer - $value;\n   \
    \ if ($closestDistance === null || $distance < $closestDistance) {\n      $closest\
    \ = $integer;\n      $closestDistance = $distance;\n    }\n  }\n  return $closest;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value - floor($value)) < 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ == $value || $closest_integer == 0) {\n    $closest_integer = floor($value /\
    \ 10);\n  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer < $value ? $closest_integer\
    \ : $value);\n  $closest_integer = ($closest_integer < $value ? $value : $closest_integer);\n\
    \  return $closest_integer;\n}\n", "  return round($value);\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value - 1) ? $value : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value + 1) ? $value : $closest_integer;\n  return $closest_integer;\n}",
  "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_", "  $value = abs($value);\n  $closest = null;\n\
    \  $closestDistance = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr\
    \ = null;\n  $closestDistanceAbs = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs\
    \ = null;\n  $closestDistanceSqr = null;\n  $closestDistanceAbs = null;\n  $closestDistance",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer + 1 : $closest_integer - 1;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ * 10;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $closest_integer : round($closest_integer);\n\
    \    return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $value ", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value / 2) {\n    $closest_integer++;\n\
    \  }\n  return $closest_integer;\n}\n", "  // If the given value is a string,\
    \ convert it to a number.\n  $value = floatval($value);\n  // If the given value\
    \ is negative, make it positive.\n  $value = $value >= 0 ? $value : -$value;\n\
    \  // If the given value is equidistant from two integers, round it away\n  //\
    \ from zero.\n  if ($value % 2 == 0) {\n    $value = round($value / 2);\n  }\n\
    \  // Return the given value.\n  return $value;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$number = $_POST['number'];\n$number =\
    \ number_format($number, 0, '', '');\n$number = str_replace(',', '', $number);\n\
    $number = str_replace('.', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number);\n\
    $number = str_replace(',', '', $number);\n$number = str_replace('%', '', $number",
  "  $value = floatval($value);\n  $closest = null;\n  $closestDistance = null;\n\
    \  $closestDistanceAbs = null;\n  $closestDistanceAbsSq = null;\n  $closestDistanceSq\
    \ = null;\n  $closestDistanceSqAbs = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqAbsSq = null;\n\
    \  $closestDistanceSqAbsSq = null;\n  $", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}", "  $value = abs($value);\n  $closest = null;\n\
    \  $closestDistance = null;\n  $closestDistanceAbs = abs($closestDistance);\n\
    \  foreach ($values as $v) {\n    $distance = $v - $value;\n    if ($distance\
    \ < $closestDistance) {\n      $closest = $v;\n      $closestDistance = $distance;\n\
    \    }\n  }\n  if ($closestDistance < $closestDistanceAbs) {\n    return $closest;\n\
    \  }\n  return $closest;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  // Convert the value to a float\n  $value = floatval($value);\n\n  //\
    \ If the value is negative, return 0\n  if ($value < 0) {\n    return 0;\n  }\n\
    \n  // If the value is zero, return it\n  if ($value == 0) {\n    return $value;\n\
    \  }\n\n  // If the value is positive, return the next integer\n  $next_integer\
    \ = ceil($value);\n\n  // If the next integer is equidistant from two integers,\
    \ round it away\n  // from zero\n  if ($next_integer == $value + 1) {\n    return\
    \ $next_integer;\n  }\n\n  // Return the next integer\n  return $next_integer;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `closest_integer(\"\
    10\")` returns `10` instead of `11`.\n<|/ c |>\n<| c |>\nIt does work. See the\
    \ example I posted: `closest_integer(\"10\")` returns `10` instead of `11`.\n\
    <|/ c |>\n<| c |>\nAh, I see what you mean. Yes, it does work. Thanks for your\
    \ help.\n<|/ c |>\n<| c |>\nI added a note at the bottom of my answer that explains\
    \ why this works.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_", "  $value = floatval($value);\n  $closest = null;\n  $closestDiff\
    \ = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax = null;\n  $closestDiffAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbs =\
    \ null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;", "  return\
    \ round($value);\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ * 10;\n  }\n  return $closest_integer;\n}\n", "  return round($value);\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ * 10;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  foreach (range(1,\
    \ $value) as $i) {\n    $closest_integer = $i;\n    if (abs($value - $i) < abs($value\
    \ - $closest_integer)) {\n      $closest_integer = $i;\n    }\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest = $value;\n  $closestDiff = abs($value\
    \ - $closest);\n  foreach ($values as $other) {\n    $otherDiff = abs($value -\
    \ $other);\n    if ($otherDiff < $closestDiff) {\n      $closest = $other;\n \
    \     $closestDiff = $otherDiff;\n    }\n  }\n  return $closest;\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| c |>\nThis doesn't work. Try it with `closest_integer(\"\
    10.5\")`. It returns `10` instead of `10`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it with `closest_integer(\"10.5\")`.\n<|/ c |>\n<| c |>\n: It doesn't work.\
    \ Try it with `closest_integer(\"10.5\")`.\n<|/ c |>\n<| c |>\n: It doesn't work.\
    \ Try it with `closest_integer(\"10.5\")`.\n<|/ c |>\n<| c |>\n: It doesn't work.\
    \ Try it with `closest_integer(\"10.5\")`.\n<|/ c |>\n<| a tags=php,math |>\n\
    <code>\n<?php", "  $value = abs($value);\n  $closest_integer = $value;\n  while\
    \ ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n\
    \    $closest_integer = $closest_integer * 10;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest = null;\n  $closestDiff = null;\n \
    \ $closestDiffAbs = null;\n  $closestDiffAbsMax = null;\n  $closestDiffAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbs =\
    \ null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0\
    \ && $closest_integer < $value) {\n    $closest_integer = $closest_integer + 1;\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer == $value && $closest_integer > 0) {\n    $closest_integer\
    \ -= 1;\n  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  while ($closest_integer - $value >= 1) {\n    $closest_integer = ($closest_integer\
    \ - $value) / 2;\n    $value = $closest_integer;\n  }\n  return $value;\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n  $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n  return $closest_integer;\n}\n", " \
    \ return round($value);\n}\n", "  $value = abs($value);\n  $closest_integer =\
    \ $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n\
    \  $closest_integer = ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  return round($value);\n}\n", "  // If the\
    \ value is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n\n  // If the value is an array, loop through it and find the closest\n\
    \  // integer.\n  if (is_array($value)) {\n    $closest = null;\n    foreach ($value\
    \ as $key => $val) {\n      if (is_int($val)) {\n        if ($closest === null\
    \ || abs($val - $closest) < abs($closest - $val)) {\n          $closest = $val;\n\
    \        }\n      }\n    }\n    return $closest;\n  }\n\n  // If the value is\
    \ a string, loop through it and find the closest\n  // integer.\n  if (is_string($value))\
    \ {\n    $closest = null;\n    foreach (explode('.', $value) as $val) {\n    \
    \  if (is_int($val)) {\n        if ($closest === null || abs($val - $closest)\
    \ < abs($closest - $val)) {\n          $closest = $val;\n        }\n      }\n\
    \    }\n    return $closest;\n  }\n\n  // If the value is a float, return it.\n\
    \  if (is_float($value)) {\n    return round($value);\n  }\n\n  // If the value\
    \ is a boolean, return it.\n  if (is_bool($value)) {\n    return $value;\n  }\n\
    \n  // If the value is a resource, return it.\n  if (is_resource($value)) {\n\
    \    return $value;\n  }\n\n  // If the value is null, return it.\n  if (is_null($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an object, return it.\n \
    \ if (is_object($value)) {\n    return $value;\n  }\n\n  // If the value is a\
    \ resource, return it.\n  if (is_resource($value)) {\n    return $value;\n  }\n\
    \n  // If the value is a number, return it.\n  if (is_numeric($value)) {\n   \
    \ return $value;\n  }\n\n  // If the value is an array, return it.\n  if (is_array($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is a string, return it.\n  if\
    \ (is_string($value)) {\n    return $value;\n  }\n\n  // If the value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return $value;\n  }\n\n  // If the\
    \ value is a boolean, return it.\n  if (is_bool($value)) {\n    return $value;\n\
    \  }\n\n  // If the value is a resource, return it.\n  if (is_resource($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is null, return it.\n  if (is_null($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an object, return it.\n \
    \ if (is_object($value)) {\n    return $value;\n  }\n\n  // If the value is a\
    \ resource, return it.\n  if (is_resource($value)) {\n    return $value;\n  }\n\
    \n  // If the value is a number, return it.\n  if (is_numeric($value)) {", " \
    \ $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  // Convert the value to a float\n  $value\
    \ = floatval($value);\n\n  // If the value is zero, return zero\n  if ($value\
    \ == 0) {\n    return 0;\n  }\n\n  // If the value is negative, return the negative\
    \ of the closest integer\n  if ($value < 0) {\n    return -closest_integer(abs($value));\n\
    \  }\n\n  // If the value is positive, return the closest integer\n  return round($value);\n\
    }\n</code>\n<|/ a tags=php,rounding |>\n<| c |>\nI like the idea of using an array,\
    \ but this doesn't seem to work for negative numbers. `closest_integer(\"-12.3\"\
    )` returns `-12` instead of `-12.3`.\n<|/ c |>\n<| c |>\nI added a note to the\
    \ answer that explains why this doesn't work for negative numbers.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. `closest_integer(\"-12.3\")`\
    \ returns `-12` instead of `-12.3`.\n<|/ c |>\n<| c |>\nI added a note to the\
    \ answer that explains why this doesn't work for negative numbers.\n<|/ c |>\n\
    <| c |>\nI added a note to the answer that explains why this doesn't work for\
    \ negative numbers.\n<|/ c |>\n<| a tags=php,rounding |>\n<code>", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n\
    \    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n  while ($closest_integer\
    \ - $value >= 1) {\n    $closest_integer = $closest_integer - $value;\n  }\n \
    \ return $closest_integer;\n}", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = ($value - $closest_integer) < 0.000001 ?\n\
    \        $closest_integer + 1 : $closest_integer;\n    return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest =\
    \ null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  foreach ($values\
    \ as $v) {\n    $diff = $v - $value;\n    if ($diff < $closestDiff) {\n      $closestDiff\
    \ = $diff;\n      $closest = $v;\n    }\n    $diffAbs = abs($diff);\n    if ($diffAbs\
    \ < $closestDiffAbs) {\n      $closestDiffAbs = $diffAbs;\n      $closest = $v;\n\
    \    }\n  }\n  return $closest;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  // If the value is an integer, return it\n\
    \  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is negative,\
    \ add 1 to it\n  if ($value < 0) {\n    $value += 1;\n  }\n\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is an integer, return it\n  if (is_int($value)) {\n    return\
    \ $value;\n  }\n\n  // If the value is an integer, return it\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an integer, return it\n \
    \ if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is an integer,\
    \ return it\n  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is an integer, return it\n  if (is_int($value)) {\n    return\
    \ $value;\n  }\n\n  // If the value is an integer, return it\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an integer, return it\n \
    \ if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is an integer,\
    \ return it\n  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is an integer, return it\n  if (is_int($value)) {\n    return\
    \ $value;\n  }\n\n  // If the value is an integer, return it\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an integer, return it\n \
    \ if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is an integer,\
    \ return it\n  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is an integer, return it\n  if (is_int($value)) {\n    return\
    \ $value;\n  }\n\n  // If the value is an integer, return it\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the value is an integer, return it\n \
    \ if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value is an integer,\
    \ return it\n  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \n  // If the value is an integer, return it\n  if (is_int($value)) {\n    return\
    \ $value;\n  }\n\n  // If the value is an integer, return it\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value - 1) ? 0 : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value + 1) ? 0 : $closest_integer;\n    return $closest_integer;\n\
    }", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? $value : $closest_integer;\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n  }\n  return $closest_integer;\n}",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n  while ($closest_integer\
    \ % 2 == 0) {\n    $closest_integer = ($closest_integer + 1) / 2;\n  }\n  return\
    \ $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value - 1) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value + 1) ? 0 : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  // If the given value is a string, parse\
    \ it as a float.\n  if (is_string($value)) {\n    $value = floatval($value);\n\
    \  }\n\n  // If the given value is an integer, return it.\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is an array, loop through each element and return\n  // the closest integer\
    \ to the one given.\n  if (is_array($value)) {\n    $closest = null;\n    foreach\
    \ ($value as $element) {\n      $closest = closest_integer($element);\n      if\
    \ ($closest !== null) {\n        break;\n      }\n    }\n\n    return $closest;\n\
    \  }\n\n  // If the given value is a string, loop through each character in the\
    \ string\n  // and return the closest integer to the one given.\n  if (is_string($value))\
    \ {\n    $closest = null;\n    foreach (str_split($value) as $character) {\n \
    \     $closest = closest_integer($character);\n      if ($closest !== null) {\n\
    \        break;\n      }\n    }\n\n    return $closest;\n  }\n\n  // If the given\
    \ value is a boolean, return it as-is.\n  if (is_bool($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is null, return null.\n  if (is_null($value))\
    \ {\n    return null;\n  }\n\n  // If the given value is an object, return it\
    \ as-is.\n  if (is_object($value)) {\n    return $value;\n  }\n\n  // If the given\
    \ value is an array, return the first element in the array.\n  if (is_array($value))\
    \ {\n    return reset($value);\n  }\n\n  // If the given value is an integer,\
    \ return it.\n  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the\
    \ given value is a float, return it.\n  if (is_float($value)) {\n    return floor($value);\n\
    \  }\n\n  // If the given value is an object, return it as-is.\n  if (is_object($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is an array, return the\
    \ first element in the array.\n  if (is_array($value)) {\n    return reset($value);\n\
    \  }\n\n  // If the given value is an integer, return it.\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is a float, return it.\n\
    \  if (is_float($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ value is an object, return it as-is.\n  if (is_object($value)) {\n    return\
    \ $value;\n  }\n\n  // If the given value is an array, return the first element\
    \ in the array.\n  if (is_array($value)) {\n    return reset($value);\n  }\n\n\
    \  // If the given value is an integer, return it.\n  if (is_", "  // If the given\
    \ number is not an integer, return it.\n  if (!is_numeric($value)) {\n    return\
    \ $value;\n  }\n\n  // If the given number is negative, return it.\n  if ($value\
    \ < 0) {\n    return $value;\n  }\n\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  if (abs($value) == abs($value\
    \ - floor($value))) {\n    return floor($value);\n  }\n\n  // Otherwise, return\
    \ the given number.\n  return $value;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? $closest_integer : $closest_integer\
    \ + 1;\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  while ($closest_integer < $value) {\n    $closest_integer++;\n    $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }", "  return round($value);\n}", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \    return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest = $value;\n\
    \  $closestDiff = abs($value - $closest);\n  foreach ($values as $other) {\n \
    \   $otherDiff = abs($value - $other);\n    if ($otherDiff < $closestDiff) {\n\
    \      $closest = $other;\n      $closestDiff = $otherDiff;\n    }\n  }\n  return\
    \ $closest;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer * 10;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }", "  // If the given value is a string, convert it to an integer using the\n\
    \  // built-in intval function.\n  if (is_string($value)) {\n    $value = intval($value);\n\
    \  }\n\n  // If the given value is an integer, return it.\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n\n  // If the given value is an array, loop through\
    \ each element and call the\n  // function recursively to find the closest integer.\n\
    \  if (is_array($value)) {\n    $closest = null;\n    foreach ($value as $element)\
    \ {\n      if (is_string($element)) {\n        $element = intval($element);\n\
    \      }\n      if (is_int($element)) {\n        if ($closest === null || abs($element\
    \ - $closest) < abs($closest - $element)) {\n          $closest = $element;\n\
    \        }\n      }\n    }\n    return $closest;\n  }\n\n  // If the given value\
    \ is a float, return its integer value.\n  if (is_float($value)) {\n    return\
    \ floor($value);\n  }\n\n  // If the given value is a boolean, return its integer\
    \ value.\n  if (is_bool($value)) {\n    return ($value) ? 1 : 0;\n  }\n\n  //\
    \ If the given value is a resource, return its integer value.\n  if (is_resource($value))\
    \ {\n    return (int) $value;\n  }\n\n  // If the given value is a string, return\
    \ its integer value.\n  if (is_string($value)) {\n    return intval($value);\n\
    \  }\n\n  // If the given value is an object, return its integer value.\n  if\
    \ (is_object($value)) {\n    return (int) $value->value;\n  }\n\n  // If the given\
    \ value is an array, return its integer value.\n  if (is_array($value)) {\n  \
    \  return array_reduce($value, function ($carry, $item) {\n      return $carry\
    \ + closest_integer($item);\n    }, 0);\n  }\n\n  // If the given value is null,\
    \ return its integer value.\n  if (is_null($value)) {\n    return 0;\n  }\n\n\
    \  // If the given value is an invalid type, return its integer value.\n  return\
    \ $value;\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work for negative numbers, it returns `0` instead of `-1`\n<|/ c |>\n<| c |>\n\
    I fixed it by adding `abs($value)` to the return statement. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>", "  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is zero,\
    \ return zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is\
    \ negative, return negative of the closest integer\n  if ($value < 0) {\n    return\
    \ -closest_integer(abs($value));\n  }\n  // If the value is positive, return positive\
    \ of the closest integer\n  if ($value > 0) {\n    return closest_integer($value);\n\
    \  }\n  // If the value is equidistant from two integers, round it away from zero\n\
    \  $closest_integer = round($value);\n  // If the value is equidistant from two\
    \ integers, return the one that is farthest from zero\n  if ($closest_integer\
    \ == $value) {\n    return $closest_integer;\n  }\n  // If the value is equidistant\
    \ from two integers, return the one that is closest to zero\n  return $value -\
    \ $closest_integer;\n}\n</code>\n<|/ a tags=php,rounding |>\n<| c |>\nThis doesn't\
    \ work for negative numbers, e.g. `closest_integer(\"-10\")` returns `-10` instead\
    \ of `-10.0`\n<|/ c |>\n<| c |>\nI added a note at the bottom of my answer to\
    \ explain why this doesn't work for negative numbers.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    $value = abs($value);\n    $closest_integer = $value;\n  \
    \  $closest_integer = $closest_integer == 0 ? 1 : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 1 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 2 ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 3 ? $value : $closest_integer;\n    $closest_integer = $closest_integer ==\
    \ 4 ? $value : $closest_integer;\n    $closest_integer = $closest_integer == 5\
    \ ? $value : $closest_integer;\n    $closest_integer = $closest_integer == 6 ?\
    \ $value : $closest_integer;\n    $closest_integer = $closest_integer == 7 ? $value\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 8 ? $value :\
    \ $closest_integer;\n    $closest_integer = $closest_integer == 9 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 10 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 11 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 12 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 13 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 14 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 15 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 16 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 17 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 18 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 19 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 20 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 21 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 22 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 23 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 24 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 25 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 26 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 27 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 28 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 29", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  return round($value/abs($value));\n}\n", "  $value = abs($value);\n \
    \ $closest = null;\n  $closestDistance = null;\n  foreach ($values as $v) {\n\
    \    if ($v == $value) {\n      $closest = $v;\n      $closestDistance = $value;\n\
    \      continue;\n    }\n    $distance = $v - $value;\n    if ($closestDistance\
    \ == null || $distance < $closestDistance) {\n      $closest = $v;\n      $closestDistance\
    \ = $distance;\n    }\n  }\n  return $closest;\n}\n", "  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  if ($value\
    \ == round($value)) {\n    return round($value);\n  }\n\n  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  if ($value\
    \ == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value, 3)) {\n    return round($value, 3);\n  }\n\n  // If\
    \ the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  if ($value == round($value, 4)) {\n    return round($value, 4);\n \
    \ }\n\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  if ($value == round($value, 5)) {\n    return round($value,\
    \ 5);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 6)) {\n    return round($value,\
    \ 6);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 7)) {\n    return round($value,\
    \ 7);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 8)) {\n    return round($value,\
    \ 8);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 9)) {\n    return round($value,\
    \ 9);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 10)) {\n    return round($value,\
    \ 10);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 11)) {\n    return round($value,\
    \ 11);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 12)) {\n    return round($value,\
    \ 12);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 13)) {\n    return round($value,\
    \ 13);\n  }\n\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.", "  // Convert the value to a float\n  $value = floatval($value);\n\
    \  // If the value is zero, return zero\n  if ($value == 0) {\n    return 0;\n\
    \  }\n  // If the value is negative, return negative of the closest integer\n\
    \  if ($value < 0) {\n    return -closest_integer(abs($value));\n  }\n  // If\
    \ the value is positive, return positive of the closest integer\n  if ($value\
    \ > 0) {\n    return closest_integer($value);\n  }\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  $closest_integer = round($value);\n\
    \  // If the value is equidistant from two integers, return the one that is farthest\
    \ from zero\n  if ($closest_integer == $value) {\n    return $closest_integer;\n\
    \  }\n  // If the value is equidistant from two integers, return the one that\
    \ is closest to zero\n  return $closest_integer - 1;\n}", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n", "  $value =\
    \ abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value <=\
    \ $closest_integer) ? $value : $closest_integer;\n  $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = floatval($value);\n  $closest\
    \ = null;\n  $closestDiff = null;\n  foreach ($integers as $integer) {\n    $diff\
    \ = $value - $integer;\n    if ($diff < $closestDiff) {\n      $closestDiff =\
    \ $diff;\n      $closest = $integer;\n    }\n  }\n  return $closest;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,math |>\n<code>\n<?php\n$a = array('10', '15.3',\
    \ '14.5', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25',\
    \ '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38',\
    \ '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51',\
    \ '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64',\
    \ '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77',\
    \ '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90',\
    \ '91', '92', '93', '94', '95', '96', '97', '98', '99', '100');\n$b = array('10',\
    \ '15.3', '14.5', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23',\
    \ '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36',\
    \ '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49',\
    \ '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62',\
    \ '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75',\
    \ '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88',\
    \ '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100');\n\
    $c = array('10', '15.3', '14.5', '14', '15', '16', '17', '18', '19', '20', '21',\
    \ '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34',\
    \ '35", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($closest_integer == $value) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value - 1) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($closest_integer == $value + 1) ? $value : $closest_integer;\n    return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  $closest_integer = ($value - floor($value)) < 0.0 ? floor($value) : ceil($value);\n\
    \  return $closest_integer;\n}", "  $value = floatval($value);\n  $closest = null;\n\
    \  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax = null;\n\
    \  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbs", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer > 0\
    \ && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer > 0 && $closest_integer < $value) {\n \
    \   $closest_integer = floor($closest_integer);\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ == $value) {\n    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  }\n  return $closest_integer;\n}", "  $value = abs($value);\n  $closest = null;\n\
    \  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax = null;\n\
    \  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n  foreach\
    \ ($GLOBALS['db']->fetchAll(\"SELECT `id`, `diff`, `absDiff`, `absDiffAbs`,\n\
    \    `absDiffAbsMax`, `absDiffAbsMaxAbs`, `absDiffAbsMaxAbsMax` FROM\n    `{$GLOBALS['db']->escapeTableName($GLOBALS['table'])}`\
    \ WHERE `id` = '{$value}'\") as\n    $row) {\n    if ($closestDiff === null) {\n\
    \      $closestDiff = $row['diff'];\n      $closestDiffAbs = $row['absDiff'];\n\
    \      $closestDiffAbsMax = $row['absDiffAbsMax'];\n      $closestDiffAbsMaxAbs\
    \ = $row['absDiffAbsMaxAbs'];\n      $closestDiffAbsMaxAbsMax = $row['absDiffAbsMaxAbsMax'];\n\
    \    } else {\n      if ($closestDiff > $row['diff']) {\n        $closestDiff\
    \ = $row['diff'];\n        $closest = $row['id'];\n      }\n      if ($closestDiffAbs\
    \ > $row['absDiff']) {\n        $closestDiffAbs = $row['absDiff'];\n        $closestAbsId\
    \ = $row['id'];\n      }\n      if ($closestDiffAbsMax < $row['absDiffAbsMax'])\
    \ {\n        $closestDiffAbsMax = $row['absDiffAbsMax'];\n        $closestAbsMaxId\
    \ = $row['id'];\n      }\n      if ($closestDiffAbsMaxAbs < $row['absDiffAbsMaxAbs'])\
    \ {\n        $closestDiffAbsMaxAbs = $row['absDiffAbsMaxAbs'];\n        $closestAbsMaxAbsId\
    \ = $row['id'];\n      }\n      if ($closestDiffAbsMaxAbsMax < $row['absDiffAbsMaxAbsMax'])\
    \ {\n        $closestDiffAbsMaxAbsMax = $row['absDiffAbsMaxAbsMax'];\n       \
    \ $closestAbsMaxAbsMaxId = $row['id'];\n      }\n    }\n  }\n  return $closest;\n\
    }\n\n/**\n * Returns true if the given value is an integer.\n *\n * @param string\
    \ $value the value to check\n *\n * @return boolean true if the given value is\
    \ an integer, false otherwise\n */", "  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($value >= $value2)\
    \ {\n    return round($value - $value2);\n  }\n  return round($value + $value2);\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  while ($closest_integer\
    \ < $value && $closest_integer > 0) {\n    $closest_integer = ($closest_integer\
    \ + $value) / 2;\n  }\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n", " \
    \ // If the given value is a string, parse it to a float\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is not a string,\
    \ return it\n  if (!is_numeric($value)) {\n    return $value;\n  }\n\n  // If\
    \ the given value is zero, return zero\n  if ($value == 0) {\n    return 0;\n\
    \  }\n\n  // If the given value is negative, return it\n  if ($value < 0) {\n\
    \    return $value;\n  }\n\n  // If the given value is equidistant from two integers,\
    \ round it away from zero\n  $difference = abs($value - $value);\n  if ($difference\
    \ < 1) {\n    return round($value);\n  }\n\n  // If the given value is equidistant\
    \ from two integers, return the one that is farthest from zero\n  $difference\
    \ = abs($value - $value);\n  return $value - $difference;\n}\n", "  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n\
    \    $closest_integer = $closest_integer * 10;\n  }\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest = null;\n  $closestDiff = null;\n \
    \ $closestDiffAbs = null;\n  foreach ($GLOBALS['integers'] as $integer) {\n  \
    \  $diff = $value - $integer;\n    if ($diff < $closestDiff) {\n      $closest\
    \ = $integer;\n      $closestDiff = $diff;\n      $closestDiffAbs = $diff;\n \
    \   } else if ($diff == $closestDiff) {\n      $closestDiffAbs += $diff;\n   \
    \ }\n  }\n  return $closest;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  while ($closest_integer == $value && $value >= 1) {\n    $value\
    \ /= 10;\n    $closest_integer = $value;\n  }\n  return $closest_integer;\n}\n",
  "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ < $value ? $closest_integer : $value);\n  while ($closest_integer == $value\
    \ || $closest_integer == 0) {\n    $closest_integer = ($closest_integer < $value\
    \ ? $closest_integer : $value);\n  }\n  return $closest_integer;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($value -\
    \ floor($value)) < 0.000001 ? $value : floor($value);\n  return $closest_integer;\n\
    }\n", "    $value = abs($value);\n    $closest_integer = $value;\n    $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer\
    \ = ($value >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n", "  // If the number is negative, return negative closest integer.\n  if\
    \ ($value < 0) {\n    return -closest_integer(abs($value));\n  }\n\n  // If the\
    \ number is zero, return zero.\n  if ($value == 0) {\n    return 0;\n  }\n\n \
    \ // If the number is positive, return positive closest integer.\n  if ($value\
    \ > 0) {\n    return round($value);\n  }\n\n  // If the number is equidistant\
    \ from two integers, round it away from zero.\n  $closest_integer = round($value\
    \ / 2);\n\n  // If the number is equidistant from two integers, round it away\
    \ from zero.\n  if (abs($value - $closest_integer) < abs($value - $closest_integer\
    \ + 1)) {\n    $closest_integer++;\n  }\n\n  return $closest_integer;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n<?php", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_", "  $value\
    \ = abs($value);\n  $closest = null;\n  $closestDiff = null;\n  foreach ($values\
    \ as $v) {\n    $diff = $v - $value;\n    if ($closestDiff === null || $diff <\
    \ $closestDiff) {\n      $closestDiff = $diff;\n      $closest = $v;\n    }\n\
    \  }\n  return $closest;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I've tried your solution and it works perfectly for positive numbers.\
    \ But for negative numbers it doesn't work. I've tried with -15.3 and it returns\
    \ 15. I've tried with -15.4 and it returns 15. I've tried with -15.6 and it returns\
    \ 15. I've tried with -15.7 and it returns 15. I've tried with -15.8 and it returns\
    \ 15. I've tried with -15.9 and it returns 15. I've tried with -15.10 and it returns\
    \ 15. I've tried with -15.11 and it returns 15. I've tried with -15.12 and it\
    \ returns 15. I've tried with -15.13 and it returns 15. I've tried with -15.14\
    \ and it returns 15. I've tried with -15.15 and it returns 15. I've tried with\
    \ -15.16 and it returns 15. I've tried with -15.17 and it returns 15. I've tried\
    \ with -15.18 and it returns 15. I've tried with -15.19 and it returns 15. I've\
    \ tried with -15.20 and it returns 15. I've tried with -15.21 and it returns 15.\
    \ I've tried with -15.22 and it returns 15. I've tried with -15.23 and it returns\
    \ 15. I've tried with -15.24 and it returns 15. I've tried with -15.25 and it\
    \ returns 15. I've tried with -15.26 and it returns 15. I've tried with -15.27\
    \ and it returns 15. I've tried with -15.28 and it returns 15. I've tried with\
    \ -15.29 and it returns 15. I've tried with -15.30 and it returns 15. I've tried\
    \ with -15.31 and it returns 15. I've tried with -15.32 and it returns 15. I've\
    \ tried with -15.33 and it returns 15. I've tried with -15.34 and it returns 15.\
    \ I've tried with -15.35 and it returns 15. I've tried with -15.36 and it returns\
    \ 15. I've tried with -15.37 and it returns 15. I've tried with -15.38 and it\
    \ returns 15. I've tried with -15.39 and it returns 15. I've tried with -15.40\
    \ and ", "  $value = abs($value);\n  $closest = null;\n  $closestDiff = null;\n\
    \  foreach ($GLOBALS['db']->fetchAll(\"SELECT `id` FROM `{$GLOBALS['db']->prefix}numbers`\
    \ WHERE `number` = '{$value}'\") as $row) {\n    $diff = $value - $row['number'];\n\
    \    if ($closestDiff === null || $diff < $closestDiff) {\n      $closest = $row['id'];\n\
    \      $closestDiff = $diff;\n    }\n  }\n  return $closest;\n}\n", "  $value\
    \ = abs($value);\n  $closest_integer = $value;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n\
    \    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }", "  // If the given value is a string, convert it to a float.\n  $value = floatval($value);\n\
    \n  // If the given value is negative, return zero.\n  if ($value < 0) {\n   \
    \ return 0;\n  }\n\n  // If the given value is zero, return zero.\n  if ($value\
    \ == 0) {\n    return 0;\n  }\n\n  // If the given value is positive, return the\
    \ next integer after it.\n  if ($value > 0) {\n    return round($value) + 1;\n\
    \  }\n\n  // If the given value is negative, return the previous integer before\
    \ it.\n  return round($value) - 1;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer < $value ? $closest_integer : $value;\n\
    \  return $closest_integer;\n}", "  // Convert the value to a float\n  $value\
    \ = floatval($value);\n\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == intval($value)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == ceil($value)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == floor($value)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 2)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 3)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 4)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 5)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 6)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 7)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 8)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 9)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 10)) {\n    return intval($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it toward the\
    \ nearest integer\n  if ($value == round($value, 11)) {\n    return intval($value);\n\
    \  }", "  return round($value/abs($value));\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer = $value;\n\
    \  while ($closest_integer > 0 && $closest_integer < $value) {\n    $closest_integer\
    \ = floor($closest_integer);\n  }\n  return $closest_integer;\n}\n", "  return\
    \ round($value);\n}\n", "    $value = abs($value);\n    $closest_integer = $value;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \    $closest_integer = ($closest_", "  // Convert the value to a float and round\
    \ it to a whole number\n  $value = floatval($value);\n  $value = round($value,\
    \ 0);\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == intval($value)) {\n    return intval($value);\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 0)) {\n    return round($value, 0);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == round($value, 1)) {\n    return round($value, 1);\n  }\n\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero\n  if ($value == round($value,\
    \ 3)) {\n    return round($value, 3);\n  }\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value, 4))\
    \ {\n    return round($value, 4);\n  }\n\n  // If the value is equidistant from\
    \ two integers, round it away from zero\n  if ($value == round($value, 5)) {\n\
    \    return round($value, 5);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero\n  if ($value == round($value, 6)) {\n   \
    \ return round($value, 6);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == round($value, 7)) {\n    return round($value,\
    \ 7);\n  }\n\n  // If the value is equidistant from two integers, round it away\
    \ from zero\n  if ($value == round($value, 8)) {\n    return round($value, 8);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == round($value, 9)) {\n    return round($value, 9);\n  }\n\
    \n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 10)) {\n    return round($value, 10);\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 11)) {\n    return round($value, 11);\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 12)) {\n    return round($value, 12);\n  }\n\n\
    \  // If the value is equidistant from two integers, ", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  return $closest_integer;\n}\n", "  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}", "  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = $value - $closest;\n  while ($closestDiff\
    \ >= 1) {\n    $closest = $closest;\n    $closestDiff = $value - $closest;\n \
    \ }\n  return $closest;\n}", "  // Convert the value to a float and round it down\n\
    \  $value = floatval($value);\n  $value = round($value, 0);\n  // If the value\
    \ is equidistant from two integers, round it away from zero\n  if ($value == $value\
    \ + 1) {\n    $value = $value - 1;\n  }\n  return $value;\n}\n", "  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach ($values\
    \ as $v) {\n    $diff = $v - $closest;\n    if ($diff < $closestDiff) {\n    \
    \  $closestDiff = $diff;\n      $closest = $v;\n    }\n  }\n  return $closest;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  $closest_integer\
    \ = $closest_integer < $value ? $value : $closest_integer;\n  $closest_integer\
    \ = $closest_integer < $value ? $closest_integer : $value;\n  return $closest_integer;\n\
    }\n", "  $value = abs($value);\n  $closest_integer = $value;\n  while ($closest_integer\
    \ > 0 && $closest_integer < $value) {\n    $closest_integer = floor($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n", "    $value = abs($value);\n    $closest_integer\
    \ = $value;\n    $closest_integer = $closest_integer == 0 ? 1 : $closest_integer;\n\
    \    $closest_integer = $closest_integer == $value ? $closest_integer : $closest_integer\
    \ + 1;\n    return $closest_integer;\n}", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = ($value <= $closest_integer) ? $value : $closest_integer;\n\
    \  $closest_integer = ($value >= $closest_integer) ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}\n", "  $value = abs($value);\n  $closest_integer\
    \ = $value;\n  $closest_integer = $closest_integer < $value ? $value : $closest_integer;\n\
    \  $closest_integer = $closest_integer > $value ? $value : $closest_integer;\n\
    \  return $closest_integer;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
