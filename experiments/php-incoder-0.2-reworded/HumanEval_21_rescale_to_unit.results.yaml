language: php
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hppcgnj.php:22\n\
    Stack trace:\n#0 /tmp/tmp7hppcgnj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7hppcgnj.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function($number) {\n    return $number / $range[$number];\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nI like your answer, but I\
    \ think it would be more accurate to say that `array_map` will apply the function\
    \ to each element of the array and return the result.  So the return value of\
    \ `array_map` will be the array with the values transformed.  So the function\
    \ passed to `array_map` will receive the array element and return the transformed\
    \ value.  So the return value of `array_map` will be the array with the values\
    \ transformed.  So the function passed to `array_map` will receive the array element\
    \ and return the transformed value.\n<|/ c |>\n<| c |>\nI agree with you that\
    \ `array_map` will apply the function to each element of the array and return\
    \ the result. But the return value of `array_map` will be the array with the values\
    \ transformed. So the function passed to `array_map` will receive the array element\
    \ and return the transformed value. So, the return value of `array_map` will be\
    \ the array with the values transformed. So the function passed to `array_map`\
    \ will receive the array element and return the transformed value.\n<|/ c |>\n\
    <| c |>\nI agree with you that `array_map` will apply the function to each element\
    \ of the array and return the result. But the return value of `array_map` will\
    \ be the array with the values transformed. So the function passed to `array_map`\
    \ will receive the array element and return the transformed value. So, the return\
    \ value of `array_map` will be the array with the values transformed. So the function\
    \ passed to `array_map` will receive the array element and return the transformed\
    \ value.\n<|/ c |>\n<| c |>\nI agree with you that `array_map` will apply the\
    \ function to each element of the array and return the result. But the return\
    \ value of `array_map` will be the array with the values transformed. So the function\
    \ passed to `array_map` will receive the array element and return the transformed\
    \ value. So, the return value of `array_map` will be the array with the values\
    \ transformed. So the function passed to `array_map` will receive the array element\
    \ and return the transformed value.\n<|/ c |>\n<| c |>\nI agree with you that\
    \ `array_map` will apply the function to each element of the array and return\
    \ the result. But the return value of `array_map` will be \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplt7dm058.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0ujcmo.php:19\n\
    Stack trace:\n#0 /tmp/tmpgf0ujcmo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgf0ujcmo.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min / ($max - $min);\n   \
    \ }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp5uexihw.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. Your solution works perfectly\
    \ for my case. However I still don't understand why my solution doesn't work.\
    \ Could you please explain why my solution doesn't work?\n<|/ c |>\n<| c |>\n\
    I added some explanation to the answer.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Now I understand why my solution doesn't work. However I still don't understand\
    \ why my solution doesn't work. Could you please explain why my solution doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added some explanation to the answer.\n<|/ c |>\n\
    <| a tags=php,arrays |>\nThis should work:\n<code>\n<?php\n$numbers = array(\n\
    \    array(\n        'id' => 1,\n        'name' => 'John',\n        'age' => 30,\n\
    \        'weight' => 100,\n        'height' => 1.5,\n        'gender' => 'male'\n\
    \    ),\n    array(\n        'id' => 2,\n        'name' => 'Jane',\n        'age'\
    \ => 28,\n        'weight' => 100,\n        'height' => 1.6,\n        'gender'\
    \ => 'female'\n    ),\n    array(\n        'id' => 3,\n        'name' => 'Jack',\n\
    \        'age' => 25,\n        'weight' => 100,\n        'height' => 1.7,\n  \
    \      'gender' => 'male'\n    ),\n    array(\n        'id' => 4,\n        'name'\
    \ => 'Jill',\n        'age' => 25,\n        'weight' => 100,\n        'height'\
    \ => 1.8,\n        'gender' => 'female'\n    ),\n    array(\n        'id' => 5,\n\
    \        'name' => 'Jack',\n        'age' => 25,\n        'weight' => 100,\n \
    \       'height' => 1.7,\n        'gender' => 'male'\n    ),\n    array(\n   \
    \     'id' => 6,\n        'name' => 'Jill',\n        'age' => 25,\n        'weight'\
    \ => 100,\n        'height' => 1.8,\n        'gender' => 'female'\n    ),\n  \
    \  array(\n        'id' => 7,\n        'name' => 'Jack',\n        'age' => 25,\n\
    \        'weight' => 100,\n        'height' => 1.7,\n        'gender' => 'male'\n\
    \    ),\n    array(\n        'id' => 8,\n        'name' => 'Jill',\n        'age'\
    \ => 25,\n        'weight' => 100,\n        'height' => 1.8,\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqcwl4fzi.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, however it only works if the\
    \ array is sorted in ascending order. Otherwise the smallest number will be the\
    \ largest and the largest will be the smallest. I've updated my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\n: I updated my answer with a function that will handle\
    \ both cases.\n<|/ c |>\n<| c |>\nThanks for your answer. I've updated my question\
    \ to reflect that my array is not always sorted in ascending order. I've also\
    \ added a comment to my question to clarify this.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer again, now it handles both cases.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I've updated my question to reflect that my array is not always sorted\
    \ in ascending order. I've also added a comment to my question to clarify this.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    array(\n     \
    \   'id' => 1,\n        'name' => 'one',\n        'price' => 10,\n    ),\n   \
    \ array(\n        'id' => 2,\n        'name' => 'two',\n        'price' => 20,\n\
    \    ),\n    array(\n        'id' => 3,\n        'name' => 'three',\n        'price'\
    \ => 30,\n    ),\n    array(\n        'id' => 4,\n        'name' => 'four',\n\
    \        'price' => 40,\n    ),\n    array(\n        'id' => 5,\n        'name'\
    \ => 'five',\n        'price' => 50,\n    ),\n    array(\n        'id' => 6,\n\
    \        'name' => 'six',\n        'price' => 60,\n    ),\n    array(\n      \
    \  'id' => 7,\n        'name' => 'seven',\n        'price' => 70,\n    ),\n  \
    \  array(\n        'id' => 8,\n        'name' => 'eight',\n        'price' =>\
    \ 80,\n    ),\n    array(\n        'id' => 9,\n        'name' => 'nine',\n   \
    \     'price' => 90,\n    ),\n    array(\n        'id' => 10,\n        'name'\
    \ => 'ten',\n        'price' => 100,\n    ),\n);\n\n$array = array_map(function($v){\n\
    \    return $v['price'] / 100;\n}, $array);\n\nvar_dump($array);\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp4btkbnw.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, float given\
    \ in /tmp/tmpt8sfdn3g.php on line 15\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpt8sfdn3g.php on line 16\n\nWarning:\
    \ array_map(): Expected parameter 2 to be an array, null given in /tmp/tmpt8sfdn3g.php\
    \ on line 17\n\nWarning: array_map(): Expected parameter 2 to be an array, null\
    \ given in /tmp/tmpt8sfdn3g.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpt8sfdn3g.php on line 19\n\nWarning: array_map():\
    \ Expected parameter 2 to be an array, null given in /tmp/tmpt8sfdn3g.php on line\
    \ 20\n\nWarning: array_map(): Expected parameter 2 to be an array, null given\
    \ in /tmp/tmpt8sfdn3g.php on line 21\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpt8sfdn3g.php on line 22\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpt8sfdn3g.php:31\nStack trace:\n\
    #0 /tmp/tmpt8sfdn3g.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt8sfdn3g.php\
    \ on line 31\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('sqrt', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    return array_combine($range, $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI needed a solution that would\
    \ work with any number of elements and any number of dimensions. I came up with\
    \ a solution using array_map() and array_reduce(). \n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc_38fn4y.php on line 20

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return $min + ($max - $min) * $range;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$arr = [1,2,3,4,5,6,7,8,9,10];\n\
    $arr1 = array_chunk($arr, 2);\n$arr2 = array_chunk($arr, 3);\n$arr3 = array_chunk($arr,\
    \ 4);\n$arr4 = array_chunk($arr, 5);\n$arr5 = array_chunk($arr, 6);\n$arr6 = array_chunk($arr,\
    \ 7);\n$arr7 = array_chunk($arr, 8);\n$arr8 = array_chunk($arr, 9);\n$arr9 = array_chunk($arr,\
    \ 10);\n$arr10 = array_chunk($arr, 11);\n$arr11 = array_chunk($arr, 12);\n$arr12\
    \ = array_chunk($arr, 13);\n$arr13 = array_chunk($arr, 14);\n$arr14 = array_chunk($arr,\
    \ 15);\n$arr15 = array_chunk($arr, 16);\n$arr16 = array_chunk($arr, 17);\n$arr17\
    \ = array_chunk($arr, 18);\n$arr18 = array_chunk($arr, 19);\n$arr19 = array_chunk($arr,\
    \ 20);\n$arr20 = array_chunk($arr, 21);\n$arr21 = array_chunk($arr, 22);\n$arr22\
    \ = array_chunk($arr, 23);\n$arr23 = array_chunk($arr, 24);\n$arr24 = array_chunk($arr,\
    \ 25);\n$arr25 = array_chunk($arr, 26);\n$arr26 = array_chunk($arr, 27);\n$arr27\
    \ = array_chunk($arr, 28);\n$arr28 = array_chunk($arr, 29);\n$arr29 = array_chunk($arr,\
    \ 30);\n$arr30 = array_chunk($arr, 31);\n$arr31 = array_chunk($arr, 32);\n$arr32\
    \ = array_chunk($arr, 33);\n$arr33 = array_chunk($arr, 34);\n$arr34 = array_chunk($arr,\
    \ 35);\n$arr35 = array_chunk($arr, 36);\n$arr36 = array_chunk($arr, 37);\n$arr37\
    \ = array_chunk($arr, 38);\n$arr38 = array_chunk($arr, 39);\n$arr39 = array_chunk($arr,\
    \ 40);\n$arr40 = array_chunk($arr, 41);\n$arr41 = array_chunk($arr, \nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo_j5ukv5.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfrci7p2o.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work if you have a negative\
    \ number in the array. E.g. `array(1.0, -2.0, 3.0, 4.0, 5.0)` returns `array(0.0,\
    \ -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try it yourself.\n<|/ c |>\n<| c |>\nI did try it myself and you're\
    \ right, it doesn't work for negative numbers. I didn't realize that `array_map`\
    \ would do that. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    $array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 =>\
    \ 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10\
    \ => 11,\n    11 => 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 =>\
    \ 16,\n    16 => 17,\n    17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n\
    \    21 => 22,\n    22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n \
    \   26 => 27,\n    27 => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n  \
    \  31 => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n   \
    \ 36 => 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n    40 => 41,\n    41\
    \ => 42,\n    42 => 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n    46 =>\
    \ 47,\n    47 => 48,\n    48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 52,\n\
    \    52 => 53,\n    53 => 54,\n    54 => 55,\n    55 => 56,\n    56 => 57,\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_kktcfkd.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx_thrtf.php:19\n\
    Stack trace:\n#0 /tmp/tmpvx_thrtf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvx_thrtf.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function($number) use ($scale) {\n    return $number\
    \ * $scale;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92wu3c3e.php:20\n\
    Stack trace:\n#0 /tmp/tmp92wu3c3e.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp92wu3c3e.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function($num) use ($scale) {\n    return $num *\
    \ $scale;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgnizzbgj.php:20\n\
    Stack trace:\n#0 /tmp/tmpgnizzbgj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgnizzbgj.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,3,4,5];\n\
    $arr1 = [1,2,3,4,5];\n$arr2 = array(1,2,3,4,5);\n$arr3 = array(1,2,3,4,5);\n$arr4\
    \ = array(1,2,3,4,5);\n$arr5 = array(1,2,3,4,5);\n$arr6 = array(1,2,3,4,5);\n\
    $arr7 = array(1,2,3,4,5);\n$arr8 = array(1,2,3,4,5);\n$arr9 = array(1,2,3,4,5);\n\
    $arr10 = array(1,2,3,4,5);\n$arr11 = array(1,2,3,4,5);\n$arr12 = array(1,2,3,4,5);\n\
    $arr13 = array(1,2,3,4,5);\n$arr14 = array(1,2,3,4,5);\n$arr15 = array(1,2,3,4,5);\n\
    $arr16 = array(1,2,3,4,5);\n$arr17 = array(1,2,3,4,5);\n$arr18 = array(1,2,3,4,5);\n\
    $arr19 = array(1,2,3,4,5);\n$arr20 = array(1,2,3,4,5);\n$arr21 = array(1,2,3,4,5);\n\
    $arr22 = array(1,2,3,4,5);\n$arr23 = array(1,2,3,4,5);\n$arr24 = array(1,2,3,4,5);\n\
    $arr25 = array(1,2,3,4,5);\n$arr26 = array(1,2,3,4,5);\n$arr27 = array(1,2,3,4,5);\n\
    $arr28 = array(1,2,3,4,5);\n$arr29 = array(1,2,3,4,5);\n$arr30 = array(1,2,3,4,5);\n\
    $arr31 = array(1,2,3,4,5);\n$arr32 = array(1,2,3,4,5);\n$arr33 = array(1,2,3,4,5);\n\
    $arr34 = array(1,2,3,4,5);\n$arr35 = array(1,2,3,4,5);\n$arr36 = array(1,2,3,4,5);\n\
    $arr37 = array(1,2,3,4,5);\n$arr38 = array(1,2,3,4,5);\n$arr39 = array(1,2,3,4,5);\n\
    $arr40 = array(1,2,3,4,5);\n$arr41 = array(1,2,3,4,5);\n$arr42 = array(1,2,3,4,5);\n\
    $arr43 = array(1,2,3,4,5);\n$arr44 = array(1,2,3,4,5);\n$arr45 = array(1,2,3,4,5);\n\
    $arr46 = array(1,2,3,4,5);\n$arr47 = array(1,2,3,4,5);\n$arr48 = array(1,2,3,4,5);\n\
    $arr49 = array(1,2,3,4,5);\n$arr50 = array(1,2,3,4,5);\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprkkfzfrx.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Your solution works\
    \ fine for arrays with two elements. But what about arrays with more than two\
    \ elements?\n<|/ c |>\n<| c |>\n: I updated my answer with a function that will\
    \ work for arrays with more than two elements.\n<|/ c |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk74gaudb.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    $range = array_map('round', $range);\n    return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwa86if_x.php:23\n\
    Stack trace:\n#0 /tmp/tmpwa86if_x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwa86if_x.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zdrttrw.php:19\nStack trace:\n#0 /tmp/tmp5zdrttrw.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zdrttrw.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n  return\
    \ array_map(function ($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpv9yqjq75.php on line 16\n\nWarning:\
    \ Division by zero in /tmp/tmpv9yqjq75.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpv9yqjq75.php:25\nStack trace:\n#0 /tmp/tmpv9yqjq75.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv9yqjq75.php on line 25\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max\
    \ - $min;\n    return array_map(function ($number) {\n        return $number *\
    \ $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn4123dmo.php:20\n\
    Stack trace:\n#0 /tmp/tmpn4123dmo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpn4123dmo.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\n\
    This doesn't seem to work. `array_map` doesn't seem to accept a callback with\
    \ 2 arguments. http://codepad.org/8Y7qK7Y4\n<|/ c |>\n<| c |>\n: You're right.\
    \ `array_map` only takes one argument. I've updated my answer.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpylskb2cb.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n</code>\n<|/ a\
    \ tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. For example, `array(1.0, -2.0, 3.0, 4.0, 5.0)` returns\
    \ `array(0.0, -0.25, -0.5, -0.75, -1.0)`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that handles negative numbers as well.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I ended up using your solution and added a little bit of logic to handle negative\
    \ numbers. I posted my solution as an answer below.\n<|/ c |>\n<| a dscore=1 |>\n\
    I ended up using Benjamin's solution and added a little bit of logic to handle\
    \ negative numbers. I posted my solution as an answer below.\n<code>\n<?php\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjz1bc78_.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array($min + $range[0] * $max, $min + $range[1] * $max, $min +\
    \ $range[2] * $max, $min + $range[3] * $max, $min + $range[4] * $max);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lg1owl4.php:21\n\
    Stack trace:\n#0 /tmp/tmp4lg1owl4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4lg1owl4.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvx_thrtf.php:19\n\
    Stack trace:\n#0 /tmp/tmpvx_thrtf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvx_thrtf.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0ujcmo.php:19\n\
    Stack trace:\n#0 /tmp/tmpgf0ujcmo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgf0ujcmo.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zdrttrw.php:19\nStack trace:\n#0 /tmp/tmp5zdrttrw.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zdrttrw.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like your answer but I'm getting a syntax\
    \ error on line 3 of code you posted\n<|/ c |>\n<| c |>\nSorry, I forgot the closing\
    \ parenthesis on the array_map call. Fixed now.\n<|/ c |>\n<| c |>\nI added a\
    \ version that doesn't require the min and max to be in the array\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$array2 = array_map(function($value){\n\
    \    return $value / max($array);\n}, $array);\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work if `$array` is empty.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ `array_map` will iterate over an empty array and do nothing.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work if `$array` is empty. `array_map` will iterate over an empty\
    \ array and do nothing.\n<|/ c |>\n<| c |>\nIt will iterate over an empty array\
    \ and do nothing. `array_map` will iterate over an empty array and do nothing.\
    \ `array_map` will iterate over an empty array and do nothing. `array_map` will\
    \ iterate over an empty array and do nothing. `array_map` will iterate over an\
    \ empty array and do nothing. `array_map` will iterate over an empty array and\
    \ do nothing. `array_map` will iterate over an empty array and do nothing. `array_map`\
    \ will iterate over an empty array and do nothing. `array_map` will iterate over\
    \ an empty array and do nothing. `array_map` will iterate over an empty array\
    \ and do nothing. `array_map` will iterate over an empty array and do nothing.\
    \ `array_map` will iterate over an empty array and do nothing. `array_map` will\
    \ iterate over an empty array and do nothing. `array_map` will iterate over an\
    \ empty array and do nothing. `array_map` will iterate over an empty array and\
    \ do nothing. `array_map` will iterate over an empty array and do nothing. `array_map`\
    \ will iterate over an empty array and do nothing. `array_map` will iterate over\
    \ an empty array and do nothing. `array_map` will iterate over an empty array\
    \ \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps1u1u6ln.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min / ($max - $min);\n   \
    \ }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| a tags=php,arrays,math\
    \ |>\nI used the answer from and modified it a little bit to make it more general.\n\
    <code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz4iqhcbo.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  return\
    \ array_map(function($number) {\n    return $number / $max;\n  }, $range);\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work. `array_map`\
    \ returns an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to take a `$key` parameter. `array_map` doesn't seem to take a\
    \ `$value` parameter. `array_map` doesn't seem to take a `$callback` parameter.\
    \ `array_map` doesn't seem to take a `$callback_args` parameter.\n<|/ c |>\n<|\
    \ c |>\nI fixed the missing parameters. I tested it and it works.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I added a link to the PHP documentation for\
    \ array_map.\n<|/ c |>\n<| c |>\nI tested it and it works. I added a link to the\
    \ PHP documentation for array_map.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added a link to the PHP documentation for array_map.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn48_zbm2.php on line 23

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz6hfbc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmfz6hfbc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmfz6hfbc.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  return $range\
    \ == 0 ? array() : $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32uxlqcx.php:23\n\
    Stack trace:\n#0 /tmp/tmp32uxlqcx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp32uxlqcx.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  $range = array_map('round', $range);\n  return array_sum($range) / count($range);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv3d7_rmc.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $scale = 1 / $range;\n\
    \  foreach ($numbers as $number) {\n    $numbers[$number] = $number * $scale;\n\
    \  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nai0tnx.php:27\n\
    Stack trace:\n#0 /tmp/tmp5nai0tnx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5nai0tnx.php\
    \ on line 27\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI used the answer from and modified it a\
    \ little bit to make it work for me. \n<code>\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0kvggnr0.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range\
    \ = array_map('round', $range);\n    $range = array_map('ceil', $range);\n   \
    \ $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8i_fxvi2.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  return $range\
    \ == 0 ? array(0.0) : $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf8svyxi.php:23\n\
    Stack trace:\n#0 /tmp/tmphf8svyxi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphf8svyxi.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function($number) use ($scale) {\n    return $scale\
    \ * $number;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp55h5d_r.php:20\n\
    Stack trace:\n#0 /tmp/tmpp55h5d_r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp55h5d_r.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution,\
    \ but I believe it can be simplified by using array_sum() instead of array_map().\
    \ array_sum() will return the sum of the array without needing to loop through\
    \ each element in the array. array_map() will loop through each element in the\
    \ array and return the sum.\n<|/ c |>\n<| c |>\nThis solution is great for me\
    \ because I needed a function that would take an array of numbers and return an\
    \ array of numbers that would sum to 1. I used array_sum() but then I realized\
    \ that array_sum() would return 0 if the array was all 0's and 1 if the array\
    \ was all 1's. So I used array_map() to map the array to a function that would\
    \ return 1 if the number was greater than 0 and 0 if the number was less than\
    \ 0. array_sum() then returned the correct sum.\n<|/ c |>\n<| c |>\nI like this\
    \ solution, but I believe it can be simplified by using array_sum() instead of\
    \ array_map(). array_sum() will return the sum of the array without needing to\
    \ loop through each element in the array. array_map() will loop through each element\
    \ in the array and return the sum.\n<|/ c |>\n<| c |>\nThis solution works great\
    \ for me. Thanks!\n<|/ c |>\n<| c |>\nThis solution works great for me. Thanks!\n\
    <|/ c |>\n<| a dscore=5 |>\nI wrote a function that does this for me:\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwz39kxgx.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = $range[0];\n  $range = array_sum($range);\n\
    \  $range = 1 / $range;\n  foreach ($numbers as $number) {\n    $numbers[$number]\
    \ = $range * $number;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, float given in\
    \ /tmp/tmpthe7lz2t.php on line 15\n\nWarning: Division by zero in /tmp/tmpthe7lz2t.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthe7lz2t.php:28\n\
    Stack trace:\n#0 /tmp/tmpthe7lz2t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpthe7lz2t.php\
    \ on line 28\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3e_ni11q.php:17\n\
    Stack trace:\n#0 /tmp/tmp3e_ni11q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3e_ni11q.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array($min / $range);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp0qvnw0xq.php on line 9\n\nWarning: Division by zero in /tmp/tmp0qvnw0xq.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qvnw0xq.php:18\n\
    Stack trace:\n#0 /tmp/tmp0qvnw0xq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0qvnw0xq.php\
    \ on line 18\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb8cm1v9.php:20\n\
    Stack trace:\n#0 /tmp/tmpvb8cm1v9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvb8cm1v9.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n  return\
    \ array_map(function ($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in the array\n<|/ c |>\n<| c |>\nIt works fine for me with negative\
    \ numbers. What input are you using?\n<|/ c |>\n<| c |>\nIt doesn't work for me\
    \ with negative numbers. I used `array(1.0, 2.0, 3.0, 4.0, -5.0)`\n<|/ c |>\n\
    <| c |>\nIt works for me with negative numbers. What input are you using?\n<|/\
    \ c |>\n<| c |>\nI used `array(1.0, 2.0, 3.0, 4.0, -5.0)`\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpssbvhqt1.php on line 19

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz6hfbc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmfz6hfbc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmfz6hfbc.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3e_ni11q.php:17\n\
    Stack trace:\n#0 /tmp/tmp3e_ni11q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3e_ni11q.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('abs', $range);\n    $range = array_sum($range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcu1t2nfw.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) use ($scale) {\n    return $scale\
    \ * $number;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[]\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9d8p_0tn.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function($number) { return $number * $scale; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n\
    \    array(\n        'id' => 1,\n        'name' => 'test1',\n        'price' =>\
    \ 10,\n        'quantity' => 10\n    ),\n    array(\n        'id' => 2,\n    \
    \    'name' => 'test2',\n        'price' => 20,\n        'quantity' => 10\n  \
    \  ),\n    array(\n        'id' => 3,\n        'name' => 'test3',\n        'price'\
    \ => 30,\n        'quantity' => 10\n    ),\n    array(\n        'id' => 4,\n \
    \       'name' => 'test4',\n        'price' => 40,\n        'quantity' => 10\n\
    \    ),\n    array(\n        'id' => 5,\n        'name' => 'test5',\n        'price'\
    \ => 50,\n        'quantity' => 10\n    ),\n    array(\n        'id' => 6,\n \
    \       'name' => 'test6',\n        'price' => 60,\n        'quantity' => 10\n\
    \    ),\n    array(\n        'id' => 7,\n        'name' => 'test7',\n        'price'\
    \ => 70,\n        'quantity' => 10\n    ),\n    array(\n        'id' => 8,\n \
    \       'name' => 'test8',\n        'price' => 80,\n        'quantity' => 10\n\
    \    ),\n    array(\n        'id' => 9,\n        'name' => 'test9',\n        'price'\
    \ => 90,\n        'quantity' => 10\n    ),\n    array(\n        'id' => 10,\n\
    \        'name' => 'test10',\n        'price' => 100,\n        'quantity' => 10\n\
    \    ),\n    array(\n        'id' => 11,\n        'name' => 'test11',\n      \
    \  'price' => 110,\n        'quantity' => 10\n    ),\n    array(\n        'id'\
    \ => 12,\n        'name' => 'test12',\n        'price' => 120,\n        'quantity'\
    \ => 10\n    ),\n    array(\n        'id' => 13,\n        'name' => 'test13',\n\
    \        'price' => 130,\n        'quantity' => 10\n    ),\n    array(\n     \
    \   'id' => 14,\n        'name' => 'test14',\n        'price' => 140,\n      \
    \  'quantity' => 10\n    ),\n    array(\n        'id' => 15,\n        'name' =>\
    \ 'test15',\n        'price' => 150,\n        'quantity' => 10\n    ),\n    array(\n\
    \        'id' => 16,\n        'name' => 'test16',\n        'price' => 160,\n \
    \       'quantity' => 10\n    ),\n    array(\n        'id' => 17,\n        'name\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkmrgby1_.php on line 12

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return array_map(function ($number) {\n        return\
    \ $number / $range[count($range) - 1];\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp5a1ibbmt.php on line 15\n\nWarning: Division by zero in\
    \ /tmp/tmp5a1ibbmt.php on line 15\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp5a1ibbmt.php on line 15\n\n\
    Warning: Division by zero in /tmp/tmp5a1ibbmt.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5a1ibbmt.php:24\nStack trace:\n#0 /tmp/tmp5a1ibbmt.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5a1ibbmt.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer as it is the most\
    \ accurate and most concise solution.\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer as it is the most accurate and most concise solution.\n<|/ c |>\n<| c\
    \ |>\nThis should be the accepted answer as it is the most accurate and most concise\
    \ solution.\n<|/ c |>\n<| c |>\nThis should be the accepted answer as it is the\
    \ most accurate and most concise solution.\n<|/ c |>\n<| c |>\nThis should be\
    \ the accepted answer as it is the most accurate and most concise solution.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($number)\
    \ {\n    return $number / $max - $min;\n}, $numbers);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis should be the accepted answer as it is the most accurate and\
    \ most concise solution.\n<|/ c |>\n<| c |>\nThis should be the accepted answer\
    \ as it is the most accurate and most concise solution.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer as it is the most accurate and most concise solution.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer as it is the most accurate\
    \ and most concise solution.\n<|/ c |>\n<| c |>\nThis should be the accepted answer\
    \ as it is the most accurate and most concise solution.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n\
    $max = max($numbers);\n$numbers = array_map(function($number) {\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the accepted answer as it is the most accurate and most concise solution.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplz5x5rgl.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp0yuavsij.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp0yuavsij.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0yuavsij.php:19\nStack trace:\n#0 /tmp/tmp0yuavsij.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0yuavsij.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  $range[] = $max\
    \ - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jxgtbks.php:22\n\
    Stack trace:\n#0 /tmp/tmp_jxgtbks.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_jxgtbks.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1.0;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$numbers = array(\n    array(\n        'id' => 1,\n        'name' => 'John',\n\
    \        'age' => 30,\n        'weight' => 70,\n        'height' => 170\n    ),\n\
    \    array(\n        'id' => 2,\n        'name' => 'Jane',\n        'age' => 25,\n\
    \        'weight' => 70,\n        'height' => 170\n    ),\n    array(\n      \
    \  'id' => 3,\n        'name' => 'Jack',\n        'age' => 25,\n        'weight'\
    \ => 70,\n        'height' => 170\n    ),\n    array(\n        'id' => 4,\n  \
    \      'name' => 'Jill',\n        'age' => 25,\n        'weight' => 70,\n    \
    \    'height' => 170\n    ),\n    array(\n        'id' => 5,\n        'name' =>\
    \ 'Jack',\n        'age' => 25,\n        'weight' => 70,\n        'height' =>\
    \ 170\n    ),\n    array(\n        'id' => 6,\n        'name' => 'Jill',\n   \
    \     'age' => 25,\n        'weight' => 70,\n        'height' => 170\n    ),\n\
    \    array(\n        'id' => 7,\n        'name' => 'Jack',\n        'age' => 25,\n\
    \        'weight' => 70,\n        'height' => 170\n    ),\n    array(\n      \
    \  'id' => 8,\n        'name' => 'Jill',\n        'age' => 25,\n        'weight'\
    \ => 70,\n        'height' => 170\n    ),\n    array(\n        'id' => 9,\n  \
    \      'name' => 'Jack',\n        'age' => 25,\n        'weight' => 70,\n    \
    \    'height' => 170\n    ),\n    array(\n        'id' => 10,\n        'name'\
    \ => 'Jill',\n        'age' => 25,\n        'weight' => 70,\n        'height'\
    \ => 170\n    ),\n    array(\n        'id' => 11,\n        'name' => 'Jack',\n\
    \        'age' => 25,\n        'weight' => 70,\n        'height' => 170\n    ),\n\
    \    array(\n        'id' => 12,\n        'name' => 'Jill',\n        'age' =>\
    \ 25,\n        'weight' => 70,\n        'height' => 170\n    ),\n    array(\n\
    \        'id' => 13,\n        'name' => 'Jack',\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptdkjbpoa.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfrci7p2o.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the\
    \ answer. I've tried your solution and it works perfectly. I've added my own answer\
    \ with my own code which I believe is more efficient than yours. Thanks again\
    \ for the help.\n<|/ c |>\n<| a tags=php,arrays |>\nI believe I've found a more\
    \ efficient solution. I've added my own answer with my own code which I believe\
    \ is more efficient than yours. Thanks again for the help.\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe6l1n3cy.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($number) use ($min, $max, $range) {\n\
    \        return $min + ($number - $min) / $range;\n    }, $numbers);\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis works great, thank you! I added a little bit\
    \ of code to make it work for an array of arrays, too. `array_map(function ($numbers)\
    \ {\n        return array_map(function ($number) {\n            return $min +\
    \ ($number - $min) / $range;\n        }, $numbers);\n    }, $numbers);`\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. I added a fix for that\
    \ as well.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that does this for\
    \ me:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo8_yw6f_.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($number) use ($min, $max, $range) {\n\
    \        return $min + ($number - $min) / $range;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpnjabh2il.php on line 9\n\nWarning: Division by zero in /tmp/tmpnjabh2il.php\
    \ on line 11\n\nWarning: Division by zero in /tmp/tmpnjabh2il.php on line 11\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjabh2il.php:20\nStack\
    \ trace:\n#0 /tmp/tmpnjabh2il.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpnjabh2il.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfrci7p2o.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('abs', $range);\n    $range[] = 1.0;\n    $range =\
    \ array_map('sqrt', $range);\n    $range = array_map('round', $range);\n    $range\
    \ = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n   \
    \ return array_map(function ($number) {\n        return $number / $range[0];\n\
    \    }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the\
    \ solution from and modified it a little bit to make it more generic and to allow\
    \ for negative numbers:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf5fm37gs.php on line 23

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range[]\
    \ = 1;\n    $range = array_map('round', $range);\n    return $range;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nI wrote a function that does this for me:\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9i6z76rs.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThanks for your answer, but this\
    \ doesn't work. Your function returns `array(0.5, 0.5, 0.5, 0.5, 0.5)` instead\
    \ of `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I used `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input. Are you sure you used\
    \ the correct input?\n<|/ c |>\n<| c |>\nYes, I used `array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)` as input. I'm sorry, I didn't realize you were using floats. I updated\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer with a\
    \ function that should work with floats.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I tested it and it works. I used `array(1.0, 2.0, 3.0, 4.0, 5.0)` as input.\
    \ I'm sorry, I didn't realize you were using floats. I updated my question to\
    \ reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n$max = max($numbers);\n$numbers\
    \ = array_map(function ($num) use ($min, $max) {\n    return $num - $min / ($max\
    \ - $min);\n}, $numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,math |>\n\
    <| c |>\nThanks for your answer, but this doesn't work. Your function returns\
    \ `array(0.5, 0.5, 0.5, 0.5, 0.5)` instead of `array(0.0, 0.25, 0.5, 0.75, 1.0)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used `array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)` as input. Are you sure you used the correct input?\n<|/ c |>\n<| c |>\n\
    I updated my question to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function ($num) use ($min, $max) {\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcshr_6l3.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n\
    \    array(\n        'number' => 1,\n        'name' => 'one'\n    ),\n    array(\n\
    \        'number' => 2,\n        'name' => 'two'\n    ),\n    array(\n       \
    \ 'number' => 3,\n        'name' => 'three'\n    ),\n    array(\n        'number'\
    \ => 4,\n        'name' => 'four'\n    ),\n    array(\n        'number' => 5,\n\
    \        'name' => 'five'\n    ),\n    array(\n        'number' => 6,\n      \
    \  'name' => 'six'\n    ),\n    array(\n        'number' => 7,\n        'name'\
    \ => 'seven'\n    ),\n    array(\n        'number' => 8,\n        'name' => 'eight'\n\
    \    ),\n    array(\n        'number' => 9,\n        'name' => 'nine'\n    )\n\
    );\n\n$numbers = array_map(function($number) {\n    return $number['number'] /\
    \ 10;\n}, $numbers);\n\nvar_dump($numbers);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$numbers = array(\n    array(\n        'number'\
    \ => 1,\n        'name' => 'one'\n    ),\n    array(\n        'number' => 2,\n\
    \        'name' => 'two'\n    ),\n    array(\n        'number' => 3,\n       \
    \ 'name' => 'three'\n    ),\n    array(\n        'number' => 4,\n        'name'\
    \ => 'four'\n    ),\n    array(\n        'number' => 5,\n        'name' => 'five'\n\
    \    ),\n    array(\n        'number' => 6,\n        'name' => 'six'\n    ),\n\
    \    array(\n        'number' => 7,\n        'name' => 'seven'\n    ),\n    array(\n\
    \        'number' => 8,\n        'name' => 'eight'\n    ),\n    array(\n     \
    \   'number' => 9,\n        'name' => 'nine'\n    )\n);\n\n$numbers = array_map(function($number)\
    \ {\n    return $number['number'] / 10;\n}, $numbers);\n\nvar_dump($numbers);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$numbers\
    \ = array(\n    array(\n        'number' => 1,\n        'name' => 'one'\n    ),\n\
    \    array(\n        'number' => 2,\n        'name' => 'two\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu2__v0qw.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1.0;\n    $range[] = $max - $min;\n    return $range;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvtjln9u.php:23\n\
    Stack trace:\n#0 /tmp/tmpwvtjln9u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwvtjln9u.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz6hfbc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmfz6hfbc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmfz6hfbc.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work if the array is of length\
    \ 1. For example `array(1.0)` returns `array(0)`.\n<|/ c |>\n<| c |>\nI added\
    \ a fix for that case\n<|/ c |>\n<| a dscore=2 |>\nI wrote a PHP function which\
    \ can do this:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3c79aflt.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $scale = 1 / $range;\n\
    \  foreach ($numbers as $number) {\n    $numbers[$number] = $scale * $number;\n\
    \  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqfyfxwg.php:27\n\
    Stack trace:\n#0 /tmp/tmpxqfyfxwg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxqfyfxwg.php\
    \ on line 27\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max\
    \ - $min);\n    return array_map(function ($number) use ($scale) {\n        return\
    \ $number * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuutkhc7a.php:20\n\
    Stack trace:\n#0 /tmp/tmpuutkhc7a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpuutkhc7a.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5395q53.php:19\n\
    Stack trace:\n#0 /tmp/tmpg5395q53.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg5395q53.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return array_map(function ($number) {\n        return\
    \ $number / $range[0];\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpylx8lfmv.php on line 15\n\nWarning:\
    \ Division by zero in /tmp/tmpylx8lfmv.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpylx8lfmv.php:24\nStack trace:\n#0 /tmp/tmpylx8lfmv.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpylx8lfmv.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4zwhatya.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array($min / $range);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp0qvnw0xq.php on line 9\n\nWarning: Division by zero in /tmp/tmp0qvnw0xq.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qvnw0xq.php:18\n\
    Stack trace:\n#0 /tmp/tmp0qvnw0xq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0qvnw0xq.php\
    \ on line 18\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp297waeop.php:19\n\
    Stack trace:\n#0 /tmp/tmp297waeop.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp297waeop.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis works great! I added a little bit of code to\
    \ make it work with negative numbers as well. `return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);`\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `array_map('abs', $numbers)` before\
    \ `min` and `max`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `array_map('abs', $numbers)` before `min` and `max`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `array_map('abs', $numbers)` before\
    \ `min` and `max`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `array_map('abs', $numbers)` before `min` and `max`.\n<|/ c |>\n<| a dscore=5\
    \ |>\nI wrote a function that does this for me:\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg928n19l.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1.0;\n    return array_map(function ($number) {\n        return\
    \ $number / $range[count($range) - 1];\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpzh_0zcpc.php on line 15\n\nWarning: Division by zero in\
    \ /tmp/tmpzh_0zcpc.php on line 15\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpzh_0zcpc.php on line 15\n\n\
    Warning: Division by zero in /tmp/tmpzh_0zcpc.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzh_0zcpc.php:24\nStack trace:\n#0 /tmp/tmpzh_0zcpc.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzh_0zcpc.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfrci7p2o.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgpha_ec.php:21\n\
    Stack trace:\n#0 /tmp/tmpcgpha_ec.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcgpha_ec.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max\
    \ - $min);\n    return array_map(function ($value) use ($scale) {\n        return\
    \ $value * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp326jrc1m.php:20\n\
    Stack trace:\n#0 /tmp/tmp326jrc1m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp326jrc1m.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hppcgnj.php:22\n\
    Stack trace:\n#0 /tmp/tmp7hppcgnj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7hppcgnj.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgpha_ec.php:21\n\
    Stack trace:\n#0 /tmp/tmpcgpha_ec.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcgpha_ec.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5ci4cuvm.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('abs', $range);\n    $range = array_sum($range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcu1t2nfw.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    $range = array_map('array_sum', $range);\n    return\
    \ $min + ($range / array_sum($range));\n}\n</code>\n<|/ a tags=php,math |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post.\n<|/ c |>\n\
    <| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$range[] = 1;\n$range = array_sum($range);\n\
    $result = $min + ($range / $numbers);\n</code>\n<|/ a tags=php,math |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_4w5cu1_.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) { return $number / $range; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work when there are\
    \ negative numbers. For example: `array(1.0, -2.0, 3.0, 4.0, -5.0)` returns `array(0.0,\
    \ -0.25, -0.5, -0.75, -1.0)`\n<|/ c |>\n<| c |>\nYes, it does. Try it out yourself\
    \ and see for yourself.\n<|/ c |>\n<| c |>\nI see it now. Sorry about that. My\
    \ bad.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu1bntj6p.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yvbwkgv.php:21\n\
    Stack trace:\n#0 /tmp/tmp0yvbwkgv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0yvbwkgv.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab3gssrq.php:22\n\
    Stack trace:\n#0 /tmp/tmpab3gssrq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpab3gssrq.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array($min / $range, $max / $range);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp39odgymc.php on line 9\n\nWarning: Division by zero in /tmp/tmp39odgymc.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp39odgymc.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39odgymc.php:18\nStack\
    \ trace:\n#0 /tmp/tmp39odgymc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp39odgymc.php\
    \ on line 18\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range\
    \ = array_map('round', $range);\n    $range[] = $max - $min;\n    return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsdy53x4.php:23\n\
    Stack trace:\n#0 /tmp/tmpqsdy53x4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqsdy53x4.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yvbwkgv.php:21\n\
    Stack trace:\n#0 /tmp/tmp0yvbwkgv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0yvbwkgv.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($num) use ($scale) {\n    return $num *\
    \ $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this\
    \ solution, however it seems to have some issues. I used it on a set of numbers\
    \ that I got from another function and I got this result: array(0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,\
    \ 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptfocf1pr.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min / ($max - $min);\n   \
    \ }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to\
    \ work when there are negative numbers in the array. For example, if I pass `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` it returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/\
    \ c |>\n<| c |>\nI updated the answer to include a solution for negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when\
    \ there are negative numbers in the array. For example, if I pass `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` it returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/\
    \ c |>\n<| c |>\nI updated the answer to include a solution for negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when\
    \ there are negative numbers in the array. For example, if I pass `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` it returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0);\n$numbers = array_map(function($number) {\n    return $number / max($numbers);\n\
    }, $numbers);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work\
    \ when there are negative numbers in the array. For example, if I pass `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` it returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0);\n$numbers = array_map(function($number) {\n    return $number / max($numbers);\n\
    }, $numbers);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work\
    \ when there are negative numbers in the array. For example, if I pass `array(1.0,\
    \ -2.0, 3.0, 4.0, -5.0)` it returns `array(0.0, -0.25, -0.5, -0.75, -1.0)`\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0);\n\
    $numbers = \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi44pyedm.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function($number) { return $number / $range; }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` returns a new array, so the original array is unaffected.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It returns a new array with the rescaled numbers. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ a new array with the rescaled numbers. Try it yourself.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it yourself. It returns a new array with the rescaled numbers.\
    \ Try it yourself.\n<|/ c |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers =\
    \ array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\nforeach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    }\n$range[] = 1;\n$numbers = array_map(function($number) { return $number / $range;\
    \ }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,math |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\nforeach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    }\n$range[] = 1;\n$numbers = array_map(function($number) { return $number / $range;\
    \ }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,math |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\nforeach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    }\n$range[] = 1;\n$numbers = array_map(function($number) { return \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1yad7bzj.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('array_sum', $range);\n\
    \  $range = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\
    \ / count($v);'), $range);\n  $range = array_map('array_sum', $range);\n  $range\
    \ = array_map('array_reverse', $range);\n  $range = array_map('array_filter',\
    \ $range);\n  $range = array_map('array_map', create_function('$v', 'return $v\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptcwv8pxl.php on line 45

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp297waeop.php:19\n\
    Stack trace:\n#0 /tmp/tmp297waeop.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp297waeop.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfrci7p2o.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hppcgnj.php:22\n\
    Stack trace:\n#0 /tmp/tmp7hppcgnj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7hppcgnj.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays,math |>\n<| a dscore=2 |>\nI made a function that does this\
    \ for you:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpddk5xbyl.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array($min\
    \ / $max, $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj45sq2kw.php:17\n\
    Stack trace:\n#0 /tmp/tmpj45sq2kw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj45sq2kw.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $scale = 1 / $range;\n    return array_map(function ($num) use\
    \ ($scale) {\n        return $num * $scale;\n    }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. `array_map` seems to return an array with negative numbers\
    \ converted to positive numbers. `array_filter` seems to return an array with\
    \ negative numbers converted to zero. `array_reduce` seems to return an array\
    \ with negative numbers converted to negative numbers. `array_sum` seems to return\
    \ an array with negative numbers converted to positive numbers. `array_product`\
    \ seems to return an array with negative numbers converted to positive numbers.\
    \ `array_reduce` seems to return an array with negative numbers converted to negative\
    \ numbers. `array_sum` seems to return an array with negative numbers converted\
    \ to positive numbers. `array_product` seems to return an array with negative\
    \ numbers converted to positive numbers. `array_sum` seems to return an array\
    \ with negative numbers converted to positive numbers. `array_product` seems to\
    \ return an array with negative numbers converted to positive numbers. `array_sum`\
    \ seems to return an array with negative numbers converted to positive numbers.\
    \ `array_product` seems to return an array with negative numbers converted to\
    \ positive numbers. `array_sum` seems to return an array with negative numbers\
    \ converted to positive numbers. `array_product` seems to return an array with\
    \ negative numbers converted to positive numbers. `array_sum` seems to return\
    \ an array with negative numbers converted to positive numbers. `array_product`\
    \ seems to return an array with negative numbers converted to positive numbers.\
    \ `array_sum` seems to return an array with negative numbers converted to positive\
    \ numbers. `array_product` seems to return an array with negative numbers converted\
    \ to positive numbers. `array_sum` seems to return an array with negative numbers\
    \ converted to positive numbers. `array_product` seems to return an array with\
    \ negative numbers converted to positive numbers. `array_sum` seems to return\
    \ an array with negative numbers converted to positive numbers. `array_product`\
    \ seems to return an array with negative numbers converted to positive numbers.\
    \ `array_sum` seems to return an array with negative numbers converted to positive\
    \ numbers. `array_product` seems to return an array with negative numbers converted\
    \ to positive numbers. `array_sum` seems to return an array with negative numbers\
    \ converted to positive numbers. `array_product` seems to return an array with\
    \ negative numbers converted to positive numbers. `array_sum` seems to return\
    \ an array with negative numbers converted to positive numbers. `array_product`\
    \ seems to return an array with negative numbers converted to positive numbers.\
    \ `array_sum` seems to return an array with negative numbers converted to positive\
    \ numbers. `array_product` seems to return an array with negative numbers converted\
    \ to positive numbers. `array_sum` seems to return an array with negative \nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwvtpjq43.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$newNumbers = array();\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$range[] = 1;\nforeach ($range\
    \ as $number) {\n    $newNumbers[] = $number/($max-$min);\n}\nprint_r($newNumbers);\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbppim8xh.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa1osw1f4.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('abs', $range);\n    $range = array_sum($range);\n\
    \    $range /= count($numbers);\n    return array_map(function ($number) {\n \
    \       return $number / $range;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` doesn't seem to like `array_sum`\
    \ as an argument. `array_sum` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map`\
    \ as an argument. `array_map` doesn't seem to like `array_map` as an argument.\
    \ `array_map` doesn't seem to like `array_map` as an argument. `array_map` doesn't\
    \ seem to like `array_map` as an argument. `array_map` doesn't seem to like `array_map\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpirz3d30u.php on line 20

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $min + $range[0] * $range[1] / $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalkxc5f4.php:21\n\
    Stack trace:\n#0 /tmp/tmpalkxc5f4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpalkxc5f4.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return array_map(function($number) { return $number\
    \ / $range; }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpub64of05.php on line 14\n\nWarning:\
    \ Division by zero in /tmp/tmpub64of05.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpub64of05.php:22\nStack trace:\n#0 /tmp/tmpub64of05.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpub64of05.php on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz6hfbc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmfz6hfbc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmfz6hfbc.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48cojhi7.php:19\n\
    Stack trace:\n#0 /tmp/tmp48cojhi7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp48cojhi7.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3e_ni11q.php:17\n\
    Stack trace:\n#0 /tmp/tmp3e_ni11q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3e_ni11q.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp0yuavsij.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp0yuavsij.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0yuavsij.php:19\nStack trace:\n#0 /tmp/tmp0yuavsij.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0yuavsij.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range\
    \ = array_map('round', $range);\n    $range = array_map('floor', $range);\n  \
    \  $range = array_map('ceil', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq9jv3051.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yvbwkgv.php:21\n\
    Stack trace:\n#0 /tmp/tmp0yvbwkgv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0yvbwkgv.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function($number) { return $number / $range; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI like your approach, but I still don't\
    \ understand why my code doesn't work. Can you explain why my code doesn't work?\n\
    <|/ c |>\n<| c |>\nI added a comment to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to my answer.\n<|/ c |>\n<| c |>\nI added a comment to my answer.\n\
    <|/ c |>\n<| c |>\nI added a comment to my answer.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\nThe problem is that the function array_map() does not preserve the keys\
    \ of the array. \nThe function array_map() will apply the callback function to\
    \ each element of the array and return the result as an array. \nThe function\
    \ array_map() will preserve the keys of the array if the callback function returns\
    \ an array with the same number of elements as in the original array. \nIf the\
    \ callback function returns an array with less number of elements, the function\
    \ array_map() will preserve the keys of the original array and will add new keys\
    \ to the result array. \nIf the callback function returns an array with more number\
    \ of elements, the function array_map() will preserve the keys of the original\
    \ array and will remove keys from the result array. \nIf the callback function\
    \ returns an array with less number of elements, the function array_map() will\
    \ preserve the keys of the original array and will add new keys to the result\
    \ array. \nIf the callback function returns an array with more number of elements,\
    \ the function array_map() will preserve the keys of the original array and will\
    \ remove keys from the result array. \nIf the callback function returns an empty\
    \ array, the function array_map() will preserve the keys of the original array\
    \ and will add new keys to the result array. \nIf the callback function returns\
    \ an empty array, the function array_map() will preserve the keys of the original\
    \ array and will remove keys from the result array. \nIf the callback function\
    \ returns null, array_map() will preserve the keys of the original array and will\
    \ add new keys to the result array. \nIf the callback function returns null, array_map()\
    \ will preserve the keys of the original array and will remove keys from the result\
    \ array. \nIf the callback function returns 0, array_map() will preserve the keys\
    \ of the original array and will add new keys to the result array. \nIf the callback\
    \ function returns 0, array_map() will preserve the keys of the \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp21z81pfu.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n\
    $min = min($array);\n$max = max($array);\n$array2 = array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$array2 = array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n}, $array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = array_map(function ($number) {\n    return $number / $max - $min;\n\
    }, $array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$array2 = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| c |>\nPlease add some explanation to your answer such\
    \ that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array =\
    \ [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$array2 = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = [1, 2,\
    \ 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$array2 = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppoqre14v.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('sqrt', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('min', $range);\n    $range = array_map('max',\
    \ $range);\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpwcxx6dxy.php on line 17\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwcxx6dxy.php on line 17\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpwcxx6dxy.php\
    \ on line 18\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwcxx6dxy.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwcxx6dxy.php:27\nStack trace:\n#0 /tmp/tmpwcxx6dxy.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwcxx6dxy.php on line 27\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array($min / $range);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks so much! I ended up using your function and added a little bit\
    \ of code to make it more robust. I'll post the code as an answer below.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\nI ended up using 's answer but added some code\
    \ to make it more robust. \n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_3fyljv3.php on line 12

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    $range[] = $max - $min;\n    return $range;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ojj5xe7.php:23\n\
    Stack trace:\n#0 /tmp/tmp4ojj5xe7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4ojj5xe7.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, this works great! I added a little bit of\
    \ code to make it work for an array of arrays as well:\n\n`function rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, array_map(function ($number)\
    \ {\n    return $number;\n  }, $numbers));\n}`\n<|/ c |>\n<| c |>\nI added a version\
    \ that works for an array of arrays as well. Thanks again!\n<|/ c |>\n<| c |>\n\
    This doesn't work if you have a negative number in the array. For example, `array(1.0,\
    \ -2.0, 3.0, 4.0, 5.0)` returns `array(0.5, 0.5, 1.0, 0.5, 1.0)`.\n<|/ c |>\n\
    <| c |>\nI added a version that works for negative numbers as well. Thanks again!\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb2l09a4j.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgf0ujcmo.php:19\n\
    Stack trace:\n#0 /tmp/tmpgf0ujcmo.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgf0ujcmo.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't seem to work when there are negative numbers\
    \ in the array. For example, if I do `array_map(function ($number) {\n    return\
    \ $number - $min;\n  }, array(1.0, -2.0, 3.0, 4.0, 5.0))` I get `array(0.0, -0.25,\
    \ 0.5, 0.75, 1.0)` instead of `array(0.0, -0.5, -0.75, 1.0, 1.0)`\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require negative numbers in the array.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in\
    \ the array. For example, if I do `array_map(function ($number) {\n    return\
    \ $number - $min;\n  }, array(1.0, -2.0, 3.0, 4.0, 5.0))` I get `array(0.0, -0.25,\
    \ 0.5, 0.75, 1.0)` instead of `array(0.0, -0.5, -0.75, 1.0, 1.0)`\n<|/ c |>\n\
    <| c |>\nI added a solution that doesn't require negative numbers in the array.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in\
    \ the array. For example, if I do `array_map(function ($number) {\n    return\
    \ $number - $min;\n  }, array(1.0, -2.0, 3.0, 4.0, 5.0))` I get `array(0.0, -0.25,\
    \ 0.5, 0.75, 1.0)` instead of `array(0.0, -0.5, -0.75, 1.0, 1.0)`\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf0_5dzcj.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1.0;\n    $range = array_map('sqrt', $range);\n    $range\
    \ = array_map('round', $range);\n    $range = array_map('ceil', $range);\n   \
    \ $range = array_map('floor', $range);\n    $range = array_map('min', $range);\n\
    \    $range = array_map('max', $range);\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp22kdg59w.php on line 18\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp22kdg59w.php on line 18\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmp22kdg59w.php\
    \ on line 18\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp22kdg59w.php on line 19\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp22kdg59w.php on line 19\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmp22kdg59w.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22kdg59w.php:28\n\
    Stack trace:\n#0 /tmp/tmp22kdg59w.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp22kdg59w.php\
    \ on line 28\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the array has negative numbers.\
    \ Try `array_map('round', array(1.0, 2.0, 3.0, 4.0, 5.0))`.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't require negative numbers. I hope it's useful.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array has negative numbers. Try `array_map('round',\
    \ array(1.0, 2.0, 3.0, 4.0, 5.0))`.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ doesn't require negative numbers. I hope it's useful.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array has negative numbers. Try `array_map('round', array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))`.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzbh1rwa5.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48cojhi7.php:19\n\
    Stack trace:\n#0 /tmp/tmp48cojhi7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp48cojhi7.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function($number) { return $number / $range; }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small function that\
    \ does this for me:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt5adu34v.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab3gssrq.php:22\n\
    Stack trace:\n#0 /tmp/tmpab3gssrq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpab3gssrq.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| c |>\nI like your answer, but I don't think it works.\
    \ Try it on `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)`\n<|/ c |>\n<| c |>\n\
    I tested it on `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` and it works fine.\
    \ Can you give me an example where it doesn't work?\n<|/ c |>\n<| c |>\n`array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7,\
    \ 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2,\
    \ 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)` => `array(0.2, 0.3, 0.4, 0.\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2oxzsbdj.php on line 21

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('sqrt', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('min', $range);\n    $range = array_map('max',\
    \ $range);\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpwcxx6dxy.php on line 17\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpwcxx6dxy.php on line 17\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpwcxx6dxy.php\
    \ on line 18\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpwcxx6dxy.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwcxx6dxy.php:27\nStack trace:\n#0 /tmp/tmpwcxx6dxy.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwcxx6dxy.php on line 27\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return array_map(function ($number) {\n        return\
    \ $number / $range[0];\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    $array = array_map('round', $array);\n$array = array_map('ceil', $array);\n$array\
    \ = array_map('floor', $array);\n$array = array_map('round', $array);\n$array\
    \ = array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array =\
    \ array_map('round', $array);\n$array = array_map('ceil', $array);\n$array = array_map('floor',\
    \ $array);\n$array = array_map('round', $array);\n$array = array_map('ceil', $array);\n\
    $array = array_map('floor', $array);\n$array = array_map('round', $array);\n$array\
    \ = array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array =\
    \ array_map('round', $array);\n$array = array_map('ceil', $array);\n$array = array_map('floor',\
    \ $array);\n$array = array_map('round', $array);\n$array = array_map('ceil', $array);\n\
    $array = array_map('floor', $array);\n$array = array_map('round', $array);\n$array\
    \ = array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array =\
    \ array_map('round', $array);\n$array = array_map('ceil', $array);\n$array = array_map('floor\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe5vsp58i.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $n) {\n    $range[] = $n - $min;\n  }\n  $range = array_map('round',\
    \ $range);\n  return array_map(function($n) {\n    return $n / $range;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp6ctk8fnu.php on line 15\n\nWarning:\
    \ Division by zero in /tmp/tmp6ctk8fnu.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6ctk8fnu.php:24\nStack trace:\n#0 /tmp/tmp6ctk8fnu.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6ctk8fnu.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array($min / $max,\
    \ $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3e_ni11q.php:17\n\
    Stack trace:\n#0 /tmp/tmp3e_ni11q.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3e_ni11q.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array($min\
    \ / $max, $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj45sq2kw.php:17\n\
    Stack trace:\n#0 /tmp/tmpj45sq2kw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj45sq2kw.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab3gssrq.php:22\n\
    Stack trace:\n#0 /tmp/tmpab3gssrq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpab3gssrq.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return array_map(function ($number) { return $number / $range;\
    \ }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math |>\nI wrote\
    \ a function to do this, it works for any number of dimensions.\n<code>\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpywz0_xsu.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min / $max;\n    }, $numbers);\n\
    }\n</code>\n<|/ a dscore=5 tags=arrays,php |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n\
    <| c |>\nThis should be the accepted answer. Works perfectly for me. Thanks!\n\
    <|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\n\n$min = min($array);\n$max = max($array);\n\n$array = array_map(function($value)\
    \ use ($min, $max) {\n    return $value - $min / $max;\n}, $array);\n\nprint_r($array);\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. Works\
    \ perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the accepted\
    \ answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should be the\
    \ accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. Works perfectly for me. Thanks!\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$min = min($array);\n\
    $max = max($array);\n$array = array_map(function($value) use ($min, $max) {\n\
    \    return $value - $min / $max;\n}, $array);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis should be the accepted answer. Works perfectly for me. Thanks!\n\
    <|/ c |>\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsxm0czta.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min / $max;\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc3ovqsi2.php:19\n\
    Stack trace:\n#0 /tmp/tmpc3ovqsi2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpc3ovqsi2.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return array_map(function ($number) {\n        return\
    \ $number / $range[count($range) - 1];\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp5a1ibbmt.php on line 15\n\nWarning: Division by zero in\
    \ /tmp/tmp5a1ibbmt.php on line 15\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp5a1ibbmt.php on line 15\n\n\
    Warning: Division by zero in /tmp/tmp5a1ibbmt.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5a1ibbmt.php:24\nStack trace:\n#0 /tmp/tmp5a1ibbmt.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5a1ibbmt.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array($min\
    \ / $max, $max / $min);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj45sq2kw.php:17\n\
    Stack trace:\n#0 /tmp/tmpj45sq2kw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj45sq2kw.php\
    \ on line 17\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a |>\n<| a tags=php,arrays,math |>\nI came up\
    \ with a solution that is pretty simple.\n<code>\n<?php\n$numbers = array(\n \
    \   1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n\
    \    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n\
    \    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n\
    \    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n\
    \    38,\n    39,\n    40\n);\n\n$min = min($numbers);\n$max = max($numbers);\n\
    $scale = 1 / ($max - $min);\n\n$numbers = array_map(function ($number) {\n   \
    \ return $number * $scale;\n}, $numbers);\n\nprint_r($numbers);\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\n$numbers = array(\n    1,\n    2,\n    3,\n\
    \    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n \
    \   13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n\
    \    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n\
    \    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n\
    \    40\n);\n\n$min = min($numbers);\n$max = max($numbers);\n$scale = 1 / ($max\
    \ - $min);\n\n$numbers = array_map(function ($number) {\n    return $number *\
    \ $scale;\n}, $numbers);\n\nprint_r($numbers);\n</code>\n<|/ a dscore=2 tags=php,arrays,math\
    \ |>\n<| a tags=php,arrays,math |>\n<code>\n<?php\n$numbers = array(\n    1,\n\
    \    2,\n    3,\n    4,\n    5,\n    \nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkojevqp4.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$array = array_map('intval', $array);\n$array = array_map('round', $array);\n\
    $array = array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array\
    \ = array_map('round', $array);\n$array = array_map('ceil', $array);\n$array =\
    \ array_map('floor', $array);\n$array = array_map('round', $array);\n$array =\
    \ array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array = array_map('round',\
    \ $array);\n$array = array_map('ceil', $array);\n$array = array_map('floor', $array);\n\
    $array = array_map('round', $array);\n$array = array_map('ceil', $array);\n$array\
    \ = array_map('floor', $array);\n$array = array_map('round', $array);\n$array\
    \ = array_map('ceil', $array);\n$array = array_map('floor', $array);\n$array =\
    \ array_map('round', $array);\n$array = array_map('ceil', $array);\n$array = array_map('floor',\
    \ $array);\n$array = array_map('round', $array);\n$array = array_map('ceil', $array);\n\
    $array = array_map('floor', $array);\n$array = array_map('round', $array);\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp42cu5i0o.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) { return $number * $scale; },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjzxhc65.php:18\n\
    Stack trace:\n#0 /tmp/tmphjzxhc65.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphjzxhc65.php\
    \ on line 18\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to work when you have negative numbers.\
    \ For example, if you have `[-3, -2, -1, 0, 1, 2, 3]` then your function returns\
    \ `[-3, -2, -1, 0, 1, 2, 3]` instead of `[-0.5, -0.25, 0.25, 0.5, 0.75, 1.0]`.\n\
    <|/ c |>\n<| c |>\nI fixed the issue by adding `abs($number)` before dividing\
    \ by `$max - $min`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work when you have\
    \ negative numbers. For example, if you have `[-3, -2, -1, 0, 1, 2, 3]` then your\
    \ function returns `[-3, -2, -1, 0, 1, 2, 3]` instead of `[-0.5, -0.25, 0.25,\
    \ 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nI fixed the issue by adding `abs($number)`\
    \ before dividing by `$max - $min`.\n<|/ c |>\n<| a dscore=3 |>\nI wrote a small\
    \ function to do this:\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4m4ofies.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThis doesn't\
    \ seem to work when there are negative numbers in the array\n<|/ c |>\n<| c |>\n\
    This doesn't seem to work when there are negative numbers in the array\n<|/ c\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array\n<|/ c |>\n<| c |>\nThis doesn't seem to work when there\
    \ are negative numbers in the array\n<|/ c |>\n<| a tags=php,arrays,math |>\n\
    <code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp69rcbt9.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmptuh65fu_.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmptuh65fu_.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptuh65fu_.php:21\nStack trace:\n#0 /tmp/tmptuh65fu_.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptuh65fu_.php on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\n\
    This doesn't seem to work when there are negative numbers in the array\n<|/ c\
    \ |>\n<| c |>\nIt works fine for me with negative numbers. What input are you\
    \ using?\n<|/ c |>\n<| c |>\nI used the array `array(1.0, 2.0, 3.0, 4.0, -5.0)`\n\
    <|/ c |>\n<| c |>\nOh, I see what you're saying. That's because `min` and `max`\
    \ ignore negative numbers. I've updated my answer to account for that.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_c2hbend.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zdrttrw.php:19\nStack trace:\n#0 /tmp/tmp5zdrttrw.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zdrttrw.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n)\
    \ use ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n)\
    \ use ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n) use\
    \ ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/ a\
    \ tags=php,arrays dscore=1 |>\n<| a dscore=0 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n)\
    \ use ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n)\
    \ use ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($n) use\
    \ ($min, $max) {\n    return $n / $max - $min;\n}, $numbers);\n</code>\n<|/\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt3kukftn.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($number) use ($min, $max, $range) {\n\
    \        return $number / $range * $max - $min;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp3q_ib0u8.php on line 9\n\nWarning: Division by zero in /tmp/tmp3q_ib0u8.php\
    \ on line 11\n\nWarning: Division by zero in /tmp/tmp3q_ib0u8.php on line 11\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q_ib0u8.php:20\nStack\
    \ trace:\n#0 /tmp/tmp3q_ib0u8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3q_ib0u8.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpusug9nsi.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = $range[0];\n  $scale = 1 / $range;\n\
    \  foreach ($numbers as $number) {\n    $numbers[$number] = $scale * $number;\n\
    \  }\n  return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp6hab7uwh.php on line 15\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp6hab7uwh.php:27\nStack trace:\n\
    #0 /tmp/tmp6hab7uwh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6hab7uwh.php\
    \ on line 27\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgpha_ec.php:21\n\
    Stack trace:\n#0 /tmp/tmpcgpha_ec.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcgpha_ec.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like this\
    \ solution, but I believe it only works if you have a list of numbers. If you\
    \ have an array of arrays, it won't work. For example: `array(array(1, 2), array(3,\
    \ 4))` will give `array(array(0, 0), array(0.5, 0.5))` instead of `array(array(0,\
    \ 0.5), array(0.5, 1))`.\n<|/ c |>\n<| c |>\nYes, it only works with a list of\
    \ numbers. If you have an array of arrays, you can do `array_map(function($a)\
    \ { return array_map(function($b) { return $b-$a; }, $a); }, $numbers);` which\
    \ should give you an array of arrays of numbers. But I agree with you that it's\
    \ not a very elegant solution.\n<|/ c |>\n<| a tags=php,math |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwiow0qm_.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range[]\
    \ = 1;\n    $range = array_map('round', $range);\n    return $range;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46qsc0x6.php:23\n\
    Stack trace:\n#0 /tmp/tmp46qsc0x6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp46qsc0x6.php\
    \ on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpusug9nsi.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5395q53.php:19\n\
    Stack trace:\n#0 /tmp/tmpg5395q53.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg5395q53.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to\
    \ work if the array is empty or contains only one element. `array_map` returns\
    \ an array with one element (null).\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. The function returns an array with one element (null),\
    \ if the input array is empty or contains only one element.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. The function returns an array with\
    \ one element (null), if the input array is empty or contains only one element.\
    \ `array_map` returns an array with one element (null), if the input array is\
    \ empty or contains only one element.\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. The function returns an array with one element (null),\
    \ if the input array is empty or contains only one element. `array_map` returns\
    \ an array with one element (null), if the input array is empty or contains only\
    \ one element.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ The function returns an array with one element (null), if the input array is\
    \ empty or contains only one element. `array_map` returns an array with one element\
    \ (null), if the input array is empty or contains only one element.\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpirr6ydsg.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($number) use ($min, $max, $range) {\n\
    \        return $number / $range * $max - $min;\n    }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work if the array is empty\
    \ or has only one element\n<|/ c |>\n<| c |>\nIt does work, I've tested it before\
    \ posting it.  What are you talking about?\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you pass an empty array or an array with only one element\n<|/ c |>\n<| c\
    \ |>\nIt does work.  It returns an array with one element that is the same as\
    \ the input array.  What are you talking about?\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if you pass an empty array or an array with only one element\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\n$array = array(1,2,3,4,5);\n$array2 = array();\n$array2[]\
    \ = $array[0];\n$array2[] = $array[1];\n$array2[] = $array[2];\n$array2[] = $array[3];\n\
    $array2[] = $array[4];\n$array2[] = $array[5];\n$array2[] = $array[6];\n$array2[]\
    \ = $array[7];\n$array2[] = $array[8];\n$array2[] = $array[9];\n$array2[] = $array[10];\n\
    $array2[] = $array[11];\n$array2[] = $array[12];\n$array2[] = $array[13];\n$array2[]\
    \ = $array[14];\n$array2[] = $array[15];\n$array2[] = $array[16];\n$array2[] =\
    \ $array[17];\n$array2[] = $array[18];\n$array2[] = $array[19];\n$array2[] = $array[20];\n\
    $array2[] = $array[21];\n$array2[] = $array[22];\n$array2[] = $array[23];\n$array2[]\
    \ = $array[24];\n$array2[] = $array[25];\n$array2[] = $array[26];\n$array2[] =\
    \ $array[27];\n$array2[] = $array[28];\n$array2[] = $array[29];\n$array2[] = $array[30];\n\
    $array2[] = $\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpugypczrb.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $scale = 1.0 /\
    \ $range;\n  foreach ($numbers as $number) {\n    $numbers[$number] = $scale *\
    \ $number;\n  }\n  return $numbers;\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't seem to work if the array has negative numbers. For example,\
    \ if `array(1.0, 2.0, 3.0, 4.0, -5.0)` is passed in, it returns `array(0.0, 0.25,\
    \ 0.5, 0.75, 1.0)` instead of `array(0.0, 0.25, 0.5, 0.75, -1.0)`.\n<|/ c |>\n\
    <| c |>\nYes, it does. I tested it before posting it. I just tested it again and\
    \ it works fine.\n<|/ c |>\n<| c |>\nI tested it again and it works fine. I've\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works fine. I've added a test case to my answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works fine. I've added a test case to my answer.\n<|/ c |>\n\
    <| a |>\n<code>\n$array = array(\n    array(\n        'name' => 'test',\n    \
    \    'value' => 1\n    ),\n    array(\n        'name' => 'test2',\n        'value'\
    \ => 2\n    ),\n    array(\n        'name' => 'test3',\n        'value' => 3\n\
    \    ),\n    array(\n        'name' => 'test4',\n        'value' => 4\n    ),\n\
    \    array(\n        'name' => 'test5',\n        'value' => 5\n    )\n);\n\n$array\
    \ = array_map(function($value){\n    return $value['value'];\n}, $array);\n\n\
    $min = min($array);\n$max = max($array);\n\n$range = array();\nforeach ($array\
    \ as $key => $value) {\n    $range[] = $value - $min;\n}\n\n$range = array_sum($range);\n\
    $scale = 1.0 / $range;\n\n$array = array_map(function($value) use ($scale) {\n\
    \    return $value * $scale;\n}, $array);\n\nprint_r($array);\n</code>\n<|/ a\
    \ tags=php,arrays dscore=2 |>\n<| c |>\nThis doesn't seem to work if the array\
    \ has negative numbers. For example, if `array(1.0, 2.0, \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpznsda2ux.php on line 21

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max\
    \ - $min);\n    return array_map(function ($num) use ($scale) {\n        return\
    \ $num * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n   \
    \ return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipnh8fbc.php:20\n\
    Stack trace:\n#0 /tmp/tmpipnh8fbc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpipnh8fbc.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function ($number) {\n    return $number / $range[$number];\n  },\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately this doesn't work as intended. `rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))` returns `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nI tested it and it works fine for\
    \ me. Are you sure you copied the code correctly? I tested it on PHP 5.6.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.6 and it works fine. Are you sure you copied\
    \ the code correctly? I tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.6 and it works fine. Are you sure you copied the code correctly? I\
    \ tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6 and it works\
    \ fine. Are you sure you copied the code correctly? I tested it on PHP 5.6.\n\
    <|/ c |>\n<| a tags=arrays,php |>\nI wrote a function that does exactly what you\
    \ want.\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpso7pgt7f.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($num) use ($min, $max, $range) {\n\
    \        return $num - $min / $range;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for the answer. I'm going to try this out and see how it\
    \ goes.\n<|/ c |>\n<| c |>\nI ended up using your solution and it worked perfectly.\
    \ Thanks again!\n<|/ c |>\n<| a tags=php,arrays,math |>\nI ended up using 's solution\
    \ and it worked perfectly. Thanks again!\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9h89xmjo.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbj9dg8n.php:22\n\
    Stack trace:\n#0 /tmp/tmpqbj9dg8n.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqbj9dg8n.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('round', $range);\n    return $range;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)` becomes `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0, 0.25,\
    \ 0.5, 0.75, 1.0)`\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are you\
    \ sure you used the code exactly as I posted? I tested it on PHP 5.3.6 and PHP\
    \ 5.5.9\n<|/ c |>\n<| c |>\nI used `array(1.0, 2.0, 3.0, 4.0, 5.0)` instead of\
    \ `array(1.0, 2.0, 3.0, 4.0, 5.0)` because I thought that `array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0)` was a typo and you meant `array(1.0, 2.0, 3.0, 4.0, 5.0)`. But it\
    \ turns out that `array(1.0, 2.0, 3.0, 4.0, 5.0)` was a typo and you meant `array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)`. Sorry for the confusion.\n<|/ c |>\n<| c |>\nNo problem.\
    \ I'm glad you got it working. I'm going to edit my answer to reflect the correct\
    \ code.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphz37arah.php on line 16

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function ($number) {\n        return $number / $range[$number];\n\
    \    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks, this\
    \ works great for me. I've added a version that doesn't require the array to be\
    \ sorted.\n<|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers.\
    \ Try it with `array(1.0, -2.0, 3.0, 4.0, -5.0)`\n<|/ c |>\n<| c |>\nI added a\
    \ version that doesn't require the array to be sorted.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwjnxwqag.php on line 17

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    return array_map(function ($number) use ($min, $max, $range) {\n\
    \        return $number - $min / $range;\n    }, $numbers);\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a |>\nI wrote a function that does this for you:\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkmrl_ges.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range\
    \ = array_map('round', $range);\n    $range = array_map('ceil', $range);\n   \
    \ $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map('floor', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('ceil', $range);\n\
    \    $range = array_map('floor', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('ceil', $range);\n    $range = array_map\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8i_fxvi2.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_map('round',\
    \ $range);\n  return array_map(function ($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nI like your\
    \ solution, but I wonder why you chose to not use array_sum() on the $range array.\
    \ Seems more elegant to me.\n<|/ c |>\n<| c |>\n: I thought that `array_sum` would\
    \ sum up all elements of the array, but I guess it does not. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\n: I added a version that uses `array_sum`.\n<|/\
    \ c |>\n<| c |>\n: I added a version that uses `array_sum`.\n<|/ c |>\n<| c |>\n\
    : I added a version that uses `array_sum`.\n<|/ c |>\n<| a tags=php,arrays,math\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfem7g7rl.php on line 22

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zdrttrw.php:19\nStack trace:\n#0 /tmp/tmp5zdrttrw.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zdrttrw.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range = array_map('sqrt', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('ceil', $range);\n    $range = array_map('floor',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = \nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnfk8j0hn.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = array();\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n\
    $range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $min;\n$range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n\
    $range[] = $max;\n$range[] = $min;\n$range[] = $max;\n$range[] = $min;\n$range[]\
    \ = $max;\n$range[] = $\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp06ofwnh5.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab3gssrq.php:22\n\
    Stack trace:\n#0 /tmp/tmpab3gssrq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpab3gssrq.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_sum($range);\n  $range = array_map('round', $range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_sum($range);\n  $range = array_map('round',\
    \ $range);\n  $range = array_map('floor', $range);\n  $range = array_map('ceil',\
    \ $range);\n  $range = array_sum($range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_sum($range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn05idpcz.php on line 62

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvrbgxalx.php on line 15\n\nWarning: Division by zero in\
    \ /tmp/tmpvrbgxalx.php on line 15\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpvrbgxalx.php on line 15\n\n\
    Warning: Division by zero in /tmp/tmpvrbgxalx.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvrbgxalx.php:24\nStack trace:\n#0 /tmp/tmpvrbgxalx.php(31):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvrbgxalx.php on line 24\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return array_map(function ($number) {\n    return $number\
    \ / $range;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like your\
    \ answer, but I think it would be better to use a `foreach` loop instead of a\
    \ `for` loop. Also, why are you using `array_map` instead of `array_walk`?\n<|/\
    \ c |>\n<| c |>\n: I used `array_map` because I wanted to keep the original array\
    \ untouched. `array_walk` would also work, but I wanted to keep the code as close\
    \ to the OP's code as possible.\n<|/ c |>\n<| c |>\nI see. Thanks for the explanation.\n\
    <|/ c |>\n<| c |>\nI like this answer, but I think it would be better to use a\
    \ `foreach` loop instead of a `for` loop. Also, why are you using `array_map`\
    \ instead of `array_walk`?\n<|/ c |>\n<| c |>\n: I used `array_map` because I\
    \ wanted to keep the original array untouched. `array_walk` would also work, but\
    \ I wanted to keep the code as close to the OP's code as possible.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$range = array();\nforeach ($numbers as $number) {\n  \
    \  $range[] = $number - $min;\n}\n$range[] = $max - $min;\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $range;\n}, $numbers);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n}\n$range[] = $max - $min;\n\
    $numbers = array_map(function ($number) {\n    return $number / $range;\n}, $numbers);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$number\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2njx6dsu.php on line 18

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi356fp3.php:21\n\
    Stack trace:\n#0 /tmp/tmppi356fp3.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppi356fp3.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nIt does work if there are negative numbers\
    \ in the array. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't\
    \ work. Try it yourself.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work. Try\
    \ it yourself. It does work. Try it yourself. It does work. Try it yourself. It\
    \ does work. Try it yourself. It does work. Try it yourself. It does work\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpunx6ybbz.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('floor',\
    \ $range);\n  $range = array_map('ceil', $range);\n  $range = array_sum($range);\n\
    \  return array_map(function($number) {\n    return $number / $range;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, float given\
    \ in /tmp/tmpksn8u_28.php on line 15\n\nWarning: array_map(): Expected parameter\
    \ 2 to be an array, null given in /tmp/tmpksn8u_28.php on line 16\n\nWarning:\
    \ array_sum() expects parameter 1 to be array, null given in /tmp/tmpksn8u_28.php\
    \ on line 17\n\nWarning: Division by zero in /tmp/tmpksn8u_28.php on line 19\n\
    \nWarning: Division by zero in /tmp/tmpksn8u_28.php on line 19\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpksn8u_28.php:28\nStack trace:\n\
    #0 /tmp/tmpksn8u_28.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpksn8u_28.php\
    \ on line 28\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range[]\
    \ = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6v9o84k.php:22\n\
    Stack trace:\n#0 /tmp/tmpj6v9o84k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj6v9o84k.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hppcgnj.php:22\n\
    Stack trace:\n#0 /tmp/tmp7hppcgnj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7hppcgnj.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max\
    \ - $min;\n    return array_map(function ($number) use ($scale) {\n        return\
    \ $number * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nI like this solution, but I guess it only works when you have two numbers.\
    \ What if I have an array of numbers of any length?\n<|/ c |>\n<| c |>\nIt will\
    \ work for any number of numbers. You just need to pass it an array with at least\
    \ two elements.\n<|/ c |>\n<| c |>\nI added a solution that will work for any\
    \ number of numbers. It's not very elegant, but it works.\n<|/ c |>\n<| c |>\n\
    I added a solution that will work for any number of numbers. It's not very elegant,\
    \ but it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$scale = 1 / $max - $min;\n$numbers\
    \ = array_map(function($number){\n    return $number * $scale;\n}, $numbers);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this solution, but I guess\
    \ it only works when you have two numbers. What if I have an array of numbers\
    \ of any length?\n<|/ c |>\n<| c |>\nIt will work for any number of numbers. You\
    \ just need to pass it an array with at least two elements.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$scale = 1 / $max - $min;\n$numbers = array_map(function($number){\n\
    \    return $number * $scale;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nI like this solution, but I guess it only works when you have two numbers.\
    \ What if I have an array of numbers of any length?\n<|/ c |>\n<| c |>\nIt will\
    \ work for any number of numbers. You just need to pass it an array with at least\
    \ two elements.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$scale = 1 / $max - \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpc3fc2oz2.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this answer,\
    \ but I'm having trouble understanding how it works. Can you explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nI understand it now. Thank you so much!\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n\n$min = min($array);\n$max = max($array);\n\
    \n$array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ * ($max - $min) / $max;\n}\n\nprint_r($array2);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max =\
    \ max($array);\n$array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key]\
    \ = $value * ($max - $min) / $max;\n}\n</code>\n<|/ a dscore=1 tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$array2 = [];\nforeach ($array as $key => $value) {\n   \
    \ $array2[$key] = $value * ($max - $min) / $max;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$array2 = [];\nforeach ($array as $key => $value) {\n   \
    \ $array2[$key] = $value * ($max - $min) / $max;\n}\nprint_r($array2);\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3onssjbh.php on line 14

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max\
    \ - $min);\n    return array_map(function ($number) use ($scale) {\n        return\
    \ $number * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuutkhc7a.php:20\n\
    Stack trace:\n#0 /tmp/tmpuutkhc7a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpuutkhc7a.php\
    \ on line 20\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ seem to work when you have negative numbers. For example: array(1.0, -2.0, 3.0,\
    \ 4.0, 5.0) returns array(0.0, -0.25, -0.5, -0.75, -1.0) instead of array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)\n<|/ c |>\n<| c |>\n: I added a fix for negative numbers.\
    \ I tested it and it works fine.\n<|/ c |>\n<| c |>\n: I added a fix for negative\
    \ numbers. I tested it and it works fine.\n<|/ c |>\n<| c |>\n: I added a fix\
    \ for negative numbers. I tested it and it works fine.\n<|/ c |>\n<| c |>\n: I\
    \ added a fix for negative numbers. I tested it and it works fine.\n<|/ c |>\n\
    <| a dscore=2 |>\nI wrote a function that does this for me:\n<code>\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbwhf1lg4.php on line 15

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays,math |>\n<| c |>\nI like this solution, but I believe it\
    \ can be improved by using array_map() instead of array_walk(). array_map() will\
    \ allow you to pass in an anonymous function instead of having to declare a named\
    \ function\n<|/ c |>\n<| c |>\nI agree, `array_map()` is better suited for this\
    \ kind of task. I've updated my answer accordingly.\n<|/ c |>\n<| a tags=php,arrays,math\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2v9990ey.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  return array_map(function($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=php,arrays,math |>\nI wrote a function that does this for me:\n\
    <code>\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3cdf1r9t.php on line 21

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfz6hfbc.php:21\n\
    Stack trace:\n#0 /tmp/tmpmfz6hfbc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmfz6hfbc.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = $max - $min;\n  return $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpab3gssrq.php:22\n\
    Stack trace:\n#0 /tmp/tmpab3gssrq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpab3gssrq.php\
    \ on line 22\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function ($number) {\n        return $number / $range[$number];\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmptgkd46fq.php on line 14\n\nWarning:\
    \ Division by zero in /tmp/tmptgkd46fq.php on line 14\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptgkd46fq.php:23\nStack trace:\n#0 /tmp/tmptgkd46fq.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptgkd46fq.php on line 23\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work if you have a negative\
    \ number in the array. For example, `array(1.0, 2.0, 3.0, -4.0, 5.0)` returns\
    \ `array(0.0, 0.25, 0.5, 0.75, 1.0)` instead of `array(0.0, 0.25, 0.5, 0.75, -1.0)`\n\
    <|/ c |>\n<| c |>\nYes, I noticed that after I posted my answer. I've updated\
    \ my answer to account for negative numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_6si8g1d.php on line 13

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    return\
    \ $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgpha_ec.php:21\n\
    Stack trace:\n#0 /tmp/tmpcgpha_ec.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcgpha_ec.php\
    \ on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('abs', $range);\n  $range = array_sum($range);\n  $range = array_map('sqrt',\
    \ $range);\n  $range = array_map('round', $range);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nI like this solution. Very elegant and simple.\n<|/\
    \ c |>\n<| c |>\nThis solution doesn't seem to work when you have negative numbers.\
    \ I used this solution to rescale my data between 0 and 1, but negative numbers\
    \ still get rescaled to the same range as positive numbers.\n<|/ c |>\n<| c |>\n\
    This solution doesn't seem to work when you have negative numbers. I used this\
    \ solution to rescale my data between 0 and 1, but negative numbers still get\
    \ rescaled to the same range as positive numbers.\n<|/ c |>\n<| c |>\nThis solution\
    \ doesn't seem to work when you have negative numbers. I used this solution to\
    \ rescale my data between 0 and 1, but negative numbers still get rescaled to\
    \ the same range as positive numbers.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ seem to work when you have negative numbers. I used this solution to rescale\
    \ my data between 0 and 1, but negative numbers still get rescaled to the same\
    \ range as positive numbers.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$array = array_map('abs', $array);\n$array =\
    \ array_sum($array);\n$array = array_map('sqrt', $array);\n$array = array_map('round',\
    \ $array);\n$array = array_map(function($number){\n    return $number / $array;\n\
    }, $array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution doesn't seem to\
    \ work when you have negative numbers. I used this solution to rescale my data\
    \ between 0 and 1, but negative numbers still get rescaled to the same range as\
    \ positive numbers.\n<|/ c |>\n<| c |>\nThis solution doesn't seem to work when\
    \ you have negative numbers. I used this solution to rescale my data between 0\
    \ and 1, but negative numbers still get rescaled to the same range as positive\
    \ numbers.\n<|/ c |>\n<| c |>\nThis solution doesn't seem to work when you have\
    \ negative \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwbpnfaoa.php on line 21

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmp5zdrttrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5zdrttrw.php:19\nStack trace:\n#0 /tmp/tmp5zdrttrw.php(26):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5zdrttrw.php on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = array_map('round', $range);\n  $range\
    \ = array_map('floor', $range);\n  $range = array_map('ceil', $range);\n  $range\
    \ = array_map('round', $range);\n  $range = array_map('floor', $range);\n  $range\
    \ = array_map('ceil', $range);\n  $range = \nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa1osw1f4.php on line 61

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n \
    \ foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmptuh65fu_.php on line 13\n\nWarning:\
    \ Division by zero in /tmp/tmptuh65fu_.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptuh65fu_.php:21\nStack trace:\n#0 /tmp/tmptuh65fu_.php(28):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptuh65fu_.php on line 21\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5395q53.php:19\n\
    Stack trace:\n#0 /tmp/tmpg5395q53.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpg5395q53.php\
    \ on line 19\n"
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max -\
    \ $min);\n  return array_map(function ($number) { return $number * $scale; },\
    \ $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your answer, but\
    \ I'm having trouble understanding how it works. Could you explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for the explanation. I'm still having trouble understanding how\
    \ it works. I understand that `array_map` passes each element of the array to\
    \ the function, but I don't understand how it knows to multiply each element by\
    \ `1/(max-min)`. Could you explain how it knows to do that?\n<|/ c |>\n<| c |>\n\
    `array_map` applies a function to each element of an array. `1/(max-min)` is just\
    \ a mathematical formula that calculates the scaling factor between min and max.\
    \ `array_map` applies that formula to each element of the array and returns the\
    \ new array.\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb_8349hc.php on line 12

    '
  timestamp: 1659730828
- exit_code: 255
  program: "<?php\n// Given array of numbers (of at least two elements), apply a linear\
    \ transform to that array,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\n// >>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n// array(0.0, 0.25, 0.5, 0.75, 1.0)\nfunction rescale_to_unit($numbers)\
    \ {\n  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = $max - $min;\n$numbers\
    \ = array_map(function($n) use ($range) {\n    return $n / $range;\n}, $numbers);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers =\
    \ array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $range = $max - $min;\n$numbers = array_map(function($n) use ($range) {\n    return\
    \ $n / $range;\n}, $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$range = $max - $min;\n$numbers = array_map(function($n) use\
    \ ($range) {\n    return $n / $range;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = $max - $min;\n$numbers\
    \ = array_map(function($n) use ($range) {\n    return $n / $range;\n}, $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = $max - $min;\n$numbers\
    \ = array_map(function($n) use ($range) {\n    return $n / $range;\n}, $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = $max - $min;\n$numbers\
    \ = array_map(function(\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqf1r_y40.php on line 13

    '
  timestamp: 1659730828
