name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $decimals = strlen($number) - strrpos($number, '.');\n    return\
    \ substr($number, 0, $decimals);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    $decimals = preg_replace('/\\.$/', '', $decimals);\n    $decimals\
    \ = preg_replace('/\\./', '', $decimals);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - ($number % 1);\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      $number = floor($number);\n        $number = $number - ($number % 1);\n\
    \        $number = $number / pow(10, $decimals);\n    }\n    return $number;\n\
    }\n", "  $parts = explode('.', $number);\n  return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $number = floor($number);\n\
    \        $number = round($number, $decimals);\n    }\n    return $number;\n}\n",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        return\
    \ 1;\n    }\n    if ($integer > 0 && $number >= 1) {\n        $decimals = strlen($number)\
    \ - strlen(floor($number)) + 1;\n    }\n    return $decimals;\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number);\n  }\n  return $number;\n}\n",
  "    if ($number < 1) {\n        return 0;\n    }\n    $factor = 1;\n    $decimals\
    \ = 0;\n    while ($number >= $factor) {\n        $decimals++;\n        $factor\
    \ *= 10;\n    }\n    return round($number / $factor, $decimals);\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0) {\n     \
    \   return substr($number, 0, $decimals);\n    }\n    return $number;\n}\n", " \
    \ return floor($number * 10) / 10;\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number / pow(10, $decimals);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return\
    \ $number;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "  $parts = explode('.', $number);\n  return $parts[1];\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works great for me. Just a small\
    \ correction: It should be `return substr($number, 0, $decimals);` instead of\
    \ `return $number;`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n   \
    \ if ($integer === 0) {\n        return 0.0;\n    }\n    if ($integer > 0 && $integer\
    \ < PHP_INT_MAX) {\n        return $integer;\n    }\n    if ($integer < 0) {\n\
    \        $decimals = floor((-$number) * LOG10E);\n        $integer = 0;\n    }\n\
    \    return round($number - $integer + $decimals, $decimals);\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return $number\
    \ > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", "  $parts = explode('.', $number);\n\
    \  return $parts[1];\n}\n", "    $decimals = preg_replace('/0+$/', '', $number);\n\
    \    return $number - $decimals;\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        return $number - ($number % 1);\n    }\n    return 0;\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    $decimals = max($decimals, 0);\n    $integer = floor($number);\n\
    \    $integer = max($integer, 0);\n    return $integer / pow(10, $decimals);\n\
    }\n", "  return floor($number * 10) / 10;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ > 0 ? $decimals : 0;\n    $integer = floor($number);\n    $integer = $integer\
    \ % 1;\n    return $integer + ($decimals > 0 ? $decimals : 0);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nI needed a solution that would work for any\
    \ number of decimal places so I came up with this:\n<code>", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, strlen($parts[1])\
    \ - 1);\n}\n", "    if ($number < 1) {\n        return 0;\n    }\n\n    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return round($number, $decimals);\n\
    }\n", "    $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $decimals\
    \ = strlen($decimals) < 2 ? 0 : substr($decimals, -2);\n    return $parts[0] .\
    \ '.' . str_pad($decimals, 2, '0', STR_PAD_LEFT);\n}\n", "    $decimals = 1;\n\
    \    $integer = floor($number);\n    if ($integer != $number) {\n        $decimals\
    \ = strlen($number) - strlen($integer);\n    }\n    return $integer + $decimals\
    \ / 2;\n}\n", "  $parts = explode('.', $number);\n  return $parts[1];\n}\n", " \
    \   $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = $number - ($decimals - 1);\n    }\n\
    \    return $number;\n}\n", "    $parts = explode('.', $number);\n    $decimals\
    \ = $parts[1];\n    $integer = $parts[0];\n    if ($decimals == '')\n        return\
    \ $integer;\n    else\n        return $integer . '.' . substr($decimals, 0, -1);\n\
    }\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return $number\
    \ < 1 ? 1 : $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return round($number, $decimals);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n", " \
    \   $parts = explode('.', $number);\n    return $parts[1];\n}\n", "  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0.0;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n  \
    \  return round($number, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n        return\
    \ floor($number);\n    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals\
    \ - strlen($decimals % 2);\n    return $number - $decimals;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    return round($number, $decimals);\n\
    }\n", "    $parts = explode('.', $number);\n    return $parts[1];\n}\n", "   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer\
    \ = floor($number);\n    $integer = $integer < 0 ? 0 : $integer;\n    return $integer\
    \ + $decimals;\n}\n", "    if ($number < 1) {\n        return 0;\n    }\n    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0) {\n     \
    \   return substr($number, 0, $decimals);\n    }\n    return $number;\n}\n", " \
    \   $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $number = floor($number);\n        $number = $number - ($number %\
    \ 1);\n        $number = $number / pow(10, $decimals);\n    }\n    return $number;\n\
    }\n", "  return intval($number * pow(10, floor(log10($number) + 1))) / pow(10,\
    \ floor(log10($number)));\n}\n", "  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number - $integer);\n \
    \ }\n  return $decimals ? round($number - $integer - $decimals, $decimals) : round($number\
    \ - $integer, $decimals);\n}\n</code>\n<|/ a tags=php,rounding |>\n<| c |>\nThis\
    \ doesn't work for negative numbers, it just returns 0.\n<|/ c |>\n<| a tags=php,rounding\
    \ |>\n<code>", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $decimals = $decimals\
    \ - 1;\n    }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    $decimals = max($decimals,\
    \ 0);\n    $integer = floor($number);\n    $integer = max($integer, 0);\n    return\
    \ $integer / pow(10, $decimals);\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals < 0) {\n        return $number;\n    }\n    $integer\
    \ = substr($number, 0, $decimals);\n    $remainder = substr($number, $decimals);\n\
    \    return $integer . '.' . substr($remainder, 0, 1);\n}\n", "  $parts = explode('.',\
    \ $number);\n  return $parts[1];\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n", "  $decimals = 1;\n\
    \  $integer = floor($number);\n  if ($integer == $number) {\n    return $integer;\n\
    \  }\n  while ($number >= 1) {\n    $decimals++;\n    $number /= 10;\n  }\n  return\
    \ $decimals;\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n   \
    \ }\n    return $number;\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $number > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number - $integer);\n    }\n    return $decimals\
    \ ? round($number, $decimals) : $number;\n}\n", "    if ($number < 1) {\n    \
    \    return 0;\n    }\n\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    while ($integer > $number) {\n        $decimals++;\n        $integer = floor($number);\n\
    \    }\n\n    return $decimals;\n}\n", "  $decimals = preg_replace('/\\./', '',\
    \ $number);\n  return round($number, $decimals);\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    if ($decimals > 0) {\n        return substr($number,\
    \ 0, $decimals);\n    }\n    return $number;\n}\n", "    if ($number < 1) {\n\
    \        return 0;\n    }\n\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return round($number, $decimals);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[0] . '.' . substr($parts[1], 0, strlen($parts[1])\
    \ - 1);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $number = floor($number);\n\
    \    }\n    return $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > 0 &&\
    \ $number < 1) {\n        return 0;\n    }\n    if ($integer > 0 && $number >=\
    \ 1) {\n        $decimals = floor($number - $integer);\n    }\n    return $decimals;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n", "    $decimals = strlen($number) - strrpos($number, '.');\n\
    \    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n   \
    \ }\n    return $number;\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n\
    \    $decimals = strlen($decimals);\n    $decimals = $decimals > 0 ? $decimals\
    \ : 0;\n    $integer = floor($number);\n    $integer = $integer < 0 ? 0 : $integer;\n\
    \    return $integer + $decimals;\n}\n", "    if ($number < 1) {\n        return\
    \ 0;\n    }\n    $decimals = 1;\n    $integer = floor($number);\n    while ($number\
    \ > $integer) {\n        $decimals++;\n        $integer = floor($number);\n  \
    \  }\n    return $decimals;\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      return $number - ($number % 1);\n    }\n    return $number;\n}\n", "  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n",
  "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return\
    \ $number;\n}\n", "  $decimals = strlen($number) - strrpos($number, '.');\n  return\
    \ substr($number, 0, $decimals);\n}\n", "    $decimals = preg_replace('/\\./',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        return floor($number);\n    }\n    return $number;\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0) {\n     \
    \   return substr($number, 0, $decimals);\n    }\n    return $number;\n}\n", " \
    \   $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $decimals;\n    }\n    $decimals = $number - $integer;\n \
    \   return $decimals;\n}\n", "  return intval(floor($number));\n}\n", "    $decimals\
    \ = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n", "    $parts = explode('.', $number);\n    return $parts[1];\n\
    }\n", "    $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer\
    \ = $parts[0];\n    if ($decimals == '')\n        return $integer;\n    return\
    \ $integer . '.' . substr($decimals, 0, 1);\n}\n", "    $parts = explode('.',\
    \ $number);\n    return $parts[1];\n}\n", "    $decimals = 1;\n    $integer =\
    \ floor($number);\n    if ($integer == $number) {\n        return $integer;\n\
    \    }\n    if ($integer > 0) {\n        $decimals = $integer - $integer;\n  \
    \  }\n    return round($number - $integer + $decimals, $decimals);\n}\n", "  \
    \  $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals\
    \ = strlen($decimals);\n  if ($decimals > 0) {\n    return $number - intval($number);\n\
    \  }\n  return $number;\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $number > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n", " \
    \   $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n    }\n    return $number;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work for negative numbers. `truncate_number(-3)` returns\
    \ `-3` instead of `-1`.\n<|/ c |>\n<| c |>\nI fixed the negative number issue,\
    \ thanks for pointing it out.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php",
  "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer / pow(10, $decimals);\n}\n", "    $parts = explode('.', $number);\n\
    \    return $parts[1];\n}\n", "    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return round($number, $decimals);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n\
    \        return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n  \
    \  }\n    return $number;\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > 0 &&\
    \ $number < 1) {\n        return 1;\n    }\n    if ($integer > 0 && $number >=\
    \ 1) {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $decimals;\n}\n", "    if ($number < 1) {\n        return 0;\n    }\n    $decimals\
    \ = 1;\n    $integer = floor($number);\n    while ($integer % 10 == 0) {\n   \
    \     $decimals++;\n        $integer /= 10;\n    }\n    return $decimals;\n}\n",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer == $number)\
    \ {\n        return $integer;\n    }\n    if ($integer < 0) {\n        $decimals\
    \ = floor($number * log10($number));\n        $number = $integer + $decimals;\n\
    \    }\n    return $number - $decimals;\n}\n", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n", "   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n", "  return floor($number\
    \ * 10 + 0.5) / 10;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
