name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $decimals = strlen($number) - strrpos($number, '.');\n    return\
    \ substr($number, 0, $decimals);\n}\n", "    $decimals = preg_replace('/0+$/',\
    \ '', $number);\n    $decimals = preg_replace('/\\.$/', '', $decimals);\n    $decimals\
    \ = preg_replace('/\\./', '', $decimals);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - ($number % 1);\n    } else\
    \ {\n        return 0;\n    }\n}\n", "    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      $number = floor($number);\n        $number = $number - ($number % 1);\n\
    \        $number = $number / pow(10, $decimals);\n    }\n    return $number;\n\
    }\n", "  $parts = explode('.', $number);\n  return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n", "    $decimals = preg_replace('/\\./', '', $number);\n    $decimals\
    \ = strlen($decimals);\n    if ($decimals > 0) {\n        $number = floor($number);\n\
    \        $number = round($number, $decimals);\n    }\n    return $number;\n}\n",
  "    $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        return\
    \ 1;\n    }\n    if ($integer > 0 && $number >= 1) {\n        $decimals = strlen($number)\
    \ - strlen(floor($number)) + 1;\n    }\n    return $decimals;\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number);\n  }\n  return $number;\n}\n",
  "    if ($number < 1) {\n        return 0;\n    }\n    $factor = 1;\n    $decimals\
    \ = 0;\n    while ($number >= $factor) {\n        $decimals++;\n        $factor\
    \ *= 10;\n    }\n    return round($number / $factor, $decimals);\n}\n", "    $decimals\
    \ = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0) {\n     \
    \   return substr($number, 0, $decimals);\n    }\n    return $number;\n}\n", " \
    \ return floor($number * 10) / 10;\n}\n", "  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n", "    $decimals = preg_replace('/\\\
    ./', '', $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0)\
    \ {\n        $decimals = $decimals - 1;\n    }\n    return $number / pow(10, $decimals);\n\
    }\n", "  $decimals = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n\
    \  if ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return\
    \ $number;\n}\n", "  $decimals = preg_replace('/\\./', '', $number);\n  return\
    \ $number - $decimals;\n}\n", "  $parts = explode('.', $number);\n  return $parts[1];\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals\
    \ > 0) {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis works great for me. Just a small\
    \ correction: It should be `return substr($number, 0, $decimals);` instead of\
    \ `return $number;`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n}\n", "    $decimals = 1;\n    $integer = floor($number);\n   \
    \ if ($integer === 0) {\n        return 0.0;\n    }\n    if ($integer > 0 && $integer\
    \ < PHP_INT_MAX) {\n        return $integer;\n    }\n    if ($integer < 0) {\n\
    \        $decimals = floor((-$number) * LOG10E);\n        $integer = 0;\n    }\n\
    \    return round($number - $integer + $decimals, $decimals);\n}\n", "  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n", "    $decimals = strlen($number) - strrpos($number, '.');\n    return $number\
    \ > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
