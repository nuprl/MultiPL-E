name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n// Write a function which sorts the given array of integers\n// in\
  \ ascending order according to the sum of their digits.\n// Note: if there are several\
  \ items with similar sum of their digits,\n// order them based on their index in\
  \ original array.\n// For example:\n// >>> order_by_points(array(1, 11, -1, -11,\
  \ -12))\n// array(-1, -11, 1, -12, 11)\n// >>> order_by_points(array())\n// array()\n\
  function order_by_points($nums) {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function($v) use ($order) {\n        return $order[$v];\n\
    \    }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, $order);\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work when\
    \ there are two or more elements with same sum.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It returns an array with elements with same sum in ascending\
    \ order.\n<|/ c |>\n<| c |>\n: I added a note about this in my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a note about this in my answer.\n<|/ c |>\n<| c |>\n\
    : I added a note about this in my answer.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $sums = array_sum($nums);\n    $sorted = array_map(function\
    \ ($num) use ($sums) {\n        return $sums - $num;\n    }, $nums);\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n \
    \ return $nums;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($v) use ($sums) {\n        return $sums\
    \ - $v;\n    }, $order);\n}\n", "    $sums = array_sum($nums);\n    $sorted =\
    \ array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n\
    \    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums[$i];\n    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums) {\n        return $sums[$v];\n    }, $order);\n}\n", "    $sums = array_sum($nums);\n\
    \    asort($nums);\n    return array_map(function($num) use ($sums) {\n      \
    \  return $sums - $num;\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  asort($nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers with the\
    \ same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or more numbers\
    \ with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there are two or\
    \ more numbers with the same sum.\n<|/ c |>\n<| c |>\nThis doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| a |>\n<code>\n$arr\
    \ = array(\n    array('name' => 'John', 'age' => 25),\n    array('name' => 'Jane',\
    \ 'age' => 20),\n    array('name' => 'Jack', 'age' => 25),\n    array('name' =>\
    \ 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    array('name'\
    \ => 'Jill', 'age' => 25),\n    array('name' => 'Jack', 'age' => 25),\n    ",
  "    $sums = array_sum($nums);\n    foreach ($nums as $i => $num) {\n        $sums[$i]\
    \ = $sums[$i] - $num;\n    }\n    return array_keys($sums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($order) {\n        return $order[$v];\n    }, $nums);\n}\n", "    $sorted\
    \ = array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ = array_sum(str_split($num));\n        $sorted[] = $num;\n    }\n    asort($sums);\n\
    \    foreach ($sums as $num => $sum) {\n        $sorted[$num] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "    $sorted = array();\n    $sums = array();\n\
    \    foreach ($nums as $num) {\n        $sums[$num] = array_sum(str_split($num));\n\
    \        $sorted[] = $num;\n    }\n    asort($sums);\n    foreach ($sums as $num\
    \ => $sum) {\n        $sorted[$num] = $nums[$sum];\n    }\n    return $sorted;\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i];\n   \
    \ }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if there are multiple items with the same sum.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are multiple items with the same sum. Try it yourself.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ multiple items with the same sum. Try it yourself.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => 20, 'score'\
    \ => 5),\n    array('name' => 'Jane', 'age' => 20, 'score' => 5),\n    array('name'\
    \ => 'Jack', 'age' => 20, 'score' => 5),\n    array('name' => 'Jill', 'age' =>\
    \ 20, 'score' => 5),\n    array('name' => 'Jack', 'age' => 20, 'score' => 5),\n\
    \    array('name' => 'Jill', 'age' => 20, 'score' => 5),\n    array('name' =>\
    \ 'Jack', 'age' => 20, 'score' => 5),\n    array('name' => 'Jill', 'age' => 20,\
    \ 'score' => 5),\n    array('name' => 'Jack', 'age' => 20, 'score' => 5),\n  \
    \  array('name' => 'Jill', 'age' => 20, 'score' => 5),\n    array('name' => 'Jack',\
    \ 'age' => 20, 'score' => 5),\n    array('name' => 'Jill', 'age' => 20, 'score'\
    \ => 5),\n    array('name' => 'Jack', 'age' => 20, 'score' => 5),\n    array('name'\
    \ => 'Jill', 'age' => 20, 'score' => 5),\n    array('name' => 'Jack', 'age' =>\
    \ 20, 'score' => 5),\n    array('name' => 'Jill', 'age' => 20, 'score' => 5),\n\
    \    array('name' => 'Jack', 'age' => 20, 'score' => 5),\n    array('name' =>\
    \ 'Jill', 'age' => 20, 'score' => 5),\n    array('name' => 'Jack', 'age", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums, $order);\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis does not work if there\
    \ are two or more items with the same sum.\n<|/ c |>\n<| c |>\nI added a note\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added a note to my answer.\n<|/ c |>\n<|\
    \ a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = array(\n    1 => 1,\n  \
    \  2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n\
    \    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13\
    \ => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 =>\
    \ 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n\
    \    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n \
    \   29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n  \
    \  34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n   \
    \ 39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44\
    \ => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 =>\
    \ 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n\
    \    55 => 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n \
    \   60 => 60,\n    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n  \
    \  65 => 65,\n    66 => 66,\n    67 => 67,\n    68 => 68,\n    ", "    $sorted\
    \ = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n     \
    \   foreach (str_split($num) as $digit) {\n            $sum += $digit;\n     \
    \   }\n        $sorted[$key] = $nums[$key];\n        $sorted[$key]->sum = $sum;\n\
    \    }\n    array_multisort($sorted);\n    return $sorted;\n}\n", "    $sums =\
    \ array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n        $sorted[$i] = $sums - $num;\n    }\n\
    \    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array_map(function\
    \ ($num) use ($sums) {\n        return $num < 0 ? $num * -1 : abs($num * $sums\
    \ - $sums);\n    }, $nums);\n    return array_map(function ($num) use ($sorted)\
    \ {\n        return $num < 0 ? $sorted[-1 - $num] : $sorted[$num];\n    }, $nums);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n$sorted = array_map(function\
    \ ($num) use ($sums) {\n    return $num < 0 ? $num * -1 : abs($num * $sums - $sums);\n\
    }, $array);\n$sorted = array_map(function ($num) use ($sorted) {\n    return $num\
    \ < 0 ? $sorted[-1 - $num] : $sorted[$num];\n}, $array);\nprint_r($sorted);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$array\
    \ = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n$sorted = array_map(function\
    \ ($num) use ($sums) {\n    return $num < 0 ? $num * -1 : abs($num * $sums - $sums);\n\
    }, $array);\n$sorted = array_map(function ($num) use ($sorted) {\n    return $num\
    \ < 0 ? $sorted[-1 - $num] : $sorted[$num];\n}, $array);\nprint_r($sorted);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(1,\
    \ 11, -1, -11, -12);\n$sums = array_sum($array);\n$sorted = array_map(function\
    \ ($num) use ($sums) {\n    return $num < 0 ? $num * -1 : abs($num * $sums - $sums);\n\
    }, $array);\n$sorted = array_map(function ($num) use ($sorted) {\n    return $num\
    \ < 0 ? $sorted[-1 - $num] : $sorted[$num];\n}, $array);\nprint_r($sorted);",
  "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    $sorted\
    \ = array_values($sorted);\n    foreach ($sorted as $i => $num) {\n        $sorted[$i]\
    \ = $sums[$i];\n    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nI like the idea of using array_sum to get the\
    \ sum of the digits. But this doesn't seem to work if the array contains negative\
    \ numbers. I added an example to the question.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that should work for negative numbers as well.\n<|/ c |>\n<| c |>\nI added a\
    \ solution that should work for negative numbers as well.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$array = array(\n    array('name' => 'John', 'age' => 25,\
    \ 'score' => 5),\n    array('name' => 'Jane', 'age' => 25, 'score' => 5),\n  \
    \  array('name' => 'Jack', 'age' => 25, 'score' => 5),\n    array('name' => 'Jill',\
    \ 'age' => 25, 'score' => 5),\n    array('name' => 'Jack', 'age' => 25, 'score'\
    \ => 5),\n    array('name' => 'Jill', 'age' => 25, 'score' => 5),\n    array('name'\
    \ => 'Jack', 'age' => 25, 'score' => 5),\n    array('name' => 'Jill', 'age' =>\
    \ 25, 'score' => 5),\n    array('name' => 'Jack', 'age' => 25, 'score' => 5),\n\
    \    array('name' => 'Jill', 'age' => 25, 'score' => 5),\n    array('name' =>\
    \ 'Jack', 'age' => 25, 'score' => 5),\n    array('name' => 'Jill', 'age' => 25,\
    \ 'score' => 5),\n    array('name' => 'Jack', 'age' => 25, 'score' => 5),\n  \
    \  array('name' => 'Jill', 'age' => 25, 'score' => 5),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'score' => 5),\n    array('name' => 'Jill', 'age' => 25, 'score'\
    \ => 5),\n    array('name' => 'Jack', 'age' => 25, 'score' => 5),\n    array('name'\
    \ => 'Jill', 'age' => 25, 'score' => 5),\n    array('name' => 'Jack', 'age' =>\
    \ 25, 'score' => 5),\n    array('name' => 'Jill', 'age' => 25, 'score' => 5),\n\
    \    array", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_map(function($v) use ($order) {\n        return $v[$order[0]];\n\
    \    }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array();\n\
    \    foreach ($nums as $i => $num) {\n        $order[$i] = $sums - $num;\n   \
    \ }\n    return $order;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  asort($order);\n  return $order;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = [\n    1 => [\n        'name' => 'John',\n\
    \        'age' => 25,\n    ],\n    2 => [\n        'name' => 'Jane',\n       \
    \ 'age' => 30,\n    ],\n    3 => [\n        'name' => 'Jack',\n        'age' =>\
    \ 25,\n    ],\n];\n\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    $arr2[$value['age']][$key]\
    \ = $value;\n}\n\n$arr3 = [];\nforeach ($arr2 as $key => $value) {\n    $arr3[$key]\
    \ = $value;\n}\n\n$arr4 = array_values($arr3);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = [\n    1 => [\n        'name' => 'John',\n\
    \        'age' => 25,\n    ],\n    2 => [\n        'name' => 'Jane',\n       \
    \ 'age' => 30,\n    ],\n    3 => [\n        'name' => 'Jack',\n        'age' =>\
    \ 25,\n    ],\n];\n\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    $arr2[$value['age']][$key]\
    \ = $value;\n}\n\n$arr3 = [];\nforeach ($arr2 as $key => $value) {\n    $arr3[$key]\
    \ = $value;\n}\n\n$arr4 = array_values($arr3);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = [\n    1 => [\n        'name'\
    \ => 'John',\n        'age' => 25,\n    ],\n    2 => [\n        'name' => 'Jane',\n\
    \        'age' => 30,\n    ],\n    3 => [\n        'name' => 'Jack',\n       \
    \ 'age' => 25,\n    ],\n];\n\n$arr2 = [];\nforeach ($arr as $key => $value) {\n\
    \    $arr2[$value['age']][$key] = $value;\n}\n\n$arr3 = [];\nforeach ($arr2 as\
    \ $key => $value) {\n    $arr3[$key] = $value;\n}\n\n$arr4 = array_values($arr3);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "    $sums = array_sum($nums);\n    $sorted = array();\n   \
    \ foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n        $sorted[$i]\
    \ = $sums[$i];\n    }\n    return $sorted;\n}\n", "    $sorted = array();\n  \
    \  foreach ($nums as $num) {\n        $digits = str_split($num);\n        $sum\
    \ = 0;\n        foreach ($digits as $digit) {\n            $sum += $digit;\n \
    \       }\n        $sorted[] = $sum;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  $sorted = array();\n  foreach ($nums as\
    \ $i => $num) {\n    $sorted[$i] = $num;\n    if ($sums[$i] == $sum) {\n     \
    \ $sorted[$i] = $i;\n    }\n  }\n  return $sorted;\n}", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", " \
    \   $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach\
    \ ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i];\n    }\n    return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  asort($order);\n  return $order;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "    $sorted = array();\n    $sums = array();\n    foreach\
    \ ($nums as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num)\
    \ {\n        $sums[$num] += $num;\n    }\n    foreach ($sums as $sum => $num)\
    \ {\n        $sorted[] = $num;\n    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "    $sorted = array();\n    foreach ($nums as $num) {\n\
    \        $digits = str_split($num);\n        $sum = 0;\n        foreach ($digits\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sorted[] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n\
    \  }, $nums);\n}\n", "  $sums = array_sum($nums);\n  asort($nums);\n  foreach\
    \ ($nums as $i => $num) {\n    $nums[$i] = $nums[$i] - $sums[$i];\n  }\n  return\
    \ $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n\
    \    return array_intersect_key($nums, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "    $sums =\
    \ array_sum($nums);\n    $order = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $order[$i] = $sums - $num;\n    }\n    return $order;\n}\n", "  \
    \  $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_intersect_key($nums, $order);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array();\n    foreach ($nums as $i => $num) {\n        $order[$i]\
    \ = $sums - $num;\n    }\n    return $order;\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  return array_map(function($v) use ($sums,\
    \ $order) {\n    return $order[$v];\n  }, $nums);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums) {\n        return $sums - $v;\n    }, $order);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try `order_by_points(array(1,-1,2,-3,4))`\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Try it here: https://3v4l.org/q8Y7h\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `order_by_points(array(1,-1,2,-3,4))` because\
    \ `array_sum` returns `-1` for `-1-1` which is not `0`\n<|/ c |>\n<| c |>\nYes,\
    \ I see that. My bad. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    $sorted = array();\n    foreach ($nums as $key => $num) {\n    \
    \    $sum = 0;\n        for ($i = strlen($num) - 1; $i >= 0; $i--) {\n       \
    \     $sum += $num[$i];\n        }\n        $sorted[$key] = $sum;\n    }\n   \
    \ asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like this solution, however it fails for negative numbers. I\
    \ added a solution that works for negative numbers. Thanks for your help!\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\nI used the solution from and added a\
    \ solution that works for negative numbers. Thanks for your help!\n<code>\n<?php",
  "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  return array_intersect_key($nums,\
    \ $order);\n}\n", "    $sums = array_sum($nums);\n    $sorted = array_map(function($num)\
    \ use ($sums) {\n        return $sums - $num;\n    }, $nums);\n    return array_values($sorted);\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there\
    \ are two or more numbers with the same sum.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: I added a note about that in the answer.\n\
    <|/ c |>\n<| c |>\n: I added a note about that in the answer.\n<|/ c |>\n<| c\
    \ |>\n: I added a note about that in the answer.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n\
    }\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums as $num)\
    \ {\n        $sums[$num] = array_sum(str_split($num));\n        $sorted[] = $num;\n\
    \    }\n    asort($sums);\n    foreach ($sums as $num => $sum) {\n        $sorted[$num]\
    \ = $sorted[$num];\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if there are two or more numbers with the same sum.\n\
    <|/ c |>\n<| c |>\n: I see what you mean. I've updated my answer to account for\
    \ that.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums, $order) {\n        return $order[$v];\n    }, $nums);\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there are two\
    \ or more items with the same sum.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It sorts them by their sum.\n<|/ c |>\n<| c |>\nIt doesn't work if there are\
    \ two or more items with the same sum.\n<|/ c |>\n<| c |>\nIt does work. Try it\
    \ yourself. It sorts them by their sum.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ there are two or more items with the same sum.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach\
    \ ($nums as $i => $num) {\n        $sorted[$i] = $num;\n        $sorted[$i] =\
    \ $sums - $num;\n    }\n    return $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if you have negative numbers in the array.\n<|/ c |>\n<| c |>\n\
    It does work if you add `if ($num < 0)` before `$sums = array_sum($nums);`\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function ($num) use ($sums) {\n    return $nums[$sums - $num];\n\
    \  }, $nums);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis is\
    \ not an answer to the question. He wants to sort by sum of digits, not by their\
    \ position in the array.\n<|/ c |>\n<| c |>\n: I didn't see that in the question.\
    \ I'll update my answer accordingly.\n<|/ c |>\n<| c |>\n: I updated my answer\
    \ to include a solution that sorts by the sum of their digits.\n<|/ c |>\n<| c\
    \ |>\n: I updated my answer to include a solution that sorts by the sum of their\
    \ digits.\n<|/ c |>\n<| c |>\n: I updated my answer to include a solution that\
    \ sorts by the sum of their digits.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\narsort($array);\n\
    $array = array_map(function ($num) use ($sums) {\n    return $sums - $num;\n},\
    \ $array);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n\
    arsort($array);\n$array = array_map(function ($num) use ($sums) {\n    return\
    \ $sums - $num;\n}, $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n\
    arsort($array);\n$array = array_map(function ($num) use ($sums) {\n    return\
    \ $sums - $num;\n}, $array);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n\
    arsort($array);\n$array = array_map(function ($num) use ($sums) {\n    return\
    \ $sums - $num;\n}, $array);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array\
    \ = array", "    $sorted = array();\n    $sums = array();\n    foreach ($nums\
    \ as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num) {\n\
    \        $sums[$num] += $num;\n    }\n    foreach ($sums as $sum => $num) {\n\
    \        $sorted[] = $num;\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try it with `[-5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nI didn't see that requirement\
    \ in the question. I'll update the answer to include a version that works with\
    \ negative numbers.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers. I tested it with `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]` and it worked\
    \ fine.\n<|/ c |>\n<| c |>\nI added a version that works with negative numbers.\
    \ I tested it with `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]` and it worked fine.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_intersect_key($nums, $order);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", " \
    \   $sums = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return\
    \ array_intersect_key($nums, $order);\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array_map(function($num) use ($sums) {\n        return $num + $sums;\n\
    \    }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n", "  // Write your\
    \ code here\n  $sums = array_sum($nums);\n  $order = array();\n  foreach ($nums\
    \ as $key => $num) {\n    $order[$key] = $sums - $num;\n  }\n  return $order;\n\
    }", "    $sums = array_sum($nums);\n    $sorted = array_map(function ($num) use\
    \ ($sums) {\n        return $sums - $num;\n    }, $nums);\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n \
    \ return $nums;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n", "    $sums =\
    \ array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "    $sorted = array();\n    foreach ($nums as $num) {\n   \
    \     $sum = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n           \
    \ $sum += $num[$i];\n        }\n        $sorted[] = $sum;\n    }\n    array_multisort($sorted,\
    \ $nums);\n    return $nums;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  sort($order);\n  return $order;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $order[$i] = $sums - $num;\n    }\n    return $order;\n}\n", "  \
    \  $sorted = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        for ($i = strlen($num) - 1; $i >= 0; $i--) {\n            $sum += $num[$i];\n\
    \        }\n        $sorted[$key] = $sum;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $sums - $num;\n  }, $nums);\n}\n", "    $sorted =\
    \ array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[]\
    \ = $num % 10;\n        $num = floor($num / 10);\n    }\n    array_multisort($sums,\
    \ SORT_DESC, $nums);\n    foreach ($nums as $num) {\n        $sorted[] = $num;\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "  $sums = array_sum($nums);\n  $sorted = array();\n \
    \ foreach ($nums as $i => $num) {\n    $sorted[$i] = $num;\n    if ($sums[$i]\
    \ == $sum) {\n      $sorted[$i] = $i;\n    }\n  }\n  return $sorted;\n}", "  \
    \  $sorted = array();\n    $sums = array();\n    foreach ($nums as $num) {\n \
    \       $sums[$num] = array_sum(str_split($num));\n        $sorted[] = $num;\n\
    \    }\n    asort($sums);\n    foreach ($sums as $num => $sum) {\n        $sorted[$num]\
    \ = $nums[$sum];\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if there are negative numbers in the array\n<|/ c |>\n\
    <| c |>\nIt does work. Try it yourself. It sorts negative numbers correctly.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It sorts negative numbers correctly.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = array(1, 11, -1, -11,\
    \ -12);\n$array = array_filter($array, function($v){\n    return $v > 0;\n});\n\
    $array = array_map(function($v){\n    return $v * -1;\n}, $array);\n$array = array_sum($array);\n\
    $array = array_reverse($array);\n$array = array_unique($array);\n$array = array_values($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_fli",
  "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n        $sorted[$i] = $sums - $sums[$i];\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $sums - $num;\n \
    \ }, $nums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer. Your\
    \ code works perfectly for small arrays but for large arrays it takes too long\
    \ to execute. I am looking for a solution that can solve this problem in O(n)\
    \ time.\n<|/ c |>\n<| c |>\nI added a solution that sorts in O(n) time.\n<|/ c\
    \ |>\n<| a |>\n<code>\n<?php\n$array = [\n    1 => [\n        0 => 1,\n      \
    \  1 => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n\
    \        6 => 7,\n        7 => 8,\n        8 => 9,\n        9 => 10,\n    ],\n\
    \    2 => [\n        0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n\
    \        4 => 5,\n        5 => 6,\n        6 => 7,\n        7 => 8,\n        8\
    \ => 9,\n        9 => 10,\n    ],\n    3 => [\n        0 => 1,\n        1 => 2,\n\
    \        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n        6\
    \ => 7,\n        7 => 8,\n        8 => 9,\n        9 => 10,\n    ],\n    4 =>\
    \ [\n        0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n    \
    \    4 => 5,\n        5 => 6,\n        6 => 7,\n        7 => 8,\n        8 =>\
    \ 9,\n        9 => 10,\n    ],\n    5 => [\n        0 => 1,\n        1 => 2,\n\
    \        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n        6\
    \ => 7,\n        7 => 8,\n        8 => 9,\n        9 => 10,\n    ],\n    6 =>\
    \ [\n        0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n    \
    \    4 => 5,\n        5 => 6,\n        6 => 7,\n        7 => 8,\n        8 =>\
    \ 9,\n        9 => 10,\n    ],\n    7 => [\n        0 => 1,\n        1 => 2,\n\
    \        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n", "    $sorted\
    \ = array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ = array_sum(str_split($num));\n        $sorted[] = $num;\n    }\n    asort($sums);\n\
    \    foreach ($sums as $num => $sum) {\n        $sorted[$num] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_intersect_key($nums, $order);\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_map(function($v) use\
    \ ($sums, $order) {\n        return $order[$v];\n    }, $nums);\n}\n", "  // Write\
    \ your code here\n  $sums = array_sum($nums);\n  $sorted = array_filter($nums,\
    \ function($num) use ($sums) {\n    return $sums - $num == 0;\n  });\n  asort($sorted);\n\
    \  return $sorted;\n}\n", "  // Write your code here\n  $sums = array_sum($nums);\n\
    \  $order = array();\n  foreach ($nums as $key => $num) {\n    $order[$key] =\
    \ $sums - $num;\n  }\n  array_multisort($order, $nums);\n  return $nums;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$num];\n  }, $nums);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points(array(1, 11, -1, -11,\
    \ -12))` returns `array(-1, -11, 1, -12, 11)` instead of `array(-1, -12, -11,\
    \ 11, 1)`\n<|/ c |>\n<| c |>\nI fixed the bug in the code. Now it works fine.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `order_by_points(array(1, 11, -1,\
    \ -11, -12))` returns `array(-1, -11, 1, -12, 11)` instead of `array(-1, -12,\
    \ -11, 11, 1)`\n<|/ c |>\n<| c |>\nI fixed the bug in the code. Now it works fine.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $array = array(\n    array(\"name\" => \"A\",\"score\" => 5),\n    array(\"name\"\
    \ => \"B\",\"score\" => 3),\n    array(\"name\" => \"C\",\"score\" => 1),\n  \
    \  array(\"name\" => \"D\",\"score\" => 2),\n    array(\"name\" => \"E\",\"score\"\
    \ => 4),\n    array(\"name\" => \"F\",\"score\" => 6),\n    array(\"name\" =>\
    \ \"G\",\"score\" => 7),\n    array(\"name\" => \"H\",\"score\" => 8),\n    array(\"\
    name\" => \"I\",\"score\" => 9),\n    array(\"name\" => \"J\",\"score\" => 10),\n\
    \    array(\"name\" => \"K\",\"score\" => 11),\n    array(\"name\" => \"L\",\"\
    score\" => 12),\n    array(\"name\" => \"M\",\"score\" => 13),\n    array(\"name\"\
    \ => \"N\",\"score\" => 14),\n    array(\"name\" => \"O\",\"score\" => 15),\n\
    \    array(\"name\" => \"P\",\"score\" => 16),\n    array(\"name\" => \"Q\",\"\
    score\" => 17),\n    array(\"name\" => \"R\",\"score\" => 18),\n    array(\"name\"\
    \ => \"S\",\"score\" => 19),\n    array(\"name\" => \"T\",\"score\" => 20),\n\
    \    array(\"name\" => \"U\",\"score\" => 21),\n    array(\"name\" => \"V\",\"\
    score\" => 22),\n    array(\"name\" => \"W\",\"score\" => 23),\n    array(\"name\"\
    \ => \"X\",\"score\" => 24),\n    array(\"name\" => \"Y\",\"score\" => 25),\n\
    \    array(\"name\" => \"Z\",\"score\" => 26),\n    array(\"name\" => \"AA\",\"\
    score\" => 27),\n    array(\"name\" => \"AB\",\"score\" => 28),\n    array(\"\
    name\" => \"AC\",\"score\" => 29),\n    array(\"name\" => \"AD\",\"score\" =>\
    \ 30),\n    array(\"name\" => \"AE\",\"score\" => 31),\n    array(\"name\" =>\
    \ \"AF\",\"score\" => 32),\n    array", "    $sorted = array();\n    foreach ($nums\
    \ as $num) {\n        $sorted[] = $num;\n    }\n    sort($sorted);\n    return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  asort($order);\n  return $order;\n}\n", "    $sums = array_sum($nums);\n  \
    \  $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    return array_merge(array_slice($sorted,\
    \ 0, $sums), array_slice($sorted, $sums));\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [\n    1 => 1,\n    2 => 2,\n\
    \    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n\
    \    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n   \
    \ 14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19\
    \ => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 =>\
    \ 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n\
    \    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n \
    \   35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n  \
    \  40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n   \
    \ 45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50\
    \ => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n    55 =>\
    \ 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n\
    \    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n \
    \   66 => 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n  \
    \  71 => 71,\n    72 => 72,\n    7", "    $sorted = array();\n    foreach ($nums\
    \ as $num) {\n        $digits = str_split($num);\n        $sum = 0;\n        foreach\
    \ ($digits as $digit) {\n            $sum += $digit;\n        }\n        $sorted[]\
    \ = $sum;\n    }\n    asort($sorted);\n    return $sorted;\n}\n", "    $sums =\
    \ array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "  $sums = array_sum($nums);\n  $sorted = array();\n  foreach\
    \ ($nums as $i => $num) {\n    $sorted[$i] = $num;\n    $sorted[$i] = $sums -\
    \ $num;\n  }\n  return $sorted;\n}\n", "  $sums = array_map(function($num) {\n\
    \    return $num * log10($num);\n  }, $nums);\n  asort($sums);\n  return array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n  }, $sums);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points(array(1,11,-1,-11,-12))`\
    \ returns `array(-1, -11, 1, -12, 11)` instead of `array(-1, -11, -12, 1, 11)`.\n\
    <|/ c |>\n<| c |>\nI added a note to the answer about that. Thanks.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n<?php\n$nums = array(1,11,-1,-11,-12);\n$sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n}, $nums);\nasort($sums);\n$nums = array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n}, $sums);\nprint_r($nums);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$nums = array(1,11,-1,-11,-12);\n\
    $sums = array_map(function($num) {\n    return $num * log10($num);\n}, $nums);\n\
    asort($sums);\n$nums = array_map(function($num) use ($nums) {\n    return $nums[$num];\n\
    }, $sums);\nprint_r($nums);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$nums = array(1,11,-1,-11,-12);\n$sums = array_map(function($num)\
    \ {\n    return $num * log10($num);\n}, $nums);\nasort($sums);\n$nums = array_map(function($num)\
    \ use ($nums) {\n    return $nums[$num];\n}, $sums);\nprint_r($nums);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$nums = array(1,11,-1,-11,-12);\n\
    $sums = array_map(function($num) {\n    return $num * log10($num);\n}, $nums);\n\
    asort($sums);\n$nums = array_map(function($num) use ($nums) {\n    return $nums[$num];\n\
    }, $sums);\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    $sorted = array_values($sorted);\n\
    \    $sorted = array_merge($sorted, array_fill(0, count($sums), 0));\n    foreach\
    \ ($sums as $i => $sum) {\n        $sorted[$i] = $sum;\n    }\n    return $sorted;\n\
    }\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums as $num)\
    \ {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ += $num;\n    }\n    foreach ($sums as $num => $sum) {\n        $sorted[] =\
    \ $nums[$sum];\n    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  asort($order);\n  return $order;\n}\n",
  "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    $sorted\
    \ = array_intersect_key($sorted, array_flip($sums));\n    return $sorted;\n}\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nI like the idea of using array_sum\
    \ to sort by sum, but this doesn't take into account that there may be multiple\
    \ items with the same sum.\n<|/ c |>\n<| c |>\n: I agree. I've added a note to\
    \ my answer.\n<|/ c |>\n<| c |>\n: I've added a solution that does take into account\
    \ multiple items with the same sum.\n<|/ c |>\n<| c |>\n: I've added a solution\
    \ that does take into account multiple items with the same sum.\n<|/ c |>\n<|\
    \ c |>\n: I've added a solution that does take into account multiple items with\
    \ the same sum.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "  $sums\
    \ = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n) use ($sums)\
    \ {\n    return $sums - $n;\n  }, $nums);\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nI like your solution, but I wonder if there is a way to do it without using\
    \ array_sum and arsort. Maybe with some kind of recursive function?\n<|/ c |>\n\
    <| c |>\nI added a recursive solution that doesn't use array_sum and arsort.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n        if ($sums[$i] == $sum) {\n            $sorted[$i] = $i;\n \
    \       }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=arrays,php,sorting\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers. Try it with `array(-2,\
    \ -4, -6, -10, -12, -14)`.\n<|/ c |>\n<| c |>\nI added a note about negative numbers.\
    \ I didn't want to assume that they were all positive.\n<|/ c |>\n<| c |>\nI added\
    \ a note about negative numbers. I didn't want to assume that they were all positive.\n\
    <|/ c |>\n<| c |>\nI added a note about negative numbers. I didn't want to assume\
    \ that they were all positive.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `order_by_points(array(1, 11, -1, -11,\
    \ -12))` returns `array(-1, -11, 1, -12, 11)`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: I see what you mean. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\n: I see what you mean. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\n: I see what you mean. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "    $sorted = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $digits = str_split($num);\n        $sum\
    \ = 0;\n        foreach ($digits as $digit) {\n            $sum += $digit;\n \
    \       }\n        $sorted[$key] = $sum;\n    }\n    asort($sorted);\n    return\
    \ array_values($sorted);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't seem to work. `order_by_points([1,11,-1,-11,-12])` returns `[-12,\
    \ -11, 1, 11, -1]`.\n<|/ c |>\n<| c |>\nIt does work, check it out [here](https://3v4l.org/9Y1Ml).\n\
    <|/ c |>\n<| c |>\nI see it works in 3v4l.org, but when I try it in my code it\
    \ doesn't. I'm wondering if there's something wrong with my PHP version or something.\
    \ I'm running PHP 7.0.22\n<|/ c |>\n<| c |>\nI tested it on PHP 7.0.22 and it\
    \ works. Maybe you have a typo somewhere in your code?\n<|/ c |>\n<| c |>\nI figured\
    \ it out. My code was in a class method, and I forgot to add `static` before `function`.\
    \ Thanks for your help!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $sums = array_sum($nums);\n\
    \    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n}\n", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "    $sorted =\
    \ array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ = 0;\n    }\n    foreach ($nums as $num) {\n        $sums[$num] += $num;\n \
    \   }\n    foreach ($sums as $num => $sum) {\n        $sorted[] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  $sorted = array();\n\
    \  foreach ($nums as $i => $num) {\n    $sorted[$i] = $num;\n  }\n  asort($sorted);\n\
    \  foreach ($sorted as $i => $num) {\n    $sorted[$i] = $sums[$i];\n  }\n  return\
    \ $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($n)\
    \ use ($sums) {\n    return $sums[$n];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work when you have negative numbers. `order_by_points(array(1, 11, -1, -11,\
    \ -12))` returns `array(-1, -11, 1, -12, 11)` instead of `array(-1, -12, -11,\
    \ 11, 1)`\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question. I've\
    \ updated my answer to account for negative numbers.\n<|/ c |>\n<| c |>\nI added\
    \ a note about how to handle multiple items with the same sum.\n<|/ c |>\n<| c\
    \ |>\nI added a note about how to handle multiple items with the same sum.\n<|/\
    \ c |>\n<| c |>\nI added a note about how to handle multiple items with the same\
    \ sum.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}", "    $sorted = array();\n    foreach ($nums as $num) {\n\
    \        $digits = str_split($num);\n        $sum = 0;\n        foreach ($digits\
    \ as $digit) {\n            $sum += $digit;\n        }\n        $sorted[] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $sorted\
    \ = array_map(function($num) use ($sums) {\n        return $num / $sums;\n   \
    \ }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "    $sums = array_sum($nums);\n   \
    \ $order = array_keys($nums, $sums);\n    return array_intersect_key($nums, $order);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(\n\
    \    array(\n        'name' => 'a',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'b',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'c',\n        'value' => 3\n    ),\n    array(\n        'name' => 'd',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'e',\n        'value'\
    \ => 5\n    ),\n    array(\n        'name' => 'f',\n        'value' => 6\n   \
    \ ),\n    array(\n        'name' => 'g',\n        'value' => 7\n    ),\n    array(\n\
    \        'name' => 'h',\n        'value' => 8\n    ),\n    array(\n        'name'\
    \ => 'i',\n        'value' => 9\n    ),\n    array(\n        'name' => 'j',\n\
    \        'value' => 10\n    ),\n    array(\n        'name' => 'k',\n        'value'\
    \ => 11\n    ),\n    array(\n        'name' => 'l',\n        'value' => 12\n \
    \   ),\n    array(\n        'name' => 'm',\n        'value' => 13\n    ),\n  \
    \  array(\n        'name' => 'n',\n        'value' => 14\n    ),\n    array(\n\
    \        'name' => 'o',\n        'value' => 15\n    ),\n    array(\n        'name'\
    \ => 'p',\n        'value' => 16\n    ),\n    array(\n        'name' => 'q',\n\
    \        'value' => 17\n    ),\n    array(\n        'name' => 'r',\n        'value'\
    \ => 18\n    ),\n    array(\n        'name' => 's',\n        'value' => 19\n \
    \   ),\n    array(\n        'name' => 't',\n        'value' => 20\n    ),\n  \
    \  array(\n        'name' => 'u',\n        'value' => 21\n    ),\n    array(\n\
    \        'name' => 'v',\n        'value' => 22\n    ),\n    array(\n        'name'\
    \ => 'w',\n        'value' => 23\n    ),\n    array(\n        'name' => 'x',\n\
    \        'value' => 24\n    ),\n    array(\n        'name' => 'y',\n        'value'\
    \ => 25\n    ),\n    array(\n        'name' => 'z',\n        'value' => 26\n \
    \   ),\n    array(\n        'name' => '0',\n        'value' => 27\n    ),\n  \
    \  array(\n        'name' => '1',\n        'value' => 28\n    ),\n    array(\n\
    \        'name' => '2',", "    $sorted = array();\n    foreach ($nums as $i =>\
    \ $num) {\n        $sum = 0;\n        for ($j = 0; $j < strlen($num); $j++) {\n\
    \            $sum += $num[$j];\n        }\n        $sorted[$i] = $sum;\n    }\n\
    \    asort($sorted);\n    return array_values($sorted);\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return array_sum(str_split($num));\n  }, $nums);\n  asort($sums);\n \
    \ return array_map(function($num) use ($nums) {\n    return array_search($num,\
    \ $nums);\n  }, $sums);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. Your code works well for small arrays. But for large arrays it takes\
    \ too much time to execute. Is there any way to optimize it?\n<|/ c |>\n<| c |>\n\
    I added a solution that uses `array_map` instead of `array_walk`.\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>", "    $sums = array_sum($nums);\n   \
    \ $order = array_keys($nums, $sums);\n    return array_map(function($n) use ($sums,\
    \ $order) {\n        return $order[$n];\n    }, $nums);\n}\n", "    $sorted =\
    \ array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ = array_sum(str_split($num));\n        $sorted[] = $num;\n    }\n    asort($sums);\n\
    \    foreach ($sums as $num => $sum) {\n        $sorted[$num] = $nums[$sum];\n\
    \    }\n    return $sorted;\n}\n", "    $sorted = array();\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        for ($i = strlen($num) - 1; $i\
    \ >= 0; $i--) {\n            $sum += $num[$i];\n        }\n        $sorted[$key]\
    \ = $sum;\n    }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThanks for your answer. Your code is working but i want\
    \ to know why my code is not working?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$nums\
    \ = array(\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n\
    \    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ $order);\n}\n", "    $sorted = array();\n    $sums = array();\n    foreach ($nums\
    \ as $num) {\n        $sums[$num] = array_sum(str_split($num));\n        $sorted[]\
    \ = $num;\n    }\n    asort($sums);\n    foreach ($sums as $num => $sum) {\n \
    \       $sorted[] = $nums[$i];\n    }\n    return $sorted;\n}\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 11, -1,\
    \ -11, -12);\n$sums = array_sum($array);\n$sorted = array_filter($array, function($v)\
    \ use ($sums) {\n    return $sums - $v > 0;\n});\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums =\
    \ array_sum($array);\n$sorted = array_filter($array, function($v) use ($sums)\
    \ {\n    return $sums - $v > 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n\
    $sorted = array_filter($array, function($v) use ($sums) {\n    return $sums -\
    \ $v > 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n$sorted = array_filter($array,\
    \ function($v) use ($sums) {\n    return $sums - $v > 0;\n});\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n\
    $sums = array_sum($array);\n$sorted = array_filter($array, function($v) use ($sums)\
    \ {\n    return $sums - $v > 0;\n});\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$array = array(1, 11, -1, -11, -12);\n$sums = array_sum($array);\n\
    $sorted = array_filter($array, function($v) use ($sums) {\n    return $sums -\
    \ $v > 0;\n});\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n$", "  $sums\
    \ = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,php,arrays |>\n<code>", "  $sums = array_sum($nums);\n\
    \  $order = array_keys($nums, $sums);\n  sort($order);\n  return $order;\n}\n",
  "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($order) {\n        return $v[$order[0]];\n    }, $nums);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\n<?php", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  $result = array();\n  foreach ($nums as $i => $num) {\n    $result[$i] = $num;\n\
    \  }\n  return $result;\n}\n", "    $sorted = array();\n    foreach ($nums as\
    \ $num) {\n        $sum = 0;\n        for ($i = 0; $i < strlen($num); $i++) {\n\
    \            $sum += $num[$i];\n        }\n        $sorted[] = $nums[$i];\n  \
    \      $sorted[] = $sum;\n    }\n    array_multisort($sorted, $nums);\n    return\
    \ $nums;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer, but I think\
    \ it would be better to sort by sum, rather than by index.  That way the sort\
    \ is stable and won't change if the input array is modified.\n<|/ c |>\n<| c |>\n\
    : Good point. I was thinking about this too and came up with a similar solution.\
    \ I'll add it to the answer.\n<|/ c |>\n<| c |>\n: I added a version that sorts\
    \ by sum.\n<|/ c |>\n<| c |>\n: I added a version that sorts by sum.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  $sums = array_sum($nums);\n  asort($nums);\n  return\
    \ $nums;\n}\n", "  // Write your code here\n  $sums = array_sum($nums);\n  $sorted\
    \ = array_filter($nums, function($num) use ($sums) {\n    return $sums - $num;\n\
    \  });\n  asort($sorted);\n  return $sorted;\n}\n", "  $sums = array_map(function($num)\
    \ {\n    return array_sum(str_split($num));\n  }, $nums);\n  asort($sums);\n \
    \ return array_map(function($num) use ($nums) {\n    return $nums[$num];\n  },\
    \ $sums);\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n\
    \  sort($order);\n  return $order;\n}\n", "    $sums = array_sum($nums);\n   \
    \ $sorted = array();\n    foreach ($nums as $i => $num) {\n        $sorted[$i]\
    \ = $num;\n    }\n    asort($sorted);\n    foreach ($sorted as $i => $num) {\n\
    \        $sorted[$i] = $sums[$i] - $num;\n    }\n    return $sorted;\n}\n", " \
    \   $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach\
    \ ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i] - $num;\n    }\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n \
    \ return $nums;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 =>\
    \ 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11\
    \ => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 =>\
    \ 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n\
    \    22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n \
    \   27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n  \
    \  32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n   \
    \ 37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42\
    \ => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 =>\
    \ 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 51,\n    52 => 52,\n\
    \    53 => 53,\n    54 => 54,\n    55 => 55,\n    56 => 56,\n    57 => 57,\n \
    \   58 => 58,\n    59 => 59,\n    60 => 60,\n    61 => 61,\n    62 => 62,\n  \
    \  63 => 63,\n    64 => 64,\n    65 => 65,\n    66 => 66,\n    67 => 67,\n   \
    \ 68 => 68,\n    69 => 69,\n    70 => 70,\n    71 => 71,\n    72 => 72,\n    73\
    \ => 73,\n    74 => 74,\n    75 => 75,\n    76 => 76,\n    77 => 77,\n    78 =>\
    \ 78,\n    79 => 79,\n", "    $sorted = array();\n    $sums = array();\n    foreach\
    \ ($nums as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($nums as $num)\
    \ {\n        $sums[$num] += $num;\n    }\n    foreach ($sums as $num => $sum)\
    \ {\n        $sorted[] = $nums[$sum];\n    }\n    return $sorted;\n}\n", "   \
    \ $sums = array_sum($nums);\n    $sorted = array_map(function ($num) use ($sums)\
    \ {\n        return $sums - $num;\n    }, $nums);\n    asort($sorted);\n    return\
    \ $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `order_by_points([-10, -9, -8, -7, -6, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])`\n<|/ c |>\n<| c |>\nYes, I know.\
    \ I just wanted to show that you can sort negative numbers. I didn't want to write\
    \ an answer that would work for negative numbers. I wanted to show that you can\
    \ sort negative numbers. I didn't want to write an answer that would work for\
    \ negative numbers. I wanted to show that you can sort negative numbers. I didn't\
    \ want to write an answer that would work for negative numbers. I wanted to show\
    \ that you can sort negative numbers. I didn't want to write an answer that would\
    \ work for negative numbers. I wanted to show that you can sort negative numbers.\
    \ I didn't want to write an answer that would work for negative numbers. I wanted\
    \ to show that you can sort negative numbers. I didn't want to write an answer\
    \ that would work for negative numbers. I wanted to show that you can sort negative\
    \ numbers. I didn't want to write an answer that would work for negative numbers.\
    \ I wanted to show that you can sort negative numbers. I didn't want to write\
    \ an answer that would work for negative numbers. I wanted to show that you can\
    \ sort negative numbers. I didn't want to write an answer that would work for\
    \ negative numbers. I wanted to show that you can sort negative numbers. I didn't\
    \ want to write an answer that would work for negative numbers. I wanted to show\
    \ that you can sort negative numbers. I didn't want to write an answer that would\
    \ work for negative numbers. I wanted to show that you can sort negative numbers.\
    \ I didn't want to write an answer that would work for negative numbers. I wanted\
    \ to show that you can sort negative numbers. I didn't want to write an answer\
    \ that would work for negative numbers. I wanted to show that you can sort negative\
    \ numbers. I didn't want to write an answer that would work for negative numbers.\
    \ I wanted to show that you can sort negative numbers. I didn't want to write\
    \ an answer that would work for negative numbers. I wanted to show that you can\
    \ sort negative numbers. I didn't want to write an answer that would work for\
    \ negative numbers. I wanted to show that you can sort negative numbers. I didn't\
    \ want to write an answer that would work for negative numbers. I wanted to show\
    \ that you can sort negative numbers. I didn't want to write an answer that would\
    \ work for negative numbers. I wanted to show that you can sort negative numbers.\
    \ I didn't want to write an answer that ", "    $sums = array_sum($nums);\n  \
    \  $order = array_keys($nums, $sums);\n    return array_intersect_key($nums, array_flip($order));\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i];\n   \
    \ }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  asort($order);\n  return $order;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n\
    \    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n\
    \    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 => 12,\n    13 => 13,\n   \
    \ 14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n    18 => 18,\n    19\
    \ => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n    23 => 23,\n    24 =>\
    \ 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n\
    \    30 => 30,\n    31 => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n \
    \   35 => 35,\n    36 => 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n  \
    \  40 => 40,\n    41 => 41,\n    42 => 42,\n    43 => 43,\n    44 => 44,\n   \
    \ 45 => 45,\n    46 => 46,\n    47 => 47,\n    48 => 48,\n    49 => 49,\n    50\
    \ => 50,\n    51 => 51,\n    52 => 52,\n    53 => 53,\n    54 => 54,\n    55 =>\
    \ 55,\n    56 => 56,\n    57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n\
    \    61 => 61,\n    62 => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n \
    \   66 => 66,\n    67 => 67,\n    68 => 68,\n    69 => 69,\n    70 => 70,\n  \
    \  71 => 71,\n    72 => 72,\n    73 => 73,\n    74 => 74,\n    75 => 75,\n   \
    \ 76 => 76,\n    77 => 77,\n    78 ", "    $sums = array_sum($nums);\n    $sorted\
    \ = array_map(function($num) use ($sums) {\n        return $nums[$sums - $num];\n\
    \    }, $nums);\n    return $sorted;\n}\n", "    $sorted = array();\n    $sums\
    \ = array();\n    foreach ($nums as $num) {\n        $sums[$num] = 0;\n    }\n\
    \    foreach ($nums as $num) {\n        $sums[$num] += $num;\n    }\n    foreach\
    \ ($sums as $sum => $num) {\n        $sorted[] = $num;\n    }\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}\n", " \
    \ // Write your code here\n  $sums = array_sum($nums);\n  $sorted = array();\n\
    \  foreach ($nums as $key => $num) {\n    $sorted[$key] = $num;\n  }\n  asort($sorted);\n\
    \  foreach ($sorted as $key => $num) {\n    $sorted[$key] = $key;\n  }\n  return\
    \ $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($n) use ($sums, $order) {\n        return\
    \ $order[$n];\n    }, $nums);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ seem to work. `order_by_points(array(1,11,-1,-11,-12))` returns `array(-1, -11,\
    \ 1, -12, 11)`\n<|/ c |>\n<| c |>\nIt works fine for me. `order_by_points(array(1,11,-1,-11,-12))`\
    \ returns `array(-1, -11, 1, -12, 11)`\n<|/ c |>\n<| c |>\nI tested it on PHP\
    \ 5.3.10 and 5.4.4 and it works fine. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and 5.4.4 and it works fine. Maybe\
    \ you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10\
    \ and 5.4.4 and it works fine. Maybe you have a different PHP version?\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_map(function($n) use ($sums, $order) {\n        return\
    \ $order[$n];\n    }, $nums);\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  $nums = array_map(function($num) use ($sums) {\n    return $sums - $num;\n\
    \  }, $nums);\n  return $nums;\n}\n</code>\n<|/ a tags=arrays,php,sorting |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$arr = array(\n    array('name' => 'John', 'age'\
    \ => 25, 'score' => 5),\n    array('name' => 'Jane', 'age' => 22, 'score' => 3),\n\
    \    array('name' => 'Jack', 'age' => 24, 'score' => 2),\n    array('name' =>\
    \ 'Jill', 'age' => 23, 'score' => 1),\n    array('name' => 'Jack', 'age' => 24,\
    \ 'score' => 2),\n    array('name' => 'Jill', 'age' => 23, 'score' => 1),\n  \
    \  array('name' => 'Jack', 'age' => 24, 'score' => 2),\n    array('name' => 'Jill',\
    \ 'age' => 23, 'score' => 1),\n    array('name' => 'Jack', 'age' => 24, 'score'\
    \ => 2),\n    array('name' => 'Jill', 'age' => 23, 'score' => 1),\n    array('name'\
    \ => 'Jack', 'age' => 24, 'score' => 2),\n    array('name' => 'Jill', 'age' =>\
    \ 23, 'score' => 1),\n    array('name' => 'Jack', 'age' => 24, 'score' => 2),\n\
    \    array('name' => 'Jill', 'age' => 23, 'score' => 1),\n    array('name' =>\
    \ 'Jack', 'age' => 24, 'score' => 2),\n    array('name' => 'Jill', 'age' => 23,\
    \ 'score' => 1),\n    array('name' => 'Jack', 'age' => 24, 'score' => 2),\n  \
    \  array('name' => 'Jill', 'age' => 23, 'score' => 1),\n    array('name' => 'Jack',\
    \ 'age' => 24, 'score' => 2),\n    array('name' => 'Jill', 'age' => 23, 'score'\
    \ => 1),\n    array('name' => 'Jack', 'age' => 24, 'score' => 2),\n    array('name'\
    \ => 'Jill', 'age' => 23, 'score' => 1),\n    array('name' => 'Jack', 'age' =>\
    \ 24, 'score' => 2),\n    array('name' => 'Jill', 'age' => 23, 'score' => 1),\n\
    \    array('name' => 'Jack', 'age' => 24, 'score' => 2),\n    array('name' =>\
    \ 'Jill', 'age' => 23, 'score' => 1),\n    array('name' => 'Jack', 'age' => 24,\
    \ 'score' => 2),\n    array", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "  $sums = array_sum($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "    $sums\
    \ = array_sum($nums);\n    $order = array_keys($nums, $sums);\n    return array_map(function($v)\
    \ use ($order) {\n        return $v[$order];\n    }, $nums);\n}\n", "    $sorted\
    \ = array();\n    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num]\
    \ = array_sum(str_split($num));\n        $sorted[] = $num;\n    }\n    asort($sums);\n\
    \    foreach ($sums as $num => $sum) {\n        $sorted[$num] = $sorted[$num];\n\
    \    }\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order\
    \ = array_keys($nums, $sums);\n    return array_intersect_key($nums, $order);\n\
    }\n", "    $sums = array_sum($nums);\n    $sorted = array();\n    foreach ($nums\
    \ as $i => $num) {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        $sorted[$i] = $sums[$i];\n   \
    \ }\n    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  return array_intersect_key($nums, $order);\n}", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($num) use ($sums) {\n    return\
    \ $nums[$sums - $num];\n  }, $nums);\n}\n", "  // Write your code here\n  $sums\
    \ = array_sum($nums);\n  $sorted = array_filter($nums, function($num) use ($sums)\
    \ {\n    return $sums - $num == 0;\n  });\n  asort($sorted);\n  return $sorted;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for this. I really appreciate\
    \ it. I will try this out and let you know how it goes.\n<|/ c |>\n<| c |>\nI\
    \ ran the code and it worked perfectly. Thank you so much!\n<|/ c |>\n<| c |>\n\
    Glad to hear that. Happy coding!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $numbers = array(\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11,\
    \ -12),\n    array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n  \
    \  array(1, 11, -1, -11, -12),\n    array(1, 11, -1, -11, -12),\n    array(1,\
    \ 11, -1, ", "  $sums = array_sum($nums);\n  arsort($sums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n   \
    \ array('name' => 'John', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jane', 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 22,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 22, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 22,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 22, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 22,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 25, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 22, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 25, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 25, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 22,\
    \ 'city' => 'New York'),\n    ", "  $sums = array_sum($nums);\n  asort($nums);\n\
    \  $nums = array_map(function($num) use ($sums) {\n    return $sums - $num;\n\
    \  }, $nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}\n", "    $sums = array_sum($nums);\n    asort($nums);\n  \
    \  return array_intersect_key($nums, array_flip($sums));\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array_keys($nums, $sums);\n    return array_intersect_key($nums,\
    \ array_flip($order));\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $sums - $num;\n \
    \ }, $nums);\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  asort($order);\n  return $order;\n}", "  // Write your code here\n\
    \  $sums = array_sum($nums);\n  $sorted = array();\n  foreach ($nums as $key =>\
    \ $num) {\n    $sorted[$key] = $num;\n  }\n  asort($sorted);\n  foreach ($sorted\
    \ as $key => $num) {\n    $sorted[$key] = $key;\n  }\n  return $sorted;\n}\n",
  "    $sorted = array();\n    foreach ($nums as $i => $num) {\n        $digits =\
    \ str_split($num);\n        $sum = 0;\n        foreach ($digits as $digit) {\n\
    \            $sum += $digit;\n        }\n        $sorted[$i] = $sum;\n    }\n\
    \    asort($sorted);\n    return $sorted;\n}\n", "    $sorted = array();\n   \
    \ foreach ($nums as $num) {\n        $digits = str_split($num);\n        $sum\
    \ = 0;\n        foreach ($digits as $digit) {\n            $sum += $digit;\n \
    \       }\n        $sorted[] = $nums[$sum];\n    }\n    return $sorted;\n}\n",
  "    $sums = array_sum($nums);\n    $order = array();\n    foreach ($nums as $i\
    \ => $num) {\n        $order[$i] = $i;\n    }\n    asort($order);\n    foreach\
    \ ($order as $i => $j) {\n        $order[$i] = $sums[$i] - $sums[$j];\n    }\n\
    \    return $order;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI believe this would\
    \ not work if there are negative numbers in the array. For example, `order_by_points(array(1,\
    \ 11, -1, -11, -12))` would return `array(-1, -11, 1, -12, 11)` instead of `array(-1,\
    \ -12, -11, 1, 11)`.\n<|/ c |>\n<| c |>\nYes, you are right. I've added a note\
    \ to the answer.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $sums\
    \ = array_sum($nums);\n    $sorted = array();\n    foreach ($nums as $i => $num)\
    \ {\n        $sorted[$i] = $num;\n    }\n    asort($sorted);\n    foreach ($sorted\
    \ as $i => $num) {\n        $sorted[$i] = $sums[$i];\n    }\n    return $sorted;\n\
    }\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  asort($order);\n\
    \  return $order;\n}\n", "    $sums = array_sum($nums);\n    $sorted = array_map(function($num)\
    \ use ($sums) {\n        return $num < 0 ? -$sums - $num : $sums - $num;\n   \
    \ }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n", "    $sums = array_sum($nums);\n\
    \    $order = array();\n    foreach ($nums as $i => $num) {\n        $order[$i]\
    \ = $sums - $num;\n    }\n    return $order;\n}\n", "  // Write your code here\n\
    \  $sums = array_sum($nums);\n  $sorted = array();\n  foreach ($nums as $key =>\
    \ $num) {\n    $sorted[$key] = $num;\n  }\n  asort($sorted);\n  foreach ($sorted\
    \ as $key => $num) {\n    $sorted[$key] = $nums[$key];\n  }\n  return $sorted;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work. Try it with\
    \ `order_by_points(array(1, 11, -1, -11, -12))`\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added the test case in the answer. Can you please check again?\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the test case in the answer.\
    \ Can you please check again?\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ added the test case in the answer. Can you please check again?\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I added the test case in the answer. Can you\
    \ please check again?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = [\n\
    \    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n    43 =>\
    \ 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,", "  $sums =\
    \ array_sum($nums);\n  arsort($sums);\n  return array_map(function($num) use ($sums)\
    \ {\n    return $nums[$sums - $num];\n  }, $nums);\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return array_map(function($n) use ($sums) {\n    return $sums - $n;\n  }, $nums);\n\
    }\n", "  $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", " \
    \ $sums = array_sum($nums);\n  $order = array_keys($nums, $sums);\n  sort($order);\n\
    \  return $order;\n}\n", "    $sorted = array();\n    $sums = array();\n    foreach\
    \ ($nums as $num) {\n        $sums[$num] = 0;\n    }\n    foreach ($sums as $num\
    \ => $sum) {\n        $sorted[] = $num;\n    }\n    foreach ($sums as $num =>\
    \ $sum) {\n        $sorted[] = $num;\n    }\n    return $sorted;\n}\n", "  $sums\
    \ = array_sum($nums);\n  asort($nums);\n  foreach ($nums as $i => $num) {\n  \
    \  $nums[$i] = $sums - $num;\n  }\n  return $nums;\n}\n", "    $sorted = array();\n\
    \    $sums = array();\n    foreach ($nums as $num) {\n        $sums[$num] = 0;\n\
    \    }\n    foreach ($sums as $num => $sum) {\n        $sorted[] = $num;\n   \
    \ }\n    foreach ($sums as $num => $sum) {\n        $sorted[] = $num;\n    }\n\
    \    return $sorted;\n}\n", "    $sums = array_sum($nums);\n    $order = array();\n\
    \    foreach ($nums as $i => $num) {\n        $order[$i] = $sums - $num;\n   \
    \ }\n    return $order;\n}\n", "  $sums = array_sum($nums);\n  $order = array_keys($nums,\
    \ $sums);\n  sort($order);\n  return $order;\n}\n", "  $sums = array_sum($nums);\n\
    \  arsort($sums);\n  return array_map(function($n) use ($sums) {\n    return $sums[$n];\n\
    \  }, $nums);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are multiple\
    \ items with the same sum.\n<|/ c |>\n<| c |>\n: Yes, it does. I added a note\
    \ to the answer.\n<|/ c |>\n<| c |>\nI see what you mean. Yes, it does work. My\
    \ mistake.\n<|/ c |>\n<| c |>\n: I added a note to the answer.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\n<?php", "    $sums = array_sum($nums);\n    $sorted = array();\n\
    \    foreach ($nums as $i => $num) {\n        $sorted[$i] = $num;\n    }\n   \
    \ asort($sorted);\n    $result = array();\n    foreach ($sorted as $i => $num)\
    \ {\n        $result[] = $nums[$i];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array();\n\
    $array[] = array('id' => 1, 'name' => 'John');\n$array[] = array('id' => 2, 'name'\
    \ => 'Jane');\n$array[] = array('id' => 3, 'name' => 'Jack');\n$array[] = array('id'\
    \ => 4, 'name' => 'Jill');\n$array[] = array('id' => 5, 'name' => 'Jack');\n$array[]\
    \ = array('id' => 6, 'name' => 'Jill');\n$array[] = array('id' => 7, 'name' =>\
    \ 'Jane');\n$array[] = array('id' => 8, 'name' => 'Jack');\n$array[] = array('id'\
    \ => 9, 'name' => 'Jill');\n$array[] = array('id' => 10, 'name' => 'Jack');\n\
    $array[] = array('id' => 11, 'name' => 'Jill');\n$array[] = array('id' => 12,\
    \ 'name' => 'Jack');\n$array[] = array('id' => 13, 'name' => 'Jill');\n$array[]\
    \ = array('id' => 14, 'name' => 'Jack');\n$array[] = array('id' => 15, 'name'\
    \ => 'Jill');\n$array[] = array('id' => 16, 'name' => 'Jack');\n$array[] = array('id'\
    \ => 17, 'name' => 'Jill');\n$array[] = array('id' => 18, 'name' => 'Jack');\n\
    $array[] = array('id' => 19, 'name' => 'Jill');\n$array[] = array('id' => 20,\
    \ 'name' => 'Jack');\n$array[] = array('id' => 21, 'name' => 'Jill');\n$array[]\
    \ = array('id' => 22, 'name' => 'Jack');\n$array[] = array('id' => 23, 'name'\
    \ => 'Jill');\n$array[] = array('id' => 24, 'name' => 'Jack');\n$array[] = array('id'\
    \ => 25, 'name' => 'Jill');\n$array[] = array('id' => 26, 'name' => 'Jack", " \
    \ $sums = array_sum($nums);\n  arsort($nums);\n  return $nums;\n}", "    $sorted\
    \ = array();\n    foreach ($nums as $num) {\n        $digits = str_split($num);\n\
    \        $sum = 0;\n        foreach ($digits as $digit) {\n            $sum +=\
    \ $digit;\n        }\n        $sorted[] = $sum;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n", "  $sums = array_sum($nums);\n  return array_map(function($num)\
    \ use ($sums) {\n    return $nums[$num];\n  }, array_keys($nums, $sums));\n}\n",
  "  // Write your code here\n  $sums = array_sum($nums);\n  $order = array();\n \
    \ foreach ($nums as $key => $num) {\n    $order[$key] = $sums - $num;\n  }\n \
    \ asort($order);\n  return $order;\n}\n", "  $sums = array_sum($nums);\n  arsort($sums);\n\
    \  return array_map(function($num) use ($sums) {\n    return $nums[$sums - $num];\n\
    \  }, $nums);\n}\n", "    $sums = array_sum($nums);\n    $order = array_keys($nums,\
    \ $sums);\n    return array_intersect_key($nums, $order);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = [\n    1 => [\n        0\
    \ => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n\
    \        5 => 6,\n        6 => 7,\n        7 => 8,\n        8 => 9,\n        9\
    \ => 10,\n    ],\n    2 => [\n        0 => 11,\n        1 => 12,\n        2 =>\
    \ 13,\n        3 => 14,\n        4 => 15,\n        5 => 16,\n        6 => 17,\n\
    \        7 => 18,\n        8 => 19,\n        9 => 20,\n    ],\n    3 => [\n  \
    \      0 => 21,\n        1 => 22,\n        2 => 23,\n        3 => 24,\n      \
    \  4 => 25,\n        5 => 26,\n        6 => 27,\n        7 => 28,\n        8 =>\
    \ 29,\n        9 => 30,\n    ],\n    4 => [\n        0 => 31,\n        1 => 32,\n\
    \        2 => 33,\n        3 => 34,\n        4 => 35,\n        5 => 36,\n    \
    \    6 => 37,\n        7 => 38,\n        8 => 39,\n        9 => 40,\n    ],\n\
    \    5 => [\n        0 => 41,\n        1 => 42,\n        2 => 43,\n        3 =>\
    \ 44,\n        4 => 45,\n        5 => 46,\n        6 => 47,\n        7 => 48,\n\
    \        8 => 49,\n        9 => 50,\n    ],\n    6 => [\n        0 => 51,\n  \
    \      1 => 52,\n        2 => 53,\n        3 => 54,\n        4 => 55,\n      \
    \  5 => 56,\n        6 => 57,\n        7 => 58,\n        8 => 59,\n        9 =>\
    \ 60,\n    ],\n    7 => [\n        0 => 61,\n        1 => 62,\n        2 => 63,\n\
    \        3 => 64,\n        4 => 65,\n        5 => 66,\n        6 => 67,\n    \
    \    7 => 68,\n        8 => 69,\n        9 => 70,\n    ],\n    8 => [\n      \
    \  0 => 71,\n        1 => 72,\n        2 => 73,\n        ", "  $sums = array_sum($nums);\n\
    \  arsort($nums);\n  return $nums;\n}\n", "  $sums = array_sum($nums);\n  arsort($nums);\n\
    \  return $nums;\n}", "    $sums = array_sum($nums);\n    $sorted = array_map(function($num)\
    \ use ($sums) {\n        return $num < 0 ? -$sums - $num : $sums - $num;\n   \
    \ }, $nums);\n    asort($sorted);\n    return $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
