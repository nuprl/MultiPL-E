name: HumanEval_0_has_close_elements
language: julia
results:
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    n = length(numbers)\n    for i in 1:n-1\n  \
    \      for j in i+1:n\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ggfwvpg.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4ggfwvpg.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ggfwvpg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp4ggfwvpg.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4ggfwvpg.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ggfwvpg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp4ggfwvpg.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4ggfwvpg.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ggfwvpg.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ggfwvpg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps3dxqdos.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps3dxqdos.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps3dxqdos.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps3dxqdos.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps3dxqdos.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps3dxqdos.jl:22\ntest set: Test\
    \ Failed at /tmp/tmps3dxqdos.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps3dxqdos.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps3dxqdos.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3dxqdos.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3tms6pn.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa3tms6pn.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3tms6pn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpa3tms6pn.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa3tms6pn.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3tms6pn.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpa3tms6pn.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa3tms6pn.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3tms6pn.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3tms6pn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb578040g.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb578040g.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb578040g.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb578040g.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb578040g.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb578040g.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb578040g.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb578040g.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb578040g.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb578040g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpef8zd8_p.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpef8zd8_p.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpef8zd8_p.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpef8zd8_p.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpef8zd8_p.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpef8zd8_p.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpef8zd8_p.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpef8zd8_p.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpef8zd8_p.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpef8zd8_p.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ftw0sn_.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0ftw0sn_.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ftw0sn_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0ftw0sn_.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ftw0sn_.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ftw0sn_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp0ftw0sn_.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ftw0sn_.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ftw0sn_.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ftw0sn_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp50emeh6l.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp50emeh6l.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp50emeh6l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp50emeh6l.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp50emeh6l.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp50emeh6l.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp50emeh6l.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp50emeh6l.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp50emeh6l.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50emeh6l.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9e685bmo.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9e685bmo.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9e685bmo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9e685bmo.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9e685bmo.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9e685bmo.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9e685bmo.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9e685bmo.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9e685bmo.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9e685bmo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptrbhfaes.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptrbhfaes.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrbhfaes.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptrbhfaes.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrbhfaes.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrbhfaes.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptrbhfaes.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrbhfaes.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrbhfaes.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrbhfaes.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2h2j_cnj.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2h2j_cnj.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2h2j_cnj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2h2j_cnj.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2h2j_cnj.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2h2j_cnj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp2h2j_cnj.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2h2j_cnj.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2h2j_cnj.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2h2j_cnj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu30lpnf1.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu30lpnf1.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu30lpnf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu30lpnf1.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu30lpnf1.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu30lpnf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpu30lpnf1.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu30lpnf1.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu30lpnf1.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu30lpnf1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6yf709xz.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6yf709xz.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6yf709xz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6yf709xz.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6yf709xz.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6yf709xz.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6yf709xz.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6yf709xz.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6yf709xz.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6yf709xz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk1cuv9nx.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk1cuv9nx.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1cuv9nx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpk1cuv9nx.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk1cuv9nx.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1cuv9nx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpk1cuv9nx.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk1cuv9nx.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1cuv9nx.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1cuv9nx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptyc4ylhh.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptyc4ylhh.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyc4ylhh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptyc4ylhh.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptyc4ylhh.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyc4ylhh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmptyc4ylhh.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptyc4ylhh.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptyc4ylhh.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptyc4ylhh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    # TODO: implement this function\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr16yjisw.jl:17\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr16yjisw.jl:17 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr16yjisw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr16yjisw.jl:19\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.95) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr16yjisw.jl:19 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr16yjisw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr16yjisw.jl:21\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0], 0.1) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpr16yjisw.jl:21 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr16yjisw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr16yjisw.jl:22\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr16yjisw.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr16yjisw.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr16yjisw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpotk2pvrq.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpotk2pvrq.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotk2pvrq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpotk2pvrq.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpotk2pvrq.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotk2pvrq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpotk2pvrq.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpotk2pvrq.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpotk2pvrq.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpotk2pvrq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcb7r1_hj.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcb7r1_hj.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcb7r1_hj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcb7r1_hj.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcb7r1_hj.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcb7r1_hj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcb7r1_hj.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcb7r1_hj.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcb7r1_hj.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcb7r1_hj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmp1_2er.jl:24\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphmp1_2er.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmp1_2er.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphmp1_2er.jl:26\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0], 0.8) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphmp1_2er.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmp1_2er.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphmp1_2er.jl:29\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 0.5) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphmp1_2er.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmp1_2er.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmp1_2er.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j\n                if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                    return true\n               \
    \ end\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    True\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
