name: HumanEval_87_get_row
language: julia
results:
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphaiul07z.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmphaiul07z.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphaiul07z.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmphaiul07z.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphaiul07z.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphaiul07z.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7y6dnw6m.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp7y6dnw6m.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7y6dnw6m.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp7y6dnw6m.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp7y6dnw6m.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp7y6dnw6m.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return []\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(2, 2)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz9xwqpxk.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz9xwqpxk.jl:1\n\
    in expression starting at /tmp/tmpz9xwqpxk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8oke946w.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp8oke946w.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8oke946w.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp8oke946w.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp8oke946w.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8oke946w.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if i == 1\n            continue\n        end\n        if result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphf7epi05.jl:45\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmphf7epi05.jl:45 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphf7epi05.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmphf7epi05.jl:47\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphf7epi05.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphf7epi05.jl:44\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return []\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(2, 2)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfnescbnj.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfnescbnj.jl:1\n\
    in expression starting at /tmp/tmpfnescbnj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp099o06sp.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp099o06sp.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp099o06sp.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp099o06sp.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp099o06sp.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp099o06sp.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpem_l7m70.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpem_l7m70.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpem_l7m70.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpem_l7m70.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpem_l7m70.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpem_l7m70.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpem_l7m70.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpem_l7m70.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpem_l7m70.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for (i, row) in enumerate(lst)\n        for (j, elem) in enumerate(row)\n\
    \            if elem == x\n                push!(result, (i, j))\n           \
    \ end\n        end\n    end\n    sort!(result, by = x -> x[1])\n    sort!(result,\
    \ by = x -> x[2], rev = true)\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2,\
    \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
    \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv6736yli.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpv6736yli.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6736yli.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpv6736yli.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpv6736yli.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6736yli.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpv6736yli.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpv6736yli.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6736yli.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    for i in 1:length(res)\n        if res[i][1] == res[i+1][1]\n\
    \            sort!(res[i:i+1], by = x -> x[2], rev = true)\n        end\n    end\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp5ahacox.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Any} at index [6]\\n  Stacktrace:\\n   [1]\
    \ getindex\\n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmpp5ahacox.jl:31\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpp5ahacox.jl:42 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp5ahacox.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpp5ahacox.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Any} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main\
    \ /tmp/tmpp5ahacox.jl:31\\n   [3] macro expansion\\n     @ /tmp/tmpp5ahacox.jl:43\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp5ahacox.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpp5ahacox.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2,\
    \ 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\
    \ == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)]\\n  BoundsError: attempt to access 12-element Vector{Any}\
    \ at index [13]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\\
    n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpp5ahacox.jl:31\\\
    n   [3] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    row_col = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(row_col, (i-1, j-1))\n            end\n        end\n    end\n   \
    \ sort!(row_col, by = x -> x[1])\n    for i in 1:length(row_col)\n        sort!(row_col[i],\
    \ by = x -> x[2], rev = true)\n    end\n    return row_col\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm6psrvnr.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"(), rev=true)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061\
    \ got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword arguments \"by\", \"rev\"\\n    ...\\\
    n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @\
    \ Main /tmp/tmpm6psrvnr.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmpm6psrvnr.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm6psrvnr.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpm6psrvnr.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"(), rev=true)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if i == 1\n            continue\n        end\n        if result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0m9p4ai8.jl:45\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp0m9p4ai8.jl:45 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0m9p4ai8.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmp0m9p4ai8.jl:47\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0m9p4ai8.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0m9p4ai8.jl:44\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, el) in enumerate(row)\n            if el ==\
    \ x\n                push!(result, (i, j))\n            end\n        end\n   \
    \ end\n    return sort(result, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpa91igoyx.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(1, 1), (2, 1), (2, 5), (3, 1),\
    \ (3, 6)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpa91igoyx.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa91igoyx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpa91igoyx.jl:37\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpa91igoyx.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa91igoyx.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpa91igoyx.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(1, 1), (2, 1), (3, 1), (3, 2), (4, 1), (4, 3), (5, 1), (5, 4),\
    \ (6, 1), (6, 5), (7, 1), (7, 6)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpa91igoyx.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa91igoyx.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsf1griu4.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpsf1griu4.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsf1griu4.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpsf1griu4.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpsf1griu4.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsf1griu4.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsdsniqzi.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpsdsniqzi.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsdsniqzi.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpsdsniqzi.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpsdsniqzi.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsdsniqzi.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(result, by = x -> (x[1], -x[2]))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppmletdxs.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n\
    \  MethodError: no method matching get_row(::Vector{Vector{Any}}, ::Int64)\\n\
    \  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64)\
    \ at /tmp/tmppmletdxs.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\n     @\
    \ /tmp/tmppmletdxs.jl:41 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmppmletdxs.jl:35\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    5      1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsl39rpy_.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpsl39rpy_.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsl39rpy_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpsl39rpy_.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsl39rpy_.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsl39rpy_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpsl39rpy_.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpsl39rpy_.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsl39rpy_.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjoe4uz39.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpjoe4uz39.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjoe4uz39.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpjoe4uz39.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjoe4uz39.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjoe4uz39.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> (x[1], -x[2]))\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy3nwoz5w.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n\
    \  MethodError: no method matching get_row(::Vector{Vector{Any}}, ::Int64)\\n\
    \  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64)\
    \ at /tmp/tmpy3nwoz5w.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\n     @\
    \ /tmp/tmpy3nwoz5w.jl:42 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpy3nwoz5w.jl:36\\nTest Summary:\
    \ | Pass  Error  Total\\ntest set      |    5      1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, val) in enumerate(row)\n            if val ==\
    \ x\n                push!(result, (i, j))\n            end\n        end\n   \
    \ end\n    return sort(result, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyiiofqct.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(1, 1), (2, 1), (2, 5), (3, 1),\
    \ (3, 6)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpyiiofqct.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyiiofqct.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpyiiofqct.jl:37\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpyiiofqct.jl:37 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyiiofqct.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpyiiofqct.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(1, 1), (2, 1), (3, 1), (3, 2), (4, 1), (4, 3), (5, 1), (5, 4),\
    \ (6, 1), (6, 5), (7, 1), (7, 6)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpyiiofqct.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyiiofqct.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvjithmtk.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpvjithmtk.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvjithmtk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpvjithmtk.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpvjithmtk.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvjithmtk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpvjithmtk.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpvjithmtk.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvjithmtk.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    for i in 1:length(res)\n\
    \        sort!(res[i], by = x -> -x[2])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3dgky4k_.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmp3dgky4k_.jl:32\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3dgky4k_.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3dgky4k_.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp3dgky4k_.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjfozmy35.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpjfozmy35.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjfozmy35.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpjfozmy35.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjfozmy35.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjfozmy35.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpjfozmy35.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpjfozmy35.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpjfozmy35.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpjfozmy35.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0ymdlsk3.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp0ymdlsk3.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0ymdlsk3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp0ymdlsk3.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp0ymdlsk3.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0ymdlsk3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp0ymdlsk3.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0ymdlsk3.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0ymdlsk3.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        sort!(result[i], by\
    \ = x -> -x[2])\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2xbkj1g1.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmp2xbkj1g1.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2xbkj1g1.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2xbkj1g1.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp2xbkj1g1.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if result[i][1] == result[i-1][1]\n            sort!(result[i-1:i], by\
    \ = x -> x[2], rev = true)\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb2rgub19.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Tuple{Int64, Int64}} at index [0]\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmpb2rgub19.jl:31\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpb2rgub19.jl:42 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb2rgub19.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpb2rgub19.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Tuple{Int64, Int64}} at index [0]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmpb2rgub19.jl:31\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpb2rgub19.jl:43 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpb2rgub19.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpb2rgub19.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2,\
    \ 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\
    \ == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)]\\n  BoundsError: attempt to access 12-element Vector{Tuple{Int64,\
    \ Int64}} at index [0]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Mai"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8fgj3fz0.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp8fgj3fz0.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8fgj3fz0.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp8fgj3fz0.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp8fgj3fz0.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8fgj3fz0.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return []\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(2, 2)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiwu0xv43.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiwu0xv43.jl:1\n\
    in expression starting at /tmp/tmpiwu0xv43.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    for i in 1:length(res)\n        if i != 1 && res[i][1] == res[i-1][1]\n\
    \            sort!(res[i-1:i], by=x->x[2], rev=true)\n        end\n    end\n \
    \   return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0ang5zg8.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp0ang5zg8.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0ang5zg8.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmp0ang5zg8.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0ang5zg8.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0ang5zg8.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1meir202.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp1meir202.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1meir202.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1meir202.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp1meir202.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1meir202.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1meir202.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1meir202.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1meir202.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp1meir202.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpovnvl1py.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpovnvl1py.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpovnvl1py.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpovnvl1py.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpovnvl1py.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpovnvl1py.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpovnvl1py.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpovnvl1py.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpovnvl1py.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return []\n    #return [(2, 2)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprvjq7eib.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprvjq7eib.jl:1\n\
    in expression starting at /tmp/tmprvjq7eib.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1ya0jygk.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp1ya0jygk.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ya0jygk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1ya0jygk.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp1ya0jygk.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ya0jygk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1ya0jygk.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1ya0jygk.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1ya0jygk.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc94s4z5e.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpc94s4z5e.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc94s4z5e.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpc94s4z5e.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpc94s4z5e.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc94s4z5e.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> (x[1], -x[2]))\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1x39hxz7.jl:42\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmp1x39hxz7.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmp1x39hxz7.jl:42 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmp1x39hxz7.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x39hxz7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, el) in enumerate(row)\n            if el ==\
    \ x\n                push!(result, (i, j))\n            end\n        end\n   \
    \ end\n    sort!(result, by = (x -> x[1]))\n    for (i, row) in enumerate(result)\n\
    \        sort!(result[i], by = (x -> -x[2]))\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjlwuzi_y.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpjlwuzi_y.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjlwuzi_y.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjlwuzi_y.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpjlwuzi_y.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, item) in enumerate(row)\n            if item\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    sort!(result, by = x -> x[2],\
    \ rev = true)\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_ivf5zx4.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp_ivf5zx4.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_ivf5zx4.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp_ivf5zx4.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp_ivf5zx4.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_ivf5zx4.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp_ivf5zx4.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp_ivf5zx4.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_ivf5zx4.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for (i, row) in enumerate(lst)\n\
    \        for (j, elem) in enumerate(row)\n            if elem == x\n         \
    \       push!(res, (i, j))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvw_qrmxw.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpvw_qrmxw.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvw_qrmxw.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpvw_qrmxw.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpvw_qrmxw.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvw_qrmxw.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpvw_qrmxw.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpvw_qrmxw.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvw_qrmxw.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(result, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9svcuig0.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp9svcuig0.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9svcuig0.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp9svcuig0.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp9svcuig0.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9svcuig0.jl:35\\ntest set: Error\
    \ During Test at /tmp/tmp9svcuig0.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp9svcuig0.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp9svcuig0.jl:41 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp9svcuig0.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by=x->x[1])\n    for i in 1:length(result)\n     \
    \   sort!(result[i], by=x->x[2], rev=true)\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbkmohmf1.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"(), rev=true)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061\
    \ got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword arguments \"by\", \"rev\"\\n    ...\\\
    n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @\
    \ Main /tmp/tmpbkmohmf1.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmpbkmohmf1.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbkmohmf1.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpbkmohmf1.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"(), rev=true)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0cpn3fqz.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp0cpn3fqz.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0cpn3fqz.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp0cpn3fqz.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0cpn3fqz.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0cpn3fqz.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(res, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4yrcrfjk.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp4yrcrfjk.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4yrcrfjk.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmp4yrcrfjk.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp4yrcrfjk.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4yrcrfjk.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphdgbj5ev.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmphdgbj5ev.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphdgbj5ev.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmphdgbj5ev.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmphdgbj5ev.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphdgbj5ev.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmphdgbj5ev.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphdgbj5ev.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphdgbj5ev.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_4d3des7.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp_4d3des7.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_4d3des7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp_4d3des7.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp_4d3des7.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_4d3des7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp_4d3des7.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp_4d3des7.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_4d3des7.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp_4d3des7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5jr016om.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp5jr016om.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5jr016om.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp5jr016om.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp5jr016om.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5jr016om.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp5jr016om.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp5jr016om.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp5jr016om.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp5jr016om.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> (x[1], -x[2]))\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpttrn6127.jl:43\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmpttrn6127.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmpttrn6127.jl:43 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmpttrn6127.jl:37\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpttrn6127.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptiw3z43n.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmptiw3z43n.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptiw3z43n.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmptiw3z43n.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmptiw3z43n.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptiw3z43n.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n \
    \       sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzpi0qg94.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpzpi0qg94.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzpi0qg94.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzpi0qg94.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpzpi0qg94.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return [(i,\
    \ j) for i in 1:length(lst), j in 1:length(lst[i]) if lst[i][j] == x]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph_fjhu96.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  UndefVarError:\
    \ i not defined\\n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\\
    n     @ Main /tmp/tmph_fjhu96.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmph_fjhu96.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph_fjhu96.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmph_fjhu96.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  UndefVarError: i not defined\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmph_fjhu96.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmph_fjhu96.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph_fjhu96.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmph_fjhu96.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2,\
    \ 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\
    \ == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)]\\n  UndefVarError: i not defined\\n  Stacktrace:\\n\
    \   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmph_fjhu96.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmph_fjhu96.jl:31 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph_fjhu96.jl:28\\ntest set:\
    \ Error During Test at"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    # sort by\
    \ row\n    # sort by column\n    # return list of tuples\n    # (x1, y1), (x2,\
    \ y2) ...\n    # each tuple is a coordinate - (row, columns), starting with 0.\n\
    \    # Sort coordinates initially by rows in ascending order.\n    # Also, sort\
    \ coordinates of the row by columns in descending order.\n    # get_row([\n  \
    \  #   [1,2,3,4,5,6],\n    #   [1,2,3,4,1,6],\n    #   [1,2,3,4,5,1]\n    # ],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([], 1) == []\n\
    \    # get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    # get_row([[1,2,3,4,5,6],\
    \ [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    # get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    # get_row([[1,2,3,4,5,6],\
    \ [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptgff9pe7.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptgff9pe7.jl:1\n\
    in expression starting at /tmp/tmptgff9pe7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy1i_adoa.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpy1i_adoa.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy1i_adoa.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpy1i_adoa.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpy1i_adoa.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy1i_adoa.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    row_col = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(row_col, (i-1, j-1))\n            end\n        end\n    end\n   \
    \ sort!(row_col, by = x -> x[1])\n    sort!(row_col, by = x -> x[2], rev = true)\n\
    \    return row_col\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\
    \t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0wt3r4tw.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp0wt3r4tw.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0wt3r4tw.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp0wt3r4tw.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0wt3r4tw.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0wt3r4tw.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i == 1\n        \
    \    continue\n        end\n        if result[i][1] == result[i-1][1]\n      \
    \      if result[i][2] > result[i-1][2]\n                result[i], result[i-1]\
    \ = result[i-1], result[i]\n            end\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqv_415il.jl:52\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmpqv_415il.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmpqv_415il.jl:52 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmpqv_415il.jl:46\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv_415il.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzejteok_.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpzejteok_.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpzejteok_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpzejteok_.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpzejteok_.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpzejteok_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpzejteok_.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpzejteok_.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpzejteok_.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpzejteok_.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> (x[1], -x[2]))\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkc7vurup.jl:42\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmpkc7vurup.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmpkc7vurup.jl:42 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmpkc7vurup.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkc7vurup.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return []\n    #return [(2, 2)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp80mz_3ck.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp80mz_3ck.jl:1\n\
    in expression starting at /tmp/tmp80mz_3ck.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6m7zg2_9.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp6m7zg2_9.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6m7zg2_9.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp6m7zg2_9.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp6m7zg2_9.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6m7zg2_9.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp6m7zg2_9.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6m7zg2_9.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6m7zg2_9.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp6m7zg2_9.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if i > 1 && result[i][1] == result[i-1][1]\n            sort!(result[i-1:i],\
    \ by = x -> x[2], rev = true)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppyq4p38g.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmppyq4p38g.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppyq4p38g.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmppyq4p38g.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmppyq4p38g.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppyq4p38g.jl:41\\ntest set: Error\
    \ During Test at /tmp/tmppyq4p38g.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmppyq4p38g.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmppyq4p38g.jl:47 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmppyq4p38g.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2g8vpem6.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp2g8vpem6.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2g8vpem6.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp2g8vpem6.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp2g8vpem6.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2g8vpem6.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpghm9ukw7.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpghm9ukw7.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpghm9ukw7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpghm9ukw7.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpghm9ukw7.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpghm9ukw7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpghm9ukw7.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpghm9ukw7.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpghm9ukw7.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpghm9ukw7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps_z3yydr.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmps_z3yydr.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps_z3yydr.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmps_z3yydr.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmps_z3yydr.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps_z3yydr.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmps_z3yydr.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmps_z3yydr.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps_z3yydr.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmps_z3yydr.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp21c5e2n7.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp21c5e2n7.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp21c5e2n7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp21c5e2n7.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp21c5e2n7.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp21c5e2n7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp21c5e2n7.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp21c5e2n7.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp21c5e2n7.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp21c5e2n7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqwrcod55.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpqwrcod55.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqwrcod55.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpqwrcod55.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpqwrcod55.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqwrcod55.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpqwrcod55.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpqwrcod55.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqwrcod55.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpqwrcod55.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i - 1, j - 1))\n            end\n        end\n    end\n   \
    \ sort!(res, by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n   \
    \ return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxqp61do4.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpxqp61do4.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpxqp61do4.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpxqp61do4.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpxqp61do4.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpxqp61do4.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpypzvw7ng.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpypzvw7ng.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpypzvw7ng.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpypzvw7ng.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpypzvw7ng.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpypzvw7ng.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpypzvw7ng.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpypzvw7ng.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpypzvw7ng.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpypzvw7ng.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpixiecenn.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpixiecenn.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpixiecenn.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpixiecenn.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpixiecenn.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpixiecenn.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpixiecenn.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpixiecenn.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpixiecenn.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpixiecenn.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(result, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphy4vvw8e.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmphy4vvw8e.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphy4vvw8e.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmphy4vvw8e.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphy4vvw8e.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphy4vvw8e.jl:35\\ntest set: Error\
    \ During Test at /tmp/tmphy4vvw8e.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmphy4vvw8e.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmphy4vvw8e.jl:41 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmphy4vvw8e.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprgrffpia.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmprgrffpia.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprgrffpia.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprgrffpia.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmprgrffpia.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprgrffpia.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprgrffpia.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmprgrffpia.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprgrffpia.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmprgrffpia.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps8659yl5.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmps8659yl5.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps8659yl5.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmps8659yl5.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmps8659yl5.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps8659yl5.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmps8659yl5.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmps8659yl5.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmps8659yl5.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmps8659yl5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, item) in enumerate(row)\n            if item\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    sort!(result, by = x -> x[2],\
    \ rev = true)\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpormlclg7.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpormlclg7.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpormlclg7.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpormlclg7.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpormlclg7.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpormlclg7.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpormlclg7.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpormlclg7.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpormlclg7.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i > 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp13n__emy.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp13n__emy.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp13n__emy.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmp13n__emy.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp13n__emy.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp13n__emy.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprza9tkdx.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmprza9tkdx.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprza9tkdx.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprza9tkdx.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmprza9tkdx.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprza9tkdx.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprza9tkdx.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmprza9tkdx.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprza9tkdx.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmprza9tkdx.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = Vector{Tuple{Int64,\
    \ Int64}}()\n    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n \
    \           if lst[i][j] == x\n                push!(res, (i-1, j-1))\n      \
    \      end\n        end\n    end\n    sort!(res, by = x -> x[1])\n    for i in\
    \ 1:length(res)\n        if i > 1 && res[i][1] == res[i-1][1]\n            sort!(res[i-1:i],\
    \ by = x -> x[2], rev = true)\n        end\n    end\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6zylj6o2.jl:43\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp6zylj6o2.jl:43 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6zylj6o2.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmp6zylj6o2.jl:45\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6zylj6o2.jl:45 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6zylj6o2.jl:42\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    # get the\
    \ index of x in each row\n    idx = [findall(row->row==x, row) for row in lst]\n\
    \    # get the row index\n    row_idx = [i for i in 1:length(lst)]\n    # sort\
    \ the row index by the length of idx\n    idx_len = [length(i) for i in idx]\n\
    \    sort!(row_idx, by=idx_len)\n    # get the sorted idx\n    idx = [idx[i] for\
    \ i in row_idx]\n    # get the result\n    res = []\n    for i in 1:length(idx)\n\
    \        for j in 1:length(idx[i])\n            push!(res, (row_idx[i]-1, idx[i][j]-1))\n\
    \        end\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3egg1ip4.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ objects of type Vector{Int64} are not callable\\n  Use square brackets [] for\
    \ indexing an Array.\\n  Stacktrace:\\n   [1] lt(o::Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n     @ Base.Order ./ordering.jl:111\\\
    n   [2] sort!\\n     @ ./sort.jl:502 [inlined]\\n   [3] sort!\\n     @ ./sort.jl:569\
    \ [inlined]\\n   [4] sort!\\n     @ ./sort.jl:659 [inlined]\\n   [5] #sort!#8\\\
    n     @ ./sort.jl:719 [inlined]\\n   [6] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\\
    n     @ Main /tmp/tmp3egg1ip4.jl:28\\n   [7] macro expansion\\n     @ /tmp/tmp3egg1ip4.jl:45\
    \ [inlined]\\n   [8] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp3egg1ip4.jl:44\\ntest set:\
    \ Error During Test at /tmp/tmp3egg1ip4.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: objects of type Vector{Int64}\
    \ are not callable\\n  Use square brackets [] for indexing an Array.\\n  Stacktrace:\\\
    n   [1] lt(o::Base.Order.By{Vector{Int64}, Base.Order.ForwardOrdering}, a::Int64,\
    \ b::Int64)\\n     @ Base.Order ./ordering.jl:111\\n   [2] sort!\\n     @ ./sort.jl:502\
    \ [inlined]\\n   [3] sort!\\n     @ ./sort.jl:569 [inlined]\\n   [4] sort!\\n\
    \     @ ./sort.jl:659 [inlined]\\n   [5] #sort!#8\\n     @ ./sort.jl:719 [inlined]\\\
    n   [6] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmp3egg1ip4.jl:28\\\
    n   [7] macro expansion\\n     @ /tmp/tmp3egg1ip4.jl:46 [inlined]\\n   [8] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [9] top-level scope\\n     @ /t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv14c9gk5.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpv14c9gk5.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv14c9gk5.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpv14c9gk5.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpv14c9gk5.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv14c9gk5.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0an6e6v7.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp0an6e6v7.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0an6e6v7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp0an6e6v7.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp0an6e6v7.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0an6e6v7.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp0an6e6v7.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp0an6e6v7.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp0an6e6v7.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp0an6e6v7.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    sort!(result, by = x -> x[2],\
    \ rev = true)\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpusrugkeq.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpusrugkeq.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpusrugkeq.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpusrugkeq.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpusrugkeq.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpusrugkeq.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpusrugkeq.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpusrugkeq.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpusrugkeq.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    return sort(result, by=x->x[1])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpga82du_r.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpga82du_r.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpga82du_r.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpga82du_r.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpga82du_r.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpga82du_r.jl:35\\ntest set: Error\
    \ During Test at /tmp/tmpga82du_r.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpga82du_r.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpga82du_r.jl:41 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpga82du_r.jl:35\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     2      1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz4erb_bm.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpz4erb_bm.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz4erb_bm.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpz4erb_bm.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpz4erb_bm.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz4erb_bm.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpz4erb_bm.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpz4erb_bm.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpz4erb_bm.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpz4erb_bm.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    row_col_tuple = []\n    for i in\
    \ 1:length(lst)\n        for j in 1:length(lst[i])\n            if lst[i][j] ==\
    \ x\n                push!(row_col_tuple, (i-1, j-1))\n            end\n     \
    \   end\n    end\n    sort!(row_col_tuple, by = x -> x[1])\n    sort!(row_col_tuple,\
    \ by = x -> x[2], rev = true)\n    return row_col_tuple\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2,\
    \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
    \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6saa4cy6.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp6saa4cy6.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6saa4cy6.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp6saa4cy6.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6saa4cy6.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6saa4cy6.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb9tt4rlb.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpb9tt4rlb.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpb9tt4rlb.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpb9tt4rlb.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpb9tt4rlb.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpb9tt4rlb.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i != 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp78rppu72.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp78rppu72.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp78rppu72.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmp78rppu72.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp78rppu72.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp78rppu72.jl:41\\ntest set: Error\
    \ During Test at /tmp/tmp78rppu72.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp78rppu72.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp78rppu72.jl:47 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp78rppu72.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfxsmaw3g.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpfxsmaw3g.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfxsmaw3g.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpfxsmaw3g.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfxsmaw3g.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfxsmaw3g.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpfxsmaw3g.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpfxsmaw3g.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpfxsmaw3g.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpfxsmaw3g.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     2      1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmod8vydg.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpmod8vydg.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmod8vydg.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpmod8vydg.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpmod8vydg.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmod8vydg.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9vejper7.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp9vejper7.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9vejper7.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp9vejper7.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp9vejper7.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9vejper7.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # create a vector of tuples to\
    \ store the coordinates\n    coords = Vector{Tuple{Int64, Int64}}()\n    # iterate\
    \ over the rows\n    for i in 1:length(lst)\n        # iterate over the columns\n\
    \        for j in 1:length(lst[i])\n            # check if the element is equal\
    \ to x\n            if lst[i][j] == x\n                # add the coordinates to\
    \ the vector\n                push!(coords, (i-1, j-1))\n            end\n   \
    \     end\n    end\n    # sort the coordinates by rows in ascending order\n  \
    \  sort!(coords, by=x->x[1])\n    # sort the coordinates of the row by columns\
    \ in descending order\n    for i in 1:length(coords)\n        if coords[i][1]\
    \ == coords[i+1][1]\n            sort!(coords, by=x->x[2], rev=true)\n       \
    \ end\n    end\n    # return the vector of coordinates\n    return coords\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvtory55c.jl:50\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Tuple{Int64, Int64}} at index [6]\\n  Stacktrace:\\\
    n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmpvtory55c.jl:38\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpvtory55c.jl:50 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvtory55c.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmpvtory55c.jl:51\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Tuple{Int64, Int64}} at index [7]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmpvtory55c.jl:38\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpvtory55c.jl:51 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvtory55c.jl:49\\ntest set:\
    \ Error During Test at /tmp/tmpvtory55c.jl:52\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2,\
    \ 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\
    \ == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)]\\n  BoundsError: attempt to access 12-element Vector{Tuple{Int64,\
    \ Int64}} at index [13]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpam29kshw.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpam29kshw.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpam29kshw.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpam29kshw.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpam29kshw.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpam29kshw.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for (i, row) in enumerate(lst)\n        for (j, col) in enumerate(row)\n\
    \            if col == x\n                push!(res, (i, j))\n            end\n\
    \        end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpph6gk6ui.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpph6gk6ui.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpph6gk6ui.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpph6gk6ui.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpph6gk6ui.jl:40 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpph6gk6ui.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpph6gk6ui.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpph6gk6ui.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpph6gk6ui.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptztq_vg0.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmptztq_vg0.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptztq_vg0.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmptztq_vg0.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmptztq_vg0.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptztq_vg0.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmptztq_vg0.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmptztq_vg0.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptztq_vg0.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmrn1rzyr.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpmrn1rzyr.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmrn1rzyr.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpmrn1rzyr.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpmrn1rzyr.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmrn1rzyr.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1wok5wta.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp1wok5wta.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1wok5wta.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp1wok5wta.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1wok5wta.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1wok5wta.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3uy8_30b.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp3uy8_30b.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3uy8_30b.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp3uy8_30b.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp3uy8_30b.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3uy8_30b.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    result =\
    \ []\n    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n        \
    \    if lst[i][j] == x\n                push!(result, (i-1, j-1))\n          \
    \  end\n        end\n    end\n    sort!(result, by = x -> x[1])\n    sort!(result,\
    \ by = x -> x[2], rev = true)\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3,\
    \ 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2,\
    \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
    \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpinchsga5.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpinchsga5.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpinchsga5.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpinchsga5.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpinchsga5.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpinchsga5.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmvaoxbpr.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpmvaoxbpr.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmvaoxbpr.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpmvaoxbpr.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpmvaoxbpr.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpmvaoxbpr.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if i == 1\n            continue\n        end\n        if result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5une9_5g.jl:45\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp5une9_5g.jl:45 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5une9_5g.jl:44\\ntest set: Test\
    \ Failed at /tmp/tmp5une9_5g.jl:47\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp5une9_5g.jl:47 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5une9_5g.jl:44\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i > 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy322_quj.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpy322_quj.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy322_quj.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpy322_quj.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpy322_quj.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy322_quj.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code goes here\n    result\
    \ = []\n    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n      \
    \      if lst[i][j] == x\n                push!(result, (i-1, j-1))\n        \
    \    end\n        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in\
    \ 1:length(result)\n        if i != 1 && result[i][1] == result[i-1][1]\n    \
    \        sort!(result[i-1:i], by = x -> x[2], rev = true)\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\
    \t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfoimmvnn.jl:43\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpfoimmvnn.jl:43 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfoimmvnn.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpfoimmvnn.jl:45\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfoimmvnn.jl:45 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfoimmvnn.jl:42\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n \
    \       sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptoxqf1zq.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmptoxqf1zq.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmptoxqf1zq.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptoxqf1zq.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmptoxqf1zq.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return []\n    #return [(2, 2)]\n\
    \    #return [(1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\
    \    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
    \ 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0),\
    \ (2, 5), (2, 0)]\n    #return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps69zsxzf.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps69zsxzf.jl:1\n\
    in expression starting at /tmp/tmps69zsxzf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5mt6nb39.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp5mt6nb39.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5mt6nb39.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp5mt6nb39.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp5mt6nb39.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp5mt6nb39.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # Your code here\n    # You can\
    \ add helper functions\n    # You can use `push!` to add elements to a vector\n\
    \    # You can use `sort!` to sort a vector\n    # You can use `sort!(by=...)`\
    \ to sort a vector by a function\n    # You can use `zip` to iterate over two\
    \ vectors at the same time\n    # You can use `enumerate` to get the index of\
    \ an element\n    # You can use `findall` to find all occurrences of an element\n\
    \    # You can use `map` to apply a function to each element of a vector\n   \
    \ # You can use `filter` to filter a vector\n    # You can use `reduce` to reduce\
    \ a vector to a single value\n    # You can use `any` to check if any element\
    \ of a vector is true\n    # You can use `all` to check if all elements of a vector\
    \ are true\n    # You can use `unique` to get unique elements of a vector\n  \
    \  # You can use `setdiff` to get elements of a vector that are not in another\
    \ vector\n    # You can use `intersect` to get elements of a vector that are in\
    \ another vector\n    # You can use `union` to get elements of a vector that are\
    \ in either of two vectors\n    # You can use `setequal` to check if two vectors\
    \ are equal\n    # You can use `in` to check if an element is in a vector\n  \
    \  # You can use `push!` to add elements to a vector\n    # You can use `push!`\
    \ to add elements to a vector\n    # You can use `push!` to add elements to a\
    \ vector\n    # You can use `push!` to add elements to a vector\n    # You can\
    \ use `push!` to add elements to a vector\n    # You can use `push!` to add elements\
    \ to a vector\n    # You can use `push!` to add elements to a vector\n    # You\
    \ can use `push!` to add elements to a vector\n    # You can use `push!` to add\
    \ elements to a vector\n    # You can use `push!` to add elements to a vector\n\
    \    # You can use `push!` to add elements to a vector\n    # You can use `push!`\
    \ to add elements\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpueaq0sao.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpueaq0sao.jl:1\n\
    in expression starting at /tmp/tmpueaq0sao.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        if i > 1 && result[i][1] == result[i-1][1]\n            sort!(result[i-1:i],\
    \ by = x -> x[2], rev = true)\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy4njxgku.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpy4njxgku.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy4njxgku.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpy4njxgku.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpy4njxgku.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpy4njxgku.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe4wocuae.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpe4wocuae.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe4wocuae.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpe4wocuae.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpe4wocuae.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe4wocuae.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu_09oqkc.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpu_09oqkc.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu_09oqkc.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpu_09oqkc.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpu_09oqkc.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpu_09oqkc.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpu_09oqkc.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpu_09oqkc.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpu_09oqkc.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpu_09oqkc.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     2      1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwzixgozq.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpwzixgozq.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwzixgozq.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpwzixgozq.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpwzixgozq.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwzixgozq.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpwzixgozq.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpwzixgozq.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpwzixgozq.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpwzixgozq.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc3emtw1q.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpc3emtw1q.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc3emtw1q.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpc3emtw1q.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpc3emtw1q.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc3emtw1q.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfek9k3ql.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpfek9k3ql.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfek9k3ql.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpfek9k3ql.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfek9k3ql.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfek9k3ql.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplowguqsu.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmplowguqsu.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplowguqsu.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmplowguqsu.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmplowguqsu.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplowguqsu.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmplowguqsu.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmplowguqsu.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmplowguqsu.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmplowguqsu.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, value) in enumerate(row)\n            if value\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n \
    \       sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwqe97wcl.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpwqe97wcl.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwqe97wcl.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwqe97wcl.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpwqe97wcl.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    for i in 1:length(res)\n\
    \        sort!(res[i], by = x -> -x[2])\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnzk2mdzi.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpnzk2mdzi.jl:32\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnzk2mdzi.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnzk2mdzi.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnzk2mdzi.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1arkude6.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp1arkude6.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1arkude6.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp1arkude6.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1arkude6.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1arkude6.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp407e4woi.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp407e4woi.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp407e4woi.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp407e4woi.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp407e4woi.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp407e4woi.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n\
    \        sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0ki8ayza.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmp0ki8ayza.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0ki8ayza.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0ki8ayza.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp0ki8ayza.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> (x[1], -x[2]))\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy8k0xnd4.jl:42\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmpy8k0xnd4.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmpy8k0xnd4.jl:42 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmpy8k0xnd4.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8k0xnd4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwf4pvyqv.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpwf4pvyqv.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwf4pvyqv.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpwf4pvyqv.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpwf4pvyqv.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwf4pvyqv.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpwf4pvyqv.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpwf4pvyqv.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpwf4pvyqv.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpwf4pvyqv.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    for i in 1:length(result)\n        if i > 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by=x->x[2], rev=true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpa5nkfh4i.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpa5nkfh4i.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa5nkfh4i.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpa5nkfh4i.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpa5nkfh4i.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa5nkfh4i.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp98bf_d0t.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp98bf_d0t.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp98bf_d0t.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp98bf_d0t.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp98bf_d0t.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp98bf_d0t.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp98bf_d0t.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp98bf_d0t.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp98bf_d0t.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp98bf_d0t.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjgo210pj.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpjgo210pj.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjgo210pj.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpjgo210pj.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpjgo210pj.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjgo210pj.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpjgo210pj.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjgo210pj.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjgo210pj.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpjgo210pj.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp58dg3qn_.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp58dg3qn_.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp58dg3qn_.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp58dg3qn_.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp58dg3qn_.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp58dg3qn_.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp58dg3qn_.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp58dg3qn_.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp58dg3qn_.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp58dg3qn_.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9_wldsjx.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp9_wldsjx.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9_wldsjx.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp9_wldsjx.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp9_wldsjx.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9_wldsjx.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # get the coordinates of x in lst\n\
    \    # sort coordinates by rows in ascending order\n    # sort coordinates of\
    \ the row by columns in descending order\n    # return list of tuples, [(x1, y1),\
    \ (x2, y2) ...]\n    # where each tuple is a coordinate - (row, columns), starting\
    \ with 0\n    # if x not in lst, return []\n    # if lst is empty, return []\n\
    \    # if x is not an integer, return []\n    # if lst is not a nested list, return\
    \ []\n    # if lst contains non-integer elements, return []\n    # if lst contains\
    \ non-list elements, return []\n    # if lst contains empty lists, return []\n\
    \    # if lst contains lists of different lengths, return []\n    # if lst contains\
    \ lists of non-integer elements, return []\n    # if lst contains lists of non-unique\
    \ elements, return []\n    # if lst contains lists of non-unique elements, return\
    \ []\n    # if lst contains lists of non-unique elements, return []\n    # if\
    \ lst contains lists of non-unique elements, return []\n    # if lst contains\
    \ lists of non-unique elements, return []\n    # if lst contains lists of non-unique\
    \ elements, return []\n    # if lst contains lists of non-unique elements, return\
    \ []\n    # if lst contains lists of non-unique elements, return []\n    # if\
    \ lst contains lists of non-unique elements, return []\n    # if lst contains\
    \ lists of non-unique elements, return []\n    # if lst contains lists of non-unique\
    \ elements, return []\n    # if lst contains lists of non-unique elements, return\
    \ []\n    # if lst contains lists of non-unique elements, return []\n    # if\
    \ lst contains lists of non-unique elements, return []\n    # if lst contains\
    \ lists of non-unique elements, return []\n    # if lst contains lists of non-unique\
    \ elements, return []\n    # if lst contains lists of non-unique elements, return\
    \ []\n    # if lst contains lists of non-unique elements, return []\n    # if\
    \ lst contains lists of non-unique elements, return []\n    # if lst contains\
    \ lists of non-unique\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4a4htrns.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4a4htrns.jl:1\n\
    in expression starting at /tmp/tmp4a4htrns.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwaq4cy13.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpwaq4cy13.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwaq4cy13.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpwaq4cy13.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpwaq4cy13.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwaq4cy13.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe7jumv11.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpe7jumv11.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe7jumv11.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpe7jumv11.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpe7jumv11.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe7jumv11.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpe7jumv11.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpe7jumv11.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe7jumv11.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpemrum12r.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpemrum12r.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpemrum12r.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpemrum12r.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpemrum12r.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpemrum12r.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppoze_d86.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmppoze_d86.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppoze_d86.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmppoze_d86.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmppoze_d86.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppoze_d86.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> (x[1], -x[2]))\n    return res\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf0ilciei.jl:42\n  Test threw exception\n\
    \  Expression: candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  MethodError:\
    \ no method matching get_row(::Vector{Vector{Any}}, ::Int64)\n  Closest candidates\
    \ are:\n    get_row(!Matched::Vector{Vector{Int64}}, ::Int64) at /tmp/tmpf0ilciei.jl:20\n\
    \  Stacktrace:\n   [1] macro expansion\n     @ /tmp/tmpf0ilciei.jl:42 [inlined]\n\
    \   [2] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [3] top-level scope\n     @ /tmp/tmpf0ilciei.jl:36\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    5      1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0ilciei.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_8vlxnqj.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp_8vlxnqj.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_8vlxnqj.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp_8vlxnqj.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp_8vlxnqj.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_8vlxnqj.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp_8vlxnqj.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp_8vlxnqj.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_8vlxnqj.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp_8vlxnqj.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsckhy_5m.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpsckhy_5m.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsckhy_5m.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpsckhy_5m.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsckhy_5m.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsckhy_5m.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpsckhy_5m.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpsckhy_5m.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsckhy_5m.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpsckhy_5m.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe1na_dif.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpe1na_dif.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe1na_dif.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpe1na_dif.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpe1na_dif.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe1na_dif.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpe1na_dif.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpe1na_dif.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpe1na_dif.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpe1na_dif.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzkl67sqj.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpzkl67sqj.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpzkl67sqj.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpzkl67sqj.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpzkl67sqj.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpzkl67sqj.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    for i in 1:length(res)\n\
    \        if i > 1 && res[i][1] == res[i-1][1]\n            sort!(res[i-1:i], by\
    \ = x -> x[2], rev = true)\n        end\n    end\n    return res\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpq37kugnv.jl:43\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpq37kugnv.jl:43 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpq37kugnv.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmpq37kugnv.jl:45\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpq37kugnv.jl:45 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpq37kugnv.jl:42\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(res, by = x -> x[1])\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpiz72dcys.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpiz72dcys.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpiz72dcys.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpiz72dcys.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpiz72dcys.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpiz72dcys.jl:35\\ntest set: Error\
    \ During Test at /tmp/tmpiz72dcys.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpiz72dcys.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpiz72dcys.jl:41 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpiz72dcys.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjt7ub1_z.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpjt7ub1_z.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjt7ub1_z.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpjt7ub1_z.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpjt7ub1_z.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjt7ub1_z.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpjt7ub1_z.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjt7ub1_z.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjt7ub1_z.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpjt7ub1_z.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp04im3794.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp04im3794.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp04im3794.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp04im3794.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp04im3794.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp04im3794.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp04im3794.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp04im3794.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp04im3794.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfnuzs5_3.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpfnuzs5_3.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfnuzs5_3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpfnuzs5_3.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpfnuzs5_3.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfnuzs5_3.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpfnuzs5_3.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfnuzs5_3.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfnuzs5_3.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwya_xmaj.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpwya_xmaj.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwya_xmaj.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpwya_xmaj.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpwya_xmaj.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwya_xmaj.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    return\
    \ sort(result, by=x->x[1])\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\
    \t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvmsbzno2.jl:36\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpvmsbzno2.jl:36 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvmsbzno2.jl:35\\ntest set: Test\
    \ Failed at /tmp/tmpvmsbzno2.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpvmsbzno2.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvmsbzno2.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvkn488h0.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpvkn488h0.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvkn488h0.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpvkn488h0.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpvkn488h0.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvkn488h0.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2fly78sm.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp2fly78sm.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2fly78sm.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp2fly78sm.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp2fly78sm.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2fly78sm.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp2fly78sm.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp2fly78sm.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp2fly78sm.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp2fly78sm.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     2      1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2949se0_.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp2949se0_.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2949se0_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp2949se0_.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp2949se0_.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2949se0_.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp2949se0_.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp2949se0_.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2949se0_.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp2949se0_.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i != 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpa2omrggh.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpa2omrggh.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa2omrggh.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmpa2omrggh.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpa2omrggh.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpa2omrggh.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> (x[1], -x[2]))\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphvq8oji4.jl:37\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(1, 1), (2, 5), (2, 1), (3, 6),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmphvq8oji4.jl:37 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphvq8oji4.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmphvq8oji4.jl:38\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmphvq8oji4.jl:38 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphvq8oji4.jl:36\\ntest set: Test\
    \ Failed at /tmp/tmphvq8oji4.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(1, 1), (2, 1), (3, 2), (3, 1), (4, 3), (4, 1), (5, 4), (5, 1),\
    \ (6, 5), (6, 1), (7, 6), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmphvq8oji4.jl:39 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmphvq8oji4.jl:36\\ntest set: Error\
    \ During Test at /tmp/tmphvq8oji4.jl:42\\n  Test threw exception\\n  Expression:\
    \ candida"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    for i in 1:length(res)\n\
    \        if res[i][1] == res[i+1][1]\n            sort!(res[i:i+1], by = x ->\
    \ x[2], rev = true)\n        end\n    end\n    return res\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_ddd75us.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Any} at index [6]\\n  Stacktrace:\\n   [1]\
    \ getindex\\n     @ ./array.jl:805 [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\\n     @ Main /tmp/tmp_ddd75us.jl:32\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp_ddd75us.jl:43 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_ddd75us.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp_ddd75us.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  BoundsError: attempt to access 6-element\
    \ Vector{Any} at index [7]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main\
    \ /tmp/tmp_ddd75us.jl:32\\n   [3] macro expansion\\n     @ /tmp/tmp_ddd75us.jl:44\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_ddd75us.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp_ddd75us.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2,\
    \ 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\
    \ == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)]\\n  BoundsError: attempt to access 12-element Vector{Any}\
    \ at index [13]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\\
    n   [2] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmp_ddd75us.jl:32\\\
    n   [3] macro expansio"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqz62x494.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpqz62x494.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqz62x494.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpqz62x494.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpqz62x494.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqz62x494.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpqz62x494.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpqz62x494.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpqz62x494.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpqz62x494.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp75_13b0s.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp75_13b0s.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp75_13b0s.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp75_13b0s.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp75_13b0s.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp75_13b0s.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp75_13b0s.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp75_13b0s.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp75_13b0s.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp75_13b0s.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n \
    \       sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyc207rd3.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpyc207rd3.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyc207rd3.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyc207rd3.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpyc207rd3.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #print(lst)\n\
    \    #print(x)\n    #print(length(lst))\n    #print(length(lst[1]))\n    #print(lst[1][1])\n\
    \    #print(lst[2][1])\n    #print(lst[3][1])\n    #print(lst[1][2])\n    #print(lst[2][2])\n\
    \    #print(lst[3][2])\n    #print(lst[1][3])\n    #print(lst[2][3])\n    #print(lst[3][3])\n\
    \    #print(lst[1][4])\n    #print(lst[2][4])\n    #print(lst[3][4])\n    #print(lst[1][5])\n\
    \    #print(lst[2][5])\n    #print(lst[3][5])\n    #print(lst[1][6])\n    #print(lst[2][6])\n\
    \    #print(lst[3][6])\n    #print(lst[1][7])\n    #print(lst[2][7])\n    #print(lst[3][7])\n\
    \    #print(lst[1][8])\n    #print(lst[2][8])\n    #print(lst[3][8])\n    #print(lst[1][9])\n\
    \    #print(lst[2][9])\n    #print(lst[3][9])\n    #print(lst[1][10])\n    #print(lst[2][10])\n\
    \    #print(lst[3][10])\n    #print(lst[1][11])\n    #print(lst[2][11])\n    #print(lst[3][11])\n\
    \    #print(lst[1][12])\n    #print(lst[2][12])\n    #print(lst[3][12])\n    #print(lst[1][13])\n\
    \    #print(lst[2][13])\n    #print(lst[3][13])\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe4pimubm.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe4pimubm.jl:1\n\
    in expression starting at /tmp/tmpe4pimubm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6ia8fhnj.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp6ia8fhnj.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6ia8fhnj.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmp6ia8fhnj.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6ia8fhnj.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6ia8fhnj.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppidn8mqj.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmppidn8mqj.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppidn8mqj.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmppidn8mqj.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmppidn8mqj.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppidn8mqj.jl:37\\ntest set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    for i in 1:length(result)\n        sort!(result[i], by=x->x[2],\
    \ rev=true)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2h36ergl.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"(), rev=true)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061\
    \ got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword arguments \"by\", \"rev\"\\n    ...\\\
    n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @\
    \ Main /tmp/tmp2h36ergl.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmp2h36ergl.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2h36ergl.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmp2h36ergl.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"(), rev=true)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = Tuple{Int64, Int64}[]\n \
    \   for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_3kfsnh1.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp_3kfsnh1.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_3kfsnh1.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp_3kfsnh1.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp_3kfsnh1.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_3kfsnh1.jl:37\\ntest set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    res\
    \ = sort(res, by = x -> x[1])\n    res = sort(res, by = x -> x[2], rev = true)\n\
    \    return res\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp00hk92e2.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp00hk92e2.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00hk92e2.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp00hk92e2.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp00hk92e2.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp00hk92e2.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcul111ol.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpcul111ol.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpcul111ol.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpcul111ol.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpcul111ol.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpcul111ol.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpcul111ol.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpcul111ol.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpcul111ol.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpcul111ol.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpve63vk7t.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpve63vk7t.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpve63vk7t.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpve63vk7t.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpve63vk7t.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpve63vk7t.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpej0l52o0.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpej0l52o0.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpej0l52o0.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpej0l52o0.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpej0l52o0.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpej0l52o0.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpej0l52o0.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpej0l52o0.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpej0l52o0.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpej0l52o0.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for (i, row) in enumerate(lst)\n\
    \        for (j, col) in enumerate(row)\n            if col == x\n           \
    \     push!(res, (i, j))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    for i in 1:length(res)\n        sort!(res[i], by = x ->\
    \ -x[2])\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf7ngbw4x.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpf7ngbw4x.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf7ngbw4x.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7ngbw4x.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpf7ngbw4x.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    row_col = []\n    for (i, row)\
    \ in enumerate(lst)\n        for (j, col) in enumerate(row)\n            if col\
    \ == x\n                push!(row_col, (i, j))\n            end\n        end\n\
    \    end\n    sort!(row_col, by = x -> x[1])\n    sort!(row_col, by = x -> x[2],\
    \ rev = true)\n    return row_col\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4suk29xz.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp4suk29xz.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4suk29xz.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp4suk29xz.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp4suk29xz.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4suk29xz.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp4suk29xz.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp4suk29xz.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp4suk29xz.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp57ovsc64.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp57ovsc64.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp57ovsc64.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp57ovsc64.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp57ovsc64.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp57ovsc64.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjf4driq_.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpjf4driq_.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjf4driq_.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpjf4driq_.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjf4driq_.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjf4driq_.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpjf4driq_.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    # sort by\
    \ rows in ascending order\n    # sort by columns in descending order\n    # return\
    \ list of tuples\n    # [(x1, y1), (x2, y2) ...]\n    # where each tuple is a\
    \ coordinate - (row, columns), starting with 0\n    # if x not found return []\n\
    \    # if lst is empty return []\n    # if x is not an integer return []\n   \
    \ # if lst is not a nested list of integers return []\n    # if lst is not a nested\
    \ list of integers return []\n    # if lst is not a nested list of integers return\
    \ []\n    # if lst is not a nested list of integers return []\n    # if lst is\
    \ not a nested list of integers return []\n    # if lst is not a nested list of\
    \ integers return []\n    # if lst is not a nested list of integers return []\n\
    \    # if lst is not a nested list of integers return []\n    # if lst is not\
    \ a nested list of integers return []\n    # if lst is not a nested list of integers\
    \ return []\n    # if lst is not a nested list of integers return []\n    # if\
    \ lst is not a nested list of integers return []\n    # if lst is not a nested\
    \ list of integers return []\n    # if lst is not a nested list of integers return\
    \ []\n    # if lst is not a nested list of integers return []\n    # if lst is\
    \ not a nested list of integers return []\n    # if lst is not a nested list of\
    \ integers return []\n    # if lst is not a nested list of integers return []\n\
    \    # if lst is not a nested list of integers return []\n    # if lst is not\
    \ a nested list of integers return []\n    # if lst is not a nested list of integers\
    \ return []\n    # if lst is not a nested list of integers return []\n    # if\
    \ lst is not a nested list of integers return []\n    # if lst is not a nested\
    \ list of integers return []\n    # if lst is not a nested list of integers return\
    \ []\n    # if lst is not a nested list of integers return []\n    # if lst is\
    \ not a nested list of integers return []\n    # if lst is not\nusing Test\n\n\
    @testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsdcbzkux.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsdcbzkux.jl:1\n\
    in expression starting at /tmp/tmpsdcbzkux.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwflw_59i.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpwflw_59i.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwflw_59i.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpwflw_59i.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpwflw_59i.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwflw_59i.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = Vector{Tuple{Int64, Int64}}()\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(result, (i-1, j-1))\n            end\n\
    \        end\n    end\n    sort!(result, by = x -> x[1])\n    sort!(result, by\
    \ = x -> x[2], rev = true)\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnabfmrmq.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpnabfmrmq.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnabfmrmq.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpnabfmrmq.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpnabfmrmq.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnabfmrmq.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, el) in enumerate(row)\n            if el ==\
    \ x\n                push!(result, (i, j))\n            end\n        end\n   \
    \ end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n    \
    \    sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvw88wfsm.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpvw88wfsm.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvw88wfsm.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvw88wfsm.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpvw88wfsm.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    res = []\n\
    \    for i in 1:length(lst)\n        for j in 1:length(lst[i])\n            if\
    \ lst[i][j] == x\n                push!(res, (i-1, j-1))\n            end\n  \
    \      end\n    end\n    sort!(res, by = x -> x[1])\n    sort!(res, by = x ->\
    \ x[2], rev = true)\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz0g1h59k.jl:39\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpz0g1h59k.jl:39 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0g1h59k.jl:38\\ntest set: Test\
    \ Failed at /tmp/tmpz0g1h59k.jl:41\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpz0g1h59k.jl:41 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0g1h59k.jl:38\\ntest set: Error\
    \ During Test at /tmp/tmpz0g1h59k.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpz0g1h59k.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpz0g1h59k.jl:44 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpz0g1h59k.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpl7sregvt.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpl7sregvt.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpl7sregvt.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpl7sregvt.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpl7sregvt.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpl7sregvt.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpl7sregvt.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpl7sregvt.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpl7sregvt.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpl7sregvt.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpven_5x2d.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpven_5x2d.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpven_5x2d.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpven_5x2d.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpven_5x2d.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpven_5x2d.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpven_5x2d.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpven_5x2d.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpven_5x2d.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpven_5x2d.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyu63_u18.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpyu63_u18.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyu63_u18.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpyu63_u18.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpyu63_u18.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyu63_u18.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpyu63_u18.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpyu63_u18.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpyu63_u18.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo9cax56c.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpo9cax56c.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpo9cax56c.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpo9cax56c.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpo9cax56c.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpo9cax56c.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpo9cax56c.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpo9cax56c.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpo9cax56c.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpo9cax56c.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return [(0,\
    \ 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    #return []\n    #return [(2, 2)]\n\
    \    #return [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),\
    \ (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16),\
    \ (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1,\
    \ 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33),\
    \ (1, 34), (1, 35), (1, 36), (1, 37), (1, 38), (1, 39), (1, 40), (1, 41), (1,\
    \ 42), (1, 43), (1, 44), (1, 45), (1, 46), (1, 47), (1, 48), (1, 49), (1, 50),\
    \ (1, 51), (1, 52), (1, 53), (1, 54), (1, 55), (1, 56), (1, 57), (1, 58), (1,\
    \ 59), (1, 60), (1, 61), (1, 62), (1, 63), (1, 64), (1, 65), (1, 66), (1, 67),\
    \ (1, 68), (1, 69), (1, 70), (1, 71), (1, 72), (1, 73), (1, 74), (1, 75), (1,\
    \ 76), (1, 77), (1, 78), (1, 79), (1, 80), (1, 81), (1, 82), (1, 83), (1, 84),\
    \ (1, 85), (1, 86), (1, 87), (1, 88), (1, 89), (1, 90), (1, 91\nusing Test\n\n\
    @testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw9e776n3.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw9e776n3.jl:1\n\
    in expression starting at /tmp/tmpw9e776n3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp32pjo1u6.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp32pjo1u6.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp32pjo1u6.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp32pjo1u6.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp32pjo1u6.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp32pjo1u6.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp32pjo1u6.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp32pjo1u6.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp32pjo1u6.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp32pjo1u6.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxe1lo2cy.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpxe1lo2cy.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpxe1lo2cy.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpxe1lo2cy.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpxe1lo2cy.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpxe1lo2cy.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpxe1lo2cy.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpxe1lo2cy.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpxe1lo2cy.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpxe1lo2cy.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i != 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by = x -> x[2], rev = true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp528t_9fl.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp528t_9fl.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp528t_9fl.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmp528t_9fl.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp528t_9fl.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp528t_9fl.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo32mix5b.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpo32mix5b.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpo32mix5b.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpo32mix5b.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpo32mix5b.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpo32mix5b.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvhvifly7.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpvhvifly7.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvhvifly7.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpvhvifly7.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpvhvifly7.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpvhvifly7.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpvhvifly7.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpvhvifly7.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpvhvifly7.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpvhvifly7.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        sort!(result[i], by\
    \ = x -> -x[2])\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
    \ 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1,\
    \ 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t\
    @test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpemxs4be0.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpemxs4be0.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpemxs4be0.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpemxs4be0.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpemxs4be0.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    #return [(0,0),\
    \ (1,4), (1,0), (2,5), (2,0)]\n    #return []\n    #return [(2,2)]\n    #return\
    \ [(1,1), (1,0), (0,0)]\n    #return [(0,0), (1,0), (2,0)]\n    #return [(0,0),\
    \ (1,0), (2,0), (3,0)]\n    #return [(0,0), (1,0), (2,0), (3,0), (4,0)]\n    #return\
    \ [(0,0), (1,0), (2,0), (3,0), (4,0), (5,0)]\n    #return [(0,0), (1,0), (2,0),\
    \ (3,0), (4,0), (5,0), (6,0)]\n    #return [(0,0), (1,0), (2,0), (3,0), (4,0),\
    \ (5,0), (6,0), (7,0)]\n    #return [(0,0), (1,0), (2,0), (3,0), (4,0), (5,0),\
    \ (6,0), (7,0), (8,0)]\n    #return [(0,0), (1,0), (2,0), (3,0), (4,0), (5,0),\
    \ (6,0), (7,0), (8,0), (9,0)]\n    #return [(0,0), (1,0), (2,0), (3,0), (4,0),\
    \ (5,0), (6,0), (7,0), (8,0), (9,0), (10,0)]\n    #return [(0,0), (1,0), (2,0),\
    \ (3,0), (4,0), (5,0), (6,0), (7,0), (8,0), (9,0), (10,0), (11,0)]\n    #return\
    \ [(0,0), (1,0), (2,0), (3,0), (4,0),\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1rg3v4e3.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1rg3v4e3.jl:1\n\
    in expression starting at /tmp/tmp1rg3v4e3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    for i in 1:length(result)\n        sort!(result[i], by=x->x[2],\
    \ rev=true)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr4doybk5.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"(), rev=true)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061\
    \ got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword arguments \"by\", \"rev\"\\n    ...\\\
    n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @\
    \ Main /tmp/tmpr4doybk5.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmpr4doybk5.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr4doybk5.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpr4doybk5.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"(), rev=true)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    for i in 1:length(result)\n        if i < length(result)\
    \ && result[i][1] == result[i+1][1]\n            sort!(result[i:i+1], by = x ->\
    \ x[2], rev = true)\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2,\
    \ 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]],\
    \ 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmparfx1epl.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmparfx1epl.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmparfx1epl.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmparfx1epl.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmparfx1epl.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmparfx1epl.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf6bl3d0l.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpf6bl3d0l.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpf6bl3d0l.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpf6bl3d0l.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpf6bl3d0l.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpf6bl3d0l.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpf6bl3d0l.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpf6bl3d0l.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpf6bl3d0l.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpf6bl3d0l.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplj4rc3jc.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmplj4rc3jc.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplj4rc3jc.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmplj4rc3jc.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmplj4rc3jc.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplj4rc3jc.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmplj4rc3jc.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmplj4rc3jc.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmplj4rc3jc.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmplj4rc3jc.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8wxr80dm.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp8wxr80dm.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8wxr80dm.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp8wxr80dm.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp8wxr80dm.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8wxr80dm.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp8wxr80dm.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp8wxr80dm.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp8wxr80dm.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    for i in 1:length(res)\n        sort!(res[i], by = x ->\
    \ -x[2])\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2,\
    \ 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgcqrxes1.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\\n  Closest\
    \ candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got\
    \ unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword argument \"by\"\\n    ...\\n  Stacktrace:\\\
    n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @ Main /tmp/tmpgcqrxes1.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgcqrxes1.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgcqrxes1.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpgcqrxes1.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algor"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbkii8e3n.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpbkii8e3n.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbkii8e3n.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpbkii8e3n.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpbkii8e3n.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbkii8e3n.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1p_s7trk.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp1p_s7trk.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1p_s7trk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1p_s7trk.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp1p_s7trk.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1p_s7trk.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp1p_s7trk.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp1p_s7trk.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp1p_s7trk.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp1p_s7trk.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgujrzwoj.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpgujrzwoj.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgujrzwoj.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpgujrzwoj.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpgujrzwoj.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgujrzwoj.jl:37\\ntest set: '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by = x -> x[1])\n    sort!(res, by = x -> x[2], rev = true)\n    return res\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgyvanmik.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpgyvanmik.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgyvanmik.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpgyvanmik.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpgyvanmik.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpgyvanmik.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpgyvanmik.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    for i in 1:length(result)\n        sort!(result[i], by=x->x[2],\
    \ rev=true)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg98tpnw6.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\n  MethodError:\
    \ no method matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"(), rev=true)\\\
    n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061\
    \ got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.Perm{var\"#s814\", var\"#s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering,\
    \ var\"#s813\"<:(Vector{var\"#s812\"} where var\"#s812\"<:Union{Float32, Float64})})\
    \ at sort.jl:1192 got unsupported keyword arguments \"by\", \"rev\"\\n    ...\\\
    n  Stacktrace:\\n   [1] get_row(lst::Vector{Vector{Int64}}, x::Int64)\\n     @\
    \ Main /tmp/tmpg98tpnw6.jl:31\\n   [2] macro expansion\\n     @ /tmp/tmpg98tpnw6.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg98tpnw6.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpg98tpnw6.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"(), rev=true)\\n  Closest candidates are:\\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword arguments \"by\", \"rev\"\\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ arguments \"by\", \"rev\"\\n"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz0rdrn04.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpz0rdrn04.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0rdrn04.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpz0rdrn04.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpz0rdrn04.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0rdrn04.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpz0rdrn04.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpz0rdrn04.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpz0rdrn04.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpz0rdrn04.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, item) in enumerate(row)\n            if item\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\
    \t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4,\
    \ 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0),\
    \ (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6he4qgor.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(3, 6), (2, 5), (1, 1), (2, 1),\
    \ (3, 1)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp6he4qgor.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6he4qgor.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp6he4qgor.jl:39\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2)] == [(0,\
    \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmp6he4qgor.jl:39 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6he4qgor.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp6he4qgor.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1), (6, 1), (7, 1)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6he4qgor.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6he4qgor.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp6he4qgor.jl:43\\n  Test threw exception\\n  Expression:\
    \ candida"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    for i in 1:length(result)\n        if i != 1 && result[i][1]\
    \ == result[i-1][1]\n            sort!(result[i-1:i], by=x->x[2], rev=true)\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = get_row;\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
    \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3,\
    \ 1), (4, 1), (5, 1)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3,\
    \ 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]),\
    \ 1) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph4ak1xt_.jl:42\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(0, 0), (1, 0), (1, 4), (2, 0),\
    \ (2, 5)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmph4ak1xt_.jl:42 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmph4ak1xt_.jl:41\\ntest set: Test\
    \ Failed at /tmp/tmph4ak1xt_.jl:44\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(0, 0), (1, 0), (2, 0), (2, 1), (3, 0), (3, 2), (4, 0), (4, 3),\
    \ (5, 0), (5, 4), (6, 0), (6, 5)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmph4ak1xt_.jl:44 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmph4ak1xt_.jl:41\\ntest set: Error\
    \ During Test at /tmp/tmph4ak1xt_.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmph4ak1xt_.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmph4ak1xt_.jl:47 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmph4ak1xt_.jl:41\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqlx13c3a.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpqlx13c3a.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqlx13c3a.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpqlx13c3a.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpqlx13c3a.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqlx13c3a.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpqlx13c3a.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpqlx13c3a.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpqlx13c3a.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpqlx13c3a.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by = x -> x[1])\n    sort!(result, by = x -> x[2], rev = true)\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfdfbx2md.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmpfdfbx2md.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfdfbx2md.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmpfdfbx2md.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpfdfbx2md.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpfdfbx2md.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpfdfbx2md.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmpfdfbx2md.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmpfdfbx2md.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmpfdfbx2md.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc0zjd9ei.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpc0zjd9ei.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc0zjd9ei.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpc0zjd9ei.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpc0zjd9ei.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc0zjd9ei.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpc0zjd9ei.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpc0zjd9ei.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpc0zjd9ei.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpc0zjd9ei.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp276tfbhl.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmp276tfbhl.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp276tfbhl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp276tfbhl.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmp276tfbhl.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp276tfbhl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmp276tfbhl.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp276tfbhl.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp276tfbhl.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmp276tfbhl.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for (i, row) in\
    \ enumerate(lst)\n        for (j, elem) in enumerate(row)\n            if elem\
    \ == x\n                push!(result, (i, j))\n            end\n        end\n\
    \    end\n    sort!(result, by = x -> x[1])\n    for i in 1:length(result)\n \
    \       sort!(result[i], by = x -> -x[2])\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjhcmklse.jl:40\n  Test threw exception\n\
    \  Expression: candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  MethodError: no method\
    \ matching sort!(::Tuple{Int64, Int64}; by=var\"#2#4\"())\n  Closest candidates\
    \ are:\n    sort!(!Matched::AbstractUnitRange) at range.jl:1061 got unsupported\
    \ keyword argument \"by\"\n    sort!(!Matched::AbstractVector{var\"#s814\"} where\
    \ var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm, !Matched::Base.Order.DirectOrdering)\
    \ at sort.jl:1191 got unsupported keyword argument \"by\"\n    sort!(!Matched::Vector{Int64},\
    \ !Matched::Base.Sort.Algorithm, !Matched::Base.Order.Perm{var\"#s814\", var\"\
    #s813\"} where {var\"#s814\"<:Base.Order.DirectOrdering, var\"#s813\"<:(Vector{var\"\
    #s812\"} where var\"#s812\"<:Union{Float32, Float64})}) at sort.jl:1192 got unsupported\
    \ keyword argument \"by\"\n    ...\n  Stacktrace:\n   [1] get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)\n     @ Main /tmp/tmpjhcmklse.jl:31\n   [2] macro expansion\n    \
    \ @ /tmp/tmpjhcmklse.jl:40 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjhcmklse.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjhcmklse.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1),\
    \ (2, 1), (3, 1), (4, 1), (5, 1)]\n  MethodError: no method matching sort!(::Tuple{Int64,\
    \ Int64}; by=var\"#2#4\"())\n  Closest candidates are:\n    sort!(!Matched::AbstractUnitRange)\
    \ at range.jl:1061 got unsupported keyword argument \"by\"\n    sort!(!Matched::AbstractVector{var\"\
    #s814\"} where var\"#s814\"<:Union{Float32, Float64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order.DirectOrdering) at sort.jl:1191 got unsupported keyword\
    \ argument \"by\"\n    sort!(!Matched::Vector{Int64}, !Matched::Base.Sort.Algorithm,\
    \ !Matched::Base.Order."
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhcmklse.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    result = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(result, (i-1, j-1))\n            end\n        end\n    end\n    sort!(result,\
    \ by=x->x[1])\n    sort!(result, by=x->x[2], rev=true)\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
    \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6qdf8g12.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp6qdf8g12.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6qdf8g12.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp6qdf8g12.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp6qdf8g12.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp6qdf8g12.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp6qdf8g12.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp6qdf8g12.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp6qdf8g12.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp6qdf8g12.jl:37\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppken6jyl.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmppken6jyl.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppken6jyl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmppken6jyl.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmppken6jyl.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppken6jyl.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmppken6jyl.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmppken6jyl.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmppken6jyl.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmppken6jyl.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    res = []\n    for i in 1:length(lst)\n\
    \        for j in 1:length(lst[i])\n            if lst[i][j] == x\n          \
    \      push!(res, (i-1, j-1))\n            end\n        end\n    end\n    sort!(res,\
    \ by=x->x[1])\n    sort!(res, by=x->x[2], rev=true)\n    return res\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4), (1,\
    \ 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6],\
    \ [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0),\
    \ (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6,\
    \ 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\
    \t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3u2y5to0.jl:38\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: [(2, 5), (1, 4), (0, 0), (1, 0),\
    \ (2, 0)] == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp3u2y5to0.jl:38 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3u2y5to0.jl:37\\ntest set: Test\
    \ Failed at /tmp/tmp3u2y5to0.jl:40\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: [(6, 5), (5, 4), (4, 3), (3, 2), (2, 1), (0, 0), (1, 0), (2, 0),\
    \ (3, 0), (4, 0), (5, 0), (6, 0)] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp3u2y5to0.jl:40 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp3u2y5to0.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmp3u2y5to0.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Closest candidates are:\\n    get_row(!Matched::Vector{Vector{Int64}},\
    \ ::Int64) at /tmp/tmp3u2y5to0.jl:20\\n  Stacktrace:\\n   [1] macro expansion\\\
    n     @ /tmp/tmp3u2y5to0.jl:43 [inlined]\\n   [2] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [3] top-level scope\\n     @ /tmp/tmp3u2y5to0.jl:37\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     2      1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaqrh7si2.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmpaqrh7si2.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpaqrh7si2.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpaqrh7si2.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpaqrh7si2.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpaqrh7si2.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmpaqrh7si2.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpaqrh7si2.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpaqrh7si2.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmpaqrh7si2.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n \
    \   which is similar to matrix, however, unlike matrices,\n    each row may contain\
    \ a different number of columns.\n    Given lst, and integer x, find integers\
    \ x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such\
    \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n  \
    \  Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates\
    \ of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n\
    \      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) ==\
    \ [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
    \ x::Int64)::Vector{Tuple{Int64, Int64}} \n    # your code here\n    return []\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t\
    @test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1,\
    \ 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\
    \ 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4),\
    \ (5, 0), (6, 5), (6, 0)])\n\t@test(candidate(Vector{Vector{Int64}}([]), 1) ==\
    \ Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[1]], 2) == Vector{Tuple{Int64,\
    \ Int64}}([]))\n\t@test(candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprh7wl_mt.jl:29\\n  Expression: candidate([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1,\
    \ 4), (1, 0), (2, 5), (2, 0)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 0),\
    \ (1, 4), (1, 0), (2, 5), (2, 0)]\\nStacktrace:\\n [1] macro expansion\\n   @\
    \ /tmp/tmprh7wl_mt.jl:29 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprh7wl_mt.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprh7wl_mt.jl:30\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5,\
    \ 1)]\\n   Evaluated: Tuple{Int64, Int64}[] == [(0, 1), (1, 1), (2, 1), (3, 1),\
    \ (4, 1), (5, 1)]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmprh7wl_mt.jl:30\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprh7wl_mt.jl:28\\ntest set: Test\
    \ Failed at /tmp/tmprh7wl_mt.jl:31\\n  Expression: candidate([[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 1),\
    \ (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\n \
    \  Evaluated: Tuple{Int64, Int64}[] == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2),\
    \ (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmprh7wl_mt.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmprh7wl_mt.jl:28\\ntest set: Error\
    \ During Test at /tmp/tmprh7wl_mt.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\\n  MethodError: no method matching\
    \ get_row(::Vector{Vector{Any}}, ::Int64)\\n  Clo"
  stderr: None
  exit_code: -1
  status: Timeout
