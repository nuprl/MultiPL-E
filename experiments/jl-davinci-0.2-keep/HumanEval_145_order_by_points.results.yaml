name: HumanEval_145_order_by_points
language: julia
results:
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    return sort(nums,\
    \ by = x -> (sum(digits(x)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7gc62qlb.jl:22\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7gc62qlb.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gc62qlb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7gc62qlb.jl:23\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7gc62qlb.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gc62qlb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7gc62qlb.jl:25\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7gc62qlb.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gc62qlb.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gc62qlb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_sum = [sum(digits(i)) for i in nums]\n    return sortperm(nums_sum)[nums]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1lzbn6aj.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  BoundsError: attempt to access 5-element Vector{Int64} at index [[1,\
    \ 11, -1, -11, -12]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmp1lzbn6aj.jl:13\\\
    n   [6] macro expansion\\n     @ /tmp/tmp1lzbn6aj.jl:20 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp1lzbn6aj.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1lzbn6aj.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  BoundsError:\
    \ attempt to access 15-element Vector{Int64} at index [[1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmp1lzbn6aj.jl:13\\\
    n   [6] macro expansion\\n     @ /tmp/tmp1lzbn6aj.jl:21 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp1lzbn6aj.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1lzbn6aj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -9"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_sorted = sort(nums, by = x -> sum(digits(x)))\n    return nums_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqz3o37g.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiqz3o37g.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiqz3o37g.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiqz3o37g.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpiqz3o37g.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiqz3o37g.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqz3o37g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp307jj46p.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp307jj46p.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp307jj46p.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp307jj46p.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp307jj46p.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp307jj46p.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp307jj46p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpipywz77x.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpipywz77x.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpipywz77x.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpipywz77x.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpipywz77x.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpipywz77x.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpipywz77x.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpipywz77x.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpipywz77x.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpipywz77x.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(nums, by=x->sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbw9pbcgp.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [5, 4, 3, 1, 2] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbw9pbcgp.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbw9pbcgp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbw9pbcgp.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [14, 5, 12, 9, 8, 2, 6, 7,\
    \ 1, 4, 10, 15, 13, 3, 11] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbw9pbcgp.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbw9pbcgp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbw9pbcgp.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [6, 3,\
    \ 8, 2, 1, 7, 4, 5] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbw9pbcgp.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbw9pbcgp.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbw9pbcgp.jl:24\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [4, 5, 1, 7, 6, 2, 3] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbw9pbcgp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbw9pbcgp.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbw9pbcgp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    sums = [sum(digits(x)) for x in nums]\n    return [nums[i] for i in sortperm(sums)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf0nda5mb.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf0nda5mb.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0nda5mb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf0nda5mb.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpf0nda5mb.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf0nda5mb.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0nda5mb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw9u3wj5a.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9u3wj5a.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9u3wj5a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw9u3wj5a.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw9u3wj5a.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9u3wj5a.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpw9u3wj5a.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw9u3wj5a.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9u3wj5a.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9u3wj5a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpifannc1m.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpifannc1m.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpifannc1m.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpifannc1m.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpifannc1m.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpifannc1m.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpifannc1m.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprdeqy8yj.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmprdeqy8yj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmprdeqy8yj.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprdeqy8yj.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmprdeqy8yj.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmprdeqy8yj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmprdeqy8yj.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpohr454jb.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpohr454jb.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpohr454jb.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpohr454jb.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpohr454jb.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpohr454jb.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpohr454jb.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqqmcbl2.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvqqmcbl2.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqqmcbl2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvqqmcbl2.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvqqmcbl2.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqqmcbl2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvqqmcbl2.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvqqmcbl2.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqqmcbl2.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqqmcbl2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyrw122um.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\\
    n  Closest candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt,\
    \ by, rev, order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpyrw122um.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpyrw122um.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyrw122um.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpyrw122um.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest\
    \ candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpyrw122um.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpyrw122um.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyrw122um.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpyrw122um.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\\n  MethodError: no method\
    \ matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest candidates\
    \ are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpyrw122um.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpyrw122um.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx9c4epb5.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpx9c4epb5.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpx9c4epb5.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx9c4epb5.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpx9c4epb5.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpx9c4epb5.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpx9c4epb5.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_sorted = sort(nums, by = x -> sum(digits(x)))\n    return nums_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt1ivk8mm.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1ivk8mm.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1ivk8mm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt1ivk8mm.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpt1ivk8mm.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1ivk8mm.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1ivk8mm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbx1m3r9n.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbx1m3r9n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbx1m3r9n.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbx1m3r9n.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbx1m3r9n.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbx1m3r9n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbx1m3r9n.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuquu5zxj.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpuquu5zxj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpuquu5zxj.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuquu5zxj.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpuquu5zxj.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpuquu5zxj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpuquu5zxj.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmedfrfph.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmedfrfph.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmedfrfph.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmedfrfph.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpmedfrfph.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmedfrfph.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmedfrfph.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by sum of digits, then by index\n    return sortperm(nums, by=x->(sum(digits(x)),\
    \ x))\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwn04fm3.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [5, 4, 3, 1, 2] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwn04fm3.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwn04fm3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmwn04fm3.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [14, 5, 12, 9, 8, 2, 6, 7,\
    \ 10, 15, 4, 1, 13, 3, 11] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwn04fm3.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwn04fm3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmwn04fm3.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [6, 3,\
    \ 8, 2, 1, 7, 4, 5] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmwn04fm3.jl:23 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwn04fm3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpmwn04fm3.jl:25\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [4, 5, 1, 7, 6, 2, 3] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwn04fm3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwn04fm3.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwn04fm3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), by=nums)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg5jute26.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: objects of type Vector{Int64} are not callable\\n  Use\
    \ square brackets [] for indexing an Array.\\n  Stacktrace:\\n    [1] lt(o::Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n      @ Base.Order ./ordering.jl:111\\\
    n    [2] lt\\n      @ ./ordering.jl:117 [inlined]\\n    [3] sort!\\n      @ ./sort.jl:502\
    \ [inlined]\\n    [4] sort!\\n      @ ./sort.jl:569 [inlined]\\n    [5] sort!(v::Vector{Int64},\
    \ alg::Base.Sort.QuickSortAlg, order::Base.Order.Perm{Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, Vector{Int64}})\\n      @ Base.Sort ./sort.jl:659\\\
    n    [6] sortperm(v::Vector{Int64}; alg::Base.Sort.QuickSortAlg, lt::Function,\
    \ by::Vector{Int64}, rev::Nothing, order::Base.Order.ForwardOrdering)\\n     \
    \ @ Base.Sort ./sort.jl:924\\n    [7] order_by_points(nums::Vector{Int64})\\n\
    \      @ Main /tmp/tmpg5jute26.jl:12\\n    [8] macro expansion\\n      @ /tmp/tmpg5jute26.jl:19\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpg5jute26.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmpg5jute26.jl:20\\n  Test threw exception\\\
    n  Expression: candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\\
    n  MethodError: objects of type Vector{Int64} are not callable\\n  Use square\
    \ brackets [] for indexing an Array.\\n  Stacktrace:\\n    [1] lt(o::Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n      @ Base.Order ./ordering.jl:111\\\
    n    [2] lt\\n      @ ./ordering.jl:117 [inlined]\\n    [3] sort!\\n      @ ./sort.jl:502\
    \ [inlined]\\n    [4] sort!\\n      @ ./sort.jl:569 [inlined]\\n    [5] sort!(v::Vector{Int64},\
    \ alg::Base.Sort.QuickSortAlg, order::Base.Order.Perm{Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpecjb_t07.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpecjb_t07.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpecjb_t07.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpecjb_t07.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpecjb_t07.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpecjb_t07.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpecjb_t07.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplvsvsh89.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmplvsvsh89.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmplvsvsh89.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplvsvsh89.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmplvsvsh89.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmplvsvsh89.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmplvsvsh89.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpclggb9ln.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpclggb9ln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpclggb9ln.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpclggb9ln.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpclggb9ln.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpclggb9ln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpclggb9ln.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)),x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprapcg7r4.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprapcg7r4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprapcg7r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprapcg7r4.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprapcg7r4.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprapcg7r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprapcg7r4.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprapcg7r4.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprapcg7r4.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprapcg7r4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return nums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsdqbncn.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsdqbncn.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsdqbncn.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjsdqbncn.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsdqbncn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsdqbncn.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjsdqbncn.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjsdqbncn.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsdqbncn.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjsdqbncn.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjsdqbncn.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsdqbncn.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpjsdqbncn.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsdqbncn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpks83nbdn.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpks83nbdn.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpks83nbdn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpks83nbdn.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpks83nbdn.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpks83nbdn.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpks83nbdn.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpks83nbdn.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpks83nbdn.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpks83nbdn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpueyx83aw.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpueyx83aw.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpueyx83aw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpueyx83aw.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpueyx83aw.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpueyx83aw.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpueyx83aw.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpueyx83aw.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpueyx83aw.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpueyx83aw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_with_sum = [(sum(digits(x)), x) for x in nums]\n    sorted_nums =\
    \ sort(nums_with_sum, by=x->x[1])\n    return [x[2] for x in sorted_nums]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_7tx9ux.jl:21\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph_7tx9ux.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_7tx9ux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmph_7tx9ux.jl:24\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmph_7tx9ux.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_7tx9ux.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_7tx9ux.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpce49h26l.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpce49h26l.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpce49h26l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpce49h26l.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpce49h26l.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpce49h26l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpce49h26l.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpce49h26l.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpce49h26l.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpce49h26l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprxc8knt4.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprxc8knt4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprxc8knt4.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprxc8knt4.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprxc8knt4.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprxc8knt4.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxc8knt4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibx567e4.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibx567e4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibx567e4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpibx567e4.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpibx567e4.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibx567e4.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibx567e4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2c5ktdts.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp2c5ktdts.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp2c5ktdts.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2c5ktdts.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp2c5ktdts.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp2c5ktdts.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp2c5ktdts.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvzvp994.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyvzvp994.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyvzvp994.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpyvzvp994.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyvzvp994.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyvzvp994.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvzvp994.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwuxf00qr.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwuxf00qr.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwuxf00qr.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwuxf00qr.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwuxf00qr.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwuxf00qr.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwuxf00qr.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwuxf00qr.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwuxf00qr.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwuxf00qr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return [nums[i] for i in sortperm(sums)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0oaaqlk.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw0oaaqlk.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0oaaqlk.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpw0oaaqlk.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw0oaaqlk.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0oaaqlk.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0oaaqlk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe9cb_htc.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\\
    n  Closest candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt,\
    \ by, rev, order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpe9cb_htc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpe9cb_htc.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9cb_htc.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpe9cb_htc.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest\
    \ candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpe9cb_htc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpe9cb_htc.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9cb_htc.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpe9cb_htc.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\\n  MethodError: no method\
    \ matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest candidates\
    \ are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmpe9cb_htc.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmpe9cb_htc.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4wh75ue2.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4wh75ue2.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wh75ue2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4wh75ue2.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4wh75ue2.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wh75ue2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4wh75ue2.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4wh75ue2.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wh75ue2.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wh75ue2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkuioou4p.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpkuioou4p.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpkuioou4p.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkuioou4p.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpkuioou4p.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpkuioou4p.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpkuioou4p.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by sum of digits\n    # if there are several items with similar\
    \ sum of their digits,\n    # order them based on their index in original list.\n\
    \    # return the sorted list\n    return sort(nums, by=x->(sum(digits(x)), findall(x->x==x,\
    \ nums)[1]))\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo6qj6kzd.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo6qj6kzd.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo6qj6kzd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpo6qj6kzd.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpo6qj6kzd.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo6qj6kzd.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo6qj6kzd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe9ch4i7l.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9ch4i7l.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9ch4i7l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe9ch4i7l.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9ch4i7l.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9ch4i7l.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe9ch4i7l.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpe9ch4i7l.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9ch4i7l.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9ch4i7l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(length(nums))\n\
    \    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n\
    \    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz65vu0z_.jl:26\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz65vu0z_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz65vu0z_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpz65vu0z_.jl:29\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz65vu0z_.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz65vu0z_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz65vu0z_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovwirlho.jl:22\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpovwirlho.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovwirlho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpovwirlho.jl:23\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpovwirlho.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovwirlho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpovwirlho.jl:25\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpovwirlho.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovwirlho.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovwirlho.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfnoj23cw.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpfnoj23cw.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpfnoj23cw.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfnoj23cw.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpfnoj23cw.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpfnoj23cw.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpfnoj23cw.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return nums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgqs9hra.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgqs9hra.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgqs9hra.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxgqs9hra.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgqs9hra.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgqs9hra.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxgqs9hra.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxgqs9hra.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgqs9hra.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxgqs9hra.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxgqs9hra.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgqs9hra.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxgqs9hra.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgqs9hra.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm604_ubo.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm604_ubo.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm604_ubo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpm604_ubo.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm604_ubo.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm604_ubo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpm604_ubo.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpm604_ubo.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm604_ubo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm604_ubo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhug7ysh.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhug7ysh.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhug7ysh.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhug7ysh.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprhug7ysh.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhug7ysh.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhug7ysh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjdg81nj6.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjdg81nj6.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjdg81nj6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjdg81nj6.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjdg81nj6.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjdg81nj6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjdg81nj6.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjdg81nj6.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjdg81nj6.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdg81nj6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return nums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9h6fk2t_.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9h6fk2t_.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h6fk2t_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9h6fk2t_.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9h6fk2t_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h6fk2t_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9h6fk2t_.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9h6fk2t_.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h6fk2t_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9h6fk2t_.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9h6fk2t_.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9h6fk2t_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp9h6fk2t_.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9h6fk2t_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27ihxnll.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27ihxnll.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27ihxnll.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp27ihxnll.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp27ihxnll.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27ihxnll.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp27ihxnll.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp27ihxnll.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp27ihxnll.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27ihxnll.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppsleul8w.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmppsleul8w.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmppsleul8w.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppsleul8w.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmppsleul8w.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmppsleul8w.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmppsleul8w.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5sncitk.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5sncitk.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5sncitk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpl5sncitk.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl5sncitk.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5sncitk.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpl5sncitk.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpl5sncitk.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl5sncitk.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5sncitk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9l7j5izj.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp9l7j5izj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp9l7j5izj.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9l7j5izj.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp9l7j5izj.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp9l7j5izj.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp9l7j5izj.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    return sorted_nums\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfsxlad72.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfsxlad72.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfsxlad72.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpfsxlad72.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpfsxlad72.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfsxlad72.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfsxlad72.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplsthevda.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmplsthevda.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmplsthevda.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplsthevda.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmplsthevda.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmplsthevda.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmplsthevda.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp44u71wam.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp44u71wam.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp44u71wam.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp44u71wam.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp44u71wam.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp44u71wam.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp44u71wam.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpddqvbc7n.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpddqvbc7n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpddqvbc7n.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpddqvbc7n.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpddqvbc7n.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpddqvbc7n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpddqvbc7n.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(x, -x))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlmxkzj3.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwlmxkzj3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwlmxkzj3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwlmxkzj3.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 37, 46, 53, 56,\
    \ 145, 423, 423, 423, 463, 1234, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwlmxkzj3.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwlmxkzj3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwlmxkzj3.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -11, -3, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwlmxkzj3.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwlmxkzj3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwlmxkzj3.jl:23\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwlmxkzj3.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwlmxkzj3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwlmxkzj3.jl:24\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlmxkzj3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    indices = sortperm(sums)\n    return nums[indices]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz2krwp6p.jl:24\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2krwp6p.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2krwp6p.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz2krwp6p.jl:27\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz2krwp6p.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2krwp6p.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2krwp6p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnt0ldxhc.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnt0ldxhc.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt0ldxhc.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnt0ldxhc.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnt0ldxhc.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt0ldxhc.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnt0ldxhc.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnt0ldxhc.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt0ldxhc.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnt0ldxhc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdtwkbsnf.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdtwkbsnf.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtwkbsnf.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdtwkbsnf.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdtwkbsnf.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtwkbsnf.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdtwkbsnf.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdtwkbsnf.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtwkbsnf.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdtwkbsnf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpow4npo5b.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpow4npo5b.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpow4npo5b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpow4npo5b.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpow4npo5b.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpow4npo5b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpow4npo5b.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpow4npo5b.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpow4npo5b.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpow4npo5b.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftauax3b.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftauax3b.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftauax3b.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpftauax3b.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpftauax3b.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftauax3b.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftauax3b.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    sums = [sum(digits(x)) for x in nums]\n    return sortperm(sums, 1)[1]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjfyxihy.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::Int64)\n  Closest candidates\
    \ are:\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n  \
    \   @ Main /tmp/tmpsjfyxihy.jl:13\n   [2] macro expansion\n     @ /tmp/tmpsjfyxihy.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsjfyxihy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsjfyxihy.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::Int64)\n  Closest candidates\
    \ are:\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n  \
    \   @ Main /tmp/tmpsjfyxihy.jl:13\n   [2] macro expansion\n     @ /tmp/tmpsjfyxihy.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsjfyxihy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsjfyxihy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError: no method\
    \ matching sortperm(::Vector{Int64}, ::Int64)\n  Closest candidates are:\n   \
    \ sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at sort.jl:901\n\
    \  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n     @ Main /tmp/tmpsjfyxihy.jl:13\n\
    \   [2] macro expansion\n     @ /tmp/tmpsjfyxihy.jl:22 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level sco"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjfyxihy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4agybpvs.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4agybpvs.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4agybpvs.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4agybpvs.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4agybpvs.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4agybpvs.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4agybpvs.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4agybpvs.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4agybpvs.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4agybpvs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdyasdycw.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpdyasdycw.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpdyasdycw.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdyasdycw.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpdyasdycw.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpdyasdycw.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpdyasdycw.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2ge0uux2.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\\
    n  Closest candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt,\
    \ by, rev, order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp2ge0uux2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2ge0uux2.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ge0uux2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp2ge0uux2.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest\
    \ candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp2ge0uux2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2ge0uux2.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2ge0uux2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp2ge0uux2.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\\n  MethodError: no method\
    \ matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest candidates\
    \ are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp2ge0uux2.jl:12\\n   [2] macro expansion\\n     @ /tmp/tmp2ge0uux2.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    # sort by sum\
    \ of digits\n    sort!(nums, by = x -> sum(digits(x)))\n    return nums\nend\n\
    using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9p45jxwy.jl:24\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9p45jxwy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9p45jxwy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9p45jxwy.jl:27\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9p45jxwy.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9p45jxwy.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9p45jxwy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(abs.(digits.(nums))), collect(1:length(nums)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5mqvkk4g.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching abs(::Vector{Int64})\\n  Closest candidates\
    \ are:\\n    abs(!Matched::Bool) at bool.jl:79\\n    abs(!Matched::Unsigned) at\
    \ int.jl:169\\n    abs(!Matched::Signed) at int.jl:170\\n    ...\\n  Stacktrace:\\\
    n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:648 [inlined]\\n \
    \   [2] _broadcast_getindex\\n      @ ./broadcast.jl:621 [inlined]\\n    [3] _getindex\\\
    n      @ ./broadcast.jl:645 [inlined]\\n    [4] _broadcast_getindex\\n      @\
    \ ./broadcast.jl:620 [inlined]\\n    [5] getindex\\n      @ ./broadcast.jl:575\
    \ [inlined]\\n    [6] copy\\n      @ ./broadcast.jl:922 [inlined]\\n    [7] materialize\\\
    n      @ ./broadcast.jl:883 [inlined]\\n    [8] order_by_points(nums::Vector{Int64})\\\
    n      @ Main /tmp/tmp5mqvkk4g.jl:12\\n    [9] macro expansion\\n      @ /tmp/tmp5mqvkk4g.jl:19\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp5mqvkk4g.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmp5mqvkk4g.jl:20\\n  Test threw exception\\\
    n  Expression: candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\\
    n  MethodError: no method matching abs(::Vector{Int64})\\n  Closest candidates\
    \ are:\\n    abs(!Matched::Bool) at bool.jl:79\\n    abs(!Matched::Unsigned) at\
    \ int.jl:169\\n    abs(!Matched::Signed) at int.jl:170\\n    ...\\n  Stacktrace:\\\
    n    [1] _broadcast_getindex_evalf\\n      @ ./broadcast.jl:648 [inlined]\\n \
    \   [2] _broadcast_getindex\\n      @ ./broadcast.jl:621 [inlined]\\n    [3] _getindex\\\
    n      @ ./broadcast.jl:645 [inlined]\\n    [4] _broadcast_getindex\\n      @\
    \ ./broadcast.jl:620 [inlined]\\n    [5] getindex\\n      @ ./broadcast.jl:575\
    \ [inlined]\\n    [6] copy\\n      @ ./broadcast.jl:922 [inlined]\\n    [7] materialize\\\
    n      @ ./broadcast.jl:883 "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return sortperm(sums)[sortperm(nums)]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpavhlhz16.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [2, 1, 3, 5, 4] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavhlhz16.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavhlhz16.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpavhlhz16.jl:24\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [3, 8, 15, 1, 4, 11, 7, 13,\
    \ 9, 5, 2, 6, 12, 14, 10] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavhlhz16.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavhlhz16.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpavhlhz16.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [7, 8,\
    \ 3, 5, 6, 4, 2, 1] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpavhlhz16.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavhlhz16.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpavhlhz16.jl:28\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [7, 6, 4, 3, 5, 1, 2] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpavhlhz16.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpavhlhz16.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavhlhz16.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbb222mac.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbb222mac.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbb222mac.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbb222mac.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbb222mac.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbb222mac.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbb222mac.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    sums = zeros(length(nums))\n\
    \    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n\
    \    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3b73w7v.jl:26\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3b73w7v.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3b73w7v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpa3b73w7v.jl:29\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa3b73w7v.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3b73w7v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3b73w7v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpegzdczfe.jl:20\n  Test threw exception\n\
    \  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpegzdczfe.jl:13\n   [2] macro expansion\n     @ /tmp/tmpegzdczfe.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpegzdczfe.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpegzdczfe.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n     @ Main\
    \ /tmp/tmpegzdczfe.jl:13\n   [2] macro expansion\n     @ /tmp/tmpegzdczfe.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpegzdczfe.jl:19\ntest set:\
    \ Er"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpegzdczfe.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwkvfy_uq.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwkvfy_uq.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkvfy_uq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwkvfy_uq.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwkvfy_uq.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkvfy_uq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwkvfy_uq.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwkvfy_uq.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkvfy_uq.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwkvfy_uq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_sorted = sort(nums, by = x -> sum(digits(x)))\n    return nums_sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp565vd1og.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp565vd1og.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp565vd1og.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp565vd1og.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp565vd1og.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp565vd1og.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp565vd1og.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppyqzu86z.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\n  Closest\
    \ candidates are:\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmppyqzu86z.jl:12\n   [2] macro expansion\n     @ /tmp/tmppyqzu86z.jl:19\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppyqzu86z.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppyqzu86z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\n  Closest\
    \ candidates are:\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n\
    \     @ Main /tmp/tmppyqzu86z.jl:12\n   [2] macro expansion\n     @ /tmp/tmppyqzu86z.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppyqzu86z.jl:18\ntest set:\
    \ Error During Test at /tmp/tmppyqzu86z.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError: no method\
    \ matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\n  Closest candidates\
    \ are:\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev, order) at\
    \ sort.jl:901\n  Stacktrace:\n   [1] order_by_points(nums::Vector{Int64})\n  \
    \   @ Main /tmp/tmppyqzu86z.jl:12\n   [2] macro expansion\n     @ /tmp/tmppyqzu86z.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:11"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppyqzu86z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbxd4orx4.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbxd4orx4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbxd4orx4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbxd4orx4.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbxd4orx4.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbxd4orx4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbxd4orx4.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbxd4orx4.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbxd4orx4.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxd4orx4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmn4ulqph.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmn4ulqph.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmn4ulqph.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmn4ulqph.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpmn4ulqph.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmn4ulqph.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmn4ulqph.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return sortperm(sums)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6l0hnmsr.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [5, 4, 3, 1, 2] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6l0hnmsr.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l0hnmsr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6l0hnmsr.jl:24\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [14, 5, 12, 9, 8, 2, 6, 7,\
    \ 1, 4, 10, 15, 13, 3, 11] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6l0hnmsr.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l0hnmsr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6l0hnmsr.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [6, 3,\
    \ 8, 2, 1, 7, 4, 5] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6l0hnmsr.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l0hnmsr.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp6l0hnmsr.jl:28\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [4, 5, 1, 7, 6, 2, 3] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6l0hnmsr.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6l0hnmsr.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l0hnmsr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_with_points = [(n, sum(digits(n))) for n in nums]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by=x -> x[2])\n    return [n for (n, _) in sorted_nums_with_points]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwgj67p9m.jl:21\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwgj67p9m.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgj67p9m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpwgj67p9m.jl:24\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwgj67p9m.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwgj67p9m.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgj67p9m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw8k9a1he.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpw8k9a1he.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpw8k9a1he.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw8k9a1he.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpw8k9a1he.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpw8k9a1he.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpw8k9a1he.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dei8v6n.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2dei8v6n.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2dei8v6n.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2dei8v6n.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2dei8v6n.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2dei8v6n.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2dei8v6n.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2dei8v6n.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2dei8v6n.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dei8v6n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmlwsf_tm.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmlwsf_tm.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmlwsf_tm.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmlwsf_tm.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpmlwsf_tm.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmlwsf_tm.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmlwsf_tm.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbqzu9fwb.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbqzu9fwb.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbqzu9fwb.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbqzu9fwb.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbqzu9fwb.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbqzu9fwb.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbqzu9fwb.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by sum of digits\n    # if sum of digits is equal, sort by index\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp41czlajw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp41czlajw.jl:1\n\
    in expression starting at /tmp/tmp41czlajw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkv09iou.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkv09iou.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkv09iou.jl:18\ntest set: Test\
    \ Failed at /tmp/tmplkv09iou.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkv09iou.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkv09iou.jl:18\ntest set: Test\
    \ Failed at /tmp/tmplkv09iou.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmplkv09iou.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkv09iou.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkv09iou.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcnny63ln.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpcnny63ln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpcnny63ln.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcnny63ln.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpcnny63ln.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpcnny63ln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpcnny63ln.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(x, sum(digits(x))))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7oopl_1w.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7oopl_1w.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7oopl_1w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7oopl_1w.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 37, 46, 53, 56,\
    \ 145, 423, 423, 423, 463, 1234, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7oopl_1w.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7oopl_1w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7oopl_1w.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -11, -3, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7oopl_1w.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7oopl_1w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7oopl_1w.jl:23\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7oopl_1w.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7oopl_1w.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7oopl_1w.jl:24\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7oopl_1w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7wxhtx8_.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7wxhtx8_.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7wxhtx8_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7wxhtx8_.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7wxhtx8_.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7wxhtx8_.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp7wxhtx8_.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7wxhtx8_.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7wxhtx8_.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wxhtx8_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxqa1vm3d.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqa1vm3d.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqa1vm3d.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxqa1vm3d.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqa1vm3d.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqa1vm3d.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxqa1vm3d.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxqa1vm3d.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqa1vm3d.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqa1vm3d.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> (sum(digits(x)), x))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfqy1u2n0.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfqy1u2n0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfqy1u2n0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfqy1u2n0.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfqy1u2n0.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfqy1u2n0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpfqy1u2n0.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpfqy1u2n0.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfqy1u2n0.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqy1u2n0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpis87_5yz.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpis87_5yz.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpis87_5yz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpis87_5yz.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpis87_5yz.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpis87_5yz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpis87_5yz.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpis87_5yz.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpis87_5yz.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpis87_5yz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2tjnbtwl.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2tjnbtwl.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2tjnbtwl.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2tjnbtwl.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2tjnbtwl.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2tjnbtwl.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tjnbtwl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpztxs6lhs.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpztxs6lhs.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpztxs6lhs.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpztxs6lhs.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpztxs6lhs.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpztxs6lhs.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpztxs6lhs.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdtpq8k5_.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpdtpq8k5_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpdtpq8k5_.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdtpq8k5_.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpdtpq8k5_.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpdtpq8k5_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpdtpq8k5_.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt__xeswu.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt__xeswu.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt__xeswu.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt__xeswu.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpt__xeswu.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt__xeswu.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt__xeswu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9evmetve.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9evmetve.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9evmetve.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp9evmetve.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9evmetve.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9evmetve.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9evmetve.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv3mrul80.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpv3mrul80.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpv3mrul80.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv3mrul80.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpv3mrul80.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpv3mrul80.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpv3mrul80.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5smkmf30.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5smkmf30.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5smkmf30.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5smkmf30.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5smkmf30.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5smkmf30.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5smkmf30.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5smkmf30.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5smkmf30.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5smkmf30.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdu3ugqd0.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdu3ugqd0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu3ugqd0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdu3ugqd0.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdu3ugqd0.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu3ugqd0.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdu3ugqd0.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdu3ugqd0.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdu3ugqd0.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdu3ugqd0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5ouauqgu.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp5ouauqgu.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp5ouauqgu.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5ouauqgu.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp5ouauqgu.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp5ouauqgu.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp5ouauqgu.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sortperm(sum.(digits.(nums)), by=nums)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2baoieec.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: objects of type Vector{Int64} are not callable\\n  Use\
    \ square brackets [] for indexing an Array.\\n  Stacktrace:\\n    [1] lt(o::Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n      @ Base.Order ./ordering.jl:111\\\
    n    [2] lt\\n      @ ./ordering.jl:117 [inlined]\\n    [3] sort!\\n      @ ./sort.jl:502\
    \ [inlined]\\n    [4] sort!\\n      @ ./sort.jl:569 [inlined]\\n    [5] sort!(v::Vector{Int64},\
    \ alg::Base.Sort.QuickSortAlg, order::Base.Order.Perm{Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, Vector{Int64}})\\n      @ Base.Sort ./sort.jl:659\\\
    n    [6] sortperm(v::Vector{Int64}; alg::Base.Sort.QuickSortAlg, lt::Function,\
    \ by::Vector{Int64}, rev::Nothing, order::Base.Order.ForwardOrdering)\\n     \
    \ @ Base.Sort ./sort.jl:924\\n    [7] order_by_points(nums::Vector{Int64})\\n\
    \      @ Main /tmp/tmp2baoieec.jl:12\\n    [8] macro expansion\\n      @ /tmp/tmp2baoieec.jl:19\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp2baoieec.jl:18\\ntest\
    \ set: Error During Test at /tmp/tmp2baoieec.jl:20\\n  Test threw exception\\\
    n  Expression: candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\\
    n  MethodError: objects of type Vector{Int64} are not callable\\n  Use square\
    \ brackets [] for indexing an Array.\\n  Stacktrace:\\n    [1] lt(o::Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n      @ Base.Order ./ordering.jl:111\\\
    n    [2] lt\\n      @ ./ordering.jl:117 [inlined]\\n    [3] sort!\\n      @ ./sort.jl:502\
    \ [inlined]\\n    [4] sort!\\n      @ ./sort.jl:569 [inlined]\\n    [5] sort!(v::Vector{Int64},\
    \ alg::Base.Sort.QuickSortAlg, order::Base.Order.Perm{Base.Order.By{Vector{Int64},\
    \ Base.Order.ForwardOr"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2hfmuu43.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2hfmuu43.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2hfmuu43.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2hfmuu43.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2hfmuu43.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2hfmuu43.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2hfmuu43.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2hfmuu43.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2hfmuu43.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hfmuu43.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7tbwe7gg.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7tbwe7gg.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7tbwe7gg.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7tbwe7gg.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7tbwe7gg.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7tbwe7gg.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7tbwe7gg.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2n1qeion.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp2n1qeion.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp2n1qeion.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2n1qeion.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp2n1qeion.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp2n1qeion.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp2n1qeion.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcrcc81q3.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcrcc81q3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcrcc81q3.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpcrcc81q3.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcrcc81q3.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcrcc81q3.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrcc81q3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptmqldyy9.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmptmqldyy9.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmptmqldyy9.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptmqldyy9.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmptmqldyy9.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmptmqldyy9.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmptmqldyy9.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0rc8o1u6.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0rc8o1u6.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0rc8o1u6.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0rc8o1u6.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp0rc8o1u6.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0rc8o1u6.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0rc8o1u6.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpthvdw4r4.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpthvdw4r4.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpthvdw4r4.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpthvdw4r4.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpthvdw4r4.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpthvdw4r4.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpthvdw4r4.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpom_kzq2x.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpom_kzq2x.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpom_kzq2x.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpom_kzq2x.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpom_kzq2x.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpom_kzq2x.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpom_kzq2x.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmxu6etka.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmxu6etka.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmxu6etka.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmxu6etka.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmxu6etka.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmxu6etka.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmxu6etka.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph059xr3l.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmph059xr3l.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmph059xr3l.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph059xr3l.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmph059xr3l.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmph059xr3l.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmph059xr3l.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1c_qoivi.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1c_qoivi.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1c_qoivi.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp1c_qoivi.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1c_qoivi.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1c_qoivi.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp1c_qoivi.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp1c_qoivi.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1c_qoivi.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1c_qoivi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    return sort(nums,\
    \ by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9960lic5.jl:22\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9960lic5.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9960lic5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9960lic5.jl:25\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9960lic5.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9960lic5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9960lic5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpju3h4p5c.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpju3h4p5c.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju3h4p5c.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpju3h4p5c.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpju3h4p5c.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju3h4p5c.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpju3h4p5c.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpju3h4p5c.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpju3h4p5c.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpju3h4p5c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqqgj3t_o.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpqqgj3t_o.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpqqgj3t_o.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqqgj3t_o.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpqqgj3t_o.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpqqgj3t_o.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpqqgj3t_o.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp80xrs4b5.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp80xrs4b5.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80xrs4b5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp80xrs4b5.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp80xrs4b5.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80xrs4b5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp80xrs4b5.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp80xrs4b5.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp80xrs4b5.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp80xrs4b5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnpuyt4gz.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnpuyt4gz.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnpuyt4gz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnpuyt4gz.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnpuyt4gz.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnpuyt4gz.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnpuyt4gz.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnpuyt4gz.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnpuyt4gz.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnpuyt4gz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6ieo4p4f.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp6ieo4p4f.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp6ieo4p4f.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6ieo4p4f.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp6ieo4p4f.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp6ieo4p4f.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp6ieo4p4f.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrs3ych1.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwrs3ych1.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwrs3ych1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpwrs3ych1.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwrs3ych1.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwrs3ych1.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrs3ych1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnyflwd_d.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnyflwd_d.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnyflwd_d.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnyflwd_d.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnyflwd_d.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnyflwd_d.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpnyflwd_d.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnyflwd_d.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnyflwd_d.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnyflwd_d.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if nums == []\n        return []\n    end\n    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6bevzxjb.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\\
    n  Closest candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt,\
    \ by, rev, order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp6bevzxjb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6bevzxjb.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6bevzxjb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6bevzxjb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\n  Closest\
    \ candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt, by, rev,\
    \ order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp6bevzxjb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6bevzxjb.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6bevzxjb.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmp6bevzxjb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\\n  MethodError: no method matching sortperm(::Vector{Int64}, ::UnitRange{Int64})\\\
    n  Closest candidates are:\\n    sortperm(::AbstractVector{T} where T; alg, lt,\
    \ by, rev, order) at sort.jl:901\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\\
    n     @ Main /tmp/tmp6bevzxjb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6bevzxjb.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa4ctk3ny.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa4ctk3ny.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa4ctk3ny.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpa4ctk3ny.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa4ctk3ny.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa4ctk3ny.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpa4ctk3ny.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa4ctk3ny.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa4ctk3ny.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa4ctk3ny.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmiyipwzi.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmiyipwzi.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiyipwzi.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmiyipwzi.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmiyipwzi.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiyipwzi.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmiyipwzi.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmiyipwzi.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmiyipwzi.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmiyipwzi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by sum of digits\n    # if sum of digits is the same, sort by index\n\
    \    # sort by index is the default behavior of sort\n    return sort(nums, by=x->sum(digits(x)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz052ianu.jl:22\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz052ianu.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz052ianu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpz052ianu.jl:25\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz052ianu.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz052ianu.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz052ianu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp610c_2et.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp610c_2et.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp610c_2et.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp610c_2et.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp610c_2et.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp610c_2et.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp610c_2et.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp610c_2et.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp610c_2et.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp610c_2et.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprfpm_xwa.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprfpm_xwa.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfpm_xwa.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprfpm_xwa.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprfpm_xwa.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfpm_xwa.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprfpm_xwa.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprfpm_xwa.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprfpm_xwa.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprfpm_xwa.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxoyxxdcm.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxoyxxdcm.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxoyxxdcm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxoyxxdcm.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxoyxxdcm.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxoyxxdcm.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpxoyxxdcm.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxoyxxdcm.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxoyxxdcm.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxoyxxdcm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphz_u5ueg.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphz_u5ueg.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz_u5ueg.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphz_u5ueg.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphz_u5ueg.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz_u5ueg.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphz_u5ueg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmply1i0pb4.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmply1i0pb4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmply1i0pb4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmply1i0pb4.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmply1i0pb4.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmply1i0pb4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmply1i0pb4.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmply1i0pb4.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmply1i0pb4.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmply1i0pb4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7sugn5k8.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7sugn5k8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7sugn5k8.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7sugn5k8.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7sugn5k8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7sugn5k8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7sugn5k8.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(length(nums))\n\
    \    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n\
    \    sortperm(sums)\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqynh4qm3.jl:26\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [5, 4, 3, 1, 2] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqynh4qm3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqynh4qm3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqynh4qm3.jl:27\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [14, 5, 12, 9, 8, 2, 6, 7,\
    \ 1, 4, 10, 15, 13, 3, 11] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqynh4qm3.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqynh4qm3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqynh4qm3.jl:29\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [6, 3,\
    \ 8, 2, 1, 7, 4, 5] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqynh4qm3.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqynh4qm3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqynh4qm3.jl:31\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [4, 5, 1, 7, 6, 2, 3] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqynh4qm3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqynh4qm3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqynh4qm3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph53fx3mo.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph53fx3mo.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph53fx3mo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmph53fx3mo.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph53fx3mo.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph53fx3mo.jl:18\ntest set: Test\
    \ Failed at /tmp/tmph53fx3mo.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmph53fx3mo.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph53fx3mo.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph53fx3mo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp986b592l.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp986b592l.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp986b592l.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp986b592l.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp986b592l.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp986b592l.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp986b592l.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0at_qor.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq0at_qor.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0at_qor.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpq0at_qor.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpq0at_qor.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq0at_qor.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0at_qor.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvt13i5si.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvt13i5si.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt13i5si.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvt13i5si.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvt13i5si.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt13i5si.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpvt13i5si.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvt13i5si.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvt13i5si.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvt13i5si.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpim7ph_gv.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpim7ph_gv.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpim7ph_gv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpim7ph_gv.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpim7ph_gv.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpim7ph_gv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpim7ph_gv.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpim7ph_gv.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpim7ph_gv.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpim7ph_gv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbdn9bw_n.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbdn9bw_n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbdn9bw_n.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdn9bw_n.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbdn9bw_n.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbdn9bw_n.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbdn9bw_n.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1vua3ap8.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp1vua3ap8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp1vua3ap8.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1vua3ap8.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp1vua3ap8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp1vua3ap8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp1vua3ap8.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaxcmolne.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpaxcmolne.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpaxcmolne.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaxcmolne.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpaxcmolne.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpaxcmolne.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpaxcmolne.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8ypv9mw8.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp8ypv9mw8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp8ypv9mw8.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8ypv9mw8.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp8ypv9mw8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp8ypv9mw8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp8ypv9mw8.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7d5yk18.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz7d5yk18.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7d5yk18.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpz7d5yk18.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz7d5yk18.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz7d5yk18.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7d5yk18.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_r71drdz.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp_r71drdz.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp_r71drdz.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_r71drdz.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp_r71drdz.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp_r71drdz.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp_r71drdz.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz5crdm0h.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5crdm0h.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5crdm0h.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz5crdm0h.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz5crdm0h.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5crdm0h.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz5crdm0h.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz5crdm0h.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz5crdm0h.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5crdm0h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbevel9j7.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbevel9j7.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbevel9j7.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbevel9j7.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpbevel9j7.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbevel9j7.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbevel9j7.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpycf4o1vs.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpycf4o1vs.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpycf4o1vs.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpycf4o1vs.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpycf4o1vs.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpycf4o1vs.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpycf4o1vs.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    sums = [sum(digits(x)) for x in nums]\n    return sortperm(sums)[nums]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6mv00bev.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  BoundsError: attempt to access 5-element Vector{Int64} at index [[1,\
    \ 11, -1, -11, -12]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmp6mv00bev.jl:13\\\
    n   [6] macro expansion\\n     @ /tmp/tmp6mv00bev.jl:20 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6mv00bev.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6mv00bev.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  BoundsError:\
    \ attempt to access 15-element Vector{Int64} at index [[1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmp6mv00bev.jl:13\\\
    n   [6] macro expansion\\n     @ /tmp/tmp6mv00bev.jl:21 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp6mv00bev.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6mv00bev.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -9"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp638w8y9e.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp638w8y9e.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp638w8y9e.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp638w8y9e.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp638w8y9e.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp638w8y9e.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp638w8y9e.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp638w8y9e.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp638w8y9e.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp638w8y9e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpux323kln.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpux323kln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpux323kln.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpux323kln.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpux323kln.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpux323kln.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpux323kln.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj4lzxfy4.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj4lzxfy4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4lzxfy4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpj4lzxfy4.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj4lzxfy4.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj4lzxfy4.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj4lzxfy4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbeiat3ln.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbeiat3ln.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbeiat3ln.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbeiat3ln.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbeiat3ln.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbeiat3ln.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbeiat3ln.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbeiat3ln.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbeiat3ln.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbeiat3ln.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ed5npjh.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ed5npjh.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ed5npjh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8ed5npjh.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ed5npjh.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ed5npjh.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp8ed5npjh.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8ed5npjh.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ed5npjh.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ed5npjh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmcgw3md6.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmcgw3md6.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmcgw3md6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmcgw3md6.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmcgw3md6.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmcgw3md6.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpmcgw3md6.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmcgw3md6.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmcgw3md6.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmcgw3md6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmqa8qrqe.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmqa8qrqe.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmqa8qrqe.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmqa8qrqe.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpmqa8qrqe.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpmqa8qrqe.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmqa8qrqe.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # sort by sum of digits\n    # if sum of digits is equal, sort by index\n\
    \    # if index is equal, sort by value\n    # sort(nums, by=x->(sum(digits(x)),\
    \ findall(nums .== x)[1], x))\n    sort(nums, by=x->(sum(digits(x)), findall(nums\
    \ .== x)[1], x))\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3y85ixqq.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3y85ixqq.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3y85ixqq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp3y85ixqq.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3y85ixqq.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3y85ixqq.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3y85ixqq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp47u18us_.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp47u18us_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp47u18us_.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp47u18us_.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp47u18us_.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp47u18us_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp47u18us_.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6gn7hae.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6gn7hae.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6gn7hae.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpc6gn7hae.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6gn7hae.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6gn7hae.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpc6gn7hae.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpc6gn7hae.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6gn7hae.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6gn7hae.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx9xydy29.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpx9xydy29.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpx9xydy29.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx9xydy29.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpx9xydy29.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpx9xydy29.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpx9xydy29.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0xsk9wyv.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0xsk9wyv.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0xsk9wyv.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0xsk9wyv.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0xsk9wyv.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0xsk9wyv.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0xsk9wyv.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return sortperm(sums)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcqni0c3h.jl:23\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [5, 4, 3, 1, 2] ==\
    \ [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcqni0c3h.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqni0c3h.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcqni0c3h.jl:24\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [14, 5, 12, 9, 8, 2, 6, 7,\
    \ 1, 4, 10, 15, 13, 3, 11] == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcqni0c3h.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqni0c3h.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcqni0c3h.jl:26\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [6, 3,\
    \ 8, 2, 1, 7, 4, 5] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcqni0c3h.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqni0c3h.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpcqni0c3h.jl:28\n  Expression: candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n   Evaluated: [4, 5, 1, 7, 6, 2, 3] ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcqni0c3h.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcqni0c3h.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     4      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqni0c3h.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9xvq7oov.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp9xvq7oov.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp9xvq7oov.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9xvq7oov.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp9xvq7oov.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp9xvq7oov.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp9xvq7oov.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz2w7serb.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2w7serb.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2w7serb.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz2w7serb.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz2w7serb.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2w7serb.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz2w7serb.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz2w7serb.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz2w7serb.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2w7serb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkztcx_p5.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkztcx_p5.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkztcx_p5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkztcx_p5.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkztcx_p5.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkztcx_p5.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpkztcx_p5.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkztcx_p5.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkztcx_p5.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkztcx_p5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    nums_with_points = [(n, sum(digits(n))) for n in nums]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by=x -> x[2])\n    return [n for (n, _) in sorted_nums_with_points]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo9xqcka_.jl:21\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo9xqcka_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9xqcka_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo9xqcka_.jl:24\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpo9xqcka_.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9xqcka_.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9xqcka_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if isempty(nums)\n        return nums\n    end\n    # sort by sum of digits\n\
    \    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    # sort by index\n   \
    \ return sort(sorted_nums, by=x->findfirst(nums, x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp47rjoplm.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\\\
    n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\\
    n  Stacktrace:\\n    [1] (::var\"#2#4\"{Vector{Int64}})(x::Int64)\\n      @ Main\
    \ /tmp/tmp47rjoplm.jl:18\\n    [2] lt(o::Base.Order.By{var\"#2#4\"{Vector{Int64}},\
    \ Base.Order.ForwardOrdering}, a::Int64, b::Int64)\\n      @ Base.Order ./ordering.jl:111\\\
    n    [3] sort!\\n      @ ./sort.jl:502 [inlined]\\n    [4] sort!\\n      @ ./sort.jl:569\
    \ [inlined]\\n    [5] sort!\\n      @ ./sort.jl:659 [inlined]\\n    [6] #sort!#8\\\
    n      @ ./sort.jl:719 [inlined]\\n    [7] sort(v::Vector{Int64}; kws::Base.Iterators.Pairs{Symbol,\
    \ var\"#2#4\"{Vector{Int64}}, Tuple{Symbol}, NamedTuple{(:by,), Tuple{var\"#2#4\"\
    {Vector{Int64}}}}})\\n      @ Base.Sort ./sort.jl:766\\n    [8] order_by_points(nums::Vector{Int64})\\\
    n      @ Main /tmp/tmp47rjoplm.jl:18\\n    [9] macro expansion\\n      @ /tmp/tmp47rjoplm.jl:25\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp47rjoplm.jl:24\\ntest\
    \ set: Error During Test at /tmp/tmp47rjoplm.jl:26\\n  Test threw exception\\\
    n  Expression: candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3,\
    \ 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\\
    n  MethodError: no method matching findfirst(::Vector{Int64}, ::Int64)\\n  Closest\
    \ candidates are:\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\\
    n  Stacktrace:\\n    [1] (::var\"#2#4\"{Vector{Int64}})(x::Int64)\\n      @ Main\
    \ /tmp/tmp47rjoplm.jl:18\\n    [2] lt(o::Base.Order.By{var\"#2#4\"{Vector{Int64}},\
    \ Base.Order.ForwardOrdering}, a::Int6"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    nums_with_sum =\
    \ [sum(digits(nums[i])) for i in 1:length(nums)]\n    nums_with_sum_and_index\
    \ = [(nums_with_sum[i], i) for i in 1:length(nums)]\n    nums_with_sum_and_index_sorted\
    \ = sort(nums_with_sum_and_index, by = x -> x[1])\n    nums_sorted = [nums[nums_with_sum_and_index_sorted[i][2]]\
    \ for i in 1:length(nums)]\n    return nums_sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk55j5y3d.jl:26\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk55j5y3d.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk55j5y3d.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpk55j5y3d.jl:29\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpk55j5y3d.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk55j5y3d.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk55j5y3d.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\n    return nums\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy66khaey.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy66khaey.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy66khaey.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy66khaey.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy66khaey.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy66khaey.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy66khaey.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy66khaey.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy66khaey.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy66khaey.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy66khaey.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy66khaey.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpy66khaey.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy66khaey.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnick9wpz.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpnick9wpz.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpnick9wpz.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnick9wpz.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpnick9wpz.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpnick9wpz.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpnick9wpz.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprcqip40z.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprcqip40z.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprcqip40z.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprcqip40z.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprcqip40z.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprcqip40z.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprcqip40z.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprcqip40z.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprcqip40z.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcqip40z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48wmzu94.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48wmzu94.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48wmzu94.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp48wmzu94.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48wmzu94.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48wmzu94.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp48wmzu94.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp48wmzu94.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48wmzu94.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48wmzu94.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tlos10v.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5tlos10v.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tlos10v.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5tlos10v.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5tlos10v.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tlos10v.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tlos10v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4p5bt2ve.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4p5bt2ve.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4p5bt2ve.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4p5bt2ve.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4p5bt2ve.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4p5bt2ve.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4p5bt2ve.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz8871ast.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz8871ast.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8871ast.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz8871ast.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz8871ast.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8871ast.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpz8871ast.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz8871ast.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz8871ast.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz8871ast.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(abs(i)))\
    \ for i in nums]\n    return sortperm(sums)[nums]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzp1gfhcq.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  BoundsError: attempt to access 5-element Vector{Int64} at index [[1,\
    \ 11, -1, -11, -12]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmpzp1gfhcq.jl:16\\\
    n   [6] macro expansion\\n     @ /tmp/tmpzp1gfhcq.jl:23 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpzp1gfhcq.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpzp1gfhcq.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  BoundsError:\
    \ attempt to access 15-element Vector{Int64} at index [[1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]]\\n  Stacktrace:\\n   [1] throw_boundserror(A::Vector{Int64},\
    \ I::Tuple{Vector{Int64}})\\n     @ Base ./abstractarray.jl:651\\n   [2] checkbounds\\\
    n     @ ./abstractarray.jl:616 [inlined]\\n   [3] _getindex\\n     @ ./multidimensional.jl:837\
    \ [inlined]\\n   [4] getindex\\n     @ ./abstractarray.jl:1170 [inlined]\\n  \
    \ [5] order_by_points(nums::Vector{Int64})\\n     @ Main /tmp/tmpzp1gfhcq.jl:16\\\
    n   [6] macro expansion\\n     @ /tmp/tmpzp1gfhcq.jl:24 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpzp1gfhcq.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpzp1gfhcq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -9"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = [(nums[i], sum(digits(nums[i])), i) for i in 1:length(nums)]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by = x -> (x[2], x[3]))\n    return [x[1] for x in\
    \ sorted_nums_with_points]\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1e2hkso.jl:24\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa1e2hkso.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa1e2hkso.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa1e2hkso.jl:27\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa1e2hkso.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa1e2hkso.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1e2hkso.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4tba3dkx.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4tba3dkx.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4tba3dkx.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp4tba3dkx.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4tba3dkx.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4tba3dkx.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tba3dkx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjh8kh9pq.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpjh8kh9pq.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpjh8kh9pq.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjh8kh9pq.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpjh8kh9pq.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpjh8kh9pq.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpjh8kh9pq.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5d7xxrtv.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp5d7xxrtv.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp5d7xxrtv.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5d7xxrtv.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp5d7xxrtv.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp5d7xxrtv.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp5d7xxrtv.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm5ogxbcf.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpm5ogxbcf.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpm5ogxbcf.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm5ogxbcf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpm5ogxbcf.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpm5ogxbcf.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpm5ogxbcf.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbu6gk9u8.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbu6gk9u8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbu6gk9u8.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbu6gk9u8.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbu6gk9u8.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmpbu6gk9u8.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpbu6gk9u8.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptcqig8_r.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptcqig8_r.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptcqig8_r.jl:18\ntest set: Test\
    \ Failed at /tmp/tmptcqig8_r.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptcqig8_r.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptcqig8_r.jl:18\ntest set: Test\
    \ Failed at /tmp/tmptcqig8_r.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptcqig8_r.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptcqig8_r.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcqig8_r.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = [(nums[i], sum(digits(nums[i])), i) for i in 1:length(nums)]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by = x -> (x[2], x[3]))\n    return [x[1] for x in\
    \ sorted_nums_with_points]\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcw9v48kl.jl:24\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcw9v48kl.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9v48kl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpcw9v48kl.jl:27\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcw9v48kl.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcw9v48kl.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcw9v48kl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppd0o4s9g.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppd0o4s9g.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd0o4s9g.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppd0o4s9g.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppd0o4s9g.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd0o4s9g.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppd0o4s9g.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppd0o4s9g.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppd0o4s9g.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppd0o4s9g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps_0dn29v.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmps_0dn29v.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmps_0dn29v.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps_0dn29v.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmps_0dn29v.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmps_0dn29v.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmps_0dn29v.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe8kni2t2.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe8kni2t2.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe8kni2t2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpe8kni2t2.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpe8kni2t2.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe8kni2t2.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe8kni2t2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0k9mv4tl.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0k9mv4tl.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0k9mv4tl.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0k9mv4tl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0k9mv4tl.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp0k9mv4tl.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp0k9mv4tl.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5yx2le7.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5yx2le7.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5yx2le7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpd5yx2le7.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5yx2le7.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5yx2le7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpd5yx2le7.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpd5yx2le7.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5yx2le7.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5yx2le7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_qss9cmn.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp_qss9cmn.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp_qss9cmn.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_qss9cmn.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp_qss9cmn.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp_qss9cmn.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp_qss9cmn.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> sum(digits(x)))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42wtw1bv.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp42wtw1bv.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42wtw1bv.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp42wtw1bv.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp42wtw1bv.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42wtw1bv.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42wtw1bv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdisg19fj.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdisg19fj.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdisg19fj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdisg19fj.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdisg19fj.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdisg19fj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpdisg19fj.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdisg19fj.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdisg19fj.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdisg19fj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptatwf4fq.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptatwf4fq.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptatwf4fq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmptatwf4fq.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptatwf4fq.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptatwf4fq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmptatwf4fq.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptatwf4fq.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptatwf4fq.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptatwf4fq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by = x -> (sum(digits(x)), x))\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2r6ozgy.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2r6ozgy.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2r6ozgy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpa2r6ozgy.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2r6ozgy.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2r6ozgy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpa2r6ozgy.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa2r6ozgy.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2r6ozgy.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2r6ozgy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement your solution here\n    return nums\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk2rs5hwv.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk2rs5hwv.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk2rs5hwv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk2rs5hwv.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk2rs5hwv.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk2rs5hwv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk2rs5hwv.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk2rs5hwv.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk2rs5hwv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk2rs5hwv.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk2rs5hwv.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk2rs5hwv.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpk2rs5hwv.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2rs5hwv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(Int64,\
    \ length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmugc5xs.jl:26\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbmugc5xs.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmugc5xs.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbmugc5xs.jl:29\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbmugc5xs.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbmugc5xs.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmugc5xs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\n \nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps24ys56a.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmps24ys56a.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmps24ys56a.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps24ys56a.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmps24ys56a.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmps24ys56a.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmps24ys56a.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), findall(nums .== x)[1]))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhf6mog2.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjhf6mog2.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhf6mog2.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpjhf6mog2.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjhf6mog2.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjhf6mog2.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhf6mog2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # TODO: implement this function\n    return nums\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
    \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnd2702n.jl:20\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [1, 11, -1, -11,\
    \ -12] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphnd2702n.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnd2702n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmphnd2702n.jl:21\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphnd2702n.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnd2702n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmphnd2702n.jl:23\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [1, -11,\
    \ -32, 43, 54, -98, 2, -3] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphnd2702n.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnd2702n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmphnd2702n.jl:24\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphnd2702n.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnd2702n.jl:19\ntest set: Test\
    \ Failed at /tmp/tmphnd2702n.jl:25\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnd2702n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = order_by_points;\n\
    \t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ly2msl_.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11]\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Vector{Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray)\
    \ where T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7ly2msl_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7ly2msl_.jl:19\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7ly2msl_.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp7ly2msl_.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] order_by_points(nums::Vector{Int64})\\n    \
    \ @ Main /tmp/tmp7ly2msl_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp7ly2msl_.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return []\n    end\n    return sort(nums,\
    \ by=x->(x, sum(digits(x))))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t\
    @test(candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5yeoxnva.jl:22\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5yeoxnva.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yeoxnva.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5yeoxnva.jl:23\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 37, 46, 53, 56,\
    \ 145, 423, 423, 423, 463, 1234, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5yeoxnva.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yeoxnva.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5yeoxnva.jl:25\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -11, -3, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5yeoxnva.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yeoxnva.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5yeoxnva.jl:26\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n   Evaluated: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5yeoxnva.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yeoxnva.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5yeoxnva.jl:27\n  Ex"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5yeoxnva.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    return sort(nums, by=x->(sum(digits(x)), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3x5yjnq.jl:19\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3x5yjnq.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3x5yjnq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmph3x5yjnq.jl:20\n  Expression: candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n   Evaluated: [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 37, 46, 145, 1234, 56, 463, 3457] == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3x5yjnq.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3x5yjnq.jl:18\ntest set: Test\
    \ Failed at /tmp/tmph3x5yjnq.jl:22\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmph3x5yjnq.jl:22 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3x5yjnq.jl:18\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3x5yjnq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function which sorts the given list of integers\n\
    \    in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n    >>> order_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) ==\
    \ []\n    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\
    \ \n    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = []\n    for i in 1:length(nums)\n        push!(nums_with_points, (nums[i],\
    \ sum(digits(nums[i]))))\n    end\n    sort!(nums_with_points, by = x -> x[2])\n\
    \    return [x[1] for x in nums_with_points]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = order_by_points;\n\t@test(candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10,\
    \ 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6, 6, -76, -21, 23, 4])\
    \ == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58lq_yue.jl:27\n  Expression: candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n   Evaluated: [-12, -11, -1, 1,\
    \ 11] == [-1, -11, 1, -12, 11]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58lq_yue.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58lq_yue.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp58lq_yue.jl:30\n  Expression: candidate([1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n   Evaluated: [-98, -32,\
    \ -3, -11, 1, 2, 43, 54] == [-3, -32, -98, -11, 1, 2, 43, 54]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp58lq_yue.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58lq_yue.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58lq_yue.jl:24\n"
  exit_code: 1
  status: SyntaxError
