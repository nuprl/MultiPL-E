name: HumanEval_160_do_algebra
language: julia
results:
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8frl8yhy.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8frl8yhy.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8frl8yhy.jl:33\ntest set: Test Failed at /tmp/tmp8frl8yhy.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp8frl8yhy.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8frl8yhy.jl:33\ntest set: Test Failed at /tmp/tmp8frl8yhy.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp8frl8yhy.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8frl8yhy.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8frl8yhy.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdrob0uyq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdrob0uyq.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdrob0uyq.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrob0uyq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp766ekx19.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp766ekx19.jl:27\n\
    \   [2] top-level scope at /tmp/tmp766ekx19.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp766ekx19.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp766ekx19.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp766ekx19.jl:27\n   [2] top-level scope at /tmp/tmp766ekx19.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp766ekx19.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp766ekx19.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp766ekx19.jl:27\n   [2] top-level scope at /tmp/tmp766ekx19.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp766ekx19.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp766ekx19.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphi6c5evn.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphi6c5evn.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphi6c5evn.jl:33\\ntest set: Test Failed at /tmp/tmphi6c5evn.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmphi6c5evn.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphi6c5evn.jl:33\\ntest set: Test Failed at /tmp/tmphi6c5evn.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmphi6c5evn.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphi6c5evn.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsjjvqb82.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjjvqb82.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjjvqb82.jl:33\ntest set: Test Failed at /tmp/tmpsjjvqb82.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpsjjvqb82.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjjvqb82.jl:33\ntest set: Test Failed at /tmp/tmpsjjvqb82.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpsjjvqb82.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsjjvqb82.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjjvqb82.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcs35lrv1.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcs35lrv1.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcs35lrv1.jl:46\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmjle0m4f.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmjle0m4f.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjle0m4f.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpmjle0m4f.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer at ./rational.jl:94 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpmjle0m4f.jl:40\n\
    \   [4] top-level scope at /tmp/tmpmjle0m4f.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmjle0m4f.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjle0m4f.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbu5gybb0.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpbu5gybb0.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbu5gybb0.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptv8qr7rw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptv8qr7rw.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptv8qr7rw.jl:46\ntest set: Error During Test at\
    \ /tmp/tmptv8qr7rw.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer at ./rational.jl:94 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmptv8qr7rw.jl:40\n\
    \   [4] top-level scope at /tmp/tmptv8qr7rw.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmptv8qr7rw.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv8qr7rw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppnbqk85d.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppnbqk85d.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppnbqk85d.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppnbqk85d.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9rm2cr3.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi9rm2cr3.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9rm2cr3.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9rm2cr3.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    # You can add some helper functions\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi2e_66rk.jl:35\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi2e_66rk.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi2e_66rk.jl:34\\ntest set: Test Failed at /tmp/tmpi2e_66rk.jl:36\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi2e_66rk.jl:36\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi2e_66rk.jl:34\\ntest set: Test Failed at /tmp/tmpi2e_66rk.jl:37\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi2e_66rk.jl:37\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi2e_66rk.jl:34\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwu5jc5b.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmphwu5jc5b.jl:27\n\
    \   [2] top-level scope at /tmp/tmphwu5jc5b.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphwu5jc5b.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmphwu5jc5b.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmphwu5jc5b.jl:27\n   [2] top-level scope at /tmp/tmphwu5jc5b.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphwu5jc5b.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmphwu5jc5b.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmphwu5jc5b.jl:27\n   [2] top-level scope at /tmp/tmphwu5jc5b.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphwu5jc5b.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwu5jc5b.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78jy1tv4.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp78jy1tv4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp78jy1tv4.jl:33\ntest set: Test Failed at /tmp/tmp78jy1tv4.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp78jy1tv4.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp78jy1tv4.jl:33\ntest set: Test Failed at /tmp/tmp78jy1tv4.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp78jy1tv4.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp78jy1tv4.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78jy1tv4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = result^operand[i]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps70iv5nn.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps70iv5nn.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps70iv5nn.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps70iv5nn.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxgvicv6k.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxgvicv6k.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxgvicv6k.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgvicv6k.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi7jcozo1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpi7jcozo1.jl:27\n\
    \   [2] top-level scope at /tmp/tmpi7jcozo1.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi7jcozo1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpi7jcozo1.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpi7jcozo1.jl:27\n   [2] top-level scope at /tmp/tmpi7jcozo1.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi7jcozo1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpi7jcozo1.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpi7jcozo1.jl:27\n   [2] top-level scope at /tmp/tmpi7jcozo1.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi7jcozo1.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7jcozo1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpazv_t0t9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpazv_t0t9.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazv_t0t9.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazv_t0t9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpirp3dfyc.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) ==\
    \ 37\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpirp3dfyc.jl:27\\n   [2] top-level scope at /tmp/tmpirp3dfyc.jl:33\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpirp3dfyc.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpirp3dfyc.jl:34\\n  Test threw exception\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\\n  Closest candidates are:\\n  \
    \  convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpirp3dfyc.jl:27\\n   [2] top-level scope at /tmp/tmpirp3dfyc.jl:34\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpirp3dfyc.jl:32\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpirp3dfyc.jl:35\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpirp3dfyc.jl:27\\n   [2] top-level scope at /tmp/tmpirp3dfyc.jl:35\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpirp3dfyc.jl:32\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkd_mj6co.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpkd_mj6co.jl:27\n\
    \   [2] top-level scope at /tmp/tmpkd_mj6co.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkd_mj6co.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpkd_mj6co.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpkd_mj6co.jl:27\n   [2] top-level scope at /tmp/tmpkd_mj6co.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkd_mj6co.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpkd_mj6co.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpkd_mj6co.jl:27\n   [2] top-level scope at /tmp/tmpkd_mj6co.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkd_mj6co.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd_mj6co.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_vmm2kzx.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_vmm2kzx.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_vmm2kzx.jl:33\ntest set: Test Failed at /tmp/tmp_vmm2kzx.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp_vmm2kzx.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_vmm2kzx.jl:33\ntest set: Test Failed at /tmp/tmp_vmm2kzx.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp_vmm2kzx.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_vmm2kzx.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_vmm2kzx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpon5lilb2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpon5lilb2.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpon5lilb2.jl:33\ntest set: Test Failed at /tmp/tmpon5lilb2.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpon5lilb2.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpon5lilb2.jl:33\ntest set: Test Failed at /tmp/tmpon5lilb2.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpon5lilb2.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpon5lilb2.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpon5lilb2.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyslvtwkn.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyslvtwkn.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyslvtwkn.jl:33\ntest set: Test Failed at /tmp/tmpyslvtwkn.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpyslvtwkn.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyslvtwkn.jl:33\ntest set: Test Failed at /tmp/tmpyslvtwkn.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpyslvtwkn.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyslvtwkn.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyslvtwkn.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result //= operand[i]\n        elseif operator[i-1] == \"**\"\n \
    \           result ^= operand[i]\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpokikctsx.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpokikctsx.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpokikctsx.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmpokikctsx.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  InexactError: Int64(28//3)\\n  Stacktrace:\\\
    n   [1] Integer at ./rational.jl:94 [inlined]\\n   [2] convert at ./number.jl:7\
    \ [inlined]\\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpokikctsx.jl:40\\\
    n   [4] top-level scope at /tmp/tmpokikctsx.jl:49\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpokikctsx.jl:46\\n  \\nTest Summary: | Pass\
    \  Fail  Error  Total\\ntest set      |    1     1      1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5k5ylf8.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5k5ylf8.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5k5ylf8.jl:33\ntest set: Test Failed at /tmp/tmpa5k5ylf8.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpa5k5ylf8.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5k5ylf8.jl:33\ntest set: Test Failed at /tmp/tmpa5k5ylf8.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpa5k5ylf8.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa5k5ylf8.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5k5ylf8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9mzs_zbn.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9mzs_zbn.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9mzs_zbn.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9mzs_zbn.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpil4g5vuu.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpil4g5vuu.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpil4g5vuu.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpil4g5vuu.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05ig_hlw.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp05ig_hlw.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05ig_hlw.jl:33\ntest set: Test Failed at /tmp/tmp05ig_hlw.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp05ig_hlw.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05ig_hlw.jl:33\ntest set: Test Failed at /tmp/tmp05ig_hlw.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp05ig_hlw.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05ig_hlw.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05ig_hlw.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptgajrp8p.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptgajrp8p.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgajrp8p.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgajrp8p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvyltspvm.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvyltspvm.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvyltspvm.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp8trk61d.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp8trk61d.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp8trk61d.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8trk61d.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7j87k1v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpk7j87k1v.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7j87k1v.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7j87k1v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwmuhq8r.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnwmuhq8r.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwmuhq8r.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwmuhq8r.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2fvlqm5_.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2fvlqm5_.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2fvlqm5_.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fvlqm5_.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppjknz06q.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppjknz06q.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppjknz06q.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjknz06q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpocccjefy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpocccjefy.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpocccjefy.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpocccjefy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgsub2d1o.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgsub2d1o.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgsub2d1o.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsub2d1o.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkdjcymw2.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkdjcymw2.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdjcymw2.jl:33\ntest set: Test Failed at /tmp/tmpkdjcymw2.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpkdjcymw2.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdjcymw2.jl:33\ntest set: Test Failed at /tmp/tmpkdjcymw2.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpkdjcymw2.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkdjcymw2.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdjcymw2.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3p32flr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz3p32flr.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz3p32flr.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3p32flr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    if length(operator) != length(operand) - 1\n        throw(ArgumentError(\"\
    The length of operator list is not equal to the length of operand list minus one.\"\
    ))\n    end\n    if length(operator) == 0\n        throw(ArgumentError(\"Operator\
    \ list has at least one operator.\"))\n    end\n    if length(operand) < 2\n \
    \       throw(ArgumentError(\"Operand list has at least two operands.\"))\n  \
    \  end\n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        else\n            throw(ArgumentError(\"\
    The operator is not valid.\"))\n        end\n    end\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpne02euyk.jl:59\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpne02euyk.jl:59\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpne02euyk.jl:57\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpne02euyk.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetl8usoh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpetl8usoh.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpetl8usoh.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetl8usoh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9viz_43v.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp9viz_43v.jl:27\n\
    \   [2] top-level scope at /tmp/tmp9viz_43v.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9viz_43v.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9viz_43v.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9viz_43v.jl:27\n   [2] top-level scope at /tmp/tmp9viz_43v.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9viz_43v.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9viz_43v.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9viz_43v.jl:27\n   [2] top-level scope at /tmp/tmp9viz_43v.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9viz_43v.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9viz_43v.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3rrohl8t.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3rrohl8t.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3rrohl8t.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp3rrohl8t.jl:44\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpug7rhn_g.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpug7rhn_g.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpug7rhn_g.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpug7rhn_g.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptev2mr96.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptev2mr96.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptev2mr96.jl:33\ntest set: Test Failed at /tmp/tmptev2mr96.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmptev2mr96.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptev2mr96.jl:33\ntest set: Test Failed at /tmp/tmptev2mr96.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmptev2mr96.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptev2mr96.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptev2mr96.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjqyzzp0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzjqyzzp0.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjqyzzp0.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjqyzzp0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    \"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk89z18m4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk89z18m4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3z56xkdv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3z56xkdv.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3z56xkdv.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3z56xkdv.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7gmx_6e.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz7gmx_6e.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz7gmx_6e.jl:33\ntest set: Test Failed at /tmp/tmpz7gmx_6e.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpz7gmx_6e.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz7gmx_6e.jl:33\ntest set: Test Failed at /tmp/tmpz7gmx_6e.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpz7gmx_6e.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz7gmx_6e.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7gmx_6e.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl6ygfda8.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl6ygfda8.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl6ygfda8.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6ygfda8.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9r31nez1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp9r31nez1.jl:27\n\
    \   [2] top-level scope at /tmp/tmp9r31nez1.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r31nez1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9r31nez1.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9r31nez1.jl:27\n   [2] top-level scope at /tmp/tmp9r31nez1.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r31nez1.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9r31nez1.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9r31nez1.jl:27\n   [2] top-level scope at /tmp/tmp9r31nez1.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9r31nez1.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9r31nez1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp94b5vt7w.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94b5vt7w.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94b5vt7w.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp72p1sv7k.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp72p1sv7k.jl:27\n\
    \   [2] top-level scope at /tmp/tmp72p1sv7k.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72p1sv7k.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72p1sv7k.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp72p1sv7k.jl:27\n   [2] top-level scope at /tmp/tmp72p1sv7k.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72p1sv7k.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp72p1sv7k.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp72p1sv7k.jl:27\n   [2] top-level scope at /tmp/tmp72p1sv7k.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp72p1sv7k.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72p1sv7k.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwk5n38tb.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwk5n38tb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwk5n38tb.jl:33\ntest set: Test Failed at /tmp/tmpwk5n38tb.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpwk5n38tb.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwk5n38tb.jl:33\ntest set: Test Failed at /tmp/tmpwk5n38tb.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpwk5n38tb.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwk5n38tb.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwk5n38tb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3iet992w.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3iet992w.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3iet992w.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd361rqtl.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpd361rqtl.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd361rqtl.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd361rqtl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr5g4cane.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpr5g4cane.jl:27\n\
    \   [2] top-level scope at /tmp/tmpr5g4cane.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr5g4cane.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpr5g4cane.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpr5g4cane.jl:27\n   [2] top-level scope at /tmp/tmpr5g4cane.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr5g4cane.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpr5g4cane.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpr5g4cane.jl:27\n   [2] top-level scope at /tmp/tmpr5g4cane.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr5g4cane.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5g4cane.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrc4my3a.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplrc4my3a.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplrc4my3a.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrc4my3a.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps0pe4go7.jl:49\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmps0pe4go7.jl:49\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps0pe4go7.jl:47\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6q8kf84r.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6q8kf84r.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6q8kf84r.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6q8kf84r.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgoxz5pgl.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgoxz5pgl.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgoxz5pgl.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgoxz5pgl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5ol1026w.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ol1026w.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ol1026w.jl:33\ntest set: Test Failed at /tmp/tmp5ol1026w.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp5ol1026w.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ol1026w.jl:33\ntest set: Test Failed at /tmp/tmp5ol1026w.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp5ol1026w.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5ol1026w.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ol1026w.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1vzy4q_q.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1vzy4q_q.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1vzy4q_q.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1vzy4q_q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphjvl0uup.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphjvl0uup.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphjvl0uup.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphjvl0uup.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmplyhkk6t5.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplyhkk6t5.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplyhkk6t5.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmplyhkk6t5.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  InexactError: Int64(28//3)\\n  Stacktrace:\\\
    n   [1] Integer at ./rational.jl:94 [inlined]\\n   [2] convert at ./number.jl:7\
    \ [inlined]\\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmplyhkk6t5.jl:40\\\
    n   [4] top-level scope at /tmp/tmplyhkk6t5.jl:49\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmplyhkk6t5.jl:46\\n  \\nTest Summary: | Pass\
    \  Fail  Error  Total\\ntest set      |    1     1      1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpejls0aw7.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpejls0aw7.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejls0aw7.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejls0aw7.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd14aalda.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpd14aalda.jl:27\n\
    \   [2] top-level scope at /tmp/tmpd14aalda.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd14aalda.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpd14aalda.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpd14aalda.jl:27\n   [2] top-level scope at /tmp/tmpd14aalda.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd14aalda.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpd14aalda.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpd14aalda.jl:27\n   [2] top-level scope at /tmp/tmpd14aalda.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd14aalda.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd14aalda.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvfxlb2ki.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvfxlb2ki.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvfxlb2ki.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfxlb2ki.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf027qpmq.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf027qpmq.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf027qpmq.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpla0k4ouq.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpla0k4ouq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpla0k4ouq.jl:33\ntest set: Test Failed at /tmp/tmpla0k4ouq.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpla0k4ouq.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpla0k4ouq.jl:33\ntest set: Test Failed at /tmp/tmpla0k4ouq.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpla0k4ouq.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpla0k4ouq.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpla0k4ouq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnnnkh22s.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnnnkh22s.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnnnkh22s.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnnnkh22s.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcupk7n_9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcupk7n_9.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcupk7n_9.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcupk7n_9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnb88s9i.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphnb88s9i.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnb88s9i.jl:33\ntest set: Test Failed at /tmp/tmphnb88s9i.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmphnb88s9i.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnb88s9i.jl:33\ntest set: Test Failed at /tmp/tmphnb88s9i.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmphnb88s9i.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnb88s9i.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnb88s9i.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_d7cxyc0.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_d7cxyc0.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_d7cxyc0.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzi294p_s.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzi294p_s.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzi294p_s.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzi294p_s.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ypyh1v9.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8ypyh1v9.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8ypyh1v9.jl:33\ntest set: Test Failed at /tmp/tmp8ypyh1v9.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp8ypyh1v9.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8ypyh1v9.jl:33\ntest set: Test Failed at /tmp/tmp8ypyh1v9.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp8ypyh1v9.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8ypyh1v9.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ypyh1v9.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm8kqa841.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm8kqa841.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm8kqa841.jl:33\\ntest set: Test Failed at /tmp/tmpm8kqa841.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm8kqa841.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm8kqa841.jl:33\\ntest set: Test Failed at /tmp/tmpm8kqa841.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm8kqa841.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm8kqa841.jl:33\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    # You can add some local functions if needed\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpchpw18_s.jl:34\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpchpw18_s.jl:28\n\
    \   [2] top-level scope at /tmp/tmpchpw18_s.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpchpw18_s.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpchpw18_s.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpchpw18_s.jl:28\n   [2] top-level scope at /tmp/tmpchpw18_s.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpchpw18_s.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpchpw18_s.jl:36\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpchpw18_s.jl:28\n   [2] top-level scope at /tmp/tmpchpw18_s.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpchpw18_s.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchpw18_s.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9hbu5_rz.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp9hbu5_rz.jl:27\n\
    \   [2] top-level scope at /tmp/tmp9hbu5_rz.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9hbu5_rz.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9hbu5_rz.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9hbu5_rz.jl:27\n   [2] top-level scope at /tmp/tmp9hbu5_rz.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9hbu5_rz.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp9hbu5_rz.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp9hbu5_rz.jl:27\n   [2] top-level scope at /tmp/tmp9hbu5_rz.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9hbu5_rz.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hbu5_rz.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result/operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = result^operand[i]\n        end\n    end\n  \
    \  return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7cm9df4x.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7cm9df4x.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7cm9df4x.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cm9df4x.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvbql_a03.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvbql_a03.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbql_a03.jl:33\\ntest set: Test Failed at /tmp/tmpvbql_a03.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvbql_a03.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbql_a03.jl:33\\ntest set: Test Failed at /tmp/tmpvbql_a03.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvbql_a03.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvbql_a03.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2ky8525q.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2ky8525q.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2ky8525q.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmp2ky8525q.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  InexactError: Int64(28//3)\\n  Stacktrace:\\\
    n   [1] Integer at ./rational.jl:94 [inlined]\\n   [2] convert at ./number.jl:7\
    \ [inlined]\\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp2ky8525q.jl:40\\\
    n   [4] top-level scope at /tmp/tmp2ky8525q.jl:49\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp2ky8525q.jl:46\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjq4t_v81.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjq4t_v81.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjq4t_v81.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcncxfqsq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcncxfqsq.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcncxfqsq.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcncxfqsq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpck3sd58y.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpck3sd58y.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpck3sd58y.jl:33\ntest set: Test Failed at /tmp/tmpck3sd58y.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpck3sd58y.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpck3sd58y.jl:33\ntest set: Test Failed at /tmp/tmpck3sd58y.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpck3sd58y.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpck3sd58y.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpck3sd58y.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7olbk89.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk7olbk89.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7olbk89.jl:33\ntest set: Test Failed at /tmp/tmpk7olbk89.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpk7olbk89.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7olbk89.jl:33\ntest set: Test Failed at /tmp/tmpk7olbk89.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpk7olbk89.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7olbk89.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7olbk89.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_h3cguhv.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_h3cguhv.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_h3cguhv.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_h3cguhv.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfm3kgome.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfm3kgome.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfm3kgome.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm3kgome.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0n3z8r_b.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0n3z8r_b.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0n3z8r_b.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0n3z8r_b.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi286ud4v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi286ud4v.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi286ud4v.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi286ud4v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpj650yik0.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpj650yik0.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj650yik0.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj650yik0.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzr_jo6rb.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzr_jo6rb.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr_jo6rb.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzr_jo6rb.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8kauzfxm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8kauzfxm.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kauzfxm.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kauzfxm.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp47xr4um1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp47xr4um1.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp47xr4um1.jl:46\ntest set: Error During Test at\
    \ /tmp/tmp47xr4um1.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer at ./rational.jl:94 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp47xr4um1.jl:40\n\
    \   [4] top-level scope at /tmp/tmp47xr4um1.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp47xr4um1.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp47xr4um1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3uptftj0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3uptftj0.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3uptftj0.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3uptftj0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgloqmxvs.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgloqmxvs.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgloqmxvs.jl:33\\ntest set: Test Failed at /tmp/tmpgloqmxvs.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgloqmxvs.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgloqmxvs.jl:33\\ntest set: Test Failed at /tmp/tmpgloqmxvs.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgloqmxvs.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgloqmxvs.jl:33\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdpn3o8up.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdpn3o8up.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdpn3o8up.jl:33\ntest set: Test Failed at /tmp/tmpdpn3o8up.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpdpn3o8up.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdpn3o8up.jl:33\ntest set: Test Failed at /tmp/tmpdpn3o8up.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpdpn3o8up.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdpn3o8up.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdpn3o8up.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgmln5vml.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgmln5vml.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmln5vml.jl:33\ntest set: Test Failed at /tmp/tmpgmln5vml.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpgmln5vml.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmln5vml.jl:33\ntest set: Test Failed at /tmp/tmpgmln5vml.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpgmln5vml.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmln5vml.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmln5vml.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn4d5854_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn4d5854_.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4d5854_.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4d5854_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphgee5k7h.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphgee5k7h.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgee5k7h.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgee5k7h.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl_5nyfqi.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl_5nyfqi.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl_5nyfqi.jl:33\ntest set: Test Failed at /tmp/tmpl_5nyfqi.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpl_5nyfqi.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl_5nyfqi.jl:33\ntest set: Test Failed at /tmp/tmpl_5nyfqi.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpl_5nyfqi.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl_5nyfqi.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_5nyfqi.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpshrk73uw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpshrk73uw.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpshrk73uw.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshrk73uw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42y59wj1.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42y59wj1.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42y59wj1.jl:33\ntest set: Test Failed at /tmp/tmp42y59wj1.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp42y59wj1.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42y59wj1.jl:33\ntest set: Test Failed at /tmp/tmp42y59wj1.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp42y59wj1.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42y59wj1.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42y59wj1.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpki94vfij.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpki94vfij.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpki94vfij.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpki94vfij.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 2:length(operand)\n        if operator[i-1]\
    \ == \"+\"\n            result += operand[i]\n        elseif operator[i-1] ==\
    \ \"-\"\n            result -= operand[i]\n        elseif operator[i-1] == \"\
    *\"\n            result *= operand[i]\n        elseif operator[i-1] == \"//\"\n\
    \            result = floor(Int64, result / operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result = result ^ operand[i]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7jdv658.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp7jdv658.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7jdv658.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7jdv658.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzmw3r4zw.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzmw3r4zw.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzmw3r4zw.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrb5ibx9.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsrb5ibx9.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsrb5ibx9.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrb5ibx9.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp427m2l_n.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp427m2l_n.jl:27\n\
    \   [2] top-level scope at /tmp/tmp427m2l_n.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp427m2l_n.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp427m2l_n.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp427m2l_n.jl:27\n   [2] top-level scope at /tmp/tmp427m2l_n.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp427m2l_n.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp427m2l_n.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp427m2l_n.jl:27\n   [2] top-level scope at /tmp/tmp427m2l_n.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp427m2l_n.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp427m2l_n.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn3jwt15d.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn3jwt15d.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn3jwt15d.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3jwt15d.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxm6k6rs.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuxm6k6rs.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuxm6k6rs.jl:33\ntest set: Test Failed at /tmp/tmpuxm6k6rs.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpuxm6k6rs.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuxm6k6rs.jl:33\ntest set: Test Failed at /tmp/tmpuxm6k6rs.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpuxm6k6rs.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuxm6k6rs.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxm6k6rs.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpotwp105u.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpotwp105u.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpotwp105u.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpotwp105u.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpagnvc0ls.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpagnvc0ls.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpagnvc0ls.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpumfkdd5e.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpumfkdd5e.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpumfkdd5e.jl:33\\ntest set: Test Failed at /tmp/tmpumfkdd5e.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmpumfkdd5e.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpumfkdd5e.jl:33\\ntest set: Test Failed at /tmp/tmpumfkdd5e.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmpumfkdd5e.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpumfkdd5e.jl:33\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptxnsfs21.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptxnsfs21.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxnsfs21.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxnsfs21.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy1qz185c.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpy1qz185c.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy1qz185c.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmpy1qz185c.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  InexactError: Int64(28//3)\\n  Stacktrace:\\\
    n   [1] Integer at ./rational.jl:94 [inlined]\\n   [2] convert at ./number.jl:7\
    \ [inlined]\\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpy1qz185c.jl:40\\\
    n   [4] top-level scope at /tmp/tmpy1qz185c.jl:49\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpy1qz185c.jl:46\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprmyzog05.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprmyzog05.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprmyzog05.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprmyzog05.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8v3g7tzi.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8v3g7tzi.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8v3g7tzi.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8v3g7tzi.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpul4sl2xw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpul4sl2xw.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpul4sl2xw.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul4sl2xw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i = 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpluuccj0u.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpluuccj0u.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpluuccj0u.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpluuccj0u.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iqscyao.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8iqscyao.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8iqscyao.jl:33\ntest set: Test Failed at /tmp/tmp8iqscyao.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp8iqscyao.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8iqscyao.jl:33\ntest set: Test Failed at /tmp/tmp8iqscyao.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp8iqscyao.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8iqscyao.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iqscyao.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjoura8ok.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjoura8ok.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjoura8ok.jl:33\ntest set: Test Failed at /tmp/tmpjoura8ok.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpjoura8ok.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjoura8ok.jl:33\ntest set: Test Failed at /tmp/tmpjoura8ok.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpjoura8ok.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjoura8ok.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjoura8ok.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpoqf4ytu4.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpoqf4ytu4.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoqf4ytu4.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmpoqf4ytu4.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n  InexactError: Int64(28//3)\\n  Stacktrace:\\\
    n   [1] Integer at ./rational.jl:94 [inlined]\\n   [2] convert at ./number.jl:7\
    \ [inlined]\\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpoqf4ytu4.jl:40\\\
    n   [4] top-level scope at /tmp/tmpoqf4ytu4.jl:49\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpoqf4ytu4.jl:46\\n  \\nTest Summary: | Pass\
    \  Fail  Error  Total\\ntest set      |    1     1      1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2nn60tq6.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2nn60tq6.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2nn60tq6.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nn60tq6.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd6wrioho.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpd6wrioho.jl:27\n\
    \   [2] top-level scope at /tmp/tmpd6wrioho.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd6wrioho.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpd6wrioho.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpd6wrioho.jl:27\n   [2] top-level scope at /tmp/tmpd6wrioho.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd6wrioho.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpd6wrioho.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpd6wrioho.jl:27\n   [2] top-level scope at /tmp/tmpd6wrioho.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd6wrioho.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6wrioho.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp8ez5gyp.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp8ez5gyp.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp8ez5gyp.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8ez5gyp.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9lki8cxb.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9lki8cxb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9lki8cxb.jl:33\ntest set: Test Failed at /tmp/tmp9lki8cxb.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp9lki8cxb.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9lki8cxb.jl:33\ntest set: Test Failed at /tmp/tmp9lki8cxb.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp9lki8cxb.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9lki8cxb.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9lki8cxb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp20lsd94b.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp20lsd94b.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp20lsd94b.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2jg7r6fi.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2jg7r6fi.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2jg7r6fi.jl:46\\ntest set: Error During Test\
    \ at /tmp/tmp2jg7r6fi.jl:49\\n  Test threw exception\\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1ski4mvh.jl:34\\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\\n   Evaluated: 0 == 37\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp1ski4mvh.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1ski4mvh.jl:33\\ntest set: Test Failed at /tmp/tmp1ski4mvh.jl:35\\\
    n  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated:\
    \ 0 == 9\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1ski4mvh.jl:35\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1ski4mvh.jl:33\\ntest set: Test Failed at /tmp/tmp1ski4mvh.jl:36\\\
    n  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\\n   Evaluated: 0 ==\
    \ 8\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1ski4mvh.jl:36\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1ski4mvh.jl:33\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdsf72skt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdsf72skt.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdsf72skt.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdsf72skt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6g190ra_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6g190ra_.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6g190ra_.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6g190ra_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqedddbf0.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqedddbf0.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqedddbf0.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79ox0c06.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp79ox0c06.jl:27\n\
    \   [2] top-level scope at /tmp/tmp79ox0c06.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp79ox0c06.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp79ox0c06.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp79ox0c06.jl:27\n   [2] top-level scope at /tmp/tmp79ox0c06.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp79ox0c06.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmp79ox0c06.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmp79ox0c06.jl:27\n   [2] top-level scope at /tmp/tmp79ox0c06.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp79ox0c06.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79ox0c06.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ud0hurz.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4ud0hurz.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ud0hurz.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ud0hurz.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_g0t2_l2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_g0t2_l2.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_g0t2_l2.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_g0t2_l2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3p92d8i4.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3p92d8i4.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3p92d8i4.jl:46\ntest set: Error During Test at\
    \ /tmp/tmp3p92d8i4.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp3p92d8i4.jl:35\n\
    \   [4] top-level scope at /tmp/tmp3p92d8i4.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3p92d8i4.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3p92d8i4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaktj11_j.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpaktj11_j.jl:27\n\
    \   [2] top-level scope at /tmp/tmpaktj11_j.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaktj11_j.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpaktj11_j.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpaktj11_j.jl:27\n   [2] top-level scope at /tmp/tmpaktj11_j.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaktj11_j.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpaktj11_j.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpaktj11_j.jl:27\n   [2] top-level scope at /tmp/tmpaktj11_j.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpaktj11_j.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaktj11_j.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgu41gtnu.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgu41gtnu.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgu41gtnu.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgu41gtnu.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfpophfot.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpfpophfot.jl:27\n\
    \   [2] top-level scope at /tmp/tmpfpophfot.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfpophfot.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpophfot.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpfpophfot.jl:27\n   [2] top-level scope at /tmp/tmpfpophfot.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfpophfot.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpfpophfot.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpfpophfot.jl:27\n   [2] top-level scope at /tmp/tmpfpophfot.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfpophfot.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpophfot.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8fd4b8lr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8fd4b8lr.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8fd4b8lr.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fd4b8lr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3bk5vqyi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3bk5vqyi.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3bk5vqyi.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3bk5vqyi.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8h120j_g.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8h120j_g.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8h120j_g.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8h120j_g.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code goes here\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t\
    @test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy10biu7_.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy10biu7_.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10biu7_.jl:33\ntest set: Test Failed at /tmp/tmpy10biu7_.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpy10biu7_.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10biu7_.jl:33\ntest set: Test Failed at /tmp/tmpy10biu7_.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpy10biu7_.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10biu7_.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy10biu7_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzzb9pn5t.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpzzb9pn5t.jl:27\n\
    \   [2] top-level scope at /tmp/tmpzzb9pn5t.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzzb9pn5t.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpzzb9pn5t.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpzzb9pn5t.jl:27\n   [2] top-level scope at /tmp/tmpzzb9pn5t.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzzb9pn5t.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpzzb9pn5t.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpzzb9pn5t.jl:27\n   [2] top-level scope at /tmp/tmpzzb9pn5t.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzzb9pn5t.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzb9pn5t.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpe52fmj0t.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpe52fmj0t.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe52fmj0t.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe52fmj0t.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k4btss9.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1k4btss9.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1k4btss9.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k4btss9.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp03cf01dx.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp03cf01dx.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp03cf01dx.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvpa8wffe.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvpa8wffe.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvpa8wffe.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvpa8wffe.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo7fa1e8e.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7fa1e8e.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo7fa1e8e.jl:33\ntest set: Test Failed at /tmp/tmpo7fa1e8e.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpo7fa1e8e.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo7fa1e8e.jl:33\ntest set: Test Failed at /tmp/tmpo7fa1e8e.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpo7fa1e8e.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo7fa1e8e.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo7fa1e8e.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu79q9ibs.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpu79q9ibs.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu79q9ibs.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu79q9ibs.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptqau7qts.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptqau7qts.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptqau7qts.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqau7qts.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6c5yk78_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6c5yk78_.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6c5yk78_.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6c5yk78_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcisg8u0q.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcisg8u0q.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcisg8u0q.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcisg8u0q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_z73umf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa_z73umf.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa_z73umf.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_z73umf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_dxol71o.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_dxol71o.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_dxol71o.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_dxol71o.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn91akaxh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn91akaxh.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn91akaxh.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn91akaxh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp59uk3bau.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp59uk3bau.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp59uk3bau.jl:33\ntest set: Test Failed at /tmp/tmp59uk3bau.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp59uk3bau.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp59uk3bau.jl:33\ntest set: Test Failed at /tmp/tmp59uk3bau.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp59uk3bau.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp59uk3bau.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp59uk3bau.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfbm491_a.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfbm491_a.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbm491_a.jl:33\ntest set: Test Failed at /tmp/tmpfbm491_a.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpfbm491_a.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbm491_a.jl:33\ntest set: Test Failed at /tmp/tmpfbm491_a.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpfbm491_a.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbm491_a.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbm491_a.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpljt52e8z.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpljt52e8z.jl:27\n\
    \   [2] top-level scope at /tmp/tmpljt52e8z.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpljt52e8z.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpljt52e8z.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpljt52e8z.jl:27\n   [2] top-level scope at /tmp/tmpljt52e8z.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpljt52e8z.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpljt52e8z.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpljt52e8z.jl:27\n   [2] top-level scope at /tmp/tmpljt52e8z.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpljt52e8z.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljt52e8z.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpesecqzl0.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpesecqzl0.jl:27\n\
    \   [2] top-level scope at /tmp/tmpesecqzl0.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesecqzl0.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpesecqzl0.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpesecqzl0.jl:27\n   [2] top-level scope at /tmp/tmpesecqzl0.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesecqzl0.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpesecqzl0.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpesecqzl0.jl:27\n   [2] top-level scope at /tmp/tmpesecqzl0.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpesecqzl0.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpesecqzl0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpo0tyt91o.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpo0tyt91o.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo0tyt91o.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1gq8ktc.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1gq8ktc.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1gq8ktc.jl:33\ntest set: Test Failed at /tmp/tmpz1gq8ktc.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpz1gq8ktc.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1gq8ktc.jl:33\ntest set: Test Failed at /tmp/tmpz1gq8ktc.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpz1gq8ktc.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1gq8ktc.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1gq8ktc.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5xo_sxwt.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5xo_sxwt.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5xo_sxwt.jl:46\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl0sv5a25.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl0sv5a25.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl0sv5a25.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0sv5a25.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = result \xF7 operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqqwiehho.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqqwiehho.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqqwiehho.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqwiehho.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpafmhibcb.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpafmhibcb.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafmhibcb.jl:46\ntest set: Error During Test at\
    \ /tmp/tmpafmhibcb.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer at ./rational.jl:94 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpafmhibcb.jl:40\n\
    \   [4] top-level scope at /tmp/tmpafmhibcb.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpafmhibcb.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpafmhibcb.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp37otob9.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp37otob9.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp37otob9.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp37otob9.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_veo9fk.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_veo9fk.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_veo9fk.jl:33\ntest set: Test Failed at /tmp/tmp2_veo9fk.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp2_veo9fk.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_veo9fk.jl:33\ntest set: Test Failed at /tmp/tmp2_veo9fk.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp2_veo9fk.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2_veo9fk.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_veo9fk.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwwq0_v2y.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwwq0_v2y.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwwq0_v2y.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwq0_v2y.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = convert(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3hea0n0j.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3hea0n0j.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3hea0n0j.jl:46\ntest set: Error During Test at\
    \ /tmp/tmp3hea0n0j.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n  Stacktrace:\n\
    \   [1] Int64 at ./float.jl:710 [inlined]\n   [2] convert at ./number.jl:7 [inlined]\n\
    \   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp3hea0n0j.jl:35\n\
    \   [4] top-level scope at /tmp/tmp3hea0n0j.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp3hea0n0j.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3hea0n0j.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    # You can add some local functions if needed\n \
    \   # You can also use some global variables if needed\n    # You can use the\
    \ built-in functions if needed\n    # You can add some imports if needed\n   \
    \ # You can create some helper functions if needed\n    # You can also create\
    \ some classes if needed\n    # You can also create some exceptions if needed\n\
    \    # You can also create some enumerations if needed\n    # You can also create\
    \ some traits if needed\n    # You can also create some type aliases if needed\n\
    \    # You can also create some abstract types if needed\n    # You can also create\
    \ some type unions if needed\n    # You can also create some type intersections\
    \ if needed\n    # You can also create some type parameters if needed\n    # You\
    \ can also create some type constructors if needed\n    # You can also create\
    \ some type projections if needed\n    # You can also create some type abstractions\
    \ if needed\n    # You can also create some type lambdas if needed\n    # You\
    \ can also create some type applications if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type variables if\
    \ needed\n    # You can also create some type bounds if needed\n    # You can\
    \ also create some type bounds if needed\n    # You can also create some type\
    \ bounds if needed\n    # You can also create some type bounds if needed\n   \
    \ # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type bounds if needed\n\
    \    # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type bounds if needed\n\
    \    # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type bounds if needed\n\
    \    # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type bounds if needed\n\
    \    # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You can also create some type bounds if needed\n\
    \    # You can also create some type bounds if needed\n    # You can also create\
    \ some type bounds if needed\n    # You\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdj9uww44.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdj9uww44.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdj9uww44.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcoovlhk2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcoovlhk2.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcoovlhk2.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoovlhk2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjaexi3bo.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjaexi3bo.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjaexi3bo.jl:33\ntest set: Test Failed at /tmp/tmpjaexi3bo.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpjaexi3bo.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjaexi3bo.jl:33\ntest set: Test Failed at /tmp/tmpjaexi3bo.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpjaexi3bo.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjaexi3bo.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjaexi3bo.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj4w4s7j2.jl:48\\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\\n   Evaluated: 15 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpj4w4s7j2.jl:48\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj4w4s7j2.jl:46\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     1      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfsee2222.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfsee2222.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfsee2222.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfsee2222.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpodih4zei.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpodih4zei.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpodih4zei.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodih4zei.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcrrbmnwx.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcrrbmnwx.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrbmnwx.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrrbmnwx.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkswn3_yf.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpkswn3_yf.jl:27\n\
    \   [2] top-level scope at /tmp/tmpkswn3_yf.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkswn3_yf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpkswn3_yf.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpkswn3_yf.jl:27\n   [2] top-level scope at /tmp/tmpkswn3_yf.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkswn3_yf.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpkswn3_yf.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpkswn3_yf.jl:27\n   [2] top-level scope at /tmp/tmpkswn3_yf.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkswn3_yf.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkswn3_yf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_tep_rz.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb_tep_rz.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb_tep_rz.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_tep_rz.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wu85och.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0wu85och.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wu85och.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wu85och.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wujy_6a.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wujy_6a.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wujy_6a.jl:33\ntest set: Test Failed at /tmp/tmp0wujy_6a.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmp0wujy_6a.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wujy_6a.jl:33\ntest set: Test Failed at /tmp/tmp0wujy_6a.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmp0wujy_6a.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wujy_6a.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wujy_6a.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpetlrlllj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpetlrlllj.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpetlrlllj.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetlrlllj.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4orz_iqg.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4orz_iqg.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4orz_iqg.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4orz_iqg.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpau0z8m5a.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpau0z8m5a.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpau0z8m5a.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpau0z8m5a.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # YOUR CODE HERE\n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizr50zx2.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpizr50zx2.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpizr50zx2.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizr50zx2.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5842qct_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5842qct_.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5842qct_.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5842qct_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = div(result, operand[i+1])\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkii1s5m2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkii1s5m2.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkii1s5m2.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkii1s5m2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0ece379.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz0ece379.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0ece379.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0ece379.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfy15t153.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmpfy15t153.jl:27\n\
    \   [2] top-level scope at /tmp/tmpfy15t153.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy15t153.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpfy15t153.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpfy15t153.jl:27\n   [2] top-level scope at /tmp/tmpfy15t153.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy15t153.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpfy15t153.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] do_algebra(::Array{String,1},\
    \ ::Array{Int64,1}) at /tmp/tmpfy15t153.jl:27\n   [2] top-level scope at /tmp/tmpfy15t153.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy15t153.jl:32\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfy15t153.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzr3sbv55.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzr3sbv55.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr3sbv55.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzr3sbv55.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsn7kc0qy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsn7kc0qy.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsn7kc0qy.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn7kc0qy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa2sjm4a4.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa2sjm4a4.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa2sjm4a4.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2sjm4a4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9d3r6rnl.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9d3r6rnl.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9d3r6rnl.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9d3r6rnl.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result / operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa7axlt1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsa7axlt1.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsa7axlt1.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa7axlt1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result //= operand[i+1]\n        elseif operator[i] == \"**\"\n \
    \           result ^= operand[i+1]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_wtcaojf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_wtcaojf.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_wtcaojf.jl:46\ntest set: Error During Test at\
    \ /tmp/tmp_wtcaojf.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n  Stacktrace:\n \
    \  [1] Integer at ./rational.jl:94 [inlined]\n   [2] convert at ./number.jl:7\
    \ [inlined]\n   [3] do_algebra(::Array{String,1}, ::Array{Int64,1}) at /tmp/tmp_wtcaojf.jl:40\n\
    \   [4] top-level scope at /tmp/tmp_wtcaojf.jl:49\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_wtcaojf.jl:46\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wtcaojf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncs46npq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpncs46npq.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpncs46npq.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncs46npq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkz5zi7f3.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkz5zi7f3.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkz5zi7f3.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkz5zi7f3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    result = operand[1]\n    for i in 1:length(operator)\n        if operator[i]\
    \ == \"+\"\n            result += operand[i+1]\n        elseif operator[i] ==\
    \ \"-\"\n            result -= operand[i+1]\n        elseif operator[i] == \"\
    *\"\n            result *= operand[i+1]\n        elseif operator[i] == \"//\"\n\
    \            result = floor(Int64, result/operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result = result^operand[i+1]\n        end\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbxe51wek.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbxe51wek.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbxe51wek.jl:46\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxe51wek.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # Your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgvbdgp7q.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgvbdgp7q.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgvbdgp7q.jl:33\ntest set: Test Failed at /tmp/tmpgvbdgp7q.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpgvbdgp7q.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgvbdgp7q.jl:33\ntest set: Test Failed at /tmp/tmpgvbdgp7q.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpgvbdgp7q.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgvbdgp7q.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvbdgp7q.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two lists operator, and operand. The first list has\
    \ basic algebra operations, and \n    the second list is a list of integers. Use\
    \ the two given lists to build the algebric \n    expression and return the evaluation\
    \ of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\
    \ \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( //\
    \ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n\
    \    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n \
    \   Note:\n        The length of operator list is equal to the length of operand\
    \ list minus one.\n        Operand is a list of of non-negative integers.\n  \
    \      Operator list has at least one operator, and operand list has at least\
    \ two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgd9ibryz.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgd9ibryz.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgd9ibryz.jl:33\ntest set: Test Failed at /tmp/tmpgd9ibryz.jl:35\n\
    \  Expression: candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] top-level scope at /tmp/tmpgd9ibryz.jl:35\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgd9ibryz.jl:33\ntest set: Test Failed at /tmp/tmpgd9ibryz.jl:36\n\
    \  Expression: candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n   Evaluated: 0 ==\
    \ 8\nStacktrace:\n [1] top-level scope at /tmp/tmpgd9ibryz.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgd9ibryz.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgd9ibryz.jl:31\n"
  exit_code: 1
  status: SyntaxError
