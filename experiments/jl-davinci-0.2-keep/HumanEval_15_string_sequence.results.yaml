name: HumanEval_15_string_sequence
language: julia
results:
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqn_u9vse.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqn_u9vse.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn_u9vse.jl:18\ntest set: Test Failed at /tmp/tmpqn_u9vse.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpqn_u9vse.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn_u9vse.jl:18\ntest set: Test Failed at /tmp/tmpqn_u9vse.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqn_u9vse.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqn_u9vse.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqn_u9vse.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1n_p0x_i.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1n_p0x_i.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1n_p0x_i.jl:18\ntest set: Test Failed at /tmp/tmp1n_p0x_i.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp1n_p0x_i.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1n_p0x_i.jl:18\ntest set: Test Failed at /tmp/tmp1n_p0x_i.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1n_p0x_i.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1n_p0x_i.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1n_p0x_i.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdbqfyqv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppdbqfyqv.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppdbqfyqv.jl:18\ntest set: Test Failed at /tmp/tmppdbqfyqv.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmppdbqfyqv.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppdbqfyqv.jl:18\ntest set: Test Failed at /tmp/tmppdbqfyqv.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppdbqfyqv.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppdbqfyqv.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdbqfyqv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps4qlyyto.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmps4qlyyto.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4qlyyto.jl:18\ntest set: Test Failed at /tmp/tmps4qlyyto.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmps4qlyyto.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4qlyyto.jl:18\ntest set: Test Failed at /tmp/tmps4qlyyto.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \" 0\
    \ 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps4qlyyto.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4qlyyto.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4qlyyto.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx166chuu.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpx166chuu.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx166chuu.jl:18\ntest set: Test Failed at /tmp/tmpx166chuu.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpx166chuu.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx166chuu.jl:18\ntest set: Test Failed at /tmp/tmpx166chuu.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx166chuu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx166chuu.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx166chuu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnmncs0s3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnmncs0s3.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmncs0s3.jl:18\ntest set: Test Failed at /tmp/tmpnmncs0s3.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpnmncs0s3.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmncs0s3.jl:18\ntest set: Test Failed at /tmp/tmpnmncs0s3.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnmncs0s3.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnmncs0s3.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnmncs0s3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmdglaklh.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmdglaklh.jl:15\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdglaklh.jl:14\ntest set: Test Failed at /tmp/tmpmdglaklh.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpmdglaklh.jl:16\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdglaklh.jl:14\ntest set: Test Failed at /tmp/tmpmdglaklh.jl:17\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmdglaklh.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmdglaklh.jl:14\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmdglaklh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi71j4rhj.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpi71j4rhj.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi71j4rhj.jl:18\ntest set: Test Failed at /tmp/tmpi71j4rhj.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpi71j4rhj.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi71j4rhj.jl:18\ntest set: Test Failed at /tmp/tmpi71j4rhj.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi71j4rhj.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi71j4rhj.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi71j4rhj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp14q1gs3g.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp14q1gs3g.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14q1gs3g.jl:18\ntest set: Test Failed at /tmp/tmp14q1gs3g.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp14q1gs3g.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14q1gs3g.jl:18\ntest set: Test Failed at /tmp/tmp14q1gs3g.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp14q1gs3g.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14q1gs3g.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14q1gs3g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy6rxz6co.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy6rxz6co.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy6rxz6co.jl:18\ntest set: Test Failed at /tmp/tmpy6rxz6co.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpy6rxz6co.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy6rxz6co.jl:18\ntest set: Test Failed at /tmp/tmpy6rxz6co.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy6rxz6co.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy6rxz6co.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6rxz6co.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, i, \" \")\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuu089j7p.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpuu089j7p.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuu089j7p.jl:18\ntest set: Test Failed at /tmp/tmpuu089j7p.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpuu089j7p.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuu089j7p.jl:18\ntest set: Test Failed at /tmp/tmpuu089j7p.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuu089j7p.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuu089j7p.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuu089j7p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkai7se8b.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkai7se8b.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkai7se8b.jl:18\ntest set: Test Failed at /tmp/tmpkai7se8b.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpkai7se8b.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkai7se8b.jl:18\ntest set: Test Failed at /tmp/tmpkai7se8b.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkai7se8b.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkai7se8b.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkai7se8b.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfrvdi7a7.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfrvdi7a7.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfrvdi7a7.jl:18\ntest set: Test Failed at /tmp/tmpfrvdi7a7.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpfrvdi7a7.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfrvdi7a7.jl:18\ntest set: Test Failed at /tmp/tmpfrvdi7a7.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfrvdi7a7.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfrvdi7a7.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfrvdi7a7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmsrdrna3.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmsrdrna3.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsrdrna3.jl:18\ntest set: Test Failed at /tmp/tmpmsrdrna3.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpmsrdrna3.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsrdrna3.jl:18\ntest set: Test Failed at /tmp/tmpmsrdrna3.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmsrdrna3.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsrdrna3.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsrdrna3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3dsx2566.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3dsx2566.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3dsx2566.jl:18\ntest set: Test Failed at /tmp/tmp3dsx2566.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp3dsx2566.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3dsx2566.jl:18\ntest set: Test Failed at /tmp/tmp3dsx2566.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3dsx2566.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3dsx2566.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dsx2566.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, i, \" \")\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmbznu27.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcmbznu27.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmbznu27.jl:18\ntest set: Test Failed at /tmp/tmpcmbznu27.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpcmbznu27.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmbznu27.jl:18\ntest set: Test Failed at /tmp/tmpcmbznu27.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcmbznu27.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmbznu27.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmbznu27.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewgnhuzj.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpewgnhuzj.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpewgnhuzj.jl:18\ntest set: Test Failed at /tmp/tmpewgnhuzj.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpewgnhuzj.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpewgnhuzj.jl:18\ntest set: Test Failed at /tmp/tmpewgnhuzj.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpewgnhuzj.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpewgnhuzj.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewgnhuzj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkfgavuzh.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkfgavuzh.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfgavuzh.jl:18\ntest set: Test Failed at /tmp/tmpkfgavuzh.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpkfgavuzh.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfgavuzh.jl:18\ntest set: Test Failed at /tmp/tmpkfgavuzh.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkfgavuzh.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkfgavuzh.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfgavuzh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxmwgcgq6.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxmwgcgq6.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxmwgcgq6.jl:18\ntest set: Test Failed at /tmp/tmpxmwgcgq6.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpxmwgcgq6.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxmwgcgq6.jl:18\ntest set: Test Failed at /tmp/tmpxmwgcgq6.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxmwgcgq6.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxmwgcgq6.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmwgcgq6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppwk2hz3o.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppwk2hz3o.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppwk2hz3o.jl:18\ntest set: Test Failed at /tmp/tmppwk2hz3o.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmppwk2hz3o.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppwk2hz3o.jl:18\ntest set: Test Failed at /tmp/tmppwk2hz3o.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppwk2hz3o.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppwk2hz3o.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppwk2hz3o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * \" \" * string(i)\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpofcqxydz.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" 0\" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpofcqxydz.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofcqxydz.jl:18\ntest set: Test Failed at /tmp/tmpofcqxydz.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \" 0 1 2 3\" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpofcqxydz.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofcqxydz.jl:18\ntest set: Test Failed at /tmp/tmpofcqxydz.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \" 0\
    \ 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpofcqxydz.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofcqxydz.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofcqxydz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfruif0f5.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfruif0f5.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfruif0f5.jl:18\ntest set: Test Failed at /tmp/tmpfruif0f5.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpfruif0f5.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfruif0f5.jl:18\ntest set: Test Failed at /tmp/tmpfruif0f5.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfruif0f5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfruif0f5.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfruif0f5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfami3i01.jl:19\\n  Expression: candidate(0)\
    \ == \"0\"\\n   Evaluated: \"0 \" == \"0\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpfami3i01.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfami3i01.jl:18\\ntest set: Test Failed at /tmp/tmpfami3i01.jl:20\\\
    n  Expression: candidate(3) == \"0 1 2 3\"\\n   Evaluated: \"0 1 2 3 \" == \"\
    0 1 2 3\"\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfami3i01.jl:20\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfami3i01.jl:18\\ntest set: Test Failed at /tmp/tmpfami3i01.jl:21\\\
    n  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\\n   Evaluated: \"\
    0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpfami3i01.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfami3i01.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmh96fp5h.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  type String has no field\
    \ join\\n  Stacktrace:\\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\\\
    n   [2] string_sequence(::Int64) at /tmp/tmpmh96fp5h.jl:8\\n   [3] top-level scope\
    \ at /tmp/tmpmh96fp5h.jl:15\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpmh96fp5h.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmh96fp5h.jl:16\\n  Test threw exception\\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\\n  type String has no field join\\n  Stacktrace:\\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\\n   [2] string_sequence(::Int64) at /tmp/tmpmh96fp5h.jl:8\\\
    n   [3] top-level scope at /tmp/tmpmh96fp5h.jl:16\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpmh96fp5h.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpmh96fp5h.jl:17\\n  Test threw exception\\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\\n  type String has no field join\\n  Stacktrace:\\\
    n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmpmh96fp5h.jl:8\\n   [3] top-level scope at /tmp/tmpmh96fp5h.jl:17\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpmh96fp5h.jl:14\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmpuudgho.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmpmpuudgho.jl:8\n   [3] top-level scope at /tmp/tmpmpuudgho.jl:15\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmpuudgho.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpuudgho.jl:16\n  Test threw exception\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64) at /tmp/tmpmpuudgho.jl:8\n\
    \   [3] top-level scope at /tmp/tmpmpuudgho.jl:16\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmpuudgho.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpuudgho.jl:17\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmpmpuudgho.jl:8\n   [3] top-level scope at /tmp/tmpmpuudgho.jl:17\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmpuudgho.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpuudgho.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2w7dldqo.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2w7dldqo.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2w7dldqo.jl:18\ntest set: Test Failed at /tmp/tmp2w7dldqo.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp2w7dldqo.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2w7dldqo.jl:18\ntest set: Test Failed at /tmp/tmp2w7dldqo.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2w7dldqo.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2w7dldqo.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2w7dldqo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \"\"\n    for i in 0:n\n        str = str * string(i) * \" \"\n   \
    \ end\n    return str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw3d6vdum.jl:19\\n  Expression: candidate(0)\
    \ == \"0\"\\n   Evaluated: \"0 \" == \"0\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpw3d6vdum.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw3d6vdum.jl:18\\ntest set: Test Failed at /tmp/tmpw3d6vdum.jl:20\\\
    n  Expression: candidate(3) == \"0 1 2 3\"\\n   Evaluated: \"0 1 2 3 \" == \"\
    0 1 2 3\"\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw3d6vdum.jl:20\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw3d6vdum.jl:18\\ntest set: Test Failed at /tmp/tmpw3d6vdum.jl:21\\\
    n  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\\n   Evaluated: \"\
    0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpw3d6vdum.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw3d6vdum.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnd43a5n0.jl:15\\n  Expression: candidate(0)\
    \ == \"0\"\\n   Evaluated: \"0 \" == \"0\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpnd43a5n0.jl:15\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnd43a5n0.jl:14\\ntest set: Test Failed at /tmp/tmpnd43a5n0.jl:16\\\
    n  Expression: candidate(3) == \"0 1 2 3\"\\n   Evaluated: \"0 1 2 3 \" == \"\
    0 1 2 3\"\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnd43a5n0.jl:16\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnd43a5n0.jl:14\\ntest set: Test Failed at /tmp/tmpnd43a5n0.jl:17\\\
    n  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\\n   Evaluated: \"\
    0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpnd43a5n0.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnd43a5n0.jl:14\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = string(s, \" \", i)\n    end\n  \
    \  return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb8r_ieic.jl:19\\n  Expression: candidate(0)\
    \ == \"0\"\\n   Evaluated: \" 0\" == \"0\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpb8r_ieic.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb8r_ieic.jl:18\\ntest set: Test Failed at /tmp/tmpb8r_ieic.jl:20\\\
    n  Expression: candidate(3) == \"0 1 2 3\"\\n   Evaluated: \" 0 1 2 3\" == \"\
    0 1 2 3\"\\nStacktrace:\\n [1] top-level scope at /tmp/tmpb8r_ieic.jl:20\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb8r_ieic.jl:18\\ntest set: Test Failed at /tmp/tmpb8r_ieic.jl:21\\\
    n  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\\n   Evaluated: \"\
    \ 0 1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7 8 9 10\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpb8r_ieic.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb8r_ieic.jl:18\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12uf6dc1.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp12uf6dc1.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12uf6dc1.jl:18\ntest set: Test Failed at /tmp/tmp12uf6dc1.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp12uf6dc1.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12uf6dc1.jl:18\ntest set: Test Failed at /tmp/tmp12uf6dc1.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp12uf6dc1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12uf6dc1.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12uf6dc1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_yc4jz_.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq_yc4jz_.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_yc4jz_.jl:18\ntest set: Test Failed at /tmp/tmpq_yc4jz_.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpq_yc4jz_.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_yc4jz_.jl:18\ntest set: Test Failed at /tmp/tmpq_yc4jz_.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq_yc4jz_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_yc4jz_.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_yc4jz_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpigm9nwd8.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpigm9nwd8.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigm9nwd8.jl:18\ntest set: Test Failed at /tmp/tmpigm9nwd8.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpigm9nwd8.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigm9nwd8.jl:18\ntest set: Test Failed at /tmp/tmpigm9nwd8.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpigm9nwd8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigm9nwd8.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpigm9nwd8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx02bngwu.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpx02bngwu.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx02bngwu.jl:18\ntest set: Test Failed at /tmp/tmpx02bngwu.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpx02bngwu.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx02bngwu.jl:18\ntest set: Test Failed at /tmp/tmpx02bngwu.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx02bngwu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx02bngwu.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx02bngwu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxa4nhmo9.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxa4nhmo9.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxa4nhmo9.jl:18\ntest set: Test Failed at /tmp/tmpxa4nhmo9.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpxa4nhmo9.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxa4nhmo9.jl:18\ntest set: Test Failed at /tmp/tmpxa4nhmo9.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxa4nhmo9.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxa4nhmo9.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxa4nhmo9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9aa_kh1k.jl:19\\n  Expression: candidate(0)\
    \ == \"0\"\\n   Evaluated: \"0 \" == \"0\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp9aa_kh1k.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9aa_kh1k.jl:18\\ntest set: Test Failed at /tmp/tmp9aa_kh1k.jl:20\\\
    n  Expression: candidate(3) == \"0 1 2 3\"\\n   Evaluated: \"0 1 2 3 \" == \"\
    0 1 2 3\"\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9aa_kh1k.jl:20\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9aa_kh1k.jl:18\\ntest set: Test Failed at /tmp/tmp9aa_kh1k.jl:21\\\
    n  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\\n   Evaluated: \"\
    0 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp9aa_kh1k.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9aa_kh1k.jl:18\\nTest Summary: | Fail  Total\\\
    ntest set      |    3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0znwfqdg.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0znwfqdg.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0znwfqdg.jl:18\ntest set: Test Failed at /tmp/tmp0znwfqdg.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp0znwfqdg.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0znwfqdg.jl:18\ntest set: Test Failed at /tmp/tmp0znwfqdg.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0znwfqdg.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0znwfqdg.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0znwfqdg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_r2ahyl.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpo_r2ahyl.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_r2ahyl.jl:18\ntest set: Test Failed at /tmp/tmpo_r2ahyl.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpo_r2ahyl.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_r2ahyl.jl:18\ntest set: Test Failed at /tmp/tmpo_r2ahyl.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpo_r2ahyl.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_r2ahyl.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_r2ahyl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyjibn8f.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcyjibn8f.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyjibn8f.jl:18\ntest set: Test Failed at /tmp/tmpcyjibn8f.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpcyjibn8f.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyjibn8f.jl:18\ntest set: Test Failed at /tmp/tmpcyjibn8f.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcyjibn8f.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyjibn8f.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyjibn8f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhwoep32.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjhwoep32.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhwoep32.jl:18\ntest set: Test Failed at /tmp/tmpjhwoep32.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpjhwoep32.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhwoep32.jl:18\ntest set: Test Failed at /tmp/tmpjhwoep32.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjhwoep32.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhwoep32.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhwoep32.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpva_mrx23.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpva_mrx23.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva_mrx23.jl:18\ntest set: Test Failed at /tmp/tmpva_mrx23.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpva_mrx23.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva_mrx23.jl:18\ntest set: Test Failed at /tmp/tmpva_mrx23.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpva_mrx23.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva_mrx23.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpva_mrx23.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05cvdkz0.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp05cvdkz0.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05cvdkz0.jl:18\ntest set: Test Failed at /tmp/tmp05cvdkz0.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp05cvdkz0.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05cvdkz0.jl:18\ntest set: Test Failed at /tmp/tmp05cvdkz0.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp05cvdkz0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05cvdkz0.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05cvdkz0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_e1w_ike.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_e1w_ike.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_e1w_ike.jl:18\ntest set: Test Failed at /tmp/tmp_e1w_ike.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp_e1w_ike.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_e1w_ike.jl:18\ntest set: Test Failed at /tmp/tmp_e1w_ike.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_e1w_ike.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_e1w_ike.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_e1w_ike.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp31fkc32c.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp31fkc32c.jl:15\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31fkc32c.jl:14\ntest set: Test Failed at /tmp/tmp31fkc32c.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp31fkc32c.jl:16\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31fkc32c.jl:14\ntest set: Test Failed at /tmp/tmp31fkc32c.jl:17\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp31fkc32c.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31fkc32c.jl:14\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31fkc32c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * i * \" \"\n    end\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc_0nxilu.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(0) == \"0\"\\n  MethodError: no method matching\
    \ *(::String, ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:529\\n    *(!Matched::Complex{Bool}, ::Real)\
    \ at complex.jl:309\\n    *(!Matched::Missing, ::Number) at missing.jl:115\\n\
    \    ...\\n  Stacktrace:\\n   [1] *(::String, ::Int64, ::String) at ./operators.jl:529\\\
    n   [2] string_sequence(::Int64) at /tmp/tmpc_0nxilu.jl:10\\n   [3] top-level\
    \ scope at /tmp/tmpc_0nxilu.jl:19\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpc_0nxilu.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpc_0nxilu.jl:20\\n  Test threw exception\\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\\n  MethodError: no method matching *(::String, ::Int64)\\n \
    \ Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\\n    *(!Matched::Complex{Bool}, ::Real) at complex.jl:309\\\
    n    *(!Matched::Missing, ::Number) at missing.jl:115\\n    ...\\n  Stacktrace:\\\
    n   [1] *(::String, ::Int64, ::String) at ./operators.jl:529\\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmpc_0nxilu.jl:10\\n   [3] top-level scope at /tmp/tmpc_0nxilu.jl:20\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpc_0nxilu.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpc_0nxilu.jl:21\\n  Test threw exception\\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\\n  MethodError: no method matching *(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    *(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\\n    *(!Matched::Complex{Bool}, ::Real) at complex.jl:309\\\
    n    *(!Matched::Missing, ::Number) at missing.jl:115\\n    ...\\n  Stacktrace:\\\
    n   [1] *(::String, ::Int64, ::String) at ./operators.jl:529\\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmpc_0nxilu.jl:10\\n   [3] top-level scope at /tmp/tmpc_0nxilu.jl:21\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpc_0nxilu.jl:18\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     3      3\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqe0u89q0.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqe0u89q0.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe0u89q0.jl:18\ntest set: Test Failed at /tmp/tmpqe0u89q0.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpqe0u89q0.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe0u89q0.jl:18\ntest set: Test Failed at /tmp/tmpqe0u89q0.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqe0u89q0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe0u89q0.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqe0u89q0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmrn38d6h.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmrn38d6h.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmrn38d6h.jl:18\ntest set: Test Failed at /tmp/tmpmrn38d6h.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpmrn38d6h.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmrn38d6h.jl:18\ntest set: Test Failed at /tmp/tmpmrn38d6h.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmrn38d6h.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmrn38d6h.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmrn38d6h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppqtol82s.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppqtol82s.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppqtol82s.jl:18\ntest set: Test Failed at /tmp/tmppqtol82s.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmppqtol82s.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppqtol82s.jl:18\ntest set: Test Failed at /tmp/tmppqtol82s.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppqtol82s.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppqtol82s.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqtol82s.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmp8yag_o.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmp8yag_o.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmp8yag_o.jl:18\ntest set: Test Failed at /tmp/tmpmp8yag_o.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpmp8yag_o.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmp8yag_o.jl:18\ntest set: Test Failed at /tmp/tmpmp8yag_o.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmp8yag_o.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmp8yag_o.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmp8yag_o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsmxwxs5x.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsmxwxs5x.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsmxwxs5x.jl:18\ntest set: Test Failed at /tmp/tmpsmxwxs5x.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpsmxwxs5x.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsmxwxs5x.jl:18\ntest set: Test Failed at /tmp/tmpsmxwxs5x.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsmxwxs5x.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsmxwxs5x.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmxwxs5x.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n),\" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join([\"$i \" for i in 0:n], \"\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa39hgeaz.jl:15\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpa39hgeaz.jl:15\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa39hgeaz.jl:14\ntest set: Test Failed at /tmp/tmpa39hgeaz.jl:16\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpa39hgeaz.jl:16\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa39hgeaz.jl:14\ntest set: Test Failed at /tmp/tmpa39hgeaz.jl:17\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpa39hgeaz.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa39hgeaz.jl:14\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa39hgeaz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwg66wi5a.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwg66wi5a.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwg66wi5a.jl:18\ntest set: Test Failed at /tmp/tmpwg66wi5a.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpwg66wi5a.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwg66wi5a.jl:18\ntest set: Test Failed at /tmp/tmpwg66wi5a.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwg66wi5a.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwg66wi5a.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwg66wi5a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwld7ih5.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnwld7ih5.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwld7ih5.jl:18\ntest set: Test Failed at /tmp/tmpnwld7ih5.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpnwld7ih5.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwld7ih5.jl:18\ntest set: Test Failed at /tmp/tmpnwld7ih5.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnwld7ih5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnwld7ih5.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwld7ih5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return \" \".join(string(i) for i in 0:n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5whvffeg.jl:15\n  Test threw exception\n\
    \  Expression: candidate(0) == \"0\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmp5whvffeg.jl:8\n   [3] top-level scope at /tmp/tmp5whvffeg.jl:15\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5whvffeg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5whvffeg.jl:16\n  Test threw exception\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n  type String has no field join\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64) at /tmp/tmp5whvffeg.jl:8\n\
    \   [3] top-level scope at /tmp/tmp5whvffeg.jl:16\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5whvffeg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5whvffeg.jl:17\n  Test threw exception\n  Expression: candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\"\n  type String has no field join\n  Stacktrace:\n\
    \   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2] string_sequence(::Int64)\
    \ at /tmp/tmp5whvffeg.jl:8\n   [3] top-level scope at /tmp/tmp5whvffeg.jl:17\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp5whvffeg.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5whvffeg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp51uavjef.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp51uavjef.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp51uavjef.jl:18\ntest set: Test Failed at /tmp/tmp51uavjef.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp51uavjef.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp51uavjef.jl:18\ntest set: Test Failed at /tmp/tmp51uavjef.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp51uavjef.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp51uavjef.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp51uavjef.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp05dvxmm_.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp05dvxmm_.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05dvxmm_.jl:18\ntest set: Test Failed at /tmp/tmp05dvxmm_.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmp05dvxmm_.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05dvxmm_.jl:18\ntest set: Test Failed at /tmp/tmp05dvxmm_.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp05dvxmm_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp05dvxmm_.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05dvxmm_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpok31x6cu.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpok31x6cu.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpok31x6cu.jl:18\ntest set: Test Failed at /tmp/tmpok31x6cu.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpok31x6cu.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpok31x6cu.jl:18\ntest set: Test Failed at /tmp/tmpok31x6cu.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpok31x6cu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpok31x6cu.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpok31x6cu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzz7cl_tc.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzz7cl_tc.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzz7cl_tc.jl:18\ntest set: Test Failed at /tmp/tmpzz7cl_tc.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpzz7cl_tc.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzz7cl_tc.jl:18\ntest set: Test Failed at /tmp/tmpzz7cl_tc.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzz7cl_tc.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzz7cl_tc.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzz7cl_tc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpchjctbv9.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpchjctbv9.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpchjctbv9.jl:18\ntest set: Test Failed at /tmp/tmpchjctbv9.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpchjctbv9.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpchjctbv9.jl:18\ntest set: Test Failed at /tmp/tmpchjctbv9.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpchjctbv9.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpchjctbv9.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpchjctbv9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ * \" \" * string(n)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1rcvk54.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpx1rcvk54.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx1rcvk54.jl:18\ntest set: Test Failed at /tmp/tmpx1rcvk54.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpx1rcvk54.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx1rcvk54.jl:18\ntest set: Test Failed at /tmp/tmpx1rcvk54.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx1rcvk54.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx1rcvk54.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1rcvk54.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgcl25elv.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgcl25elv.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgcl25elv.jl:18\ntest set: Test Failed at /tmp/tmpgcl25elv.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpgcl25elv.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgcl25elv.jl:18\ntest set: Test Failed at /tmp/tmpgcl25elv.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgcl25elv.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgcl25elv.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgcl25elv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    return join(string.(0:n), \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n\
    \    '0 1 2 3 4 5'\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    s = \"\"\n    for i in 0:n\n        s = s * string(i) * \" \"\n    end\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiv430emo.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"0 \" == \"0\"\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpiv430emo.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiv430emo.jl:18\ntest set: Test Failed at /tmp/tmpiv430emo.jl:20\n\
    \  Expression: candidate(3) == \"0 1 2 3\"\n   Evaluated: \"0 1 2 3 \" == \"0\
    \ 1 2 3\"\nStacktrace:\n [1] top-level scope at /tmp/tmpiv430emo.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiv430emo.jl:18\ntest set: Test Failed at /tmp/tmpiv430emo.jl:21\n\
    \  Expression: candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n   Evaluated: \"0\
    \ 1 2 3 4 5 6 7 8 9 10 \" == \"0 1 2 3 4 5 6 7 8 9 10\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiv430emo.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiv430emo.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiv430emo.jl:16\n"
  exit_code: 1
  status: SyntaxError
