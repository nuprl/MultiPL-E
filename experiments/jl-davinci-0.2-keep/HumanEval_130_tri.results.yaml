name: HumanEval_130_tri
language: julia
results:
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7xnedlzf.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7xnedlzf.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp7xnedlzf.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7xnedlzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7xnedlzf.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7xnedlzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp7xnedlzf.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7xnedlzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7xnedlzf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7xnedlzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp7xnedlzf.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7xnedlzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp7xnedlzf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp7xnedlzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp7xnedlzf.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7xnedlzf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6_pa3s4p.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6_pa3s4p.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp6_pa3s4p.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6_pa3s4p.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6_pa3s4p.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6_pa3s4p.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp6_pa3s4p.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6_pa3s4p.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6_pa3s4p.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6_pa3s4p.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp6_pa3s4p.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6_pa3s4p.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6_pa3s4p.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6_pa3s4p.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu_j8naxd.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpu_j8naxd.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpu_j8naxd.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_j8naxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpu_j8naxd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpu_j8naxd.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpu_j8naxd.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_j8naxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpu_j8naxd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpu_j8naxd.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpu_j8naxd.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu_j8naxd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpu_j8naxd.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpu_j8naxd.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpu_j8naxd.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_j8naxd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm0k2j3ga.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpm0k2j3ga.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpm0k2j3ga.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0k2j3ga.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpm0k2j3ga.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpm0k2j3ga.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpm0k2j3ga.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0k2j3ga.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpm0k2j3ga.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpm0k2j3ga.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpm0k2j3ga.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm0k2j3ga.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpm0k2j3ga.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpm0k2j3ga.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiax436v1.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiax436v1.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpiax436v1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiax436v1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpiax436v1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiax436v1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpiax436v1.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiax436v1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpiax436v1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiax436v1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpiax436v1.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiax436v1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpiax436v1.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpiax436v1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpiax436v1.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiax436v1.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8elqr9ke.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8elqr9ke.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp8elqr9ke.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8elqr9ke.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8elqr9ke.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8elqr9ke.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8elqr9ke.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8elqr9ke.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8elqr9ke.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8elqr9ke.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8elqr9ke.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8elqr9ke.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8elqr9ke.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8elqr9ke.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8elqr9ke.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8elqr9ke.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_seq = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(tri_seq,\
    \ div(i, 2))\n            else\n                push!(tri_seq, tri_seq[i - 1]\
    \ + tri_seq[i - 2] + tri_seq[i + 1])\n            end\n        end\n        return\
    \ tri_seq\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbbhtby3v.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbbhtby3v.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpbbhtby3v.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbhtby3v.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbbhtby3v.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbbhtby3v.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbbhtby3v.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbhtby3v.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbbhtby3v.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbbhtby3v.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbbhtby3v.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbbhtby3v.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbbhtby3v.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbbhtby3v.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbbhtby3v.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbhtby3v.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgv073r6j.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgv073r6j.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv073r6j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv073r6j.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgv073r6j.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv073r6j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv073r6j.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgv073r6j.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv073r6j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv073r6j.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgv073r6j.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv073r6j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv073r6j.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgv073r6j.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgv073r6j.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgv073r6j.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgv073r6j.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpad8bjbe8.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpad8bjbe8.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpad8bjbe8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad8bjbe8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpad8bjbe8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpad8bjbe8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpad8bjbe8.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad8bjbe8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpad8bjbe8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpad8bjbe8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpad8bjbe8.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpad8bjbe8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpad8bjbe8.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpad8bjbe8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpad8bjbe8.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad8bjbe8.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq6tt5c0s.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq6tt5c0s.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpq6tt5c0s.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6tt5c0s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq6tt5c0s.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq6tt5c0s.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq6tt5c0s.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6tt5c0s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq6tt5c0s.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq6tt5c0s.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq6tt5c0s.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6tt5c0s.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq6tt5c0s.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq6tt5c0s.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq6tt5c0s.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6tt5c0s.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy27a5ybl.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy27a5ybl.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpy27a5ybl.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy27a5ybl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy27a5ybl.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy27a5ybl.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpy27a5ybl.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy27a5ybl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy27a5ybl.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy27a5ybl.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpy27a5ybl.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy27a5ybl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy27a5ybl.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy27a5ybl.jl:"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpy27a5ybl.jl:38\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8dss_dj8.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8dss_dj8.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp8dss_dj8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dss_dj8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8dss_dj8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8dss_dj8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8dss_dj8.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dss_dj8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8dss_dj8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8dss_dj8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8dss_dj8.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8dss_dj8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp8dss_dj8.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp8dss_dj8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp8dss_dj8.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8dss_dj8.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp07_8obvy.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp07_8obvy.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07_8obvy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp07_8obvy.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp07_8obvy.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07_8obvy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp07_8obvy.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp07_8obvy.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07_8obvy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp07_8obvy.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp07_8obvy.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07_8obvy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp07_8obvy.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp07_8obvy.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07_8obvy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp07_8obvy.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp07_8obvy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu5hlygvx.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpu5hlygvx.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpu5hlygvx.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu5hlygvx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpu5hlygvx.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpu5hlygvx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpu5hlygvx.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu5hlygvx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpu5hlygvx.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpu5hlygvx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpu5hlygvx.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu5hlygvx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpu5hlygvx.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpu5hlygvx.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkx2fj71q.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkx2fj71q.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpkx2fj71q.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkx2fj71q.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkx2fj71q.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkx2fj71q.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkx2fj71q.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkx2fj71q.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkx2fj71q.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkx2fj71q.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkx2fj71q.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkx2fj71q.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkx2fj71q.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkx2fj71q.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ec6utrf.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_ec6utrf.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ec6utrf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_ec6utrf.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_ec6utrf.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ec6utrf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_ec6utrf.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_ec6utrf.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ec6utrf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_ec6utrf.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_ec6utrf.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ec6utrf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_ec6utrf.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_ec6utrf.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ec6utrf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp_ec6utrf.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ec6utrf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj9gi4e_0.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpj9gi4e_0.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpj9gi4e_0.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj9gi4e_0.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpj9gi4e_0.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpj9gi4e_0.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpj9gi4e_0.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj9gi4e_0.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpj9gi4e_0.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpj9gi4e_0.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpj9gi4e_0.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj9gi4e_0.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpj9gi4e_0.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpj9gi4e_0.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ishz7a1.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7ishz7a1.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ishz7a1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7ishz7a1.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7ishz7a1.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ishz7a1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7ishz7a1.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7ishz7a1.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ishz7a1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7ishz7a1.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7ishz7a1.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ishz7a1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7ishz7a1.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7ishz7a1.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ishz7a1.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp7ishz7a1.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ishz7a1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgwv3x3wt.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgwv3x3wt.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpgwv3x3wt.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwv3x3wt.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgwv3x3wt.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgwv3x3wt.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgwv3x3wt.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwv3x3wt.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgwv3x3wt.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgwv3x3wt.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgwv3x3wt.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgwv3x3wt.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgwv3x3wt.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgwv3x3wt.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgwv3x3wt.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwv3x3wt.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgijmfjsx.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgijmfjsx.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgijmfjsx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgijmfjsx.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgijmfjsx.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgijmfjsx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgijmfjsx.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgijmfjsx.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgijmfjsx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgijmfjsx.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgijmfjsx.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgijmfjsx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgijmfjsx.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgijmfjsx.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgijmfjsx.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgijmfjsx.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgijmfjsx.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp61hbaurl.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp61hbaurl.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp61hbaurl.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp61hbaurl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp61hbaurl.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp61hbaurl.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp61hbaurl.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp61hbaurl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp61hbaurl.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp61hbaurl.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp61hbaurl.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp61hbaurl.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp61hbaurl.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp61hbaurl.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwgz5wk07.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpwgz5wk07.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpwgz5wk07.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwgz5wk07.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpwgz5wk07.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpwgz5wk07.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpwgz5wk07.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwgz5wk07.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpwgz5wk07.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpwgz5wk07.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpwgz5wk07.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwgz5wk07.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpwgz5wk07.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpwgz5wk07.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1pv0lhq6.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1pv0lhq6.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1pv0lhq6.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1pv0lhq6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1pv0lhq6.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1pv0lhq6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1pv0lhq6.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1pv0lhq6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1pv0lhq6.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1pv0lhq6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1pv0lhq6.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1pv0lhq6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1pv0lhq6.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1pv0lhq6.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9jwk5uvj.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp9jwk5uvj.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp9jwk5uvj.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9jwk5uvj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp9jwk5uvj.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp9jwk5uvj.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp9jwk5uvj.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9jwk5uvj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp9jwk5uvj.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp9jwk5uvj.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp9jwk5uvj.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9jwk5uvj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp9jwk5uvj.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp9jwk5uvj.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz6idpvvi.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz6idpvvi.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpz6idpvvi.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6idpvvi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz6idpvvi.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz6idpvvi.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz6idpvvi.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6idpvvi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz6idpvvi.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz6idpvvi.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz6idpvvi.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6idpvvi.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz6idpvvi.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz6idpvvi.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz6idpvvi.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6idpvvi.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpowy8qsp6.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpowy8qsp6.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowy8qsp6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpowy8qsp6.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpowy8qsp6.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowy8qsp6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpowy8qsp6.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpowy8qsp6.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowy8qsp6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpowy8qsp6.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpowy8qsp6.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowy8qsp6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpowy8qsp6.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpowy8qsp6.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpowy8qsp6.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpowy8qsp6.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowy8qsp6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuzt6lvsu.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuzt6lvsu.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpuzt6lvsu.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzt6lvsu.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuzt6lvsu.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuzt6lvsu.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuzt6lvsu.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzt6lvsu.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuzt6lvsu.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuzt6lvsu.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuzt6lvsu.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuzt6lvsu.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuzt6lvsu.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuzt6lvsu.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuzt6lvsu.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzt6lvsu.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdmc_28xj.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdmc_28xj.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpdmc_28xj.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdmc_28xj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdmc_28xj.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdmc_28xj.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpdmc_28xj.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdmc_28xj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdmc_28xj.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdmc_28xj.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpdmc_28xj.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdmc_28xj.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdmc_28xj.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdmc_28xj.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_r0o3yz9.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_r0o3yz9.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_r0o3yz9.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r0o3yz9.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_r0o3yz9.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_r0o3yz9.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_r0o3yz9.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r0o3yz9.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_r0o3yz9.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_r0o3yz9.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_r0o3yz9.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_r0o3yz9.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_r0o3yz9.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_r0o3yz9.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3xd6dd1s.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp3xd6dd1s.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp3xd6dd1s.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3xd6dd1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp3xd6dd1s.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp3xd6dd1s.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp3xd6dd1s.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3xd6dd1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp3xd6dd1s.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp3xd6dd1s.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp3xd6dd1s.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3xd6dd1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp3xd6dd1s.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp3xd6dd1s.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmk2bbakk.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmk2bbakk.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpmk2bbakk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk2bbakk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmk2bbakk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmk2bbakk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmk2bbakk.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk2bbakk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmk2bbakk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmk2bbakk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmk2bbakk.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk2bbakk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmk2bbakk.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmk2bbakk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmk2bbakk.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk2bbakk.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgmdaqswk.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgmdaqswk.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpgmdaqswk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdaqswk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgmdaqswk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgmdaqswk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgmdaqswk.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdaqswk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgmdaqswk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgmdaqswk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgmdaqswk.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgmdaqswk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgmdaqswk.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgmdaqswk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgmdaqswk.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmdaqswk.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpglja98dz.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpglja98dz.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpglja98dz.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglja98dz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpglja98dz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpglja98dz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpglja98dz.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglja98dz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpglja98dz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpglja98dz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpglja98dz.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpglja98dz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpglja98dz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpglja98dz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpglja98dz.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglja98dz.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5bkahp65.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5bkahp65.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp5bkahp65.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5bkahp65.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5bkahp65.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5bkahp65.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5bkahp65.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5bkahp65.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5bkahp65.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5bkahp65.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5bkahp65.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5bkahp65.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5bkahp65.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5bkahp65.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5bkahp65.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5bkahp65.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaw9qgz_a.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaw9qgz_a.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpaw9qgz_a.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaw9qgz_a.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpaw9qgz_a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaw9qgz_a.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpaw9qgz_a.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaw9qgz_a.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpaw9qgz_a.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaw9qgz_a.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpaw9qgz_a.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaw9qgz_a.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpaw9qgz_a.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpaw9qgz_a.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpaw9qgz_a.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaw9qgz_a.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp8vbfjru.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpp8vbfjru.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpp8vbfjru.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp8vbfjru.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpp8vbfjru.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpp8vbfjru.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpp8vbfjru.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp8vbfjru.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpp8vbfjru.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpp8vbfjru.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpp8vbfjru.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpp8vbfjru.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpp8vbfjru.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpp8vbfjru.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(v,\
    \ 1 + i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] +\
    \ v[i + 1])\n            end\n        end\n        return v\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdz2nekru.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdz2nekru.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpdz2nekru.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdz2nekru.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdz2nekru.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdz2nekru.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdz2nekru.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdz2nekru.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdz2nekru.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdz2nekru.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdz2nekru.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdz2nekru.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdz2nekru.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdz2nekru.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdz2nekru.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdz2nekru.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps15ciu8i.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmps15ciu8i.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps15ciu8i.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps15ciu8i.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps15ciu8i.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps15ciu8i.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps15ciu8i.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps15ciu8i.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps15ciu8i.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps15ciu8i.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps15ciu8i.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps15ciu8i.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps15ciu8i.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps15ciu8i.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps15ciu8i.jl:32\ntest set: Test\
    \ Failed at /tmp/tmps15ciu8i.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps15ciu8i.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0ors1u_y.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0ors1u_y.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmp0ors1u_y.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ors1u_y.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0ors1u_y.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0ors1u_y.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0ors1u_y.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ors1u_y.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0ors1u_y.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0ors1u_y.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0ors1u_y.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ors1u_y.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0ors1u_y.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0ors1u_y.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0ors1u_y.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ors1u_y.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[i] + tri(n - 2)[i] + tri(n - 3)[i] for i in 3:n]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp988xnvs5.jl:33\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 2-element Vector{Int64} at index [3]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] #1\n     @ ./none:0 [inlined]\n   [3] iterate\n\
    \     @ ./generator.jl:47 [inlined]\n   [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\n     @ Base ./array.jl:681\n   [5] tri(n::Int64)\n   \
    \  @ Main /tmp/tmp988xnvs5.jl:25\n   [6] macro expansion\n     @ /tmp/tmp988xnvs5.jl:33\
    \ [inlined]\n   [7] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp988xnvs5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp988xnvs5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:805\
    \ [inlined]\n    [2] #1\n      @ ./none:0 [inlined]\n    [3] iterate\n      @\
    \ ./generator.jl:47 [inlined]\n    [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\n      @ Base ./array.jl:681\n    [5] tri(n::Int64)\n \
    \     @ Main /tmp/tmp988xnvs5.jl:25\n    [6] #1\n      @ ./none:0 [inlined]\n\
    \    [7] iterate\n      @ ./generator.jl:47 [inlined]\n    [8] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\n      @ Base ./array.jl:681\n    [9] tri(n::Int64)\n \
    \     @ Main /tmp/tmp988xnvs5.jl:25\n   [10] macro expansion\n      @ /tmp/tmp988xnvs5.jl:34\
    \ [inlined]\n   [11] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmp988xnvs5.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp988xnvs5.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\n  Stacktrace:\n    [1] getindex\n      @ ./array.jl:805\
    \ [inlined]\n    [2] #1\n      @ ./none:0 [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp988xnvs5.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo6sxg6ww.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo6sxg6ww.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpo6sxg6ww.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6sxg6ww.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpo6sxg6ww.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo6sxg6ww.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpo6sxg6ww.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6sxg6ww.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpo6sxg6ww.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo6sxg6ww.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpo6sxg6ww.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo6sxg6ww.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpo6sxg6ww.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpo6sxg6ww.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[end] + tri(n - 2)[end] + tri(n + 1)[end] for n in 3:n]\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2d1s8w4y.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  StackOverflowError:\\\
    n  Stacktrace:\\n       [1] Array\\n         @ ./boot.jl:448 [inlined]\\n    \
    \   [2] Array\\n         @ ./boot.jl:457 [inlined]\\n       [3] similar\\n   \
    \      @ ./abstractarray.jl:785 [inlined]\\n       [4] similar\\n         @ ./abstractarray.jl:784\
    \ [inlined]\\n       [5] _array_for\\n         @ ./array.jl:672 [inlined]\\n \
    \      [6] _array_for\\n         @ ./array.jl:670 [inlined]\\n       [7] vect\\\
    n         @ ./array.jl:108 [inlined]\\n       [8] tri(n::Int64)\\n         @ Main\
    \ /tmp/tmp2d1s8w4y.jl:23\\n       [9] #1\\n         @ ./none:0 [inlined]\\n  \
    \    [10] iterate\\n         @ ./generator.jl:47 [inlined]\\n      [11] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\\n         @ Base ./array.jl:681\\n      [12] tri(n::Int64)\\\
    n         @ Main /tmp/tmp2d1s8w4y.jl:25\\n  --- the last 4 lines are repeated\
    \ 21799 more times ---\\n   [87209] macro expansion\\n         @ /tmp/tmp2d1s8w4y.jl:33\
    \ [inlined]\\n   [87210] macro expansion\\n         @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcp5r_hny.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcp5r_hny.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpcp5r_hny.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcp5r_hny.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcp5r_hny.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcp5r_hny.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpcp5r_hny.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcp5r_hny.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcp5r_hny.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcp5r_hny.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpcp5r_hny.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcp5r_hny.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcp5r_hny.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcp5r_hny.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = tri(n - 1)\n\
    \        if n % 2 == 0\n            return vcat(x, 1 + n / 2)\n        else\n\
    \            return vcat(x, x[end] + x[end - 1] + x[end - 2])\n        end\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvy0lmdh_.jl:38\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvy0lmdh_.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy0lmdh_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvy0lmdh_.jl:39\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvy0lmdh_.jl:39 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy0lmdh_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvy0lmdh_.jl:40\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvy0lmdh_.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy0lmdh_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvy0lmdh_.jl:41\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvy0lmdh_.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy0lmdh_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvy0lmdh_.jl:42\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4, 18] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvy0lmdh_.jl:42 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvy0lmdh_.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpvy0"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvy0lmdh_.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptiknmaf3.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiknmaf3.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmptiknmaf3.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptiknmaf3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptiknmaf3.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiknmaf3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptiknmaf3.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptiknmaf3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptiknmaf3.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiknmaf3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptiknmaf3.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptiknmaf3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptiknmaf3.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptiknmaf3.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5avfpx4r.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5avfpx4r.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp5avfpx4r.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5avfpx4r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp5avfpx4r.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5avfpx4r.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp5avfpx4r.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5avfpx4r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp5avfpx4r.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5avfpx4r.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp5avfpx4r.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5avfpx4r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp5avfpx4r.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp5avfpx4r.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe6f4m9co.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpe6f4m9co.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpe6f4m9co.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe6f4m9co.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpe6f4m9co.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpe6f4m9co.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpe6f4m9co.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe6f4m9co.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpe6f4m9co.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpe6f4m9co.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpe6f4m9co.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe6f4m9co.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpe6f4m9co.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpe6f4m9co.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_bnmxa7r.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_bnmxa7r.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_bnmxa7r.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_bnmxa7r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_bnmxa7r.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_bnmxa7r.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_bnmxa7r.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_bnmxa7r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_bnmxa7r.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_bnmxa7r.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_bnmxa7r.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_bnmxa7r.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_bnmxa7r.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_bnmxa7r.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa9m7gzxt.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpa9m7gzxt.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpa9m7gzxt.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa9m7gzxt.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpa9m7gzxt.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpa9m7gzxt.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpa9m7gzxt.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa9m7gzxt.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpa9m7gzxt.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpa9m7gzxt.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpa9m7gzxt.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpa9m7gzxt.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpa9m7gzxt.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpa9m7gzxt.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphk3yvzji.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphk3yvzji.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmphk3yvzji.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk3yvzji.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphk3yvzji.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphk3yvzji.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphk3yvzji.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk3yvzji.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphk3yvzji.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphk3yvzji.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphk3yvzji.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphk3yvzji.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphk3yvzji.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphk3yvzji.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphk3yvzji.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphk3yvzji.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqv0e64fy.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqv0e64fy.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpqv0e64fy.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqv0e64fy.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqv0e64fy.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqv0e64fy.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqv0e64fy.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqv0e64fy.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqv0e64fy.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqv0e64fy.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqv0e64fy.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqv0e64fy.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqv0e64fy.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqv0e64fy.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqv0e64fy.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv0e64fy.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdvkqsvh0.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdvkqsvh0.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpdvkqsvh0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvkqsvh0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdvkqsvh0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdvkqsvh0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdvkqsvh0.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvkqsvh0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdvkqsvh0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdvkqsvh0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdvkqsvh0.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdvkqsvh0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdvkqsvh0.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdvkqsvh0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdvkqsvh0.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvkqsvh0.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw1gf40r5.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw1gf40r5.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpw1gf40r5.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1gf40r5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpw1gf40r5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw1gf40r5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpw1gf40r5.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1gf40r5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpw1gf40r5.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw1gf40r5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpw1gf40r5.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw1gf40r5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpw1gf40r5.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpw1gf40r5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpw1gf40r5.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1gf40r5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi1njfvbc.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpi1njfvbc.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpi1njfvbc.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi1njfvbc.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpi1njfvbc.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpi1njfvbc.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpi1njfvbc.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi1njfvbc.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpi1njfvbc.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpi1njfvbc.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpi1njfvbc.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpi1njfvbc.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpi1njfvbc.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpi1njfvbc.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuorrvlni.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuorrvlni.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpuorrvlni.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuorrvlni.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuorrvlni.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuorrvlni.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuorrvlni.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuorrvlni.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuorrvlni.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuorrvlni.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuorrvlni.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuorrvlni.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuorrvlni.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuorrvlni.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuorrvlni.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuorrvlni.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i] + x[i - 1] + x[i + 1])\n\
    \            end\n        end\n        return x\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp30wjtend.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp30wjtend.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp30wjtend.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30wjtend.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp30wjtend.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp30wjtend.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp30wjtend.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30wjtend.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp30wjtend.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp30wjtend.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp30wjtend.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp30wjtend.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp30wjtend.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp30wjtend.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp30wjtend.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30wjtend.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpptfp7s8q.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpptfp7s8q.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpptfp7s8q.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptfp7s8q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpptfp7s8q.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpptfp7s8q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpptfp7s8q.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptfp7s8q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpptfp7s8q.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpptfp7s8q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpptfp7s8q.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpptfp7s8q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpptfp7s8q.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpptfp7s8q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpptfp7s8q.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpptfp7s8q.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(tri(n),\
    \ 1 + i / 2)\n            else\n                push!(tri(n), tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1))\n            end\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_pfefmzh.jl:40\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_pfefmzh.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pfefmzh.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_pfefmzh.jl:41\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_pfefmzh.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pfefmzh.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_pfefmzh.jl:42\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_pfefmzh.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pfefmzh.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_pfefmzh.jl:43\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_pfefmzh.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pfefmzh.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_pfefmzh.jl:44\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_pfefmzh.jl:44 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_pfefmzh.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp_pfefmzh.jl:45\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_pfefmzh.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0kxpqvjs.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0kxpqvjs.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmp0kxpqvjs.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kxpqvjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0kxpqvjs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0kxpqvjs.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0kxpqvjs.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kxpqvjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0kxpqvjs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0kxpqvjs.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0kxpqvjs.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0kxpqvjs.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp0kxpqvjs.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp0kxpqvjs.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp0kxpqvjs.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0kxpqvjs.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        tri_seq = [1, 3, 2, 8]\n        for i in 4:n\n\
    \            if i % 2 == 0\n                push!(tri_seq, 1 + i / 2)\n      \
    \      else\n                push!(tri_seq, tri_seq[i - 1] + tri_seq[i - 2] +\
    \ tri_seq[i + 1])\n            end\n        end\n        return tri_seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxe9xowut.jl:45\\n  Test threw\
    \ exception\\n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError:\
    \ attempt to access 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n  \
    \ [1] getindex\\n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n   \
    \  @ Main /tmp/tmpxe9xowut.jl:32\\n   [3] macro expansion\\n     @ /tmp/tmpxe9xowut.jl:45\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxe9xowut.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpxe9xowut.jl:46\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxe9xowut.jl:32\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpxe9xowut.jl:46 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxe9xowut.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpxe9xowut.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxe9xowut.jl:32\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxe9xowut.jl:47 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxe9xowut.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmpxe9xowut.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\\n  Stacktrace:\\n   [1] getindex\\n  \
    \   @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n    "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjvdq05lk.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjvdq05lk.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpjvdq05lk.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvdq05lk.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjvdq05lk.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjvdq05lk.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpjvdq05lk.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvdq05lk.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjvdq05lk.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjvdq05lk.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpjvdq05lk.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjvdq05lk.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpjvdq05lk.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpjvdq05lk.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_iwkqt32.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_iwkqt32.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_iwkqt32.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_iwkqt32.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_iwkqt32.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_iwkqt32.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_iwkqt32.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_iwkqt32.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_iwkqt32.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_iwkqt32.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp_iwkqt32.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_iwkqt32.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp_iwkqt32.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp_iwkqt32.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt6m4t34k.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpt6m4t34k.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpt6m4t34k.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt6m4t34k.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpt6m4t34k.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpt6m4t34k.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpt6m4t34k.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt6m4t34k.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpt6m4t34k.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpt6m4t34k.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpt6m4t34k.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpt6m4t34k.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpt6m4t34k.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpt6m4t34k.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv_at_p3f.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpv_at_p3f.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpv_at_p3f.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv_at_p3f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpv_at_p3f.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpv_at_p3f.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpv_at_p3f.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv_at_p3f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpv_at_p3f.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpv_at_p3f.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpv_at_p3f.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpv_at_p3f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpv_at_p3f.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpv_at_p3f.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3mofyrr3.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3mofyrr3.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp3mofyrr3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3mofyrr3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp3mofyrr3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3mofyrr3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp3mofyrr3.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3mofyrr3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp3mofyrr3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3mofyrr3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp3mofyrr3.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3mofyrr3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp3mofyrr3.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp3mofyrr3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp3mofyrr3.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mofyrr3.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1edesjf5.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1edesjf5.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1edesjf5.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1edesjf5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1edesjf5.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1edesjf5.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1edesjf5.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1edesjf5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1edesjf5.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1edesjf5.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1edesjf5.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1edesjf5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1edesjf5.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1edesjf5.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9r7u9b8w.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9r7u9b8w.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp9r7u9b8w.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9r7u9b8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9r7u9b8w.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9r7u9b8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9r7u9b8w.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9r7u9b8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9r7u9b8w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9r7u9b8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9r7u9b8w.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9r7u9b8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9r7u9b8w.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9r7u9b8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9r7u9b8w.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9r7u9b8w.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_vec = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(tri_vec,\
    \ 1 + i / 2)\n            else\n                push!(tri_vec, tri_vec[i] + tri_vec[i\
    \ - 1] + tri_vec[i + 1])\n            end\n        end\n        return tri_vec\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkoiq2lvo.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkoiq2lvo.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpkoiq2lvo.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoiq2lvo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkoiq2lvo.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkoiq2lvo.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkoiq2lvo.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoiq2lvo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkoiq2lvo.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkoiq2lvo.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkoiq2lvo.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkoiq2lvo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkoiq2lvo.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkoiq2lvo.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .* [1, 1, 1] .+ [0, 0, 1] .* [1, 3, 2] .+ [0, 1, 0] .* [1, 3, 2]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppkutzo6d.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 6, 4] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppkutzo6d.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkutzo6d.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppkutzo6d.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 6, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppkutzo6d.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkutzo6d.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppkutzo6d.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 6, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppkutzo6d.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkutzo6d.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppkutzo6d.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 6, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppkutzo6d.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkutzo6d.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppkutzo6d.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 6, 4] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppkutzo6d.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppkutzo6d.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppkutzo6d.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkutzo6d.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp73zzk7sa.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp73zzk7sa.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp73zzk7sa.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp73zzk7sa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp73zzk7sa.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp73zzk7sa.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp73zzk7sa.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp73zzk7sa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp73zzk7sa.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp73zzk7sa.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp73zzk7sa.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp73zzk7sa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp73zzk7sa.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp73zzk7sa.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1yflsrx2.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1yflsrx2.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp1yflsrx2.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yflsrx2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp1yflsrx2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1yflsrx2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp1yflsrx2.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yflsrx2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp1yflsrx2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1yflsrx2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp1yflsrx2.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1yflsrx2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp1yflsrx2.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp1yflsrx2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp1yflsrx2.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yflsrx2.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i] + x[i - 1] + x[i + 1])\n\
    \            end\n        end\n        return x\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6k13rkz.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6k13rkz.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpx6k13rkz.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6k13rkz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6k13rkz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6k13rkz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6k13rkz.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6k13rkz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6k13rkz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6k13rkz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6k13rkz.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6k13rkz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6k13rkz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6k13rkz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6k13rkz.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6k13rkz.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv39341v8.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpv39341v8.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv39341v8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv39341v8.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv39341v8.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv39341v8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv39341v8.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv39341v8.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv39341v8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv39341v8.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv39341v8.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv39341v8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv39341v8.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv39341v8.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv39341v8.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpv39341v8.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv39341v8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpze3v2ar6.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpze3v2ar6.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpze3v2ar6.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpze3v2ar6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpze3v2ar6.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpze3v2ar6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpze3v2ar6.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpze3v2ar6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpze3v2ar6.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpze3v2ar6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpze3v2ar6.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpze3v2ar6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpze3v2ar6.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpze3v2ar6.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        vec = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(vec, 1\
    \ + i / 2)\n            else\n                push!(vec, vec[i - 1] + vec[i -\
    \ 2] + vec[i + 1])\n            end\n        end\n        return vec\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyj7la6kv.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyj7la6kv.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpyj7la6kv.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyj7la6kv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyj7la6kv.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyj7la6kv.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyj7la6kv.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyj7la6kv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyj7la6kv.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyj7la6kv.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyj7la6kv.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyj7la6kv.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyj7la6kv.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyj7la6kv.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyj7la6kv.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj7la6kv.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp925rcr71.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp925rcr71.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp925rcr71.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp925rcr71.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp925rcr71.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp925rcr71.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp925rcr71.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp925rcr71.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp925rcr71.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp925rcr71.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp925rcr71.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp925rcr71.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp925rcr71.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp925rcr71.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp925rcr71.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp925rcr71.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    elseif n == 3\n        return\
    \ [1, 3, 2, 8]\n    else\n        a = [1, 3, 2, 8]\n        for i in 4:n\n   \
    \         if i % 2 == 0\n                push!(a, 1 + i / 2)\n            else\n\
    \                push!(a, a[i - 1] + a[i - 2] + a[i + 1])\n            end\n \
    \       end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9rbwbf7j.jl:45\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to\
    \ access 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9rbwbf7j.jl:32\n\
    \   [3] macro expansion\n     @ /tmp/tmp9rbwbf7j.jl:45 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rbwbf7j.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp9rbwbf7j.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 5-element\
    \ Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9rbwbf7j.jl:32\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9rbwbf7j.jl:46 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rbwbf7j.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp9rbwbf7j.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9rbwbf7j.jl:32\n\
    \   [3] macro expansion\n     @ /tmp/tmp9rbwbf7j.jl:47 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rbwbf7j.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp9rbwbf7j.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n  BoundsError: attempt to access\
    \ 5-element Vector{Int64} at index [6]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9rbwbf7j.jl:32\n\
    \   [3] macro expansion\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rbwbf7j.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplq_zgtom.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplq_zgtom.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmplq_zgtom.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplq_zgtom.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplq_zgtom.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplq_zgtom.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplq_zgtom.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplq_zgtom.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplq_zgtom.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplq_zgtom.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplq_zgtom.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplq_zgtom.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplq_zgtom.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplq_zgtom.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplq_zgtom.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplq_zgtom.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxs5rq1dj.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxs5rq1dj.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpxs5rq1dj.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxs5rq1dj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxs5rq1dj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxs5rq1dj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxs5rq1dj.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxs5rq1dj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxs5rq1dj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxs5rq1dj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxs5rq1dj.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxs5rq1dj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxs5rq1dj.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxs5rq1dj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxs5rq1dj.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxs5rq1dj.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwfgzf2ql.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwfgzf2ql.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpwfgzf2ql.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwfgzf2ql.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwfgzf2ql.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwfgzf2ql.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwfgzf2ql.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwfgzf2ql.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwfgzf2ql.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwfgzf2ql.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwfgzf2ql.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwfgzf2ql.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwfgzf2ql.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwfgzf2ql.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwfgzf2ql.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfgzf2ql.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgtkagucx.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgtkagucx.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpgtkagucx.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgtkagucx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpgtkagucx.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgtkagucx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpgtkagucx.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgtkagucx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpgtkagucx.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgtkagucx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpgtkagucx.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgtkagucx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpgtkagucx.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpgtkagucx.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnwua_u34.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnwua_u34.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpnwua_u34.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnwua_u34.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnwua_u34.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnwua_u34.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpnwua_u34.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnwua_u34.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnwua_u34.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnwua_u34.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpnwua_u34.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnwua_u34.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnwua_u34.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnwua_u34.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .* ones(n + 1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvxkl3zif.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 4\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmpvxkl3zif.jl:25\\n    [8] macro expansion\\n      @ /tmp/tmpvxkl3zif.jl:33\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpvxkl3zif.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpvxkl3zif.jl:34\\n  Test threw exception\\\
    n  Expression: candidate(4) == [1, 3, 2, 8, 3]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 3 and\
    \ 5\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmpvxkl3zif.jl:25\\n    [8] macro expansion\\n      @ /tmp/tmpvxkl3zif.jl:34\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpvxkl3zif.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpvxkl3zif.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension wi"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpvxkl3zif.jl:30\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkm21rep3.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkm21rep3.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpkm21rep3.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkm21rep3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkm21rep3.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkm21rep3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkm21rep3.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkm21rep3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkm21rep3.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkm21rep3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpkm21rep3.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpkm21rep3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpkm21rep3.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpkm21rep3.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfypv9v1u.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfypv9v1u.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmpfypv9v1u.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfypv9v1u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfypv9v1u.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfypv9v1u.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpfypv9v1u.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfypv9v1u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfypv9v1u.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfypv9v1u.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpfypv9v1u.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfypv9v1u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpfypv9v1u.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpfypv9v1u.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpfypv9v1u.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfypv9v1u.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpglnk0awa.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpglnk0awa.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpglnk0awa.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpglnk0awa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpglnk0awa.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpglnk0awa.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpglnk0awa.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpglnk0awa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpglnk0awa.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpglnk0awa.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpglnk0awa.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpglnk0awa.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpglnk0awa.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpglnk0awa.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxi1wkroo.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxi1wkroo.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpxi1wkroo.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxi1wkroo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxi1wkroo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxi1wkroo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxi1wkroo.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxi1wkroo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxi1wkroo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxi1wkroo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxi1wkroo.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxi1wkroo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpxi1wkroo.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpxi1wkroo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpxi1wkroo.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxi1wkroo.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpusr47w1o.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpusr47w1o.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpusr47w1o.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpusr47w1o.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpusr47w1o.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpusr47w1o.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpusr47w1o.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpusr47w1o.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpusr47w1o.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpusr47w1o.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpusr47w1o.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpusr47w1o.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpusr47w1o.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpusr47w1o.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1asppb87.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1asppb87.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp1asppb87.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1asppb87.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1asppb87.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1asppb87.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1asppb87.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1asppb87.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1asppb87.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1asppb87.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1asppb87.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1asppb87.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp1asppb87.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp1asppb87.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnqljhn2.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwnqljhn2.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnqljhn2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwnqljhn2.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnqljhn2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnqljhn2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwnqljhn2.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwnqljhn2.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnqljhn2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwnqljhn2.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwnqljhn2.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnqljhn2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwnqljhn2.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwnqljhn2.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnqljhn2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpwnqljhn2.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnqljhn2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgz_1sc6f.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgz_1sc6f.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz_1sc6f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgz_1sc6f.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgz_1sc6f.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz_1sc6f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgz_1sc6f.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgz_1sc6f.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz_1sc6f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgz_1sc6f.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgz_1sc6f.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz_1sc6f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgz_1sc6f.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgz_1sc6f.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgz_1sc6f.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpgz_1sc6f.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz_1sc6f.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6y0a54vc.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6y0a54vc.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp6y0a54vc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6y0a54vc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6y0a54vc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6y0a54vc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6y0a54vc.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6y0a54vc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6y0a54vc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6y0a54vc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6y0a54vc.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6y0a54vc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6y0a54vc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6y0a54vc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6y0a54vc.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y0a54vc.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_vec = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(tri_vec,\
    \ 1 + i / 2)\n            else\n                push!(tri_vec, tri_vec[i] + tri_vec[i\
    \ - 1] + tri_vec[i + 1])\n            end\n        end\n        return tri_vec\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjl9rae75.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjl9rae75.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpjl9rae75.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjl9rae75.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjl9rae75.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjl9rae75.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpjl9rae75.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjl9rae75.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjl9rae75.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjl9rae75.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpjl9rae75.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjl9rae75.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpjl9rae75.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpjl9rae75.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpjl9rae75.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjl9rae75.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdnd258gr.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnd258gr.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpdnd258gr.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnd258gr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdnd258gr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnd258gr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdnd258gr.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnd258gr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdnd258gr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnd258gr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdnd258gr.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdnd258gr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdnd258gr.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdnd258gr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdnd258gr.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnd258gr.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1\
    \ + i / 2)\n            else\n                push!(tri, tri[i - 1] + tri[i -\
    \ 2] + tri[i + 1])\n            end\n        end\n        return tri\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ibl6c4m.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ibl6c4m.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp4ibl6c4m.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ibl6c4m.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ibl6c4m.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ibl6c4m.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ibl6c4m.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ibl6c4m.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ibl6c4m.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ibl6c4m.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ibl6c4m.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ibl6c4m.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ibl6c4m.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ibl6c4m.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ibl6c4m.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ibl6c4m.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpocuisg2e.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpocuisg2e.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpocuisg2e.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocuisg2e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpocuisg2e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpocuisg2e.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpocuisg2e.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocuisg2e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpocuisg2e.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpocuisg2e.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpocuisg2e.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpocuisg2e.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpocuisg2e.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpocuisg2e.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpocuisg2e.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpocuisg2e.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq73hn3ye.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpq73hn3ye.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpq73hn3ye.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq73hn3ye.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpq73hn3ye.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpq73hn3ye.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpq73hn3ye.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq73hn3ye.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpq73hn3ye.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpq73hn3ye.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpq73hn3ye.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq73hn3ye.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpq73hn3ye.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpq73hn3ye.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwl14wmwc.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwl14wmwc.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpwl14wmwc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl14wmwc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwl14wmwc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwl14wmwc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwl14wmwc.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl14wmwc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwl14wmwc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwl14wmwc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwl14wmwc.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl14wmwc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpwl14wmwc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpwl14wmwc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpwl14wmwc.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwl14wmwc.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk077ovfg.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpk077ovfg.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpk077ovfg.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk077ovfg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpk077ovfg.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpk077ovfg.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpk077ovfg.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk077ovfg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpk077ovfg.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpk077ovfg.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpk077ovfg.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpk077ovfg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpk077ovfg.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpk077ovfg.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8lb8frdx.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8lb8frdx.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp8lb8frdx.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8lb8frdx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp8lb8frdx.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8lb8frdx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp8lb8frdx.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8lb8frdx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp8lb8frdx.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8lb8frdx.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp8lb8frdx.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp8lb8frdx.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp8lb8frdx.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp8lb8frdx.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptfu3p_8v.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptfu3p_8v.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmptfu3p_8v.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptfu3p_8v.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptfu3p_8v.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptfu3p_8v.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptfu3p_8v.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptfu3p_8v.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptfu3p_8v.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptfu3p_8v.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptfu3p_8v.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptfu3p_8v.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptfu3p_8v.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptfu3p_8v.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmhz0q9p6.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmhz0q9p6.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpmhz0q9p6.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmhz0q9p6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmhz0q9p6.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmhz0q9p6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmhz0q9p6.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmhz0q9p6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmhz0q9p6.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmhz0q9p6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmhz0q9p6.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmhz0q9p6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmhz0q9p6.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmhz0q9p6.jl:"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6a0u4xv3.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6a0u4xv3.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp6a0u4xv3.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6a0u4xv3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6a0u4xv3.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6a0u4xv3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp6a0u4xv3.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6a0u4xv3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6a0u4xv3.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6a0u4xv3.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp6a0u4xv3.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp6a0u4xv3.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp6a0u4xv3.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp6a0u4xv3.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxmfh14as.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxmfh14as.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxmfh14as.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmfh14as.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpxmfh14as.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxmfh14as.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpxmfh14as.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmfh14as.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpxmfh14as.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxmfh14as.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpxmfh14as.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmfh14as.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpxmfh14as.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpxmfh14as.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqfygbbq7.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqfygbbq7.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpqfygbbq7.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqfygbbq7.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqfygbbq7.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqfygbbq7.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqfygbbq7.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqfygbbq7.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqfygbbq7.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqfygbbq7.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqfygbbq7.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqfygbbq7.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqfygbbq7.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqfygbbq7.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps28o9ew_.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps28o9ew_.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmps28o9ew_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps28o9ew_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps28o9ew_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps28o9ew_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps28o9ew_.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps28o9ew_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps28o9ew_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps28o9ew_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps28o9ew_.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps28o9ew_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps28o9ew_.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps28o9ew_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps28o9ew_.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps28o9ew_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuatt4qw1.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpuatt4qw1.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpuatt4qw1.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuatt4qw1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpuatt4qw1.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpuatt4qw1.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpuatt4qw1.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuatt4qw1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpuatt4qw1.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpuatt4qw1.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpuatt4qw1.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuatt4qw1.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpuatt4qw1.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpuatt4qw1.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        l = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(l, 1 +\
    \ i / 2)\n            else\n                push!(l, l[i - 1] + l[i - 2] + l[i\
    \ + 1])\n            end\n        end\n        return l\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2i6jad56.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp2i6jad56.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp2i6jad56.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2i6jad56.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp2i6jad56.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp2i6jad56.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp2i6jad56.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2i6jad56.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp2i6jad56.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp2i6jad56.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp2i6jad56.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2i6jad56.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp2i6jad56.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp2i6jad56.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl81gp3cc.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpl81gp3cc.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81gp3cc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl81gp3cc.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl81gp3cc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81gp3cc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl81gp3cc.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl81gp3cc.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81gp3cc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl81gp3cc.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl81gp3cc.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81gp3cc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl81gp3cc.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpl81gp3cc.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl81gp3cc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpl81gp3cc.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl81gp3cc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return [1]\n    elseif n == 1\n        return [1,\
    \ 3]\n    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3,\
    \ 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(v,\
    \ 1 + i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] +\
    \ v[i + 1])\n            end\n        end\n        return v\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqhzmyb2q.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqhzmyb2q.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpqhzmyb2q.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqhzmyb2q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqhzmyb2q.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqhzmyb2q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqhzmyb2q.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqhzmyb2q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqhzmyb2q.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqhzmyb2q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqhzmyb2q.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqhzmyb2q.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpqhzmyb2q.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpqhzmyb2q.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpqhzmyb2q.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhzmyb2q.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[i] + tri(n - 2)[i] + tri(n - 3)[i] for i in 3:n]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9_14bzs_.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [3]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] #1\\n     @ ./none:0 [inlined]\\n  \
    \ [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n     @ Base ./array.jl:681\\n   [5] tri(n::Int64)\\n\
    \     @ Main /tmp/tmp9_14bzs_.jl:25\\n   [6] macro expansion\\n     @ /tmp/tmp9_14bzs_.jl:33\
    \ [inlined]\\n   [7] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp9_14bzs_.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp9_14bzs_.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\\n  Stacktrace:\\n    [1] getindex\\n      @ ./array.jl:805\
    \ [inlined]\\n    [2] #1\\n      @ ./none:0 [inlined]\\n    [3] iterate\\n   \
    \   @ ./generator.jl:47 [inlined]\\n    [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n      @ Base ./array.jl:681\\n    [5] tri(n::Int64)\\\
    n      @ Main /tmp/tmp9_14bzs_.jl:25\\n    [6] #1\\n      @ ./none:0 [inlined]\\\
    n    [7] iterate\\n      @ ./generator.jl:47 [inlined]\\n    [8] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n      @ Base ./array.jl:681\\n    [9] tri(n::Int64)\\\
    n      @ Main /tmp/tmp9_14bzs_.jl:25\\n   [10] macro expansion\\n      @ /tmp/tmp9_14bzs_.jl:34\
    \ [inlined]\\n   [11] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level scope\\n      @ /tmp/tmp9_14bzs_.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp9_14bzs_.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to\
    \ access 2-element Vector{Int64} at index [3]\\n  Stacktrace:\\n    [1] getindex\\\
    n      @ ./ar"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx9nthxpf.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx9nthxpf.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpx9nthxpf.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9nthxpf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx9nthxpf.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx9nthxpf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx9nthxpf.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9nthxpf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx9nthxpf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx9nthxpf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx9nthxpf.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9nthxpf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx9nthxpf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx9nthxpf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx9nthxpf.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9nthxpf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphzuxko85.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzuxko85.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmphzuxko85.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzuxko85.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphzuxko85.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzuxko85.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphzuxko85.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzuxko85.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphzuxko85.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzuxko85.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphzuxko85.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzuxko85.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphzuxko85.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphzuxko85.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphzuxko85.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzuxko85.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnhkxu_pn.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnhkxu_pn.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpnhkxu_pn.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnhkxu_pn.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnhkxu_pn.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnhkxu_pn.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpnhkxu_pn.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnhkxu_pn.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnhkxu_pn.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnhkxu_pn.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpnhkxu_pn.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnhkxu_pn.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpnhkxu_pn.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpnhkxu_pn.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdr1r2k9w.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdr1r2k9w.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpdr1r2k9w.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdr1r2k9w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdr1r2k9w.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdr1r2k9w.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpdr1r2k9w.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdr1r2k9w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdr1r2k9w.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdr1r2k9w.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpdr1r2k9w.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdr1r2k9w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpdr1r2k9w.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpdr1r2k9w.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfwx9q9jo.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpfwx9q9jo.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpfwx9q9jo.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfwx9q9jo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpfwx9q9jo.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpfwx9q9jo.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpfwx9q9jo.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfwx9q9jo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpfwx9q9jo.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpfwx9q9jo.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpfwx9q9jo.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfwx9q9jo.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpfwx9q9jo.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpfwx9q9jo.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri_seq = [1,\
    \ 3, 2]\n        for i in 3:n\n            if i % 2 == 0\n                push!(tri_seq,\
    \ 1 + i / 2)\n            else\n                push!(tri_seq, tri_seq[i - 1]\
    \ + tri_seq[i - 2] + tri_seq[i + 1])\n            end\n        end\n        return\
    \ tri_seq\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkpujetwm.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkpujetwm.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpkpujetwm.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpujetwm.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkpujetwm.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkpujetwm.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkpujetwm.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpujetwm.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkpujetwm.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkpujetwm.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkpujetwm.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkpujetwm.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkpujetwm.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkpujetwm.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkpujetwm.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpujetwm.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdsku16yx.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdsku16yx.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpdsku16yx.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdsku16yx.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdsku16yx.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdsku16yx.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdsku16yx.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdsku16yx.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdsku16yx.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdsku16yx.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdsku16yx.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdsku16yx.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpdsku16yx.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpdsku16yx.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpdsku16yx.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdsku16yx.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa9tvb8ul.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa9tvb8ul.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpa9tvb8ul.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa9tvb8ul.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa9tvb8ul.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa9tvb8ul.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa9tvb8ul.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa9tvb8ul.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa9tvb8ul.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa9tvb8ul.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa9tvb8ul.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa9tvb8ul.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa9tvb8ul.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa9tvb8ul.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa9tvb8ul.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9tvb8ul.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6r0t6li.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6r0t6li.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpx6r0t6li.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6r0t6li.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6r0t6li.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6r0t6li.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6r0t6li.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6r0t6li.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6r0t6li.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6r0t6li.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6r0t6li.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6r0t6li.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6r0t6li.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6r0t6li.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6r0t6li.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6r0t6li.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5vv609h2.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5vv609h2.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp5vv609h2.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vv609h2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5vv609h2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5vv609h2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5vv609h2.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vv609h2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5vv609h2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5vv609h2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5vv609h2.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5vv609h2.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5vv609h2.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5vv609h2.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5vv609h2.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vv609h2.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvfb9a5m2.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvfb9a5m2.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfb9a5m2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvfb9a5m2.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvfb9a5m2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfb9a5m2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvfb9a5m2.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvfb9a5m2.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfb9a5m2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvfb9a5m2.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvfb9a5m2.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfb9a5m2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvfb9a5m2.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvfb9a5m2.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvfb9a5m2.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpvfb9a5m2.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvfb9a5m2.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ (i / 2))\n            else\n                push!(x, x[i - 1] + x[i - 2] + x[i\
    \ + 1])\n            end\n        end\n        return x\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7oeawrog.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7oeawrog.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp7oeawrog.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7oeawrog.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp7oeawrog.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7oeawrog.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp7oeawrog.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7oeawrog.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp7oeawrog.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7oeawrog.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp7oeawrog.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp7oeawrog.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp7oeawrog.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp7oeawrog.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg4726iqb.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpg4726iqb.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpg4726iqb.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4726iqb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpg4726iqb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpg4726iqb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpg4726iqb.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4726iqb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpg4726iqb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpg4726iqb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpg4726iqb.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg4726iqb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpg4726iqb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpg4726iqb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpg4726iqb.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4726iqb.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy8a4smy5.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy8a4smy5.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpy8a4smy5.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy8a4smy5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy8a4smy5.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy8a4smy5.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpy8a4smy5.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy8a4smy5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy8a4smy5.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy8a4smy5.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpy8a4smy5.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpy8a4smy5.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpy8a4smy5.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpy8a4smy5.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptnftw06m.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptnftw06m.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptnftw06m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptnftw06m.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptnftw06m.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptnftw06m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptnftw06m.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptnftw06m.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptnftw06m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptnftw06m.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptnftw06m.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptnftw06m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptnftw06m.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptnftw06m.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptnftw06m.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptnftw06m.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptnftw06m.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(tri, 1\
    \ + i / 2)\n            else\n                push!(tri, tri[i - 1] + tri[i -\
    \ 2] + tri[i + 1])\n            end\n        end\n        return tri\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsm8ub2qc.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsm8ub2qc.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpsm8ub2qc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsm8ub2qc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpsm8ub2qc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsm8ub2qc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpsm8ub2qc.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsm8ub2qc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpsm8ub2qc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsm8ub2qc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpsm8ub2qc.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsm8ub2qc.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpsm8ub2qc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpsm8ub2qc.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpsm8ub2qc.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsm8ub2qc.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi3ej9ap3.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpi3ej9ap3.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpi3ej9ap3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3ej9ap3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpi3ej9ap3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpi3ej9ap3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpi3ej9ap3.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3ej9ap3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpi3ej9ap3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpi3ej9ap3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpi3ej9ap3.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi3ej9ap3.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpi3ej9ap3.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpi3ej9ap3.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpi3ej9ap3.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3ej9ap3.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfykx5vu.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmfykx5vu.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmpmfykx5vu.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfykx5vu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmfykx5vu.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmfykx5vu.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmfykx5vu.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfykx5vu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmfykx5vu.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmfykx5vu.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmfykx5vu.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfykx5vu.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpmfykx5vu.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmfykx5vu.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmfykx5vu.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfykx5vu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzb6es_go.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzb6es_go.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpzb6es_go.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb6es_go.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzb6es_go.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzb6es_go.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzb6es_go.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb6es_go.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzb6es_go.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzb6es_go.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzb6es_go.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzb6es_go.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzb6es_go.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzb6es_go.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzb6es_go.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzb6es_go.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr_a7bf8w.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr_a7bf8w.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpr_a7bf8w.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_a7bf8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr_a7bf8w.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr_a7bf8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr_a7bf8w.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_a7bf8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr_a7bf8w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr_a7bf8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr_a7bf8w.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_a7bf8w.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr_a7bf8w.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr_a7bf8w.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr_a7bf8w.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_a7bf8w.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprimwwkcb.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprimwwkcb.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmprimwwkcb.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprimwwkcb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprimwwkcb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprimwwkcb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprimwwkcb.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprimwwkcb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprimwwkcb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprimwwkcb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprimwwkcb.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprimwwkcb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprimwwkcb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprimwwkcb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprimwwkcb.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprimwwkcb.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplo1357b5.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplo1357b5.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmplo1357b5.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo1357b5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplo1357b5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplo1357b5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplo1357b5.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo1357b5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplo1357b5.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplo1357b5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplo1357b5.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo1357b5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplo1357b5.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplo1357b5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplo1357b5.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo1357b5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8w_zmm2q.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8w_zmm2q.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8w_zmm2q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8w_zmm2q.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8w_zmm2q.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8w_zmm2q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8w_zmm2q.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8w_zmm2q.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8w_zmm2q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8w_zmm2q.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8w_zmm2q.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8w_zmm2q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8w_zmm2q.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8w_zmm2q.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8w_zmm2q.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp8w_zmm2q.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8w_zmm2q.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy1amn_9l.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy1amn_9l.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpy1amn_9l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1amn_9l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpy1amn_9l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy1amn_9l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpy1amn_9l.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1amn_9l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpy1amn_9l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy1amn_9l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpy1amn_9l.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1amn_9l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpy1amn_9l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpy1amn_9l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpy1amn_9l.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1amn_9l.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb4rn56t_.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpb4rn56t_.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpb4rn56t_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4rn56t_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpb4rn56t_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpb4rn56t_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpb4rn56t_.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4rn56t_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpb4rn56t_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpb4rn56t_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpb4rn56t_.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb4rn56t_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpb4rn56t_.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpb4rn56t_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpb4rn56t_.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4rn56t_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa0dz78h5.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa0dz78h5.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpa0dz78h5.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa0dz78h5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa0dz78h5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa0dz78h5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa0dz78h5.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa0dz78h5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa0dz78h5.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa0dz78h5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa0dz78h5.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa0dz78h5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpa0dz78h5.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpa0dz78h5.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpa0dz78h5.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0dz78h5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = 1\n      \
    \  b = 3\n        c = 2\n        d = a + b + c\n        v = [a, b, c, d]\n   \
    \     for i in 4:n\n            a = b\n            b = c\n            c = d\n\
    \            d = a + b + c\n            push!(v, d)\n        end\n        return\
    \ v\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphrgof9ul.jl:45\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphrgof9ul.jl:45 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrgof9ul.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphrgof9ul.jl:46\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphrgof9ul.jl:46 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrgof9ul.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphrgof9ul.jl:47\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphrgof9ul.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrgof9ul.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphrgof9ul.jl:48\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphrgof9ul.jl:48 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrgof9ul.jl:44\ntest set: Test\
    \ Failed at /tmp/tmphrgof9ul.jl:49\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36, 66] == [1, 3, 2, 8, 3,\
    \ 15, 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphrgof9ul.jl:49 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrgof9ul.jl:44\ntest set: Test\
    \ Failed at /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrgof9ul.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i] + a[i - 1] + a[i - 2])\n    \
    \    end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvb6hlsbw.jl:37\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvb6hlsbw.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvb6hlsbw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvb6hlsbw.jl:38\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvb6hlsbw.jl:38 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvb6hlsbw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvb6hlsbw.jl:39\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvb6hlsbw.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvb6hlsbw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvb6hlsbw.jl:40\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvb6hlsbw.jl:40 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvb6hlsbw.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpvb6hlsbw.jl:41\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 11, 19, 36, 66] == [1, 3, 2, 8, 3,\
    \ 15, 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvb6hlsbw.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvb6hlsbw.jl:36\ntest set: Test\
    \ Failed at /tmp/"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvb6hlsbw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp87k3v_i1.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp87k3v_i1.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp87k3v_i1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87k3v_i1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp87k3v_i1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp87k3v_i1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp87k3v_i1.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87k3v_i1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp87k3v_i1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp87k3v_i1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp87k3v_i1.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp87k3v_i1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp87k3v_i1.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp87k3v_i1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp87k3v_i1.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87k3v_i1.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp49jomgig.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp49jomgig.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp49jomgig.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49jomgig.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp49jomgig.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp49jomgig.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp49jomgig.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49jomgig.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp49jomgig.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp49jomgig.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp49jomgig.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp49jomgig.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp49jomgig.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp49jomgig.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp49jomgig.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49jomgig.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnb9xpcit.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnb9xpcit.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpnb9xpcit.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb9xpcit.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpnb9xpcit.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnb9xpcit.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpnb9xpcit.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb9xpcit.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpnb9xpcit.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnb9xpcit.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpnb9xpcit.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb9xpcit.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpnb9xpcit.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpnb9xpcit.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpnb9xpcit.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnb9xpcit.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4tos5dn8.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4tos5dn8.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp4tos5dn8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tos5dn8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4tos5dn8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4tos5dn8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4tos5dn8.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tos5dn8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4tos5dn8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4tos5dn8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4tos5dn8.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tos5dn8.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4tos5dn8.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4tos5dn8.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4tos5dn8.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tos5dn8.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyfbq8vny.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyfbq8vny.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpyfbq8vny.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfbq8vny.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyfbq8vny.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyfbq8vny.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyfbq8vny.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfbq8vny.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyfbq8vny.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyfbq8vny.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyfbq8vny.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyfbq8vny.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyfbq8vny.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyfbq8vny.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyfbq8vny.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyfbq8vny.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn2n1840f.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpn2n1840f.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpn2n1840f.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn2n1840f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpn2n1840f.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpn2n1840f.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpn2n1840f.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn2n1840f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpn2n1840f.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpn2n1840f.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpn2n1840f.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn2n1840f.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpn2n1840f.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpn2n1840f.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return vcat(tri(n\
    \ - 1), [tri(n - 1)[end] + tri(n - 2)[end] + tri(n - 3)[end]])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv6rldqtn.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpv6rldqtn.jl:33 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6rldqtn.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpv6rldqtn.jl:34\\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\\n   Evaluated: [1, 3, 2, 6, 11] == [1, 3, 2, 8, 3]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpv6rldqtn.jl:34 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6rldqtn.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpv6rldqtn.jl:35\\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\\n   Evaluated: [1, 3, 2, 6, 11, 19] == [1, 3, 2, 8, 3, 15]\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpv6rldqtn.jl:35 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6rldqtn.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpv6rldqtn.jl:36\\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36] == [1, 3, 2, 8, 3, 15, 4]\\\
    nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpv6rldqtn.jl:36 [inlined]\\\
    n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpv6rldqtn.jl:32\\ntest set: Test\
    \ Failed at /tmp/tmpv6rldqtn.jl:37\\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\\n   Evaluated: [1, 3, 2, 6, 11, 19, 36, 66] == [1, 3, 2, 8, 3,\
    \ 15, 4, 24]\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpv6rldqtn.jl:37\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq3omsgax.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq3omsgax.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpq3omsgax.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3omsgax.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq3omsgax.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq3omsgax.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq3omsgax.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3omsgax.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq3omsgax.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq3omsgax.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq3omsgax.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3omsgax.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpq3omsgax.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpq3omsgax.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpq3omsgax.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3omsgax.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(x, 1 +\
    \ i / 2)\n            else\n                push!(x, x[i] + x[i - 1] + x[i + 1])\n\
    \            end\n        end\n        return x\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp95rxq5a_.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp95rxq5a_.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp95rxq5a_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rxq5a_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp95rxq5a_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp95rxq5a_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp95rxq5a_.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rxq5a_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp95rxq5a_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp95rxq5a_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp95rxq5a_.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp95rxq5a_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp95rxq5a_.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp95rxq5a_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp95rxq5a_.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp95rxq5a_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvtek6_1l.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtek6_1l.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpvtek6_1l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtek6_1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvtek6_1l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtek6_1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpvtek6_1l.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtek6_1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvtek6_1l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtek6_1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpvtek6_1l.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvtek6_1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvtek6_1l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpvtek6_1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpvtek6_1l.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvtek6_1l.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        tri = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(tri, 1\
    \ + i / 2)\n            else\n                push!(tri, tri[i - 1] + tri[i -\
    \ 2] + tri[i + 1])\n            end\n        end\n        return tri\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5he6wv3g.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5he6wv3g.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp5he6wv3g.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5he6wv3g.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5he6wv3g.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5he6wv3g.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5he6wv3g.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5he6wv3g.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5he6wv3g.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5he6wv3g.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5he6wv3g.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5he6wv3g.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5he6wv3g.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5he6wv3g.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5he6wv3g.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5he6wv3g.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(v, v[i - 1] + v[i - 2] + v[i - 3])\n\
    \        end\n        return v\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr3a34syl.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr3a34syl.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmpr3a34syl.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3a34syl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr3a34syl.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr3a34syl.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr3a34syl.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3a34syl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr3a34syl.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr3a34syl.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr3a34syl.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr3a34syl.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr3a34syl.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr3a34syl.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr3a34syl.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3a34syl.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprjyy8hhf.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjyy8hhf.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmprjyy8hhf.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjyy8hhf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprjyy8hhf.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjyy8hhf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprjyy8hhf.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjyy8hhf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprjyy8hhf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjyy8hhf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprjyy8hhf.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprjyy8hhf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmprjyy8hhf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmprjyy8hhf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmprjyy8hhf.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjyy8hhf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ld5hi1t.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ld5hi1t.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp4ld5hi1t.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ld5hi1t.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ld5hi1t.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ld5hi1t.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ld5hi1t.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ld5hi1t.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ld5hi1t.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ld5hi1t.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ld5hi1t.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ld5hi1t.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp4ld5hi1t.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp4ld5hi1t.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp4ld5hi1t.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ld5hi1t.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuwue0ui1.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuwue0ui1.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpuwue0ui1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuwue0ui1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuwue0ui1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuwue0ui1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuwue0ui1.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuwue0ui1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuwue0ui1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuwue0ui1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuwue0ui1.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuwue0ui1.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpuwue0ui1.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpuwue0ui1.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpuwue0ui1.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuwue0ui1.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpufjp1wrk.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpufjp1wrk.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpufjp1wrk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpufjp1wrk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpufjp1wrk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpufjp1wrk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpufjp1wrk.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpufjp1wrk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpufjp1wrk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpufjp1wrk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpufjp1wrk.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpufjp1wrk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpufjp1wrk.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpufjp1wrk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpufjp1wrk.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufjp1wrk.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_y3nwmwk.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_y3nwmwk.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp_y3nwmwk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_y3nwmwk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_y3nwmwk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_y3nwmwk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_y3nwmwk.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_y3nwmwk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_y3nwmwk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_y3nwmwk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_y3nwmwk.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_y3nwmwk.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_y3nwmwk.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_y3nwmwk.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_y3nwmwk.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y3nwmwk.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        x = tri(n - 1)\n\
    \        if n % 2 == 0\n            push!(x, 1 + n / 2)\n        else\n      \
    \      push!(x, x[end] + x[end - 1] + x[end - 2])\n        end\n        return\
    \ x\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq2eox6xn.jl:39\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2, 6] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpq2eox6xn.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq2eox6xn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq2eox6xn.jl:40\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2, 6, 3] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq2eox6xn.jl:40 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq2eox6xn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq2eox6xn.jl:41\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2, 6, 3, 11] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq2eox6xn.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq2eox6xn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq2eox6xn.jl:42\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4] == [1, 3, 2, 8, 3, 15, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpq2eox6xn.jl:42 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq2eox6xn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq2eox6xn.jl:43\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2, 6, 3, 11, 4, 18] == [1, 3, 2, 8, 3, 15,\
    \ 4, 24]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq2eox6xn.jl:43 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq2eox6xn.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpq2e"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq2eox6xn.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphwahq7ps.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphwahq7ps.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmphwahq7ps.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwahq7ps.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphwahq7ps.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphwahq7ps.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphwahq7ps.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwahq7ps.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphwahq7ps.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphwahq7ps.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphwahq7ps.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphwahq7ps.jl:40\ntest set:\
    \ Error During Test at /tmp/tmphwahq7ps.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmphwahq7ps.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmphwahq7ps.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwahq7ps.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpba398mca.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpba398mca.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpba398mca.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba398mca.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpba398mca.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpba398mca.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpba398mca.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba398mca.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpba398mca.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpba398mca.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpba398mca.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpba398mca.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpba398mca.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpba398mca.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpba398mca.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba398mca.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyf9rusa9.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyf9rusa9.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpyf9rusa9.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf9rusa9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyf9rusa9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyf9rusa9.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyf9rusa9.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf9rusa9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyf9rusa9.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyf9rusa9.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyf9rusa9.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyf9rusa9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpyf9rusa9.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpyf9rusa9.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpyf9rusa9.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyf9rusa9.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmb_65l4z.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmb_65l4z.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpmb_65l4z.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmb_65l4z.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmb_65l4z.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmb_65l4z.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmb_65l4z.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmb_65l4z.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmb_65l4z.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmb_65l4z.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmb_65l4z.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmb_65l4z.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpmb_65l4z.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpmb_65l4z.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpmb_65l4z.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmb_65l4z.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[i] + tri(n - 2)[i] + tri(n - 3)[i] for i in 1:n - 2]\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe32209rj.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [4, 6, 5] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpe32209rj.jl:33 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpe32209rj.jl:32\\ntest set: Error\
    \ During Test at /tmp/tmpe32209rj.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  DimensionMismatch(\"arrays could not be\
    \ broadcast to a common size; got a dimension with lengths 3 and 2\")\\n  Stacktrace:\\\
    n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\n    [2] _bcs\\n      @\
    \ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\n      @ ./broadcast.jl:489\
    \ [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484 [inlined]\\n \
    \   [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n    [6] materialize\\\
    n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\n      @ Main /tmp/tmpe32209rj.jl:25\\\
    n    [8] macro expansion\\n      @ /tmp/tmpe32209rj.jl:34 [inlined]\\n    [9]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmpe32209rj.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpe32209rj.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 3 and\
    \ 2\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmpe32209rj.jl:25\\n    [8] #1\\n      @ ./none:0 [inlined]\\\
    n    [9] iterate\\n      @ ./generator.jl:4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptocpy4g4.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptocpy4g4.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmptocpy4g4.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptocpy4g4.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptocpy4g4.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptocpy4g4.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptocpy4g4.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptocpy4g4.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptocpy4g4.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptocpy4g4.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptocpy4g4.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptocpy4g4.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmptocpy4g4.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmptocpy4g4.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpshhx1wq4.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpshhx1wq4.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshhx1wq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpshhx1wq4.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpshhx1wq4.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshhx1wq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpshhx1wq4.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpshhx1wq4.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshhx1wq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpshhx1wq4.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpshhx1wq4.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshhx1wq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpshhx1wq4.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpshhx1wq4.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpshhx1wq4.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpshhx1wq4.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshhx1wq4.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmn2q6a1s.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmn2q6a1s.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpmn2q6a1s.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmn2q6a1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmn2q6a1s.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmn2q6a1s.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmn2q6a1s.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmn2q6a1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmn2q6a1s.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmn2q6a1s.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmn2q6a1s.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmn2q6a1s.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmn2q6a1s.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmn2q6a1s.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz_csdpzf.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz_csdpzf.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpz_csdpzf.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_csdpzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz_csdpzf.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz_csdpzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz_csdpzf.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_csdpzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz_csdpzf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz_csdpzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz_csdpzf.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz_csdpzf.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpz_csdpzf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpz_csdpzf.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpz_csdpzf.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_csdpzf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpydzxue1l.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpydzxue1l.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpydzxue1l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydzxue1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpydzxue1l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpydzxue1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpydzxue1l.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydzxue1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpydzxue1l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpydzxue1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpydzxue1l.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpydzxue1l.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpydzxue1l.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpydzxue1l.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpydzxue1l.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydzxue1l.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl_nvwnbr.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl_nvwnbr.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpl_nvwnbr.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nvwnbr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpl_nvwnbr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl_nvwnbr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpl_nvwnbr.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nvwnbr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpl_nvwnbr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl_nvwnbr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpl_nvwnbr.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl_nvwnbr.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpl_nvwnbr.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpl_nvwnbr.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpl_nvwnbr.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl_nvwnbr.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[end] + tri(n - 2)[end] + tri(n + 1)[end] for n in 3:n]\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoo26psn6.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  StackOverflowError:\\\
    n  Stacktrace:\\n       [1] Array\\n         @ ./boot.jl:448 [inlined]\\n    \
    \   [2] Array\\n         @ ./boot.jl:457 [inlined]\\n       [3] similar\\n   \
    \      @ ./abstractarray.jl:785 [inlined]\\n       [4] similar\\n         @ ./abstractarray.jl:784\
    \ [inlined]\\n       [5] _array_for\\n         @ ./array.jl:672 [inlined]\\n \
    \      [6] _array_for\\n         @ ./array.jl:670 [inlined]\\n       [7] vect\\\
    n         @ ./array.jl:108 [inlined]\\n       [8] tri(n::Int64)\\n         @ Main\
    \ /tmp/tmpoo26psn6.jl:23\\n       [9] #1\\n         @ ./none:0 [inlined]\\n  \
    \    [10] iterate\\n         @ ./generator.jl:47 [inlined]\\n      [11] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\\n         @ Base ./array.jl:681\\n      [12] tri(n::Int64)\\\
    n         @ Main /tmp/tmpoo26psn6.jl:25\\n  --- the last 4 lines are repeated\
    \ 21804 more times ---\\n   [87229] macro expansion\\n         @ /tmp/tmpoo26psn6.jl:33\
    \ [inlined]\\n   [87230] macro expansion\\n         @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            push!(a, a[i - 1] + a[i - 2] + a[i - 3])\n\
    \        end\n        return a\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp98p_5606.jl:37\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp98p_5606.jl:27\n\
    \   [3] macro expansion\n     @ /tmp/tmp98p_5606.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98p_5606.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp98p_5606.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp98p_5606.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp98p_5606.jl:38 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98p_5606.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp98p_5606.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp98p_5606.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp98p_5606.jl:39 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp98p_5606.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp98p_5606.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp98p_5606.jl:27\n   [3]\
    \ macro expansion\n     @ /tmp/tmp98p_5606.jl:40"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98p_5606.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[i] + tri(n - 2)[i] + tri(n - 3)[i] for i in 1:n - 2]\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp63deob0w.jl:33\\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\\n   Evaluated: [4, 6, 5] == [1, 3, 2, 8]\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmp63deob0w.jl:33 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp63deob0w.jl:32\\ntest set: Error\
    \ During Test at /tmp/tmp63deob0w.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  DimensionMismatch(\"arrays could not be\
    \ broadcast to a common size; got a dimension with lengths 3 and 2\")\\n  Stacktrace:\\\
    n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\n    [2] _bcs\\n      @\
    \ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\n      @ ./broadcast.jl:489\
    \ [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484 [inlined]\\n \
    \   [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n    [6] materialize\\\
    n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\n      @ Main /tmp/tmp63deob0w.jl:25\\\
    n    [8] macro expansion\\n      @ /tmp/tmp63deob0w.jl:34 [inlined]\\n    [9]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp63deob0w.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp63deob0w.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 3 and\
    \ 2\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmp63deob0w.jl:25\\n    [8] #1\\n      @ ./none:0 [inlined]\\\
    n    [9] iterate\\n      @ ./generator.jl:4"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcrst2xn2.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcrst2xn2.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpcrst2xn2.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcrst2xn2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcrst2xn2.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcrst2xn2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpcrst2xn2.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcrst2xn2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcrst2xn2.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcrst2xn2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpcrst2xn2.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcrst2xn2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpcrst2xn2.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpcrst2xn2.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmk_8ie_w.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmk_8ie_w.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpmk_8ie_w.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmk_8ie_w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmk_8ie_w.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmk_8ie_w.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmk_8ie_w.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmk_8ie_w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmk_8ie_w.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmk_8ie_w.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpmk_8ie_w.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpmk_8ie_w.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpmk_8ie_w.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpmk_8ie_w.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i] + a[i - 1] + a[i + 1])\n\
    \            end\n        end\n        return a\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6c694mau.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6c694mau.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp6c694mau.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6c694mau.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6c694mau.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6c694mau.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6c694mau.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6c694mau.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6c694mau.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6c694mau.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6c694mau.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6c694mau.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp6c694mau.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp6c694mau.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp6c694mau.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6c694mau.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptgrfqyvz.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptgrfqyvz.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmptgrfqyvz.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgrfqyvz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptgrfqyvz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptgrfqyvz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmptgrfqyvz.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgrfqyvz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptgrfqyvz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptgrfqyvz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmptgrfqyvz.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgrfqyvz.jl:40\ntest set:\
    \ Error During Test at /tmp/tmptgrfqyvz.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmptgrfqyvz.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmptgrfqyvz.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgrfqyvz.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .* vcat(ones(n - 2), [1, 1, 1])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7qrnj4_4.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  DimensionMismatch(\"\
    arrays could not be broadcast to a common size; got a dimension with lengths 3\
    \ and 4\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmp7qrnj4_4.jl:25\\n    [8] macro expansion\\n      @ /tmp/tmp7qrnj4_4.jl:33\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp7qrnj4_4.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp7qrnj4_4.jl:34\\n  Test threw exception\\\
    n  Expression: candidate(4) == [1, 3, 2, 8, 3]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension with lengths 3 and\
    \ 5\")\\n  Stacktrace:\\n    [1] _bcs1\\n      @ ./broadcast.jl:501 [inlined]\\\
    n    [2] _bcs\\n      @ ./broadcast.jl:495 [inlined]\\n    [3] broadcast_shape\\\
    n      @ ./broadcast.jl:489 [inlined]\\n    [4] combine_axes\\n      @ ./broadcast.jl:484\
    \ [inlined]\\n    [5] instantiate\\n      @ ./broadcast.jl:266 [inlined]\\n  \
    \  [6] materialize\\n      @ ./broadcast.jl:883 [inlined]\\n    [7] tri(n::Int64)\\\
    n      @ Main /tmp/tmp7qrnj4_4.jl:25\\n    [8] macro expansion\\n      @ /tmp/tmp7qrnj4_4.jl:34\
    \ [inlined]\\n    [9] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [10] top-level scope\\n      @ /tmp/tmp7qrnj4_4.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmp7qrnj4_4.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  DimensionMismatch(\"arrays\
    \ could not be broadcast to a common size; got a dimension wi"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .* [1, 1, 1] .+ [0, 0, 1] .* [1, 1, 1] .+ [0, 1, 1] .* [1, 1, 1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppcsrlgtb.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 4, 4] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppcsrlgtb.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcsrlgtb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppcsrlgtb.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 4, 4] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppcsrlgtb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcsrlgtb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppcsrlgtb.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 4, 4] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppcsrlgtb.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcsrlgtb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppcsrlgtb.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 4, 4] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppcsrlgtb.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcsrlgtb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppcsrlgtb.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 4, 4] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppcsrlgtb.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppcsrlgtb.jl:32\ntest set: Test\
    \ Failed at /tmp/tmppcsrlgtb.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppcsrlgtb.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2awodv_.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpn2awodv_.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpn2awodv_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2awodv_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpn2awodv_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpn2awodv_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpn2awodv_.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2awodv_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpn2awodv_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpn2awodv_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpn2awodv_.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn2awodv_.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpn2awodv_.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpn2awodv_.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpn2awodv_.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2awodv_.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcy86ei6d.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcy86ei6d.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpcy86ei6d.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy86ei6d.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpcy86ei6d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcy86ei6d.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpcy86ei6d.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy86ei6d.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpcy86ei6d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcy86ei6d.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpcy86ei6d.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy86ei6d.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpcy86ei6d.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpcy86ei6d.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpcy86ei6d.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy86ei6d.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpms261pi2.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpms261pi2.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpms261pi2.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpms261pi2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpms261pi2.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpms261pi2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpms261pi2.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpms261pi2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpms261pi2.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpms261pi2.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpms261pi2.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpms261pi2.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpms261pi2.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpms261pi2.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqj01sul6.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqj01sul6.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmpqj01sul6.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqj01sul6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqj01sul6.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqj01sul6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqj01sul6.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqj01sul6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqj01sul6.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqj01sul6.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqj01sul6.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqj01sul6.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmpqj01sul6.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmpqj01sul6.jl:"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_5eisvsl.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_5eisvsl.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp_5eisvsl.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5eisvsl.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5eisvsl.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_5eisvsl.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_5eisvsl.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5eisvsl.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5eisvsl.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_5eisvsl.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_5eisvsl.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_5eisvsl.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp_5eisvsl.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp_5eisvsl.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp_5eisvsl.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5eisvsl.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbisfgtbj.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbisfgtbj.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpbisfgtbj.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbisfgtbj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbisfgtbj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbisfgtbj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbisfgtbj.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbisfgtbj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbisfgtbj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbisfgtbj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbisfgtbj.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbisfgtbj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbisfgtbj.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbisfgtbj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbisfgtbj.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbisfgtbj.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk1bu9rpy.jl:33\n  Expression: candidate(3)\
    \ == [1, 3, 2, 8]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpk1bu9rpy.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1bu9rpy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk1bu9rpy.jl:34\n  Expression: candidate(4) == [1, 3, 2, 8,\
    \ 3]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk1bu9rpy.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1bu9rpy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk1bu9rpy.jl:35\n  Expression: candidate(5) == [1, 3, 2, 8,\
    \ 3, 15]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk1bu9rpy.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1bu9rpy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk1bu9rpy.jl:36\n  Expression: candidate(6) == [1, 3, 2, 8,\
    \ 3, 15, 4]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk1bu9rpy.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1bu9rpy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk1bu9rpy.jl:37\n  Expression: candidate(7) == [1, 3, 2, 8,\
    \ 3, 15, 4, 24]\n   Evaluated: [1, 3, 2] == [1, 3, 2, 8, 3, 15, 4, 24]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk1bu9rpy.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk1bu9rpy.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpk1bu9rpy.jl:38\n  Expression: candidate(8) == [1, 3, "
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1bu9rpy.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr491qt0p.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr491qt0p.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpr491qt0p.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr491qt0p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr491qt0p.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr491qt0p.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr491qt0p.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr491qt0p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr491qt0p.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr491qt0p.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr491qt0p.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr491qt0p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpr491qt0p.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpr491qt0p.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpr491qt0p.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr491qt0p.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps9aoartn.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps9aoartn.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmps9aoartn.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9aoartn.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps9aoartn.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps9aoartn.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps9aoartn.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9aoartn.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps9aoartn.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps9aoartn.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps9aoartn.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps9aoartn.jl:40\ntest set:\
    \ Error During Test at /tmp/tmps9aoartn.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmps9aoartn.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmps9aoartn.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9aoartn.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbstkzvv0.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbstkzvv0.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpbstkzvv0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbstkzvv0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbstkzvv0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbstkzvv0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbstkzvv0.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbstkzvv0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbstkzvv0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbstkzvv0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbstkzvv0.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbstkzvv0.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpbstkzvv0.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpbstkzvv0.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpbstkzvv0.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbstkzvv0.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplg1clf34.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplg1clf34.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmplg1clf34.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg1clf34.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplg1clf34.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplg1clf34.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplg1clf34.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg1clf34.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplg1clf34.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplg1clf34.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplg1clf34.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplg1clf34.jl:40\ntest set:\
    \ Error During Test at /tmp/tmplg1clf34.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmplg1clf34.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmplg1clf34.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplg1clf34.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx6aahork.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6aahork.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpx6aahork.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6aahork.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6aahork.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6aahork.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6aahork.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6aahork.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6aahork.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6aahork.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6aahork.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx6aahork.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpx6aahork.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpx6aahork.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpx6aahork.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6aahork.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0xzkmbeg.jl:41\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 3-element Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp0xzkmbeg.jl:30\\\
    n   [3] macro expansion\\n     @ /tmp/tmp0xzkmbeg.jl:41 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0xzkmbeg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp0xzkmbeg.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp0xzkmbeg.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp0xzkmbeg.jl:42 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0xzkmbeg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp0xzkmbeg.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp0xzkmbeg.jl:30\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp0xzkmbeg.jl:43 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0xzkmbeg.jl:40\\ntest set:\
    \ Error During Test at /tmp/tmp0xzkmbeg.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805\
    \ [inlined]\\n   [2] tri(n::Int64)\\n     @ Main /tmp/tmp0xzkmbeg.jl:"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkcq2x4un.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkcq2x4un.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpkcq2x4un.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcq2x4un.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkcq2x4un.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkcq2x4un.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkcq2x4un.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcq2x4un.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkcq2x4un.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkcq2x4un.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkcq2x4un.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkcq2x4un.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpkcq2x4un.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpkcq2x4un.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpkcq2x4un.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcq2x4un.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpitwm0a59.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpitwm0a59.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpitwm0a59.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitwm0a59.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpitwm0a59.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpitwm0a59.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpitwm0a59.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitwm0a59.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpitwm0a59.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpitwm0a59.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpitwm0a59.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpitwm0a59.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpitwm0a59.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpitwm0a59.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpitwm0a59.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpitwm0a59.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i] + v[i - 1] + v[i + 1])\n\
    \            end\n        end\n        return v\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpryk9mjib.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpryk9mjib.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpryk9mjib.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpryk9mjib.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpryk9mjib.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpryk9mjib.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpryk9mjib.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpryk9mjib.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpryk9mjib.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpryk9mjib.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpryk9mjib.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpryk9mjib.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpryk9mjib.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpryk9mjib.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpryk9mjib.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpryk9mjib.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmpbr61i.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzmpbr61i.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpzmpbr61i.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmpbr61i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzmpbr61i.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzmpbr61i.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzmpbr61i.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmpbr61i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzmpbr61i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzmpbr61i.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzmpbr61i.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzmpbr61i.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpzmpbr61i.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpzmpbr61i.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpzmpbr61i.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmpbr61i.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        return [1, 3,\
    \ 2] .+ [tri(n - 1)[i] + tri(n - 2)[i] + tri(n - 3)[i] for i in 3:n]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqgignwuc.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(3) == [1, 3, 2, 8]\\n  BoundsError: attempt\
    \ to access 2-element Vector{Int64} at index [3]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] #1\\n     @ ./none:0 [inlined]\\n  \
    \ [3] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n     @ Base ./array.jl:681\\n   [5] tri(n::Int64)\\n\
    \     @ Main /tmp/tmpqgignwuc.jl:25\\n   [6] macro expansion\\n     @ /tmp/tmpqgignwuc.jl:33\
    \ [inlined]\\n   [7] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpqgignwuc.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpqgignwuc.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\\n  BoundsError: attempt to access 2-element\
    \ Vector{Int64} at index [3]\\n  Stacktrace:\\n    [1] getindex\\n      @ ./array.jl:805\
    \ [inlined]\\n    [2] #1\\n      @ ./none:0 [inlined]\\n    [3] iterate\\n   \
    \   @ ./generator.jl:47 [inlined]\\n    [4] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n      @ Base ./array.jl:681\\n    [5] tri(n::Int64)\\\
    n      @ Main /tmp/tmpqgignwuc.jl:25\\n    [6] #1\\n      @ ./none:0 [inlined]\\\
    n    [7] iterate\\n      @ ./generator.jl:47 [inlined]\\n    [8] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{Int64}})\\n      @ Base ./array.jl:681\\n    [9] tri(n::Int64)\\\
    n      @ Main /tmp/tmpqgignwuc.jl:25\\n   [10] macro expansion\\n      @ /tmp/tmpqgignwuc.jl:34\
    \ [inlined]\\n   [11] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level scope\\n      @ /tmp/tmpqgignwuc.jl:32\\ntest\
    \ set: Error During Test at /tmp/tmpqgignwuc.jl:35\\n  Test threw exception\\\
    n  Expression: candidate(5) == [1, 3, 2, 8, 3, 15]\\n  BoundsError: attempt to\
    \ access 2-element Vector{Int64} at index [3]\\n  Stacktrace:\\n    [1] getindex\\\
    n      @ ./ar"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i] + seq[i - 1] +\
    \ seq[i + 1])\n            end\n        end\n        return seq\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5ckydxir.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5ckydxir.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp5ckydxir.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ckydxir.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5ckydxir.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5ckydxir.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5ckydxir.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ckydxir.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5ckydxir.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5ckydxir.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5ckydxir.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ckydxir.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp5ckydxir.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp5ckydxir.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp5ckydxir.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ckydxir.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9wyyyjpj.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wyyyjpj.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmp9wyyyjpj.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wyyyjpj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9wyyyjpj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wyyyjpj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9wyyyjpj.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wyyyjpj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9wyyyjpj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wyyyjpj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9wyyyjpj.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wyyyjpj.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9wyyyjpj.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmp9wyyyjpj.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmp9wyyyjpj.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wyyyjpj.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        v = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(v, 1 +\
    \ i / 2)\n            else\n                push!(v, v[i - 1] + v[i - 2] + v[i\
    \ + 1])\n            end\n        end\n        return v\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpct9uudxo.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpct9uudxo.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpct9uudxo.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpct9uudxo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpct9uudxo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpct9uudxo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpct9uudxo.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpct9uudxo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpct9uudxo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpct9uudxo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpct9uudxo.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpct9uudxo.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpct9uudxo.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpct9uudxo.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpct9uudxo.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpct9uudxo.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        a = [1, 3, 2]\n\
    \        for i = 3:n\n            if i % 2 == 0\n                push!(a, 1 +\
    \ i / 2)\n            else\n                push!(a, a[i - 1] + a[i - 2] + a[i\
    \ + 1])\n            end\n        end\n        return a\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgscfsusb.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgscfsusb.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpgscfsusb.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgscfsusb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgscfsusb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgscfsusb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgscfsusb.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgscfsusb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgscfsusb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgscfsusb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgscfsusb.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgscfsusb.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpgscfsusb.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpgscfsusb.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpgscfsusb.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgscfsusb.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return [1]\n    elseif n == 1\n        return [1, 3]\n\
    \    elseif n == 2\n        return [1, 3, 2]\n    else\n        seq = [1, 3, 2]\n\
    \        for i in 3:n\n            if i % 2 == 0\n                push!(seq, 1\
    \ + i / 2)\n            else\n                push!(seq, seq[i - 1] + seq[i -\
    \ 2] + seq[i + 1])\n            end\n        end\n        return seq\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpunq63p48.jl:41\n  Test threw exception\n\
    \  Expression: candidate(3) == [1, 3, 2, 8]\n  BoundsError: attempt to access\
    \ 3-element Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:805 [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpunq63p48.jl:30\n\
    \   [3] macro expansion\n     @ /tmp/tmpunq63p48.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpunq63p48.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpunq63p48.jl:42\n  Test threw exception\n  Expression:\
    \ candidate(4) == [1, 3, 2, 8, 3]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpunq63p48.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpunq63p48.jl:42 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpunq63p48.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpunq63p48.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(5) == [1, 3, 2, 8, 3, 15]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpunq63p48.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpunq63p48.jl:43 [inlined]\n   [4] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpunq63p48.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpunq63p48.jl:44\n  Test threw exception\n  Expression:\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n  BoundsError: attempt to access 3-element\
    \ Vector{Int64} at index [4]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:805\
    \ [inlined]\n   [2] tri(n::Int64)\n     @ Main /tmp/tmpunq63p48.jl:30\n   [3]\
    \ macro expansion\n     @ /tmp/tmpunq63p48.jl:44"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunq63p48.jl:38\n"
  exit_code: 1
  status: SyntaxError
