name: HumanEval_89_encrypt
language: julia
results:
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary with the alphabet and the corresponding encrypted\
    \ letter\n    alphabet = Dict(\"a\"=>\"c\", \"b\"=>\"d\", \"c\"=>\"e\", \"d\"\
    =>\"f\", \"e\"=>\"g\", \"f\"=>\"h\", \"g\"=>\"i\", \"h\"=>\"j\", \"i\"=>\"k\"\
    , \"j\"=>\"l\", \"k\"=>\"m\", \"l\"=>\"n\", \"m\"=>\"o\", \"n\"=>\"p\", \"o\"\
    =>\"q\", \"p\"=>\"r\", \"q\"=>\"s\", \"r\"=>\"t\", \"s\"=>\"u\", \"t\"=>\"v\"\
    , \"u\"=>\"w\", \"v\"=>\"x\", \"w\"=>\"y\", \"x\"=>\"z\", \"y\"=>\"a\", \"z\"\
    =>\"b\")\n    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Iterate through the string\n    for i in s\n        # If the letter\
    \ is in the dictionary, add the encrypted letter to the encrypted string\n   \
    \     if i in keys(alphabet)\n            encrypted_string = encrypted_string\
    \ * alphabet[i]\n        # If the letter is not in the dictionary, add the letter\
    \ to the encrypted string\n        else\n            encrypted_string = encrypted_string\
    \ * i\n        end\n    end\n    # Return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp32qpupec.jl:34\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"hi\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp32qpupec.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp32qpupec.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp32qpupec.jl:35\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"asdfghjkl\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp32qpupec.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp32qpupec.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp32qpupec.jl:36\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"gf\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp32qpupec.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp32qpupec.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp32qpupec.jl:37\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"et\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp32qpupec.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp32qpupec.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp32qpupec.jl:38\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"faewfawefaewg\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp32qpupec.jl:38 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp32qpupec.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp32qpupec.jl:39\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"hellomyfriend\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32qpupec.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a list of the alphabet\n    alphabet = collect('abcdefghijklmnopqrstuvwxyz')\n\
    \    # Create a list of the alphabet shifted by two\n    shifted_alphabet = collect('cdefghijklmnopqrstuvwxyzab')\n\
    \    # Create a dictionary with the alphabet as keys and the shifted alphabet\
    \ as values\n    alphabet_dict = Dict(zip(alphabet,shifted_alphabet))\n    # Create\
    \ an empty string to store the encrypted string\n    encrypted_string = \"\"\n\
    \    # Iterate through the string and replace the letters with the shifted letters\n\
    \    for letter in s\n        encrypted_string = string(encrypted_string,alphabet_dict[letter])\n\
    \    end\n    # Return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_z_d5e4.jl:13\nin expression\
    \ starting at /tmp/tmp3_z_d5e4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #iterate through the string\n    for i in s\n        #check if the\
    \ character is in the dictionary\n        if i in keys(alphabet)\n           \
    \ #if it is, then add the corresponding encrypted character to the encrypted string\n\
    \            encrypted_string = encrypted_string * string(alphabet_rotated[i])\n\
    \        else\n            #if it is not, then add the character to the encrypted\
    \ string\n            encrypted_string = encrypted_string * i\n        end\n \
    \   end\n    #return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmu7axhhx.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmu7axhhx.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmu7axhhx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmu7axhhx.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmu7axhhx.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmu7axhhx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmu7axhhx.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmu7axhhx.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmu7axhhx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmu7axhhx.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmu7axhhx.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmu7axhhx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmu7axhhx.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmu7axhhx.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmu7axhhx.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpmu7axhhx.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmu7axhhx.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # initialize the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # initialize the encrypted string\n    encrypted_string = \"\"\n    # loop\
    \ through the string\n    for i in s\n        # find the index of the character\
    \ in the alphabet\n        index = findfirst(alphabet, i)\n        # add 2 to\
    \ the index\n        index += 2\n        # if the index is greater than 26, subtract\
    \ 26\n        if index > 26\n            index -= 26\n        end\n        # add\
    \ the character at the new index to the encrypted string\n        push!(encrypted_string,\
    \ alphabet[index])\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1c5msoac.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp1c5msoac.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp1c5msoac.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1c5msoac.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp1c5msoac.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp1c5msoac.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp1c5msoac.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1c5msoac.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp1c5msoac.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp1c5msoac.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp1c5msoac.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # s is the string to be encrypted\n    # s_encrypted is the string to\
    \ be returned\n    s_encrypted = \"\"\n    # loop through each character in s\n\
    \    for c in s\n        # if the character is a letter\n        if isletter(c)\n\
    \            # if the character is a lowercase letter\n            if islower(c)\n\
    \                # if the character is a lowercase letter between a and y\n  \
    \              if c in 'abcdefghijklmnopqrstuvwxy'\n                    # add\
    \ two to the character\n                    c = char(int(c) + 2)\n           \
    \     # if the character is a lowercase letter between z and b\n             \
    \   elseif c in 'yz'\n                    # add two to the character\n       \
    \             c = char(int(c) + 2)\n                    # subtract 26 from the\
    \ character\n                    c = char(int(c) - 26)\n                end\n\
    \            # if the character is an uppercase letter\n            elseif isupper(c)\n\
    \                # if the character is an uppercase letter between A and Y\n \
    \               if c in 'ABCDEFGHIJKLMNOPQRSTUVWXY'\n                    # add\
    \ two to the character\n                    c = char(int(c) + 2)\n           \
    \     # if the character is an uppercase letter between Z and B\n            \
    \    elseif c in 'YZ'\n                    # add two to the character\n      \
    \              c = char(int(c) + 2)\n                    # subtract 26 from the\
    \ character\n                    c = char(int(c) - 26)\n                end\n\
    \            end\n        end\n        # add the character to the encrypted string\n\
    \        s_encrypted = s_encrypted * c\n    end\n    # return the encrypted string\n\
    \    return s_encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ltmgk9d.jl:22\nin expression\
    \ starting at /tmp/tmp5ltmgk9d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn68zti40.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpn68zti40.jl:13\n\
    \   [2] macro expansion\n     @ /tmp/tmpn68zti40.jl:19 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn68zti40.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn68zti40.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{String}, !Matched::String) at essentials.jl:210\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpn68zti40.jl:13\n\
    \   [2] macro expansion\n     @ /tmp/tmpn68zti40.jl:20 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpn68zti40.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn68zti40.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\n    convert(::Type{T}, !Matched::AbstractStr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn68zti40.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(c,2*2) for c in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpud_lw5g8.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpud_lw5g8.jl:12\n   [5] macro expansion\n     @ /tmp/tmpud_lw5g8.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpud_lw5g8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpud_lw5g8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpud_lw5g8.jl:12\n   [5] macro expansion\n     @ /tmp/tmpud_lw5g8.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpud_lw5g8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpud_lw5g8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmpud_lw5g8.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmpud_lw5g8.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpud_lw5g8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpud_lw5g8.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpud_lw5g8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a new string\n    new_string = \"\"\n    #loop through the string\n\
    \    for i in s\n        #if the letter is a space, add a space to the new string\n\
    \        if i == \" \"\n            new_string = new_string * \" \"\n        #if\
    \ the letter is a z, add a b to the new string\n        elseif i == \"z\"\n  \
    \          new_string = new_string * \"b\"\n        #if the letter is a y, add\
    \ a a to the new string\n        elseif i == \"y\"\n            new_string = new_string\
    \ * \"a\"\n        #if the letter is a x, add a z to the new string\n        elseif\
    \ i == \"x\"\n            new_string = new_string * \"z\"\n        #if the letter\
    \ is a w, add a y to the new string\n        elseif i == \"w\"\n            new_string\
    \ = new_string * \"y\"\n        #if the letter is a v, add a x to the new string\n\
    \        elseif i == \"v\"\n            new_string = new_string * \"x\"\n    \
    \    #if the letter is a u, add a w to the new string\n        elseif i == \"\
    u\"\n            new_string = new_string * \"w\"\n        #if the letter is a\
    \ t, add a v to the new string\n        elseif i == \"t\"\n            new_string\
    \ = new_string * \"v\"\n        #if the letter is a s, add a u to the new string\n\
    \        elseif i == \"s\"\n            new_string = new_string * \"u\"\n    \
    \    #if the letter is a r, add a t to the new string\n        elseif i == \"\
    r\"\n            new_string = new_string * \"t\"\n        #if the letter is a\
    \ q, add a s to the new string\n        elseif i == \"q\"\n            new_string\
    \ = new_string * \"s\"\n        #if the letter is a p, add a r to the new string\n\
    \        elseif i == \"p\"\n            new_string = new_string * \"r\"\n    \
    \    #if the letter is a o, add a q to the new string\n        else\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp7266khn0.jl:50\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7266khn0.jl:1\n\
    in expression starting at /tmp/tmp7266khn0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            encrypted = encrypted * alphabet[alphabet.index(i)+4]\n\
    \        else\n            encrypted = encrypted * i\n        end\n    end\n \
    \   return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy2ak8sbg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpy2ak8sbg.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpy2ak8sbg.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy2ak8sbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy2ak8sbg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpy2ak8sbg.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpy2ak8sbg.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy2ak8sbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy2ak8sbg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpy2ak8sbg.jl:16\n   [3] macro expansion\n     @ /tmp/tmpy2ak8sbg.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy2ak8sbg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpy2ak8sbg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpy2ak8sbg.jl:16\n   [3] macro expansion\n     @ /tmp/tmpy2ak8sbg.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2ak8sbg.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet rotated by two multiplied by two places\n\
    \    rotated_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    # Create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    # Loop\
    \ through each character in the string\n    for character in s\n        # Find\
    \ the index of the character in the alphabet\n        index = findfirst(alphabet,\
    \ character)\n        # Add the character at the index in the rotated alphabet\
    \ to the encrypted string\n        push!(encrypted_string, rotated_alphabet[index])\n\
    \    end\n    # Return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4vyyouhn.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4vyyouhn.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4vyyouhn.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4vyyouhn.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp4vyyouhn.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4vyyouhn.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4vyyouhn.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4vyyouhn.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp4vyyouhn.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4vyyouhn.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4vyyouhn.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * string(Char(Int(i)\
    \ + 2))\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8fc3hdng.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8fc3hdng.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fc3hdng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8fc3hdng.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8fc3hdng.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fc3hdng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8fc3hdng.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8fc3hdng.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fc3hdng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8fc3hdng.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8fc3hdng.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fc3hdng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8fc3hdng.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8fc3hdng.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8fc3hdng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8fc3hdng.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqo{htkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fc3hdng.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #iterate through the string\n    for i in s\n        #if the character\
    \ is a letter\n        if isletter(i)\n            #if the character is a lowercase\
    \ letter\n            if islower(i)\n                #if the character is a lowercase\
    \ letter and is not a, c, e, g, i, k, m, o, q, s, u, w, y\n                if\
    \ i != 'a' && i != 'c' && i != 'e' && i != 'g' && i != 'i' && i != 'k' && i !=\
    \ 'm' && i != 'o' && i != 'q' && i != 's' && i != 'u' && i != 'w' && i != 'y'\n\
    \                    #add two to the character\n                    encrypted_string\
    \ = encrypted_string * string(Char(Int(i) + 2))\n                #if the character\
    \ is a lowercase letter and is a, c, e, g, i, k, m, o, q, s, u, w, y\n       \
    \         else\n                    #add two to the character and subtract 26\n\
    \                    encrypted_string = encrypted_string * string(Char(Int(i)\
    \ + 2 - 26))\n                end\n            #if the character is an uppercase\
    \ letter\n            else\n                #if the character is an uppercase\
    \ letter and is not A, C, E, G, I, K, M, O, Q, S, U, W, Y\n                if\
    \ i != 'A' && i != 'C' && i != 'E' && i != 'G' && i != 'I' && i != 'K' && i !=\
    \ 'M' && i != 'O' && i != 'Q' && i != 'S' && i != 'U' && i != 'W' && i != 'Y'\n\
    \                    #add two to the character\n                    encrypted_string\
    \ = encrypted_string * string(Char(Int(i) + 2))\n                #if the character\
    \ is an uppercase letter and is A, C, E, G, I, K, M, O, Q, S, U, W, Y\n      \
    \          else\n                    #add two to the character and subtract 26\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmprx78wrg8.jl:32\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprx78wrg8.jl:1\n\
    in expression starting at /tmp/tmprx78wrg8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #iterate through the string\n    for i in s\n        #if the character\
    \ is a space, append a space to the encrypted string\n        if i == \" \"\n\
    \            push!(encrypted_string, \" \")\n        else\n            #find the\
    \ index of the character in the alphabet\n            index = findfirst(alphabet,\
    \ i)\n            #add two to the index\n            index += 2\n            #if\
    \ the index is greater than 26, subtract 26 from the index\n            if index\
    \ > 26\n                index -= 26\n            end\n            #append the\
    \ character at the new index to the encrypted string\n            push!(encrypted_string,\
    \ alphabet[index])\n        end\n    end\n    #return the encrypted string\n \
    \   return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwl5jil3c.jl:42\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpwl5jil3c.jl:23\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpwl5jil3c.jl:42 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwl5jil3c.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpwl5jil3c.jl:43\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpwl5jil3c.jl:23\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpwl5jil3c.jl:43 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwl5jil3c.jl:41\\ntest set:\
    \ Error During Test at /tmp/tmpwl5jil3c.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpwl5jil3c.jl:23\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpwl5jil3c.jl:44 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\
    \n    for i in s\n        if i in alphabet\n            encrypted_string = encrypted_string\
    \ * alphabet[(alphabet.find(i) + 2) % 26]\n        else\n            encrypted_string\
    \ = encrypted_string * i\n        end\n    end\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpccrwq25l.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field find\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpccrwq25l.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpccrwq25l.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccrwq25l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpccrwq25l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field find\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpccrwq25l.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpccrwq25l.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccrwq25l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpccrwq25l.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpccrwq25l.jl:16\n   [3] macro expansion\n     @ /tmp/tmpccrwq25l.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpccrwq25l.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpccrwq25l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpccrwq25l.jl:16\n   [3] macro expansion\n     @ /tmp/tmpccrwq25l.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccrwq25l.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Define the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    # Define the empty string\n    encrypted = \"\"\n    # Iterate through the\
    \ string\n    for i in s\n        # Find the index of the letter in the alphabet\n\
    \        index = findfirst(alphabet, i)\n        # Find the new index of the letter\
    \ in the alphabet\n        new_index = index + 2*2\n        # Find the new letter\
    \ in the alphabet\n        new_letter = alphabet[new_index]\n        # Add the\
    \ new letter to the encrypted string\n        push!(encrypted, new_letter)\n \
    \   end\n    # Return the encrypted string\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9n5_0jj4.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp9n5_0jj4.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp9n5_0jj4.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9n5_0jj4.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp9n5_0jj4.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp9n5_0jj4.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp9n5_0jj4.jl:36 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9n5_0jj4.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp9n5_0jj4.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp9n5_0jj4.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp9n5_0jj4.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        new_string = new_string * string(shift(i,2))\n\
    \    end\n    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph_7ul4_g.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmph_7ul4_g.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmph_7ul4_g.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph_7ul4_g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph_7ul4_g.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmph_7ul4_g.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmph_7ul4_g.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph_7ul4_g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph_7ul4_g.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmph_7ul4_g.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmph_7ul4_g.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph_7ul4_g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph_7ul4_g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmph_7ul4_g.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmph_7ul4_g.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph_7ul4_g.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph_7ul4_g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_7ul4_g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    #loop through the string\n    for i in s\n        #find the index of the\
    \ character in the alphabet\n        index = findfirst(alphabet, i)\n        #add\
    \ two to the index\n        index += 2\n        #if the index is greater than\
    \ the length of the alphabet\n        if index > length(alphabet)\n          \
    \  #subtract the length of the alphabet from the index\n            index -= length(alphabet)\n\
    \        end\n        #add the character at the index to the encrypted string\n\
    \        push!(encrypted, alphabet[index])\n    end\n    #return the encrypted\
    \ string\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprhd5903n.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprhd5903n.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprhd5903n.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprhd5903n.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmprhd5903n.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprhd5903n.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprhd5903n.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprhd5903n.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmprhd5903n.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprhd5903n.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprhd5903n.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \ encrypted = \"\"\n    for i in s\n        if i in alphabet\n            encrypted\
    \ = encrypted * alphabet[alphabet.index(i) + 2]\n        else\n            encrypted\
    \ = encrypted * i\n        end\n    end\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8anniat0.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp8anniat0.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp8anniat0.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8anniat0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8anniat0.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp8anniat0.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp8anniat0.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8anniat0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8anniat0.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp8anniat0.jl:12\n   [3] macro expansion\n     @ /tmp/tmp8anniat0.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8anniat0.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp8anniat0.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp8anniat0.jl:12\n   [3] macro expansion\n     @ /tmp/tmp8anniat0.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8anniat0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create an array of the alphabet\n    alphabet = [\"a\" \"b\" \"c\" \"\
    d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"\
    q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n    #create an empty\
    \ array to store the encrypted letters\n    encrypted = []\n    #create a for\
    \ loop to iterate through the string\n    for i in s\n        #create a for loop\
    \ to iterate through the alphabet\n        for j in alphabet\n            #if\
    \ the letter in the string is equal to the letter in the alphabet\n          \
    \  if i == j\n                #push the letter two places down the alphabet into\
    \ the encrypted array\n                push!(encrypted, alphabet[findall(alphabet\
    \ .== j)[1]+2])\n            end\n        end\n    end\n    #join the encrypted\
    \ array into a string\n    join(encrypted)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcp_donfn.jl:35\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcp_donfn.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcp_donfn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcp_donfn.jl:36\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"\" == \"ewhjklnop\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcp_donfn.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcp_donfn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcp_donfn.jl:37\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcp_donfn.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcp_donfn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcp_donfn.jl:38\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcp_donfn.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcp_donfn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcp_donfn.jl:39\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"\" == \"jeiajeaijeiak\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcp_donfn.jl:39 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcp_donfn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpcp_donfn.jl:40\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"\" == \"lippsqcjvmirh\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcp_donfn."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcp_donfn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add 2 to the index\n        index += 2\n        # if the index is greater\
    \ than the length of the alphabet\n        if index > length(alphabet)\n     \
    \       # subtract the length of the alphabet from the index\n            index\
    \ -= length(alphabet)\n        end\n        # add the character at the index to\
    \ the encrypted string\n        push!(encrypted_string, alphabet[index])\n   \
    \ end\n    # return the encrypted string\n    return encrypted_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkcvixoj1.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpkcvixoj1.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpkcvixoj1.jl:38 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkcvixoj1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpkcvixoj1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpkcvixoj1.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpkcvixoj1.jl:39 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpkcvixoj1.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpkcvixoj1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpkcvixoj1.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpkcvixoj1.jl:40 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcvixoj1.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through the string\n    for i in s\n        #find the index\
    \ of the letter in the alphabet\n        index = findfirst(alphabet, i)\n    \
    \    #add two to the index\n        index += 2\n        #if the index is greater\
    \ than 26, subtract 26\n        if index > 26\n            index -= 26\n     \
    \   end\n        #add the letter at the new index to the encrypted string\n  \
    \      push!(encrypted_string, alphabet[index])\n    end\n    #return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxyzahe1s.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpxyzahe1s.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpxyzahe1s.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxyzahe1s.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpxyzahe1s.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpxyzahe1s.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpxyzahe1s.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxyzahe1s.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpxyzahe1s.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpxyzahe1s.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpxyzahe1s.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpxyzahe1s.jl:34\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add 2 to the index\n        index += 2\n        # if the index is greater\
    \ than the length of the alphabet, subtract the length of the alphabet\n     \
    \   if index > length(alphabet)\n            index -= length(alphabet)\n     \
    \   end\n        # add the character at the new index to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    # return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpix0w9z9u.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpix0w9z9u.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpix0w9z9u.jl:37 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpix0w9z9u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpix0w9z9u.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpix0w9z9u.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpix0w9z9u.jl:38 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpix0w9z9u.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpix0w9z9u.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpix0w9z9u.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpix0w9z9u.jl:39 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpix0w9z9u.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        index = findfirst(alphabet, i)\n        encrypted = encrypted\
    \ * alphabet[index + 2]\n    end\n    return encrypted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqn2h83r_.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpqn2h83r_.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpqn2h83r_.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqn2h83r_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqn2h83r_.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpqn2h83r_.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpqn2h83r_.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqn2h83r_.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpqn2h83r_.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpqn2h83r_.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpqn2h83r_.jl:27 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add 2 to the index\n        index += 2\n        # if the index is greater\
    \ than the length of the alphabet\n        if index > length(alphabet)\n     \
    \       # subtract the length of the alphabet from the index\n            index\
    \ -= length(alphabet)\n        end\n        # add the character at the new index\
    \ to the encrypted string\n        push!(encrypted_string, alphabet[index])\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hemmipn.jl:38\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp8hemmipn.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp8hemmipn.jl:38 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hemmipn.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp8hemmipn.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp8hemmipn.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp8hemmipn.jl:39 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hemmipn.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp8hemmipn.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp8hemmipn.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp8hemmipn.jl:40 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hemmipn.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet and the shifted alphabet\n   \
    \ alphabet = Dict('a'=>'c', 'b'=>'d', 'c'=>'e', 'd'=>'f', 'e'=>'g', 'f'=>'h',\
    \ 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'o', 'n'=>'p',\
    \ 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t', 's'=>'u', 't'=>'v', 'u'=>'w', 'v'=>'x',\
    \ 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n    # create a string to store the\
    \ encrypted string\n    encrypted = \"\"\n    # iterate through the string\n \
    \   for i in s\n        # if the letter is in the dictionary, append the shifted\
    \ letter to the encrypted string\n        if i in keys(alphabet)\n           \
    \ push!(encrypted, alphabet[i])\n        # if the letter is not in the dictionary,\
    \ append the letter to the encrypted string\n        else\n            push!(encrypted,\
    \ i)\n        end\n    end\n    # return the encrypted string\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4gf2gsln.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp4gf2gsln.jl:20\\n   [2] macro expansion\\n     @ /tmp/tmp4gf2gsln.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4gf2gsln.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4gf2gsln.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp4gf2gsln.jl:20\\n   [2] macro expansion\\n     @ /tmp/tmp4gf2gsln.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4gf2gsln.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4gf2gsln.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4gf2gsln.jl:20\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # initialize the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # initialize the encrypted string\n    encrypted_string = \"\"\n    # loop\
    \ through the string\n    for i in s\n        # find the index of the letter in\
    \ the alphabet\n        index = findfirst(alphabet, i)\n        # add two to the\
    \ index\n        index += 2\n        # if the index is greater than the length\
    \ of the alphabet\n        if index > length(alphabet)\n            # subtract\
    \ the length of the alphabet from the index\n            index -= length(alphabet)\n\
    \        end\n        # add the letter at the index to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    # return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd507kzlo.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpd507kzlo.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpd507kzlo.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd507kzlo.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpd507kzlo.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpd507kzlo.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpd507kzlo.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd507kzlo.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpd507kzlo.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpd507kzlo.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpd507kzlo.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted_string = \"\"\n    for i in s\n        if i == 'z'\n       \
    \     encrypted_string = encrypted_string * 'b'\n        elseif i == 'y'\n   \
    \         encrypted_string = encrypted_string * 'a'\n        else\n          \
    \  encrypted_string = encrypted_string * string(Char(Int(i) + 2))\n        end\n\
    \    end\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuupoq5ip.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuupoq5ip.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupoq5ip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuupoq5ip.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpuupoq5ip.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupoq5ip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuupoq5ip.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuupoq5ip.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupoq5ip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuupoq5ip.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuupoq5ip.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupoq5ip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuupoq5ip.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpuupoq5ip.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuupoq5ip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuupoq5ip.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuupoq5ip.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through each character in the string\n    for c in s\n  \
    \      # get the ASCII value of the character\n        ascii_value = Int(c)\n\
    \        # if the character is a lowercase letter\n        if ascii_value >= 97\
    \ && ascii_value <= 122\n            # shift the character down by two multiplied\
    \ to two places\n            new_ascii_value = ascii_value + 2*2\n           \
    \ # if the new ASCII value is greater than 122\n            if new_ascii_value\
    \ > 122\n                # subtract 26 from the new ASCII value to get the correct\
    \ letter\n                new_ascii_value = new_ascii_value - 26\n           \
    \ end\n            # append the new character to the encrypted string\n      \
    \      append!(encrypted_string, Char(new_ascii_value))\n        # if the character\
    \ is an uppercase letter\n        elseif ascii_value >= 65 && ascii_value <= 90\n\
    \            # shift the character down by two multiplied to two places\n    \
    \        new_ascii_value = ascii_value + 2*2\n            # if the new ASCII value\
    \ is greater than 90\n            if new_ascii_value > 90\n                # subtract\
    \ 26 from the new ASCII value to get the correct letter\n                new_ascii_value\
    \ = new_ascii_value - 26\n            end\n            # append the new character\
    \ to the encrypted string\n            append!(encrypted_string, Char(new_ascii_value))\n\
    \        # if the character is not a letter\n        else\n            # append\
    \ the character to the encrypted string\n            append!(encrypted_string,\
    \ c)\n        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiamz7zip.jl:54\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ append!(::String, ::Char)\n  Closest candidates are:\n    append!(!Matched::BitVector,\
    \ ::Any) at bitarray.jl:782\n    append!(!Matched::AbstractVector{T} where T,\
    \ ::Any) at array.jl:985\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamz7zip.jl:28\n\
    \   [2] macro expansion\n     @ /tmp/tmpiamz7zip.jl:54 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamz7zip.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpiamz7zip.jl:55\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ append!(::String, ::Char)\n  Closest candidates are:\n    append!(!Matched::BitVector,\
    \ ::Any) at bitarray.jl:782\n    append!(!Matched::AbstractVector{T} where T,\
    \ ::Any) at array.jl:985\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamz7zip.jl:28\n\
    \   [2] macro expansion\n     @ /tmp/tmpiamz7zip.jl:55 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamz7zip.jl:53\ntest set:\
    \ Error During Test at /tmp/tmpiamz7zip.jl:56\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching append!(::String,\
    \ ::Char)\n  Closest candidates are:\n    append!(!Matched::BitVector, ::Any)\
    \ at bitarray.jl:782\n    append!(!Matched::AbstractVector{T} where T, ::Any)\
    \ at array.jl:985\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamz7zip.jl:28\n\
    \   [2] macro expansion\n     @ /tmp/tmpiamz7zip.jl:56 [inlined]\n   [3] macro\
    \ expansion\n     @"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiamz7zip.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create a dictionary of the alphabet shifted by two\n    shifted_alphabet\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #iterate through the string\n    for i in s\n        #if the character\
    \ is a space, add a space to the encrypted string\n        if i == \" \"\n   \
    \         push!(encrypted_string, \" \")\n        else\n            #if the character\
    \ is not a space, add the shifted character to the encrypted string\n        \
    \    push!(encrypted_string, get(shifted_alphabet, get(alphabet, i), \" \"))\n\
    \        end\n    end\n    #return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaa389q5c.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n   \
    \ get(::Dict{K, V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpaa389q5c.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaa389q5c.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaa389q5c.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpaa389q5c.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpaa389q5c.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaa389q5c.jl:37 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaa389q5c.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpaa389q5c.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching get(::Dict{Char,\
    \ Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K, V} where V,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"\
    ,\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\"\
    ,\"x\",\"y\",\"z\"]\n    encrypted_string = \"\"\n    for i in s\n        if i\
    \ in alphabet\n            index = findfirst(alphabet, i)\n            encrypted_string\
    \ = encrypted_string * alphabet[index + 2]\n        else\n            encrypted_string\
    \ = encrypted_string * i\n        end\n    end\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwhw19oz_.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"hi\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwhw19oz_.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhw19oz_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhw19oz_.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"asdfghjkl\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwhw19oz_.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhw19oz_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhw19oz_.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"gf\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhw19oz_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhw19oz_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhw19oz_.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"et\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhw19oz_.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhw19oz_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhw19oz_.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"faewfawefaewg\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwhw19oz_.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwhw19oz_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwhw19oz_.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"hellomyfriend\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhw19oz_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_s\
    \ = \"\"\n    for i in s\n        if i in alphabet\n            new_s = new_s\
    \ * string(alphabet[(alphabet.find(i)+2)%26])\n        else\n            new_s\
    \ = new_s * string(i)\n        end\n    end\n    return new_s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphem3qxj4.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmphem3qxj4.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmphem3qxj4.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphem3qxj4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphem3qxj4.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmphem3qxj4.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmphem3qxj4.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphem3qxj4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphem3qxj4.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmphem3qxj4.jl:12\n   [3] macro expansion\n     @ /tmp/tmphem3qxj4.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphem3qxj4.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphem3qxj4.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmphem3qxj4.jl:12\n   [3] macro expansion\n     @ /tmp/tmphem3qxj4.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphem3qxj4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_new = \"\"\n    for i in 1:length(s)\n        s_new = s_new * string(char(s[i]\
    \ + 2*2))\n    end\n    return s_new\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnplfncpj.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: char not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpnplfncpj.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpnplfncpj.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnplfncpj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnplfncpj.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: char not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpnplfncpj.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpnplfncpj.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnplfncpj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnplfncpj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: char not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpnplfncpj.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpnplfncpj.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnplfncpj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnplfncpj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: char not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpnplfncpj.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpnplfncpj.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpnplfncpj.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpnplfncpj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnplfncpj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            encrypted = encrypted * alphabet[(alphabet.index(i)+2)%26]\n\
    \        else\n            encrypted = encrypted * i\n        end\n    end\n \
    \   return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwn4h1knd.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwn4h1knd.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpwn4h1knd.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwn4h1knd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwn4h1knd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwn4h1knd.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpwn4h1knd.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwn4h1knd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwn4h1knd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwn4h1knd.jl:16\n   [3] macro expansion\n     @ /tmp/tmpwn4h1knd.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwn4h1knd.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwn4h1knd.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwn4h1knd.jl:16\n   [3] macro expansion\n     @ /tmp/tmpwn4h1knd.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwn4h1knd.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        if i == 'z'\n            encrypted\
    \ = encrypted * \"b\"\n        elseif i == 'y'\n            encrypted = encrypted\
    \ * \"a\"\n        else\n            encrypted = encrypted * chr(ord(i) + 2)\n\
    \        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp508msdki.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp508msdki.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp508msdki.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp508msdki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp508msdki.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp508msdki.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp508msdki.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp508msdki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp508msdki.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp508msdki.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp508msdki.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp508msdki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp508msdki.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp508msdki.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp508msdki.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp508msdki.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp508msdki.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp508msdki.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create an empty string\n    encrypted_string = \"\"\n    #for each character\
    \ in the string\n    for character in s\n        #if the character is a letter\n\
    \        if character in keys(alphabet)\n            #add the character to the\
    \ encrypted string\n            encrypted_string = string(encrypted_string,character)\n\
    \        end\n    end\n    #create an empty string\n    encrypted_string_2 = \"\
    \"\n    #for each character in the string\n    for character in encrypted_string\n\
    \        #if the character is a letter\n        if character in keys(alphabet)\n\
    \            #add the character to the encrypted string\n            encrypted_string_2\
    \ = string(encrypted_string_2,character)\n        end\n    end\n    #create an\
    \ empty string\n    encrypted_string_3 = \"\"\n    #for each character in the\
    \ string\n    for character in encrypted_string_2\n        #if the character is\
    \ a letter\n        if character in keys(alphabet)\n            #add the character\
    \ to the encrypted string\n            encrypted_string_3 = string(encrypted_string_3,character)\n\
    \        end\n    end\n    #create an empty string\n    encrypted_string_4 = \"\
    \"\n    #for each character in the string\n    for character in encrypted_string_3\n\
    \        #if the character is a letter\n        if character in keys(alphabet)\n\
    \            #add the character to the encrypted string\n            encrypted_string_4\
    \ = string(encrypted_string_4,character)\n        end\n    end\n    #create an\
    \ empty string\n    encrypted_string_5 = \"\"\n    #for each character in the\
    \ string\n\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj_wudi7t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj_wudi7t.jl:1\n\
    in expression starting at /tmp/tmpj_wudi7t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet shifted down by two\n    alphabet_shift\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create a dictionary of the alphabet shifted down by two\n    alphabet_shift2\
    \ = Dict('a'=>5,'b'=>6,'c'=>7,'d'=>8,'e'=>9,'f'=>10,'g'=>11,'h'=>12,'i'=>13,'j'=>14,'k'=>15,'l'=>16,'m'=>17,'n'=>18,'o'=>19,'p'=>20,'q'=>21,'r'=>22,'s'=>23,'t'=>24,'u'=>25,'v'=>26,'w'=>1,'x'=>2,'y'=>3,'z'=>4)\n\
    \    # create a dictionary of the alphabet shifted down by two\n    alphabet_shift3\
    \ = Dict('a'=>7,'b'=>8,'c'=>9,'d'=>10,'e'=>11,'f'=>12,'g'=>13,'h'=>\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5owwxzo8.jl:22\nin expression starting at\
    \ /tmp/tmp5owwxzo8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict(('a',1),('b',2),('c',3),('d',4),('e',5),('f',6),('g',7),('h',8),('i',9),('j',10),('k',11),('l',12),('m',13),('n',14),('o',15),('p',16),('q',17),('r',18),('s',19),('t',20),('u',21),('v',22),('w',23),('x',24),('y',25),('z',26))\n\
    \    # create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict(('a',3),('b',4),('c',5),('d',6),('e',7),('f',8),('g',9),('h',10),('i',11),('j',12),('k',13),('l',14),('m',15),('n',16),('o',17),('p',18),('q',19),('r',20),('s',21),('t',22),('u',23),('v',24),('w',25),('x',26),('y',1),('z',2))\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # if the character\
    \ is a space, add a space to the encrypted string\n        if i == \" \"\n   \
    \         push!(encrypted_string,i)\n        # if the character is not a space,\
    \ add the corresponding encrypted character to the encrypted string\n        else\n\
    \            push!(encrypted_string,get(alphabet_rotated,i,0))\n        end\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr6cq9lb3.jl:36\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ Dict(::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64})\n  Closest candidates are:\n\
    \    Dict(::Any) at dict.jl:127\n  Stacktrace:\n   [1] encrypt(s::String)\n  \
    \   @ Main /tmp/tmpr6cq9lb3.jl:13\n   [2] macro expansion\n     @ /tmp/tmpr6cq9lb3.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpr6cq9lb3.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpr6cq9lb3.jl:37\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ Dict(::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64}, ::Tuple{Char,\
    \ Int64}, ::Tuple{Char, Int64}, ::Tuple{Char, Int64})\n  Closest candidates are:\n\
    \    Dict(::Any) at dict.jl:127\n  Stacktrace:\n   [1] encrypt(s::String)\n  \
    \   @ Main /tmp/tmpr6cq9lb3.jl:13\n   [2] macro expansion\n     @ /tmp/tmpr6cq9lb3.jl:37\
    \ [inlined]\n   [3] "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6cq9lb3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            index = findfirst(alphabet, i)\n\
    \            encrypted = encrypted * alphabet[index+2]\n        else\n       \
    \     encrypted = encrypted * i\n        end\n    end\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkw844sjc.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkw844sjc.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkw844sjc.jl:29 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkw844sjc.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpkw844sjc.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkw844sjc.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkw844sjc.jl:30 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkw844sjc.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpkw844sjc.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkw844sjc.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkw844sjc.jl:31 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpkw844sjc.jl:26\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpedfe2ymf.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpedfe2ymf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpedfe2ymf.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpedfe2ymf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpedfe2ymf.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpedfe2ymf.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpedfe2ymf.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpedfe2ymf.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpedfe2ymf.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    s = replace(s, \" \" => \"\")\n    s = replace(s,\
    \ \"z\" => \"b\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"x\"\
    \ => \"z\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s, \"v\" => \"\
    x\")\n    s = replace(s, \"u\" => \"w\")\n    s = replace(s, \"t\" => \"v\")\n\
    \    s = replace(s, \"s\" => \"u\")\n    s = replace(s, \"r\" => \"t\")\n    s\
    \ = replace(s, \"q\" => \"s\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s,\
    \ \"o\" => \"q\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"m\"\
    \ => \"o\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s, \"k\" => \"\
    m\")\n    s = replace(s, \"j\" => \"l\")\n    s = replace(s, \"i\" => \"k\")\n\
    \    s = replace(s, \"h\" => \"j\")\n    s = replace(s, \"g\" => \"i\")\n    s\
    \ = replace(s, \"f\" => \"h\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s,\
    \ \"d\" => \"f\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"b\"\
    \ => \"d\")\n    s = replace(s, \"a\" => \"c\")\n    return s\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_7skj_cg.jl:47\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_7skj_cg.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7skj_cg.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_7skj_cg.jl:48\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_7skj_cg.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7skj_cg.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_7skj_cg.jl:49\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7skj_cg.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7skj_cg.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_7skj_cg.jl:50\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7skj_cg.jl:50\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7skj_cg.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_7skj_cg.jl:51\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7skj_cg.jl:51 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7skj_cg.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp_7skj_cg.jl:52\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqochtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7skj_cg.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i == \" \"\n            encrypted = encrypted * \" \"\n \
    \       else\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        end\n    end\n    return encrypted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqt6i06qb.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpqt6i06qb.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpqt6i06qb.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqt6i06qb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqt6i06qb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpqt6i06qb.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpqt6i06qb.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqt6i06qb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqt6i06qb.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpqt6i06qb.jl:18\n   [3] macro expansion\n     @ /tmp/tmpqt6i06qb.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqt6i06qb.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpqt6i06qb.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpqt6i06qb.jl:18\n   [3] macro expansion\n     @ /tmp/tmpqt6i06qb.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqt6i06qb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet shifted by two multiplied by two places\n\
    \    shifted_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    # Create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    # Iterate\
    \ through each character in the string\n    for character in s\n        # Find\
    \ the index of the character in the alphabet\n        index = findfirst(alphabet,\
    \ character)\n        # Add the shifted character to the encrypted string\n  \
    \      push!(encrypted_string, shifted_alphabet[index])\n    end\n    # Return\
    \ the encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpymk1fi7o.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpymk1fi7o.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpymk1fi7o.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpymk1fi7o.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpymk1fi7o.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpymk1fi7o.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpymk1fi7o.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpymk1fi7o.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpymk1fi7o.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpymk1fi7o.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpymk1fi7o.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet rotated\n    alphabet_rotated = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create a string to store the encrypted string\n    encrypted_string = \"\
    \"\n    # loop through the string\n    for i in s\n        # check if the character\
    \ is a letter\n        if i in keys(alphabet)\n            # if it is a letter,\
    \ add the encrypted letter to the encrypted string\n            encrypted_string\
    \ = string(encrypted_string,get(alphabet_rotated,i,0))\n        else\n       \
    \     # if it is not a letter, add the character to the encrypted string\n   \
    \         encrypted_string = string(encrypted_string,i)\n        end\n    end\n\
    \    # return the encrypted string\n    return encrypted_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6oud9ja5.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6oud9ja5.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oud9ja5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6oud9ja5.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6oud9ja5.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oud9ja5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6oud9ja5.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oud9ja5.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oud9ja5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6oud9ja5.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oud9ja5.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oud9ja5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6oud9ja5.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6oud9ja5.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6oud9ja5.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp6oud9ja5.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6oud9ja5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet shifted down by two multiplied by two\
    \ places\n    shifted_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    # create\
    \ an empty string to store the encrypted string\n    encrypted_string = \"\"\n\
    \    # loop through the characters in the string\n    for character in s\n   \
    \     # find the index of the character in the alphabet\n        index = findfirst(alphabet,\
    \ character)\n        # add the character in the shifted alphabet at the same\
    \ index to the encrypted string\n        push!(encrypted_string, shifted_alphabet[index])\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7n1ablnv.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7n1ablnv.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7n1ablnv.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7n1ablnv.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp7n1ablnv.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7n1ablnv.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7n1ablnv.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7n1ablnv.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp7n1ablnv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7n1ablnv.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7n1ablnv.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        else\n            encrypted = encrypted * i\n        end\n\
    \    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp20_cpo97.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp20_cpo97.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmp20_cpo97.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20_cpo97.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp20_cpo97.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp20_cpo97.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmp20_cpo97.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20_cpo97.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp20_cpo97.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp20_cpo97.jl:16\n   [3] macro expansion\n     @ /tmp/tmp20_cpo97.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20_cpo97.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp20_cpo97.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp20_cpo97.jl:16\n   [3] macro expansion\n     @ /tmp/tmp20_cpo97.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20_cpo97.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet rotated by two places\n    rotated_alphabet\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    # Create a dictionary that maps the alphabet\
    \ to the rotated alphabet\n    alphabet_dict = Dict(zip(alphabet, rotated_alphabet))\n\
    \    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Iterate through the string\n    for i in s\n        # Append the\
    \ encrypted letter to the encrypted string\n        push!(encrypted_string, alphabet_dict[i])\n\
    \    end\n    # Return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp39eya1kf.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp39eya1kf.jl:23\\n   [2] macro expansion\\n     @ /tmp/tmp39eya1kf.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp39eya1kf.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp39eya1kf.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp39eya1kf.jl:23\\n   [2] macro expansion\\n     @ /tmp/tmp39eya1kf.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp39eya1kf.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp39eya1kf.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp39eya1kf.jl:23\\\
    n   [2] macro expan"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary to map the letters\n    # create a new string to\
    \ store the encrypted letters\n    # loop through the string\n        # get the\
    \ letter\n        # get the index of the letter\n        # get the encrypted letter\n\
    \        # append the encrypted letter to the new string\n    # return the new\
    \ string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_gckicja.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp_gckicja.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_gckicja.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_gckicja.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_gckicja.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp_gckicja.jl:20\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_gckicja.jl:27 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_gckicja.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_gckicja.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create an array of the alphabet\n    alphabet = [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    #create an empty\
    \ array to store the encrypted string\n    encrypted_string = []\n    #loop through\
    \ the string\n    for i in s\n        #find the index of the letter in the alphabet\n\
    \        index = findfirst(alphabet,i)\n        #add two to the index\n      \
    \  index += 2\n        #if the index is greater than 26, subtract 26 from the\
    \ index\n        if index > 26\n            index -= 26\n        end\n       \
    \ #push the letter at the new index to the encrypted string\n        push!(encrypted_string,alphabet[index])\n\
    \    end\n    #return the encrypted string\n    return join(encrypted_string)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcgwcrwa0.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractArray) at array.jl:1828\n \
    \   findfirst(::Any) at array.jl:1818\n  Stacktrace:\n   [1] encrypt(s::String)\n\
    \     @ Main /tmp/tmpcgwcrwa0.jl:19\n   [2] macro expansion\n     @ /tmp/tmpcgwcrwa0.jl:37\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcgwcrwa0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcgwcrwa0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractArray) at array.jl:1828\n \
    \   findfirst(::Any) at array.jl:1818\n  Stacktrace:\n   [1] encrypt(s::String)\n\
    \     @ Main /tmp/tmpcgwcrwa0.jl:19\n   [2] macro expansion\n     @ /tmp/tmpcgwcrwa0.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcgwcrwa0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcgwcrwa0.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\n    findfirst(::AbstractArray) at array.jl:1828\n    findfirst(::Any)\
    \ at array.jl:1818\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpcgwcrwa0.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpcgwcrwa0.jl:39 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcgwcrwa0.jl:36\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcgwcrwa0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    new_s = \"\"\n    for i in s\n        if i == 'z'\n\
    \            new_s = new_s * \"a\"\n        elseif i == 'y'\n            new_s\
    \ = new_s * \"z\"\n        else\n            new_s = new_s * chr(int(i) + 2)\n\
    \        end\n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeoyq41by.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpeoyq41by.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpeoyq41by.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeoyq41by.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeoyq41by.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpeoyq41by.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpeoyq41by.jl:31 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeoyq41by.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeoyq41by.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpeoyq41by.jl:12\n   [3] macro expansion\n     @ /tmp/tmpeoyq41by.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeoyq41by.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpeoyq41by.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpeoyq41by.jl:12\n   [3] macro expansion\n     @ /tmp/tmpeoyq41by.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeoyq41by.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    # iterate through the string\n    for i in s\n        # if the letter\
    \ is in the dictionary\n        if i in keys(alphabet)\n            # add the\
    \ encrypted letter to the string\n            push!(encrypted,alphabet[i]+2)\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcluxy31t.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ push!(::String, ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\n    ...\n  Stacktrace:\n   [1] encrypt(s::String)\n\
    \     @ Main /tmp/tmpcluxy31t.jl:21\n   [2] macro expansion\n     @ /tmp/tmpcluxy31t.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcluxy31t.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcluxy31t.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ push!(::String, ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\n    ...\n  Stacktrace:\n   [1] encrypt(s::String)\n\
    \     @ Main /tmp/tmpcluxy31t.jl:21\n   [2] macro expansion\n     @ /tmp/tmpcluxy31t.jl:33\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcluxy31t.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpcluxy31t.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\n\
    \    ...\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpcluxy31t.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpcluxy31t.jl:34 [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcluxy31t.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    s = lowercase(s)\n    encrypted_string\
    \ = \"\"\n    for i in s\n        if i == \" \"\n            encrypted_string\
    \ = encrypted_string * \" \"\n        else\n            index = findfirst(alphabet,\
    \ i)\n            encrypted_string = encrypted_string * alphabet[index + 2]\n\
    \        end\n    end\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9as3hios.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp9as3hios.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp9as3hios.jl:30 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9as3hios.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9as3hios.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp9as3hios.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp9as3hios.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp9as3hios.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp9as3hios.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\n    findfirst(::Any) at array.jl:1818\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp9as3hios.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp9as3hios.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9as3hios.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        if i == 'z'\n            encrypted\
    \ = encrypted * \"b\"\n        elseif i == 'y'\n            encrypted = encrypted\
    \ * \"a\"\n        else\n            encrypted = encrypted * string(char(int(i)\
    \ + 2))\n        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5tbfij25.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp5tbfij25.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp5tbfij25.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5tbfij25.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5tbfij25.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp5tbfij25.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp5tbfij25.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5tbfij25.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5tbfij25.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp5tbfij25.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp5tbfij25.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5tbfij25.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5tbfij25.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp5tbfij25.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp5tbfij25.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5tbfij25.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp5tbfij25.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tbfij25.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet rotated by two multiplied to two places\n\
    \    alphabet_rotated = \"cdefghijklmnopqrstuvwxyzab\"\n    # create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    # iterate\
    \ through the string\n    for i in s\n        # find the index of the character\
    \ in the alphabet\n        index = findfirst(alphabet, i)\n        # add the character\
    \ at the index in the alphabet_rotated to the encrypted string\n        push!(encrypted_string,\
    \ alphabet_rotated[index])\n    end\n    # return the encrypted string\n    return\
    \ encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi1dye2fp.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpi1dye2fp.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpi1dye2fp.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1dye2fp.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpi1dye2fp.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpi1dye2fp.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpi1dye2fp.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1dye2fp.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpi1dye2fp.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpi1dye2fp.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpi1dye2fp.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        else\n            encrypted = encrypted * i\n        end\n\
    \    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwzbhbmdw.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwzbhbmdw.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpwzbhbmdw.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwzbhbmdw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwzbhbmdw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwzbhbmdw.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpwzbhbmdw.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwzbhbmdw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwzbhbmdw.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwzbhbmdw.jl:16\n   [3] macro expansion\n     @ /tmp/tmpwzbhbmdw.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwzbhbmdw.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwzbhbmdw.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwzbhbmdw.jl:16\n   [3] macro expansion\n     @ /tmp/tmpwzbhbmdw.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzbhbmdw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s2 = \"\"\n    for i in s\n        if i == 'z'\n            s2 = s2 *\
    \ \"b\"\n        elseif i == 'y'\n            s2 = s2 * \"a\"\n        else\n\
    \            s2 = s2 * string(Char(Int(i) + 2))\n        end\n    end\n    return\
    \ s2\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjlullcm5.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjlullcm5.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlullcm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjlullcm5.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjlullcm5.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlullcm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjlullcm5.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlullcm5.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlullcm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjlullcm5.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlullcm5.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlullcm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjlullcm5.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjlullcm5.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjlullcm5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjlullcm5.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjlullcm5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # check if the\
    \ character is in the dictionary\n        if i in keys(alphabet)\n           \
    \ # if it is, add the encrypted character to the encrypted string\n          \
    \  encrypted_string = string(encrypted_string, get(alphabet, i, 0))\n        end\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4wvem728.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"89\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4wvem728.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wvem728.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4wvem728.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"1194678101112\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4wvem728.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wvem728.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4wvem728.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"76\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4wvem728.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wvem728.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4wvem728.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"520\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4wvem728.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wvem728.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4wvem728.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"6152361235615237\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4wvem728.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4wvem728.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4wvem728.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"85121215132561895144\" == \"lippsqcjvmirh\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4wvem728.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(x, 2) for x in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr_ibuby2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpr_ibuby2.jl:12\n   [5] macro expansion\n     @ /tmp/tmpr_ibuby2.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr_ibuby2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpr_ibuby2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpr_ibuby2.jl:12\n   [5] macro expansion\n     @ /tmp/tmpr_ibuby2.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr_ibuby2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpr_ibuby2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmpr_ibuby2.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmpr_ibuby2.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr_ibuby2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpr_ibuby2.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_ibuby2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(c, 2) for c in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxw0kdeu2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpxw0kdeu2.jl:12\n   [5] macro expansion\n     @ /tmp/tmpxw0kdeu2.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxw0kdeu2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxw0kdeu2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpxw0kdeu2.jl:12\n   [5] macro expansion\n     @ /tmp/tmpxw0kdeu2.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxw0kdeu2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxw0kdeu2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmpxw0kdeu2.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmpxw0kdeu2.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxw0kdeu2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpxw0kdeu2.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxw0kdeu2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd7k27w07.jl:46\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"ba\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd7k27w07.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7k27w07.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpd7k27w07.jl:47\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"aabbabbab\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpd7k27w07.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7k27w07.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpd7k27w07.jl:48\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ab\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7k27w07.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7k27w07.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpd7k27w07.jl:49\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"ab\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7k27w07.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7k27w07.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpd7k27w07.jl:50\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"baaabaaabaaaa\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7k27w07.jl:50 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7k27w07.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpd7k27w07.jl:51\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"babbaaabbaabb\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd7k27w07.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create an array of the alphabet\n    alphabet = collect('abcdefghijklmnopqrstuvwxyz')\n\
    \    # create an empty array to store the encrypted string\n    encrypted = []\n\
    \    # loop through each character in the string\n    for i in s\n        # find\
    \ the index of the character in the alphabet\n        index = findfirst(alphabet,\
    \ i)\n        # add two to the index\n        index += 2\n        # if the index\
    \ is greater than 26, subtract 26\n        if index > 26\n            index -=\
    \ 26\n        end\n        # push the character at the new index to the encrypted\
    \ array\n        push!(encrypted, alphabet[index])\n    end\n    # join the array\
    \ into a string\n    return join(encrypted)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9hhyp0m.jl:13\nin expression\
    \ starting at /tmp/tmpd9hhyp0m.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create a dictionary of the alphabet rotated by two places\n    rotated_alphabet\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through the string\n    for i in s\n        #if the character\
    \ is a space, append a space to the encrypted string\n        if i == \" \"\n\
    \            push!(encrypted_string, \" \")\n        #if the character is not\
    \ a space, append the corresponding character in the rotated alphabet to the encrypted\
    \ string\n        else\n            push!(encrypted_string, get(rotated_alphabet,\
    \ i, 0))\n        end\n    end\n    #return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjrhvx_25.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Int64)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpjrhvx_25.jl:25\\n   [2] macro expansion\\n     @ /tmp/tmpjrhvx_25.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjrhvx_25.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpjrhvx_25.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Int64)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpjrhvx_25.jl:25\\n   [2] macro expansion\\n     @ /tmp/tmpjrhvx_25.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjrhvx_25.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpjrhvx_25.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpjrhvx_25.jl:25\\\
    n   [2] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet rotated by two places\n    alphabet_rotated\
    \ = alphabet[3:end] * alphabet[1:2]\n    # Create an empty string to store the\
    \ encrypted string\n    encrypted_string = \"\"\n    # Iterate through the string\n\
    \    for i in s\n        # Find the index of the character in the alphabet\n \
    \       index = findfirst(alphabet, i)\n        # Append the character at the\
    \ index in the rotated alphabet to the encrypted string\n        push!(encrypted_string,\
    \ alphabet_rotated[index])\n    end\n    # Return the encrypted string\n    return\
    \ encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppon1ot0m.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmppon1ot0m.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmppon1ot0m.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppon1ot0m.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmppon1ot0m.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmppon1ot0m.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmppon1ot0m.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppon1ot0m.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmppon1ot0m.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmppon1ot0m.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmppon1ot0m.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of all the letters in the alphabet\n    alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    # create an empty string to store the encrypted\
    \ string\n    encrypted = \"\"\n    # loop through each character in the string\n\
    \    for c in s\n        # find the index of the character in the alphabet\n \
    \       index = findfirst(alphabet, c)\n        # add two to the index\n     \
    \   index += 2\n        # if the index is greater than the length of the alphabet\n\
    \        if index > length(alphabet)\n            # subtract the length of the\
    \ alphabet from the index\n            index -= length(alphabet)\n        end\n\
    \        # add the character at the new index to the encrypted string\n      \
    \  push!(encrypted, alphabet[index])\n    end\n    # return the encrypted string\n\
    \    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw_v6xxyg.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw_v6xxyg.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw_v6xxyg.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_v6xxyg.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpw_v6xxyg.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw_v6xxyg.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw_v6xxyg.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_v6xxyg.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpw_v6xxyg.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw_v6xxyg.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw_v6xxyg.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpw_v6xxyg.jl:35\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * string(char(int(i)\
    \ + 2))\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps40tu073.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps40tu073.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmps40tu073.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps40tu073.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps40tu073.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps40tu073.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmps40tu073.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps40tu073.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps40tu073.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmps40tu073.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmps40tu073.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps40tu073.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps40tu073.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmps40tu073.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmps40tu073.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps40tu073.jl:28\ntest set:\
    \ Error During Test at /tmp/tmps40tu073.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps40tu073.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[3:end]\
    \ * \" \" * alphabet[1:2]\n    new_string = \"\"\n    for i in s\n        new_string\
    \ = new_string * new_alphabet[findfirst(alphabet, i)]\n    end\n    return new_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvlztf_x3.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpvlztf_x3.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpvlztf_x3.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvlztf_x3.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvlztf_x3.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpvlztf_x3.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpvlztf_x3.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvlztf_x3.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpvlztf_x3.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpvlztf_x3.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpvlztf_x3.jl:27 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_array = collect(s)\n    for i in 1:length(s_array)\n        if s_array[i]\
    \ == 'z'\n            s_array[i] = 'b'\n        elseif s_array[i] == 'y'\n   \
    \         s_array[i] = 'a'\n        else\n            s_array[i] = Char(Int(s_array[i])\
    \ + 2)\n        end\n    end\n    return join(s_array)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsdoey_5p.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsdoey_5p.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdoey_5p.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsdoey_5p.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpsdoey_5p.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdoey_5p.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsdoey_5p.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdoey_5p.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdoey_5p.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsdoey_5p.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdoey_5p.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdoey_5p.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsdoey_5p.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsdoey_5p.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsdoey_5p.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsdoey_5p.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsdoey_5p.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(x, 2) for x in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdi_yfge8.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpdi_yfge8.jl:12\n   [5] macro expansion\n     @ /tmp/tmpdi_yfge8.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdi_yfge8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpdi_yfge8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpdi_yfge8.jl:12\n   [5] macro expansion\n     @ /tmp/tmpdi_yfge8.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdi_yfge8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpdi_yfge8.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmpdi_yfge8.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmpdi_yfge8.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpdi_yfge8.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpdi_yfge8.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdi_yfge8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict(\"a\"=>1,\"\
    b\"=>2,\"c\"=>3,\"d\"=>4,\"e\"=>5,\"f\"=>6,\"g\"=>7,\"h\"=>8,\"i\"=>9,\"j\"=>10,\"\
    k\"=>11,\"l\"=>12,\"m\"=>13,\"n\"=>14,\"o\"=>15,\"p\"=>16,\"q\"=>17,\"r\"=>18,\"\
    s\"=>19,\"t\"=>20,\"u\"=>21,\"v\"=>22,\"w\"=>23,\"x\"=>24,\"y\"=>25,\"z\"=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    # loop through the string\n    for i in s\n        # if the letter is\
    \ in the dictionary, add the encrypted letter to the string\n        if i in keys(alphabet)\n\
    \            encrypted = encrypted * string(get(alphabet,i,0)+2)\n        end\n\
    \    end\n    # return the encrypted string\n    return encrypted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqojjn6_3.jl:31\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqojjn6_3.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqojjn6_3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqojjn6_3.jl:32\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"\" == \"ewhjklnop\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqojjn6_3.jl:32 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqojjn6_3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqojjn6_3.jl:33\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqojjn6_3.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqojjn6_3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqojjn6_3.jl:34\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqojjn6_3.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqojjn6_3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqojjn6_3.jl:35\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"\" == \"jeiajeaijeiak\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqojjn6_3.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqojjn6_3.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpqojjn6_3.jl:36\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"\" == \"lippsqcjvmirh\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqojjn6_3."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqojjn6_3.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary with the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string\n    encrypted_string = \"\"\n    # loop through\
    \ the string\n    for i in s\n        # check if the string is a letter\n    \
    \    if isletter(i)\n            # if it is a letter, add the corresponding letter\
    \ from the alphabet_rotated dictionary to the encrypted_string\n            encrypted_string\
    \ = string(encrypted_string, get(alphabet_rotated, i, 0))\n        else\n    \
    \        # if it is not a letter, add the character to the encrypted_string\n\
    \            encrypted_string = string(encrypted_string, i)\n        end\n   \
    \ end\n    # return the encrypted_string\n    return encrypted_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fhl7o8c.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4fhl7o8c.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fhl7o8c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4fhl7o8c.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4fhl7o8c.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fhl7o8c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4fhl7o8c.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4fhl7o8c.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fhl7o8c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4fhl7o8c.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4fhl7o8c.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fhl7o8c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4fhl7o8c.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4fhl7o8c.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4fhl7o8c.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp4fhl7o8c.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fhl7o8c.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(x,2) for x in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7flkq81w.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp7flkq81w.jl:12\n   [5] macro expansion\n     @ /tmp/tmp7flkq81w.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7flkq81w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7flkq81w.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp7flkq81w.jl:12\n   [5] macro expansion\n     @ /tmp/tmp7flkq81w.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7flkq81w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7flkq81w.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmp7flkq81w.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmp7flkq81w.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7flkq81w.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7flkq81w.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7flkq81w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted =\
    \ \"\"\n    # loop through the string\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add two to the index\n        index += 2\n        # if the index is\
    \ greater than the length of the alphabet, subtract the length of the alphabet\n\
    \        if index > length(alphabet)\n            index -= length(alphabet)\n\
    \        end\n        # add the character to the encrypted string\n        push!(encrypted,\
    \ alphabet[index])\n    end\n    # return the encrypted string\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpupkb5rfs.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpupkb5rfs.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpupkb5rfs.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpupkb5rfs.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpupkb5rfs.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpupkb5rfs.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpupkb5rfs.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpupkb5rfs.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpupkb5rfs.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpupkb5rfs.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpupkb5rfs.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary that maps the letters of the alphabet to their shifted\
    \ counterparts\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    alphabet_dict = Dict()\n    for i in 1:length(alphabet)\n\
    \        alphabet_dict[alphabet[i]] = shifted_alphabet[i]\n    end\n    #create\
    \ a string to hold the encrypted string\n    encrypted_string = \"\"\n    #loop\
    \ through the string and replace each letter with its shifted counterpart\n  \
    \  for i in 1:length(s)\n        encrypted_string = string(encrypted_string,alphabet_dict[s[i]])\n\
    \    end\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphf5gbed1.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphf5gbed1.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphf5gbed1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphf5gbed1.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphf5gbed1.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphf5gbed1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphf5gbed1.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphf5gbed1.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphf5gbed1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphf5gbed1.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphf5gbed1.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphf5gbed1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphf5gbed1.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphf5gbed1.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphf5gbed1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphf5gbed1.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphf5gbed1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary with the alphabet as keys and the encrypted alphabet\
    \ as values\n    alphabet = Dict('a'=>'c','b'=>'d','c'=>'e','d'=>'f','e'=>'g','f'=>'h','g'=>'i','h'=>'j','i'=>'k','j'=>'l','k'=>'m','l'=>'n','m'=>'o','n'=>'p','o'=>'q','p'=>'r','q'=>'s','r'=>'t','s'=>'u','t'=>'v','u'=>'w','v'=>'x','w'=>'y','x'=>'z','y'=>'a','z'=>'b')\n\
    \    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through the string and add the encrypted letter to the encrypted\
    \ string\n    for letter in s\n        encrypted_string = string(encrypted_string,alphabet[letter])\n\
    \    end\n    #return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxckgjs9.jl:28\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxxckgjs9.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxckgjs9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxxckgjs9.jl:29\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxxckgjs9.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxckgjs9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxxckgjs9.jl:30\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxckgjs9.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxckgjs9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxxckgjs9.jl:31\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxckgjs9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxckgjs9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxxckgjs9.jl:32\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxxckgjs9.jl:32 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxckgjs9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpxxckgjs9.jl:33\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxckgjs9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Loop through the string\n    for i in s\n        # Check if the\
    \ character is a letter\n        if i in keys(alphabet)\n            # If it is\
    \ a letter, then add the encrypted character to the encrypted string\n       \
    \     encrypted_string = string(encrypted_string, alphabet[i]+2)\n        else\n\
    \            # If it is not a letter, then add the character to the encrypted\
    \ string\n            encrypted_string = string(encrypted_string, i)\n       \
    \ end\n    end\n    # Return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdfiprcb0.jl:35\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdfiprcb0.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfiprcb0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfiprcb0.jl:36\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdfiprcb0.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfiprcb0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfiprcb0.jl:37\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdfiprcb0.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfiprcb0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfiprcb0.jl:38\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdfiprcb0.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfiprcb0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfiprcb0.jl:39\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdfiprcb0.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfiprcb0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpdfiprcb0.jl:40\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"1071414171527820117166\" == \"lippsqcjv"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdfiprcb0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create an array of the alphabet\n    alphabet = ['a':'z']\n    # create\
    \ an empty string to store the encrypted message\n    encrypted_message = \"\"\
    \n    # loop through the string\n    for i in s\n        # find the index of the\
    \ letter in the alphabet\n        index = findfirst(alphabet, i)\n        # add\
    \ two to the index\n        index += 2\n        # if the index is greater than\
    \ 26, subtract 26\n        if index > 26\n            index -= 26\n        end\n\
    \        # add the letter to the encrypted message\n        push!(encrypted_message,\
    \ alphabet[index])\n    end\n    # return the encrypted message\n    return encrypted_message\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcmocyhx0.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Vector{StepRange{Char, Int64}}, ::Char)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmpcmocyhx0.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpcmocyhx0.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcmocyhx0.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpcmocyhx0.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Vector{StepRange{Char, Int64}}, ::Char)\\n  Closest candidates are:\\\
    n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmpcmocyhx0.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpcmocyhx0.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcmocyhx0.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpcmocyhx0.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Vector{StepRange{Char,\
    \ Int64}}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpcmocyhx0.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpcmocyhx0.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    encrypted = \"\"\n    for i in s\n        if i\
    \ == 'z'\n            encrypted = encrypted * \"b\"\n        elseif i == 'y'\n\
    \            encrypted = encrypted * \"a\"\n        else\n            encrypted\
    \ = encrypted * (i+2)\n        end\n    end\n    return encrypted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfydvzmc5.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpfydvzmc5.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpfydvzmc5.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfydvzmc5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfydvzmc5.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpfydvzmc5.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpfydvzmc5.jl:31 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfydvzmc5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfydvzmc5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpfydvzmc5.jl:12\n   [3] macro expansion\n     @ /tmp/tmpfydvzmc5.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfydvzmc5.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfydvzmc5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpfydvzmc5.jl:12\n   [3] macro expansion\n     @ /tmp/tmpfydvzmc5.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfydvzmc5.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_arr = collect(s)\n    for i in 1:length(s_arr)\n        s_arr[i] = Char(Int(s_arr[i])\
    \ + 2*2)\n    end\n    return join(s_arr)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpec_nf6fe.jl:27\n  Expression: candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\"\n   Evaluated: \"jei{je{ijei{k\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpec_nf6fe.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec_nf6fe.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpec_nf6fe.jl:28\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"lippsq}jvmirh\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpec_nf6fe.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec_nf6fe.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpec_nf6fe.jl:29\n  Expression: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n   Evaluated: \"h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpec_nf6fe.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpec_nf6fe.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec_nf6fe.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict(\"a\"=>1,\"\
    b\"=>2,\"c\"=>3,\"d\"=>4,\"e\"=>5,\"f\"=>6,\"g\"=>7,\"h\"=>8,\"i\"=>9,\"j\"=>10,\"\
    k\"=>11,\"l\"=>12,\"m\"=>13,\"n\"=>14,\"o\"=>15,\"p\"=>16,\"q\"=>17,\"r\"=>18,\"\
    s\"=>19,\"t\"=>20,\"u\"=>21,\"v\"=>22,\"w\"=>23,\"x\"=>24,\"y\"=>25,\"z\"=>26)\n\
    \    # create a dictionary of the alphabet shifted by two\n    shifted_alphabet\
    \ = Dict(\"a\"=>3,\"b\"=>4,\"c\"=>5,\"d\"=>6,\"e\"=>7,\"f\"=>8,\"g\"=>9,\"h\"\
    =>10,\"i\"=>11,\"j\"=>12,\"k\"=>13,\"l\"=>14,\"m\"=>15,\"n\"=>16,\"o\"=>17,\"\
    p\"=>18,\"q\"=>19,\"r\"=>20,\"s\"=>21,\"t\"=>22,\"u\"=>23,\"v\"=>24,\"w\"=>25,\"\
    x\"=>26,\"y\"=>1,\"z\"=>2)\n    # create an empty string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # add the\
    \ shifted letter to the string\n        encrypted_string = string(encrypted_string,\
    \ get(shifted_alphabet, i, 0))\n    end\n    # return the encrypted string\n \
    \   return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp43uanhtm.jl:31\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"00\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp43uanhtm.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp43uanhtm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp43uanhtm.jl:32\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"000000000\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp43uanhtm.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp43uanhtm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp43uanhtm.jl:33\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"00\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp43uanhtm.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp43uanhtm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp43uanhtm.jl:34\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"00\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp43uanhtm.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp43uanhtm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp43uanhtm.jl:35\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"0000000000000\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp43uanhtm.jl:35 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp43uanhtm.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp43uanhtm.jl:36\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"0000000000000\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp43uanhtm.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        encrypted = encrypted * string(shift(i,\
    \ 2))\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdniuf221.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpdniuf221.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpdniuf221.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdniuf221.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdniuf221.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpdniuf221.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpdniuf221.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdniuf221.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdniuf221.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpdniuf221.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpdniuf221.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdniuf221.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdniuf221.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpdniuf221.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpdniuf221.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpdniuf221.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdniuf221.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdniuf221.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for c in s\n        encrypted = encrypted * string(shift(c,2))\n\
    \    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphvpf2qz3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmphvpf2qz3.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmphvpf2qz3.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphvpf2qz3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphvpf2qz3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmphvpf2qz3.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmphvpf2qz3.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphvpf2qz3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphvpf2qz3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmphvpf2qz3.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmphvpf2qz3.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphvpf2qz3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphvpf2qz3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmphvpf2qz3.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmphvpf2qz3.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmphvpf2qz3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphvpf2qz3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvpf2qz3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary with the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    #loop through the string\n    for i in s\n        #check if the character\
    \ is a letter\n        if i in keys(alphabet)\n            #if the letter is in\
    \ the first half of the alphabet\n            if alphabet[i] <= 13\n         \
    \       #add 2 to the value of the letter\n                new_value = alphabet[i]\
    \ + 2\n                #add the new letter to the encrypted string\n         \
    \       encrypted = encrypted * string(get(alphabet, new_value, \"\"))\n     \
    \       #if the letter is in the second half of the alphabet\n            else\n\
    \                #subtract 24 from the value of the letter\n                new_value\
    \ = alphabet[i] - 24\n                #add the new letter to the encrypted string\n\
    \                encrypted = encrypted * string(get(alphabet, new_value, \"\"\
    ))\n            end\n        #if the character is not a letter\n        else\n\
    \            #add the character to the encrypted string\n            encrypted\
    \ = encrypted * i\n        end\n    end\n    #return the encrypted string\n  \
    \  return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjv1_n0yt.jl:47\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjv1_n0yt.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv1_n0yt.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpjv1_n0yt.jl:48\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"\" == \"ewhjklnop\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjv1_n0yt.jl:48 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv1_n0yt.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpjv1_n0yt.jl:49\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjv1_n0yt.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv1_n0yt.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpjv1_n0yt.jl:50\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjv1_n0yt.jl:50\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv1_n0yt.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpjv1_n0yt.jl:51\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"\" == \"jeiajeaijeiak\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjv1_n0yt.jl:51 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv1_n0yt.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpjv1_n0yt.jl:52\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"\" == \"lippsqcjvmirh\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjv1_n0yt."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjv1_n0yt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvzuf6ax2.jl:46\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"ba\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvzuf6ax2.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzuf6ax2.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvzuf6ax2.jl:47\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"aabbabbab\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvzuf6ax2.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzuf6ax2.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvzuf6ax2.jl:48\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ab\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvzuf6ax2.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzuf6ax2.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvzuf6ax2.jl:49\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"ab\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvzuf6ax2.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzuf6ax2.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvzuf6ax2.jl:50\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"baaabaaabaaaa\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvzuf6ax2.jl:50 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvzuf6ax2.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvzuf6ax2.jl:51\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"babbaaabbaabb\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvzuf6ax2.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        if i == 'z'\n            encrypted\
    \ = encrypted * \"b\"\n        elseif i == 'y'\n            encrypted = encrypted\
    \ * \"a\"\n        else\n            encrypted = encrypted * chr(int(i) + 2)\n\
    \        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo2aktf4n.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpo2aktf4n.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpo2aktf4n.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo2aktf4n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo2aktf4n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpo2aktf4n.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpo2aktf4n.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo2aktf4n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo2aktf4n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpo2aktf4n.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpo2aktf4n.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo2aktf4n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo2aktf4n.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpo2aktf4n.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpo2aktf4n.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpo2aktf4n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpo2aktf4n.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2aktf4n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create an array of the alphabet\n    alphabet = [\"a\" \"b\" \"c\" \"\
    d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"\
    q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n    # create an empty\
    \ array to store the encrypted string\n    encrypted_string = []\n    # loop through\
    \ the string\n    for i in s\n        # find the index of the character in the\
    \ alphabet\n        index = findfirst(alphabet, i)\n        # add two to the index\n\
    \        index += 2\n        # if the index is greater than 26, subtract 26\n\
    \        if index > 26\n            index -= 26\n        end\n        # push the\
    \ character at the new index to the encrypted string\n        push!(encrypted_string,\
    \ alphabet[index])\n    end\n    # join the encrypted string\n    encrypted_string\
    \ = join(encrypted_string)\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjgx38o3s.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Matrix{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmpjgx38o3s.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpjgx38o3s.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjgx38o3s.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpjgx38o3s.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Matrix{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpjgx38o3s.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpjgx38o3s.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjgx38o3s.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpjgx38o3s.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Matrix{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpjgx38o3s.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjgx38o3s.jl:41 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # Create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Iterate through each character in the string\n    for i in s\n\
    \        # If the character is a space, add a space to the encrypted string\n\
    \        if i == \" \"\n            push!(encrypted_string, \" \")\n        #\
    \ If the character is not a space, add the encrypted character to the encrypted\
    \ string\n        else\n            push!(encrypted_string, get(alphabet_rotated,\
    \ get(alphabet, i), 0))\n        end\n    end\n    # Return the encrypted string\n\
    \    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw261bqof.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n   \
    \ get(::Dict{K, V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw261bqof.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw261bqof.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw261bqof.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpw261bqof.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw261bqof.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw261bqof.jl:37 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw261bqof.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpw261bqof.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching get(::Dict{Char,\
    \ Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K, V} where V,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary that maps the alphabet to its encrypted version\n\
    \    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    \n    alphabet_dict = Dict()\n    for i in 1:length(alphabet)\n        alphabet_dict[alphabet[i]]\
    \ = encrypted_alphabet[i]\n    end\n    # create an empty string to store the\
    \ encrypted string\n    encrypted_string = \"\"\n    # iterate through the string\
    \ and replace each character with its encrypted version\n    for i in 1:length(s)\n\
    \        encrypted_string = string(encrypted_string, alphabet_dict[s[i]])\n  \
    \  end\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxux6j7yh.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxux6j7yh.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxux6j7yh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxux6j7yh.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpxux6j7yh.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxux6j7yh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxux6j7yh.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxux6j7yh.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxux6j7yh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxux6j7yh.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxux6j7yh.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxux6j7yh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxux6j7yh.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxux6j7yh.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxux6j7yh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxux6j7yh.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxux6j7yh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a variable to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through each character in the string\n    for c in s\n  \
    \      # if the character is a space, add a space to the encrypted string\n  \
    \      if c == ' '\n            push!(encrypted_string, ' ')\n        # otherwise,\
    \ add the encrypted character to the encrypted string\n        else\n        \
    \    push!(encrypted_string, encrypt_character(c))\n        end\n    end\n   \
    \ # return the encrypted string\n    return encrypted_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps_8n09sh.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: encrypt_character\
    \ not defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps_8n09sh.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmps_8n09sh.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps_8n09sh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps_8n09sh.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: encrypt_character\
    \ not defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps_8n09sh.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmps_8n09sh.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps_8n09sh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps_8n09sh.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: encrypt_character not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps_8n09sh.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmps_8n09sh.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps_8n09sh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps_8n09sh.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: encrypt_character not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmps_8n09sh.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmps_8n09sh.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps_8n09sh.jl:31\ntest set:\
    \ Error During Test at /tmp/tmps_8n09sh.jl:36\n  Test threw exception\n  Expression:\
    \ can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_8n09sh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #convert string to array of characters\n    s_array = collect(s)\n   \
    \ #create array of ascii values\n    ascii_array = [Int(x) for x in s_array]\n\
    \    #create array of shifted ascii values\n    shift_array = [x+2*2 for x in\
    \ ascii_array]\n    #create array of shifted characters\n    shift_char_array\
    \ = [Char(x) for x in shift_array]\n    #convert array of shifted characters to\
    \ string\n    shift_string = join(shift_char_array)\n    return shift_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcdhdcj8t.jl:33\n  Expression: candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\"\n   Evaluated: \"jei{je{ijei{k\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcdhdcj8t.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcdhdcj8t.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcdhdcj8t.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"lippsq}jvmirh\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcdhdcj8t.jl:34 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcdhdcj8t.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpcdhdcj8t.jl:35\n  Expression: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n   Evaluated: \"h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcdhdcj8t.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcdhdcj8t.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcdhdcj8t.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase\n    s = s.replace(\"a\",\"c\")\n    s = s.replace(\"\
    b\",\"d\")\n    s = s.replace(\"c\",\"e\")\n    s = s.replace(\"d\",\"f\")\n \
    \   s = s.replace(\"e\",\"g\")\n    s = s.replace(\"f\",\"h\")\n    s = s.replace(\"\
    g\",\"i\")\n    s = s.replace(\"h\",\"j\")\n    s = s.replace(\"i\",\"k\")\n \
    \   s = s.replace(\"j\",\"l\")\n    s = s.replace(\"k\",\"m\")\n    s = s.replace(\"\
    l\",\"n\")\n    s = s.replace(\"m\",\"o\")\n    s = s.replace(\"n\",\"p\")\n \
    \   s = s.replace(\"o\",\"q\")\n    s = s.replace(\"p\",\"r\")\n    s = s.replace(\"\
    q\",\"s\")\n    s = s.replace(\"r\",\"t\")\n    s = s.replace(\"s\",\"u\")\n \
    \   s = s.replace(\"t\",\"v\")\n    s = s.replace(\"u\",\"w\")\n    s = s.replace(\"\
    v\",\"x\")\n    s = s.replace(\"w\",\"y\")\n    s = s.replace(\"x\",\"z\")\n \
    \   s = s.replace(\"y\",\"a\")\n    s = s.replace(\"z\",\"b\")\n    return s\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe_rg0yzg.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpe_rg0yzg.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpe_rg0yzg.jl:46 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_rg0yzg.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpe_rg0yzg.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpe_rg0yzg.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpe_rg0yzg.jl:47 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_rg0yzg.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpe_rg0yzg.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpe_rg0yzg.jl:12\n   [3] macro expansion\n     @ /tmp/tmpe_rg0yzg.jl:48\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe_rg0yzg.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpe_rg0yzg.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpe_rg0yzg.jl:12\n   [3] macro expansion\n     @ /tmp/tmpe_rg0yzg.jl:49\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_rg0yzg.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        encrypted = encrypted * alphabet[(findfirst(alphabet, i) + 2)\
    \ % 26]\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw4w3gid6.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw4w3gid6.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw4w3gid6.jl:24 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw4w3gid6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpw4w3gid6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw4w3gid6.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw4w3gid6.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw4w3gid6.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpw4w3gid6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpw4w3gid6.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw4w3gid6.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet shifted down by two multiplied to two\
    \ places\n    shifted_alphabet = Dict('a'=>5,'b'=>6,'c'=>7,'d'=>8,'e'=>9,'f'=>10,'g'=>11,'h'=>12,'i'=>13,'j'=>14,'k'=>15,'l'=>16,'m'=>17,'n'=>18,'o'=>19,'p'=>20,'q'=>21,'r'=>22,'s'=>23,'t'=>24,'u'=>25,'v'=>26,'w'=>1,'x'=>2,'y'=>3,'z'=>4)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # if the character\
    \ is a space, add a space to the encrypted string\n        if i == \" \"\n   \
    \         push!(encrypted_string, \" \")\n        else\n            # find the\
    \ value of the character in the alphabet dictionary\n            value = alphabet[i]\n\
    \            # find the key of the value in the shifted alphabet dictionary\n\
    \            key = findall(x->x==value,values(shifted_alphabet))\n           \
    \ # add the key to the encrypted string\n            push!(encrypted_string, key[1])\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbuerr7ho.jl:40\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching keys(::Base.ValueIterator{Dict{Char, Int64}})\\n  Closest candidates\
    \ are:\\n    keys(!Matched::Base.SkipMissing) at missing.jl:255\\n    keys(!Matched::Number)\
    \ at number.jl:91\\n    keys(!Matched::IOContext) at show.jl:344\\n    ...\\n\
    \  Stacktrace:\\n   [1] pairs(collection::Base.ValueIterator{Dict{Char, Int64}})\\\
    n     @ Base ./abstractdict.jl:138\\n   [2] findall(testf::var\"#1#2\"{Int64},\
    \ A::Base.ValueIterator{Dict{Char, Int64}})\\n     @ Base ./array.jl:2157\\n \
    \  [3] encrypt(s::String)\\n     @ Main /tmp/tmpbuerr7ho.jl:27\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpbuerr7ho.jl:40 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbuerr7ho.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpbuerr7ho.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ keys(::Base.ValueIterator{Dict{Char, Int64}})\\n  Closest candidates are:\\\
    n    keys(!Matched::Base.SkipMissing) at missing.jl:255\\n    keys(!Matched::Number)\
    \ at number.jl:91\\n    keys(!Matched::IOContext) at show.jl:344\\n    ...\\n\
    \  Stacktrace:\\n   [1] pairs(collection::Base.ValueIterator{Dict{Char, Int64}})\\\
    n     @ Base ./abstractdict.jl:138\\n   [2] findall(testf::var\"#1#2\"{Int64},\
    \ A::Base.ValueIterator{Dict{Char, Int64}})\\n     @ Base ./array.jl:2157\\n \
    \  [3] encrypt(s::String)\\n     @ Main /tmp/tmpbuerr7ho.jl:27\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpbuerr7ho.jl:41 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbuerr7ho.jl:39\\ntest set:\
    \ Error During Test at /tmp/tmpbuerr7ho.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching keys(::Base.ValueIterator{Dict"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary of the alphabet\n    alphabet = Dict(('a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'))\n    # Create a dictionary of the alphabet\
    \ shifted by two\n    alphabet_shift = Dict(('c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'a', 'b'))\n    # Create a new string\n    new_string = \"\"\n    # Loop\
    \ through the string\n    for i in s\n        # If the letter is in the dictionary,\
    \ add the shifted letter to the new string\n        if i in keys(alphabet)\n \
    \           new_string = new_string * get(alphabet_shift, i, \"\")\n        #\
    \ If the letter is not in the dictionary, add the letter to the new string\n \
    \       else\n            new_string = new_string * i\n        end\n    end\n\
    \    # Return the new string\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2x21j0np.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  ArgumentError: Dict(kv):\
    \ kv needs to be an iterator of tuples or pairs\\n  Stacktrace:\\n   [1] Dict(kv::NTuple{26,\
    \ Char})\\n     @ Base ./dict.jl:132\\n   [2] encrypt(s::String)\\n     @ Main\
    \ /tmp/tmp2x21j0np.jl:13\\n   [3] macro expansion\\n     @ /tmp/tmp2x21j0np.jl:36\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2x21j0np.jl:35\\n  \\n \
    \ caused by: BoundsError: attempt to access Char at index [2]\\n  Stacktrace:\\\
    n   [1] indexed_iterate(I::Char, i::Int64, state::Bool)\\n     @ Base ./tuple.jl:95\\\
    n   [2] grow_to!(dest::Dict{Any, Any}, itr::NTuple{26, Char})\\n     @ Base ./dict.jl:142\\\
    n   [3] dict_with_eltype(DT_apply::Base.var\"#281#283\", kv::NTuple{26, Char},\
    \ t::Type)\\n     @ Base ./abstractdict.jl:542\\n   [4] Dict(kv::NTuple{26, Char})\\\
    n     @ Base ./dict.jl:129\\n   [5] encrypt(s::String)\\n     @ Main /tmp/tmp2x21j0np.jl:13\\\
    n   [6] macro expansion\\n     @ /tmp/tmp2x21j0np.jl:36 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp2x21j0np.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp2x21j0np.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  ArgumentError: Dict(kv): kv needs\
    \ to be an iterator of tuples or pairs\\n  Stacktrace:\\n   [1] Dict(kv::NTuple{26,\
    \ Char})\\n     @ Base ./dict.jl:132\\n   [2] encrypt(s::String)\\n     @ Main\
    \ /tmp/tmp2x21j0np.jl:13\\n   [3] macro expansion\\n     @ /tmp/tmp2x21j0np.jl:37\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2x21j0np.jl:35\\n  \\n \
    \ caused by: BoundsError: attempt to access Char at index [2]\\n  Stacktrace:\\\
    n   [1] indexed_iterate(I"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    new_s = \"\"\n    for i in s\n        if i == 'z'\n\
    \            new_s = new_s * 'b'\n        elseif i == 'y'\n            new_s =\
    \ new_s * 'a'\n        else\n            new_s = new_s * chr(int(i) + 2)\n   \
    \     end\n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9obzmne.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpi9obzmne.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpi9obzmne.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi9obzmne.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpi9obzmne.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpi9obzmne.jl:20\n\
    \   [2] macro expansion\n     @ /tmp/tmpi9obzmne.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi9obzmne.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpi9obzmne.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpi9obzmne.jl:20\n   [2] macro expansion\n\
    \     @ /tmp/tmpi9obzmne.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi9obzmne.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpi9obzmne.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpi9obzmne.jl:20\n   [2] macro expansion\n\
    \     @ /tmp/tmpi9obzmne.jl:33 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpi9obzmne.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpi9obzmne.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9obzmne.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(c,2*2) for c in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn1sm79c1.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpn1sm79c1.jl:12\n   [5] macro expansion\n     @ /tmp/tmpn1sm79c1.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn1sm79c1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn1sm79c1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmpn1sm79c1.jl:12\n   [5] macro expansion\n     @ /tmp/tmpn1sm79c1.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn1sm79c1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn1sm79c1.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(c::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmpn1sm79c1.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmpn1sm79c1.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpn1sm79c1.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpn1sm79c1.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1sm79c1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # if the letter\
    \ is a space, add a space to the encrypted string\n        if i == \" \"\n   \
    \         push!(encrypted_string, \" \")\n        # if the letter is a lowercase\
    \ letter, add the encrypted letter to the encrypted string\n        elseif i in\
    \ 'a':'z'\n            push!(encrypted_string, Char(Int(i) + 2))\n        # if\
    \ the letter is a uppercase letter, add the encrypted letter to the encrypted\
    \ string\n        elseif i in 'A':'Z'\n            push!(encrypted_string, Char(Int(i)\
    \ + 2))\n        # if the letter is not a letter, add the letter to the encrypted\
    \ string\n        else\n            push!(encrypted_string, i)\n        end\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe3npu5y9.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpe3npu5y9.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpe3npu5y9.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe3npu5y9.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpe3npu5y9.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpe3npu5y9.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmpe3npu5y9.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe3npu5y9.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpe3npu5y9.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpe3npu5y9.jl:21\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # check if\
    \ the character is a letter\n        if i in keys(alphabet)\n            # if\
    \ the character is a letter, add the encrypted character to the encrypted string\n\
    \            encrypted_string = string(encrypted_string, alphabet[i] + 2)\n  \
    \      else\n            # if the character is not a letter, add the character\
    \ to the encrypted string\n            encrypted_string = string(encrypted_string,\
    \ i)\n        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp99tualln.jl:35\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp99tualln.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp99tualln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp99tualln.jl:36\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp99tualln.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp99tualln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp99tualln.jl:37\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp99tualln.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp99tualln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp99tualln.jl:38\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp99tualln.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp99tualln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp99tualln.jl:39\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp99tualln.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp99tualln.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp99tualln.jl:40\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"1071414171527820117166\" == \"lippsqcjv"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp99tualln.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj7x9546b.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpj7x9546b.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj7x9546b.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj7x9546b.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpj7x9546b.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpj7x9546b.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj7x9546b.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj7x9546b.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpj7x9546b.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #s = \"hi\"\n    #s = \"asdfghjkl\"\n    #s = \"gf\"\n    #s = \"et\"\n\
    \    #s = \"qwertyuiop\"\n    #s = \"zxcvbnm\"\n    #s = \"lkjhgfdsa\"\n    #s\
    \ = \"poiuytrewq\"\n    #s = \"mnbvcxz\"\n    #s = \"asdfghjkl\"\n    #s = \"\
    zxcvbnm\"\n    #s = \"qwertyuiop\"\n    #s = \"lkjhgfdsa\"\n    #s = \"poiuytrewq\"\
    \n    #s = \"mnbvcxz\"\n    #s = \"asdfghjkl\"\n    #s = \"zxcvbnm\"\n    #s =\
    \ \"qwertyuiop\"\n    #s = \"lkjhgfdsa\"\n    #s = \"poiuytrewq\"\n    #s = \"\
    mnbvcxz\"\n    #s = \"asdfghjkl\"\n    #s = \"zxcvbnm\"\n    #s = \"qwertyuiop\"\
    \n    #s = \"lkjhgfdsa\"\n    #s = \"poiuytrewq\"\n    #s = \"mnbvcxz\"\n    #s\
    \ = \"asdfghjkl\"\n    #s = \"zxcvbnm\"\n    #s = \"qwertyuiop\"\n    #s = \"\
    lkjhgfdsa\"\n    #s = \"poiuytrewq\"\n    #s = \"mnbvcxz\"\n    #s = \"asdfghjkl\"\
    \n    #s = \"zxcvbnm\"\n    #s = \"qwertyuiop\"\n    #s = \"lkjhgfdsa\"\n    #s\
    \ = \"poiuytrewq\"\n    #s = \"mnbvcxz\"\n    #s = \"asdfghjkl\"\n    #s = \"\
    zxcvbnm\"\n    #s = \"qwertyuiop\"\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdns15dkz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdns15dkz.jl:1\n\
    in expression starting at /tmp/tmpdns15dkz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string that contains the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string that contains the alphabet rotated by two places\n   \
    \ rotated_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    # create an empty string\
    \ that will contain the encrypted string\n    encrypted_string = \"\"\n    # loop\
    \ through the string\n    for i in s\n        # find the index of the letter in\
    \ the alphabet\n        index = findfirst(alphabet, i)\n        # add the letter\
    \ at the index in the rotated alphabet to the encrypted string\n        push!(encrypted_string,\
    \ rotated_alphabet[index])\n    end\n    # return the encrypted string\n    return\
    \ encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5ublvueu.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5ublvueu.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5ublvueu.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5ublvueu.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp5ublvueu.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5ublvueu.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5ublvueu.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5ublvueu.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp5ublvueu.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5ublvueu.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5ublvueu.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>'c', 'b'=>'d',\
    \ 'c'=>'e', 'd'=>'f', 'e'=>'g', 'f'=>'h', 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l',\
    \ 'k'=>'m', 'l'=>'n', 'm'=>'o', 'n'=>'p', 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t',\
    \ 's'=>'u', 't'=>'v', 'u'=>'w', 'v'=>'x', 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n\
    \    # create an empty string to store the encrypted letters\n    encrypted =\
    \ \"\"\n    # iterate through the string\n    for i in s\n        # if the letter\
    \ is in the alphabet, add the encrypted letter to the string\n        if i in\
    \ keys(alphabet)\n            push!(encrypted, alphabet[i])\n        # if the\
    \ letter is not in the alphabet, add the letter to the string\n        else\n\
    \            push!(encrypted, i)\n        end\n    end\n    # return the encrypted\
    \ string\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4fc3mx19.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp4fc3mx19.jl:20\\n   [2] macro expansion\\n     @ /tmp/tmp4fc3mx19.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4fc3mx19.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4fc3mx19.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp4fc3mx19.jl:20\\n   [2] macro expansion\\n     @ /tmp/tmp4fc3mx19.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4fc3mx19.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp4fc3mx19.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4fc3mx19.jl:20\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpql079cm2.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpql079cm2.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpql079cm2.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpql079cm2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpql079cm2.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpql079cm2.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpql079cm2.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpql079cm2.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpql079cm2.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Loop through each character in the string\n    for i in s\n  \
    \      # If the character is a letter\n        if i in string(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n            # Find the index of the character in the alphabet\n           \
    \ index = findfirst(string(\"abcdefghijklmnopqrstuvwxyz\"), i)\n            #\
    \ Add two to the index\n            index += 2\n            # If the index is\
    \ greater than the length of the alphabet\n            if index > length(string(\"\
    abcdefghijklmnopqrstuvwxyz\"))\n                # Subtract the length of the alphabet\
    \ from the index\n                index -= length(string(\"abcdefghijklmnopqrstuvwxyz\"\
    ))\n            end\n            # Add the character at the new index to the encrypted\
    \ string\n            push!(encrypted_string, string(\"abcdefghijklmnopqrstuvwxyz\"\
    )[index])\n        # If the character is not a letter\n        else\n        \
    \    # Add the character to the encrypted string\n            push!(encrypted_string,\
    \ i)\n        end\n    end\n    # Return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8h7z988i.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp8h7z988i.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8h7z988i.jl:43 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8h7z988i.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp8h7z988i.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp8h7z988i.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8h7z988i.jl:44 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8h7z988i.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp8h7z988i.jl:45\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp8h7z988i.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8h7z988i.jl:45 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create a string of the alphabet shifted by two\n    shifted_alphabet =\
    \ \"cdefghijklmnopqrstuvwxyzab\"\n    #create a dictionary of the alphabet and\
    \ shifted alphabet\n    alphabet_dict = Dict(alphabet[i] => shifted_alphabet[i]\
    \ for i in 1:length(alphabet))\n    #create a string to store the encrypted string\n\
    \    encrypted_string = \"\"\n    #loop through the string and replace each letter\
    \ with the shifted letter\n    for i in 1:length(s)\n        encrypted_string\
    \ = string(encrypted_string, alphabet_dict[s[i]])\n    end\n    #return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwmaeg03.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprwmaeg03.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwmaeg03.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprwmaeg03.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprwmaeg03.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwmaeg03.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprwmaeg03.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwmaeg03.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwmaeg03.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprwmaeg03.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwmaeg03.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwmaeg03.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprwmaeg03.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprwmaeg03.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwmaeg03.jl:31\ntest set: Test\
    \ Failed at /tmp/tmprwmaeg03.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwmaeg03.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_array = collect(s)\n    for i in 1:length(s_array)\n        s_array[i]\
    \ = Char(Int(s_array[i]) + 2*2)\n    end\n    return join(s_array)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8nq_yp2.jl:27\n  Expression: candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\"\n   Evaluated: \"jei{je{ijei{k\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8nq_yp2.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8nq_yp2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy8nq_yp2.jl:28\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"lippsq}jvmirh\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8nq_yp2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8nq_yp2.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy8nq_yp2.jl:29\n  Expression: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n   Evaluated: \"h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy8nq_yp2.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8nq_yp2.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8nq_yp2.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpufyj3rql.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpufyj3rql.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpufyj3rql.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpufyj3rql.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpufyj3rql.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpufyj3rql.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpufyj3rql.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpufyj3rql.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpufyj3rql.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[3:end]*2\n\
    \    new_s = \"\"\n    for i in s\n        new_s = new_s * new_alphabet[findfirst(alphabet,i)]\n\
    \    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Iterate through the string\n    for i in s\n        # If the character\
    \ is a space, add a space to the new string\n        if i == ' '\n           \
    \ push!(encrypted_string, ' ')\n        # If the character is a letter, add the\
    \ encrypted letter to the new string\n        else\n            push!(encrypted_string,\
    \ encrypt_letter(i))\n        end\n    end\n    # Return the encrypted string\n\
    \    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4dxnj2r.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: encrypt_letter not\
    \ defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpt4dxnj2r.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpt4dxnj2r.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4dxnj2r.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpt4dxnj2r.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: encrypt_letter not\
    \ defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpt4dxnj2r.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpt4dxnj2r.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4dxnj2r.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpt4dxnj2r.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: encrypt_letter not defined\n \
    \ Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpt4dxnj2r.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpt4dxnj2r.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4dxnj2r.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpt4dxnj2r.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: encrypt_letter not defined\n \
    \ Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpt4dxnj2r.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpt4dxnj2r.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpt4dxnj2r.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpt4dxnj2r.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"faew"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4dxnj2r.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # if the letter\
    \ is in the alphabet\n        if i in keys(alphabet)\n            # add the encrypted\
    \ letter to the encrypted string\n            encrypted_string = encrypted_string\
    \ * string(get(alphabet_rotated,i,0))\n        else\n            # add the letter\
    \ to the encrypted string\n            encrypted_string = encrypted_string * i\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8v4bkqzp.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8v4bkqzp.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8v4bkqzp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8v4bkqzp.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8v4bkqzp.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8v4bkqzp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8v4bkqzp.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8v4bkqzp.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8v4bkqzp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8v4bkqzp.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8v4bkqzp.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8v4bkqzp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8v4bkqzp.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8v4bkqzp.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8v4bkqzp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8v4bkqzp.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8v4bkqzp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_s = \"\"\n    for i in s\n        if i == \"a\"\n            new_s\
    \ = new_s * \"c\"\n        elseif i == \"b\"\n            new_s = new_s * \"d\"\
    \n        elseif i == \"c\"\n            new_s = new_s * \"e\"\n        elseif\
    \ i == \"d\"\n            new_s = new_s * \"f\"\n        elseif i == \"e\"\n \
    \           new_s = new_s * \"g\"\n        elseif i == \"f\"\n            new_s\
    \ = new_s * \"h\"\n        elseif i == \"g\"\n            new_s = new_s * \"i\"\
    \n        elseif i == \"h\"\n            new_s = new_s * \"j\"\n        elseif\
    \ i == \"i\"\n            new_s = new_s * \"k\"\n        elseif i == \"j\"\n \
    \           new_s = new_s * \"l\"\n        elseif i == \"k\"\n            new_s\
    \ = new_s * \"m\"\n        elseif i == \"l\"\n            new_s = new_s * \"n\"\
    \n        elseif i == \"m\"\n            new_s = new_s * \"o\"\n        elseif\
    \ i == \"n\"\n            new_s = new_s * \"p\"\n        elseif i == \"o\"\n \
    \           new_s = new_s * \"q\"\n        elseif i == \"p\"\n            new_s\
    \ = new_s * \"r\"\n        elseif i == \"q\"\n            new_s = new_s * \"s\"\
    \n        elseif i == \"r\"\n            new_s = new_s * \"t\"\n        elseif\
    \ i == \"s\"\n            new_s = new_s * \"u\"\n        elseif i == \"t\"\n \
    \           new_s = new_s * \"v\"\n        elseif i == \"u\"\n            new_s\
    \ = new_s * \"w\"\n        elseif i == \"v\"\n            new_s = new_s * \"x\"\
    \n        elseif i == \"w\"\n            new_s = new\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_e0e5sq.jl:1\nin expression starting at /tmp/tmp7_e0e5sq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet as keys and the encrypted alphabet\
    \ as values\n    alphabet = Dict('a'=>'c', 'b'=>'d', 'c'=>'e', 'd'=>'f', 'e'=>'g',\
    \ 'f'=>'h', 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'o',\
    \ 'n'=>'p', 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t', 's'=>'u', 't'=>'v', 'u'=>'w',\
    \ 'v'=>'x', 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n    # create an empty string\
    \ to store the encrypted string\n    encrypted_string = \"\"\n    # iterate through\
    \ the string\n    for i in s\n        # append the encrypted letter to the encrypted\
    \ string\n        append!(encrypted_string, alphabet[i])\n    end\n    # return\
    \ the encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprb3_vx08.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching append!(::String, ::Char)\\n  Closest candidates are:\\n    append!(!Matched::BitVector,\
    \ ::Any) at bitarray.jl:782\\n    append!(!Matched::AbstractVector{T} where T,\
    \ ::Any) at array.jl:985\\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprb3_vx08.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmprb3_vx08.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprb3_vx08.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmprb3_vx08.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ append!(::String, ::Char)\\n  Closest candidates are:\\n    append!(!Matched::BitVector,\
    \ ::Any) at bitarray.jl:782\\n    append!(!Matched::AbstractVector{T} where T,\
    \ ::Any) at array.jl:985\\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprb3_vx08.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmprb3_vx08.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprb3_vx08.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmprb3_vx08.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching append!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    append!(!Matched::BitVector, ::Any)\
    \ at bitarray.jl:782\\n    append!(!Matched::AbstractVector{T} where T, ::Any)\
    \ at array.jl:985\\n    append!(!Matched::AbstractVector{T} where T, ::Any...)\
    \ at array.jl:988\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprb3_vx08.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmprb3_vx"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary that maps the alphabet to a rotated alphabet\n \
    \   # create a string that is the encrypted string\n    # iterate through the\
    \ string and replace the letters with the encrypted letters\n    # return the\
    \ encrypted string\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppw3_72tp.jl:23\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"hi\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppw3_72tp.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppw3_72tp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppw3_72tp.jl:24\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"asdfghjkl\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppw3_72tp.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppw3_72tp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppw3_72tp.jl:25\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"gf\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppw3_72tp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppw3_72tp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppw3_72tp.jl:26\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"et\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppw3_72tp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppw3_72tp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppw3_72tp.jl:27\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"faewfawefaewg\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppw3_72tp.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppw3_72tp.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppw3_72tp.jl:28\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"hellomyfriend\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppw3_72tp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_s = \"\"\n    for i in s\n        new_s = new_s * string(shift(i,\
    \ 2))\n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph5hake67.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmph5hake67.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmph5hake67.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph5hake67.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph5hake67.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmph5hake67.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmph5hake67.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph5hake67.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph5hake67.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmph5hake67.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmph5hake67.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph5hake67.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph5hake67.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmph5hake67.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmph5hake67.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmph5hake67.jl:22\ntest set:\
    \ Error During Test at /tmp/tmph5hake67.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph5hake67.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string with all the letters of the alphabet\n    alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    #create an empty string to store the encrypted\
    \ string\n    encrypted_string = \"\"\n    #loop through the string\n    for i\
    \ in s\n        #find the index of the letter in the alphabet\n        index =\
    \ findfirst(alphabet, i)\n        #add 2 to the index\n        index += 2\n  \
    \      #if the index is greater than 26, subtract 26\n        if index > 26\n\
    \            index -= 26\n        end\n        #add the letter to the encrypted\
    \ string\n        encrypted_string *= alphabet[index]\n    end\n    #return the\
    \ encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt1h2zp9q.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpt1h2zp9q.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpt1h2zp9q.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt1h2zp9q.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpt1h2zp9q.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpt1h2zp9q.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpt1h2zp9q.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt1h2zp9q.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpt1h2zp9q.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpt1h2zp9q.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpt1h2zp9q.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_array = Array{Char}(s)\n    for i in 1:length(s_array)\n        s_array[i]\
    \ = Char(Int(s_array[i]) + 2*2)\n    end\n    return join(s_array)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaiqd_nzl.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching (Array{Char, N} where N)(::String)\\n  Closest candidates are:\\n \
    \   (Array{T, N} where N)(!Matched::LinearAlgebra.AbstractQ) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:554\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:(AbstractMatrix{T}\
    \ where T)) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lq.jl:156\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:474\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpaiqd_nzl.jl:12\\\
    n   [2] macro expansion\\n     @ /tmp/tmpaiqd_nzl.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaiqd_nzl.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpaiqd_nzl.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ (Array{Char, N} where N)(::String)\\n  Closest candidates are:\\n    (Array{T,\
    \ N} where N)(!Matched::LinearAlgebra.AbstractQ) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:554\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:(AbstractMatrix{T}\
    \ where T)) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lq.jl:156\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:474\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted =\
    \ \"\"\n    # loop through the string s\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add two to the index\n        index += 2\n        # if the index is\
    \ greater than the length of the alphabet\n        if index > length(alphabet)\n\
    \            # subtract the length of the alphabet from the index\n          \
    \  index -= length(alphabet)\n        end\n        # add the character at the\
    \ index to the encrypted string\n        push!(encrypted, alphabet[index])\n \
    \   end\n    # return the encrypted string\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphavzcv_t.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmphavzcv_t.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphavzcv_t.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphavzcv_t.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmphavzcv_t.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmphavzcv_t.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphavzcv_t.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphavzcv_t.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmphavzcv_t.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmphavzcv_t.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphavzcv_t.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet rotated by two\n    rotated_alphabet =\
    \ alphabet[3:end] * alphabet[1:2]\n    # create a dictionary of the alphabet and\
    \ the rotated alphabet\n    alphabet_dict = Dict(alphabet[i] => rotated_alphabet[i]\
    \ for i in 1:length(alphabet))\n    # create an empty string to store the encrypted\
    \ string\n    encrypted_string = \"\"\n    # iterate through the string and add\
    \ the encrypted letter to the encrypted string\n    for i in s\n        push!(encrypted_string,\
    \ alphabet_dict[i])\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1uki9nb5.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp1uki9nb5.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmp1uki9nb5.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1uki9nb5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp1uki9nb5.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp1uki9nb5.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmp1uki9nb5.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1uki9nb5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp1uki9nb5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp1uki9nb5.jl:22\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_array = collect(s)\n    for i in 1:length(s_array)\n        if s_array[i]\
    \ == 'z'\n            s_array[i] = 'b'\n        elseif s_array[i] == 'y'\n   \
    \         s_array[i] = 'a'\n        else\n            s_array[i] = chr(Int(s_array[i])\
    \ + 2)\n        end\n    end\n    return join(s_array)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1h7lr16n.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: chr not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp1h7lr16n.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp1h7lr16n.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1h7lr16n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1h7lr16n.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: chr not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp1h7lr16n.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp1h7lr16n.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1h7lr16n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1h7lr16n.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp1h7lr16n.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp1h7lr16n.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1h7lr16n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1h7lr16n.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: chr not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp1h7lr16n.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp1h7lr16n.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp1h7lr16n.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp1h7lr16n.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1h7lr16n.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        encrypted = encrypted * string(shift(i,\
    \ 2))\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qesew60.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp5qesew60.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmp5qesew60.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qesew60.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5qesew60.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp5qesew60.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmp5qesew60.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qesew60.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5qesew60.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp5qesew60.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmp5qesew60.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qesew60.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5qesew60.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp5qesew60.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmp5qesew60.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp5qesew60.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp5qesew60.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qesew60.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # if the character\
    \ is a letter\n        if i in string.letters\n            # if the character\
    \ is a lowercase letter\n            if i in string.lowercase\n              \
    \  # if the character is the last letter in the alphabet\n                if i\
    \ == 'z'\n                    # add the first letter to the encrypted string\n\
    \                    push!(encrypted_string, 'a')\n                # if the character\
    \ is the second to last letter in the alphabet\n                elseif i == 'y'\n\
    \                    # add the second letter to the encrypted string\n       \
    \             push!(encrypted_string, 'b')\n                # if the character\
    \ is not the last or second to last letter in the alphabet\n                else\n\
    \                    # add the next two letters to the encrypted string\n    \
    \                push!(encrypted_string, string(char(ord(i)+2), char(ord(i)+3)))\n\
    \                end\n            # if the character is an uppercase letter\n\
    \            else\n                # if the character is the last letter in the\
    \ alphabet\n                if i == 'Z'\n                    # add the first letter\
    \ to the encrypted string\n                    push!(encrypted_string, 'A')\n\
    \                # if the character is the second to last letter in the alphabet\n\
    \                elseif i == 'Y'\n                    # add the second letter\
    \ to the encrypted string\n                    push!(encrypted_string, 'B')\n\
    \                # if the character is not the last or second to last letter in\
    \ the alphabet\n                else\n                    # add the next two letters\
    \ to the encrypted string\n                    push!(encrypted_string, string(char(ord(i)+2),\
    \ char(ord(i)+3)))\n                end\n            end\n        # if the character\
    \ is not a letter\n        else\n            # add the character to the encrypted\
    \ string\n            push!(encrypted_string, i)\n        end\n    end\n    #\
    \ return the encrypted string\n    return encrypted_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuieht4e_.jl:63\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type #string has no field letters\n\
    \  Stacktrace:\n   [1] getproperty(x::Function, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpuieht4e_.jl:17\n   [3] macro expansion\n\
    \     @ /tmp/tmpuieht4e_.jl:63 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuieht4e_.jl:62\ntest set:\
    \ Error During Test at /tmp/tmpuieht4e_.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type #string has no field letters\n\
    \  Stacktrace:\n   [1] getproperty(x::Function, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpuieht4e_.jl:17\n   [3] macro expansion\n\
    \     @ /tmp/tmpuieht4e_.jl:64 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuieht4e_.jl:62\ntest set:\
    \ Error During Test at /tmp/tmpuieht4e_.jl:65\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type #string has no field letters\n  Stacktrace:\n\
    \   [1] getproperty(x::Function, f::Symbol)\n     @ Base ./Base.jl:33\n   [2]\
    \ encrypt(s::String)\n     @ Main /tmp/tmpuieht4e_.jl:17\n   [3] macro expansion\n\
    \     @ /tmp/tmpuieht4e_.jl:65 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuieht4e_.jl:62\ntest set:\
    \ Error During Test at /tmp/tmpuieht4e_.jl:66\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type #string has no field letters\n  Stacktrace:\n\
    \   [1] getproperty(x::Function, f::Symbol)\n     @ Base ./Base.jl:33\n   [2]\
    \ encrypt(s::String)\n     @ Main /tmp/tmpuieht4e_.jl:17\n   [3] macro expansion\n\
    \     @ /tmp/tmpuieht4e_.jl:66 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/p"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuieht4e_.jl:60\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    # loop through the string\n    for i in s\n        # check if the letter\
    \ is in the dictionary\n        if i in keys(alphabet)\n            # if it is,\
    \ then add the encrypted letter to the string\n            encrypted = string(encrypted,\
    \ alphabet[i]+2)\n        else\n            # if it is not, then add the letter\
    \ to the string\n            encrypted = string(encrypted, i)\n        end\n \
    \   end\n    # return the encrypted string\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwu2wknfx.jl:35\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwu2wknfx.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2wknfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwu2wknfx.jl:36\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwu2wknfx.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2wknfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwu2wknfx.jl:37\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwu2wknfx.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2wknfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwu2wknfx.jl:38\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwu2wknfx.jl:38\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2wknfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwu2wknfx.jl:39\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwu2wknfx.jl:39 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwu2wknfx.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwu2wknfx.jl:40\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"1071414171527820117166\" == \"lippsqcjv"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwu2wknfx.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet rotated\n    alphabet_rotated = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # if the letter\
    \ is in the dictionary\n        if i in keys(alphabet)\n            # add the\
    \ rotated letter to the encrypted string\n            encrypted_string = string(encrypted_string,\
    \ get(alphabet_rotated, i, 0))\n        else\n            # add the letter to\
    \ the encrypted string\n            encrypted_string = string(encrypted_string,\
    \ i)\n        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dv_w8lm.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1dv_w8lm.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dv_w8lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1dv_w8lm.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1dv_w8lm.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dv_w8lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1dv_w8lm.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dv_w8lm.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dv_w8lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1dv_w8lm.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dv_w8lm.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dv_w8lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1dv_w8lm.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dv_w8lm.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dv_w8lm.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp1dv_w8lm.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dv_w8lm.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet rotated by two places\n    rotated_alphabet\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    # create a dictionary of the alphabet\
    \ and the rotated alphabet\n    alphabet_dict = Dict(alphabet[i] => rotated_alphabet[i]\
    \ for i in 1:length(alphabet))\n    # create an empty string to store the encrypted\
    \ string\n    encrypted_string = \"\"\n    # iterate through the string\n    for\
    \ i in s\n        # if the character is a space, add a space to the encrypted\
    \ string\n        if i == \" \"\n            push!(encrypted_string, \" \")\n\
    \        # if the character is not a space, add the encrypted character to the\
    \ encrypted string\n        else\n            push!(encrypted_string, alphabet_dict[i])\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph3nv_d9d.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmph3nv_d9d.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmph3nv_d9d.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph3nv_d9d.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmph3nv_d9d.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmph3nv_d9d.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmph3nv_d9d.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph3nv_d9d.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmph3nv_d9d.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmph3nv_d9d.jl:27\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create a string of the alphabet shifted by two\n    shifted_alphabet =\
    \ \"cdefghijklmnopqrstuvwxyzab\"\n    #create an empty string to store the encrypted\
    \ string\n    encrypted_string = \"\"\n    #loop through the string\n    for i\
    \ in 1:length(s)\n        #find the index of the letter in the alphabet\n    \
    \    index = findfirst(alphabet, s[i])\n        #add the shifted letter to the\
    \ encrypted string\n        push!(encrypted_string, shifted_alphabet[index])\n\
    \    end\n    #return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpukceiwz6.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpukceiwz6.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpukceiwz6.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpukceiwz6.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpukceiwz6.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpukceiwz6.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpukceiwz6.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpukceiwz6.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpukceiwz6.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpukceiwz6.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpukceiwz6.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted_string = \"\"\n    for i in s\n        encrypted_string = encrypted_string\
    \ * string(shift(i, 2))\n    end\n    return encrypted_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpowoot4h8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpowoot4h8.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpowoot4h8.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpowoot4h8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpowoot4h8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpowoot4h8.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpowoot4h8.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpowoot4h8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpowoot4h8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpowoot4h8.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpowoot4h8.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpowoot4h8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpowoot4h8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpowoot4h8.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpowoot4h8.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpowoot4h8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpowoot4h8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowoot4h8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \ encrypted = \"\"\n    for i in s\n        if i == \" \"\n            encrypted\
    \ = encrypted * \" \"\n        else\n            encrypted = encrypted * alphabet[alphabet.index(i)\
    \ + 2]\n        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphefx1qtf.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmphefx1qtf.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmphefx1qtf.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphefx1qtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphefx1qtf.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmphefx1qtf.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmphefx1qtf.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphefx1qtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphefx1qtf.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmphefx1qtf.jl:12\n   [3] macro expansion\n     @ /tmp/tmphefx1qtf.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphefx1qtf.jl:28\ntest set:\
    \ Error During Test at /tmp/tmphefx1qtf.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmphefx1qtf.jl:12\n   [3] macro expansion\n     @ /tmp/tmphefx1qtf.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphefx1qtf.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary with the alphabet as keys and the encrypted alphabet\
    \ as values\n    alphabet = Dict('a'=>'c', 'b'=>'d', 'c'=>'e', 'd'=>'f', 'e'=>'g',\
    \ 'f'=>'h', 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'o',\
    \ 'n'=>'p', 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t', 's'=>'u', 't'=>'v', 'u'=>'w',\
    \ 'v'=>'x', 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n    # Create an empty string\
    \ to store the encrypted string\n    encrypted_string = \"\"\n    # Iterate through\
    \ the string and encrypt each letter\n    for letter in s\n        encrypted_string\
    \ = string(encrypted_string, alphabet[letter])\n    end\n    # Return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgo741zrf.jl:28\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgo741zrf.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgo741zrf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgo741zrf.jl:29\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgo741zrf.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgo741zrf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgo741zrf.jl:30\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgo741zrf.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgo741zrf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgo741zrf.jl:31\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgo741zrf.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgo741zrf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgo741zrf.jl:32\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgo741zrf.jl:32 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgo741zrf.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpgo741zrf.jl:33\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo741zrf.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * chr(ord(i)\
    \ + 2)\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2_a7fql2.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp2_a7fql2.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2_a7fql2.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2_a7fql2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2_a7fql2.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp2_a7fql2.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmp2_a7fql2.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2_a7fql2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2_a7fql2.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp2_a7fql2.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp2_a7fql2.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2_a7fql2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2_a7fql2.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp2_a7fql2.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmp2_a7fql2.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp2_a7fql2.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp2_a7fql2.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_a7fql2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(x,2) for x in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7yvqc_ip.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp7yvqc_ip.jl:12\n   [5] macro expansion\n     @ /tmp/tmp7yvqc_ip.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7yvqc_ip.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7yvqc_ip.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp7yvqc_ip.jl:12\n   [5] macro expansion\n     @ /tmp/tmp7yvqc_ip.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7yvqc_ip.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7yvqc_ip.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmp7yvqc_ip.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmp7yvqc_ip.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp7yvqc_ip.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp7yvqc_ip.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7yvqc_ip.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet rotated by two places\n    alphabet_rotated\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    # create an empty string to store the\
    \ encrypted string\n    encrypted_string = \"\"\n    # loop through the characters\
    \ in the string\n    for i in s\n        # find the index of the character in\
    \ the alphabet\n        index = findfirst(alphabet, i)\n        # add the character\
    \ at the index in the alphabet_rotated to the encrypted string\n        push!(encrypted_string,\
    \ alphabet_rotated[index])\n    end\n    # return the encrypted string\n    return\
    \ encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7xv111ha.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7xv111ha.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7xv111ha.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7xv111ha.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp7xv111ha.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7xv111ha.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7xv111ha.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7xv111ha.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp7xv111ha.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7xv111ha.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7xv111ha.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create an array of the alphabet\n    alphabet = [\"a\" \"b\" \"c\" \"\
    d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"\
    q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"]\n    # create an empty\
    \ array to store the encrypted string\n    encrypted_string = []\n    # iterate\
    \ through the string\n    for i in s\n        # find the index of the letter in\
    \ the alphabet\n        index = findfirst(alphabet, i)\n        # add two to the\
    \ index\n        index += 2\n        # if the index is greater than the length\
    \ of the alphabet\n        if index > length(alphabet)\n            # subtract\
    \ the length of the alphabet from the index\n            index -= length(alphabet)\n\
    \        end\n        # push the letter at the index to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    # join the encrypted\
    \ string\n    return join(encrypted_string)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprp8sivcm.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Matrix{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmprp8sivcm.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprp8sivcm.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprp8sivcm.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmprp8sivcm.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Matrix{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmprp8sivcm.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmprp8sivcm.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprp8sivcm.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmprp8sivcm.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Matrix{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprp8sivcm.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmprp8sivcm.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # find the\
    \ index of the letter in the alphabet\n        index = findfirst(alphabet, i)\n\
    \        # add two to the index\n        index += 2\n        # if the index is\
    \ greater than the length of the alphabet\n        if index > length(alphabet)\n\
    \            # subtract the length of the alphabet from the index\n          \
    \  index -= length(alphabet)\n        end\n        # add the letter at the new\
    \ index to the encrypted string\n        push!(encrypted_string, alphabet[index])\n\
    \    end\n    # return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkv1p6k7_.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkv1p6k7_.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkv1p6k7_.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkv1p6k7_.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpkv1p6k7_.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkv1p6k7_.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkv1p6k7_.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkv1p6k7_.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpkv1p6k7_.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkv1p6k7_.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkv1p6k7_.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    #loop through the string\n    for i in s\n        #find the index of the\
    \ letter in the alphabet\n        index = findfirst(alphabet, i)\n        #add\
    \ two to the index and modulo by 26 to get the encrypted letter\n        encrypted\
    \ = encrypted * string(alphabet[(index + 2) % 26 + 1])\n    end\n    #return the\
    \ encrypted string\n    return encrypted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmly15qre.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpmly15qre.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmly15qre.jl:31 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmly15qre.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpmly15qre.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpmly15qre.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmly15qre.jl:32 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmly15qre.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpmly15qre.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpmly15qre.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmly15qre.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create an array of the alphabet\n    alphabet = [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    #create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    #iterate\
    \ through the string\n    for i in s\n        #find the index of the letter in\
    \ the alphabet\n        index = findfirst(alphabet,i)\n        #add 2 to the index\n\
    \        index += 2\n        #if the index is greater than 26, subtract 26\n \
    \       if index > 26\n            index -= 26\n        end\n        #add the\
    \ letter at the new index to the encrypted string\n        push!(encrypted_string,alphabet[index])\n\
    \    end\n    #return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph2rpouhp.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmph2rpouhp.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmph2rpouhp.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph2rpouhp.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmph2rpouhp.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmph2rpouhp.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmph2rpouhp.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph2rpouhp.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmph2rpouhp.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmph2rpouhp.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmph2rpouhp.jl:39 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps3u_vxx9.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmps3u_vxx9.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmps3u_vxx9.jl:46 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3u_vxx9.jl:45\ntest set:\
    \ Error During Test at /tmp/tmps3u_vxx9.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmps3u_vxx9.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmps3u_vxx9.jl:47 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3u_vxx9.jl:45\ntest set:\
    \ Error During Test at /tmp/tmps3u_vxx9.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmps3u_vxx9.jl:12\n   [3] macro expansion\n     @ /tmp/tmps3u_vxx9.jl:48\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3u_vxx9.jl:45\ntest set:\
    \ Error During Test at /tmp/tmps3u_vxx9.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmps3u_vxx9.jl:12\n   [3] macro expansion\n     @ /tmp/tmps3u_vxx9.jl:49\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3u_vxx9.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a new dictionary with the alphabet rotated\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string\n    encrypted_string = \"\"\n    # iterate through\
    \ the string\n    for i in s\n        # if the letter is not in the alphabet,\
    \ add it to the encrypted string\n        if !haskey(alphabet,i)\n           \
    \ push!(encrypted_string,i)\n        # if the letter is in the alphabet, add the\
    \ rotated letter to the encrypted string\n        else\n            push!(encrypted_string,get(alphabet_rotated,i,0))\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7m69n__h.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Int64)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp7m69n__h.jl:25\\n   [2] macro expansion\\n     @ /tmp/tmp7m69n__h.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7m69n__h.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp7m69n__h.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Int64)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp7m69n__h.jl:25\\n   [2] macro expansion\\n     @ /tmp/tmp7m69n__h.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7m69n__h.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp7m69n__h.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp7m69n__h.jl:25\\\
    n   [2] macro ex"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary with the alphabet as keys and the encrypted alphabet\
    \ as values\n    alphabet = Dict('a'=>'c', 'b'=>'d', 'c'=>'e', 'd'=>'f', 'e'=>'g',\
    \ 'f'=>'h', 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'o',\
    \ 'n'=>'p', 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t', 's'=>'u', 't'=>'v', 'u'=>'w',\
    \ 'v'=>'x', 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n    # Create an empty string\
    \ to store the encrypted string\n    encrypted_string = \"\"\n    # Iterate through\
    \ the string and replace each letter with the encrypted letter\n    for letter\
    \ in s\n        encrypted_string = string(encrypted_string, alphabet[letter])\n\
    \    end\n    # Return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpijhn29ei.jl:28\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpijhn29ei.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijhn29ei.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpijhn29ei.jl:29\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpijhn29ei.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijhn29ei.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpijhn29ei.jl:30\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijhn29ei.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijhn29ei.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpijhn29ei.jl:31\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpijhn29ei.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijhn29ei.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpijhn29ei.jl:32\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpijhn29ei.jl:32 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpijhn29ei.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpijhn29ei.jl:33\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpijhn29ei.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet shifted by two multiplied by two places\n\
    \    shifted = \"cdefghijklmnopqrstuvwxyzab\"\n    # create a dictionary of the\
    \ alphabet and the shifted alphabet\n    d = Dict(alphabet[i] => shifted[i] for\
    \ i in 1:length(alphabet))\n    # create a string to store the encrypted string\n\
    \    encrypted = \"\"\n    # iterate through the string\n    for i in s\n    \
    \    # append the encrypted letter to the encrypted string\n        push!(encrypted,\
    \ d[i])\n    end\n    # return the encrypted string\n    return encrypted\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpajlmpfdk.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpajlmpfdk.jl:23\\n   [2] macro expansion\\n     @ /tmp/tmpajlmpfdk.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpajlmpfdk.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpajlmpfdk.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpajlmpfdk.jl:23\\n   [2] macro expansion\\n     @ /tmp/tmpajlmpfdk.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpajlmpfdk.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpajlmpfdk.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpajlmpfdk.jl:23\\\
    n   [2] macro expan"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Initialize an empty string\n    encrypted_string = \"\"\n    # Loop\
    \ through each character in the string\n    for char in s\n        # If the character\
    \ is a letter\n        if char in 'abcdefghijklmnopqrstuvwxyz'\n            #\
    \ Add the character to the encrypted string\n            push!(encrypted_string,\
    \ char)\n        else\n            # If the character is not a letter, add it\
    \ to the encrypted string\n            push!(encrypted_string, char)\n       \
    \ end\n    end\n    # Return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp_5_dydf_.jl:17\nin expression\
    \ starting at /tmp/tmp_5_dydf_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i in alphabet\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        else\n            encrypted = encrypted * i\n        end\n\
    \    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxygs09rv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpxygs09rv.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpxygs09rv.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxygs09rv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxygs09rv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpxygs09rv.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmpxygs09rv.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxygs09rv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxygs09rv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpxygs09rv.jl:16\n   [3] macro expansion\n     @ /tmp/tmpxygs09rv.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxygs09rv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpxygs09rv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpxygs09rv.jl:16\n   [3] macro expansion\n     @ /tmp/tmpxygs09rv.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxygs09rv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # Create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # Iterate through the string\n    for i in s\n        # If the letter\
    \ is 'z' or 'y' then the letter is 'b' or 'a' respectively\n        if i == 'z'\n\
    \            encrypted_string = encrypted_string * 'b'\n        elseif i == 'y'\n\
    \            encrypted_string = encrypted_string * 'a'\n        else\n       \
    \     # Otherwise, the letter is the letter two places after the letter in the\
    \ dictionary\n            encrypted_string = encrypted_string * alphabet[i] +\
    \ 2\n        end\n    end\n    # Return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        if i == 'z'\n            encrypted\
    \ = encrypted * 'b'\n        elseif i == 'y'\n            encrypted = encrypted\
    \ * 'a'\n        else\n            encrypted = encrypted * char(int(i) + 2)\n\
    \        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyb8yx0b8.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpyb8yx0b8.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpyb8yx0b8.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyb8yx0b8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyb8yx0b8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpyb8yx0b8.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpyb8yx0b8.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyb8yx0b8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyb8yx0b8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpyb8yx0b8.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpyb8yx0b8.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyb8yx0b8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyb8yx0b8.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpyb8yx0b8.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpyb8yx0b8.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyb8yx0b8.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyb8yx0b8.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb8yx0b8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet shifted by two multiplied by two places\n\
    \    alphabet_shifted = Dict('a'=>5,'b'=>6,'c'=>7,'d'=>8,'e'=>9,'f'=>10,'g'=>11,'h'=>12,'i'=>13,'j'=>14,'k'=>15,'l'=>16,'m'=>17,'n'=>18,'o'=>19,'p'=>20,'q'=>21,'r'=>22,'s'=>23,'t'=>24,'u'=>25,'v'=>26,'w'=>1,'x'=>2,'y'=>3,'z'=>4)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # check if\
    \ the character is a letter\n        if i in alphabet\n            # if it is\
    \ a letter, add the encrypted letter to the encrypted string\n            encrypted_string\
    \ = string(encrypted_string, get(alphabet_shifted, i, 0))\n        else\n    \
    \        # if it is not a letter, add the character to the encrypted string\n\
    \            encrypted_string = string(encrypted_string, i)\n        end\n   \
    \ end\n    # return the encrypted string\n    return encrypted_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp16f0e7rf.jl:37\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  AbstractDict collections only contain\
    \ Pairs;\n  Either look for e.g. A=>B instead, or use the `keys` or `values`\n\
    \  function if you are looking for a key or value respectively.\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(p::Char, a::Dict{Char,\
    \ Int64})\n     @ Base ./abstractdict.jl:28\n   [3] encrypt(s::String)\n     @\
    \ Main /tmp/tmp16f0e7rf.jl:21\n   [4] macro expansion\n     @ /tmp/tmp16f0e7rf.jl:37\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp16f0e7rf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp16f0e7rf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  AbstractDict collections only contain\
    \ Pairs;\n  Either look for e.g. A=>B instead, or use the `keys` or `values`\n\
    \  function if you are looking for a key or value respectively.\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] in(p::Char, a::Dict{Char,\
    \ Int64})\n     @ Base ./abstractdict.jl:28\n   [3] encrypt(s::String)\n     @\
    \ Main /tmp/tmp16f0e7rf.jl:21\n   [4] macro expansion\n     @ /tmp/tmp16f0e7rf.jl:38\
    \ [inlined]\n   [5] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp16f0e7rf.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp16f0e7rf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  AbstractDict collections only contain Pairs;\n\
    \  Either look for e.g. A=>B instead, or use the `keys` or `values`\n  function\
    \ if you are looking for a key or value respectively.\n  Stacktrace:\n   [1] error(s::String)\n\
    \     @ Base ./error.jl:33\n   [2] in(p::Char, a::Dict{Char, Int64})\n     @ Base\
    \ ./abstractdict.jl:28\n   [3] encrypt(s::String)\n     @ Main /tmp/tmp16f0e7rf.jl:21\n\
    \   [4] macro expansion\n     @ /tmp/tmp16f0e7rf.jl:39 [inlined]\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16f0e7rf.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary that maps each letter to its corresponding letter\n\
    \    # after the shift\n    # for example, 'a' maps to 'c', 'b' maps to 'd', 'c'\
    \ maps to 'e', etc.\n    # create a dictionary that maps each letter to its corresponding\
    \ letter\n    # after the shift\n    # for example, 'a' maps to 'c', 'b' maps\
    \ to 'd', 'c' maps to 'e', etc.\n    # create a dictionary that maps each letter\
    \ to its corresponding letter\n    # after the shift\n    # for example, 'a' maps\
    \ to 'c', 'b' maps to 'd', 'c' maps to 'e', etc.\n    # create a dictionary that\
    \ maps each letter to its corresponding letter\n    # after the shift\n    # for\
    \ example, 'a' maps to 'c', 'b' maps to 'd', 'c' maps to 'e', etc.\n    # create\
    \ a dictionary that maps each letter to its corresponding letter\n    # after\
    \ the shift\n    # for example, 'a' maps to 'c', 'b' maps to 'd', 'c' maps to\
    \ 'e', etc.\n    # create a dictionary that maps each letter to its corresponding\
    \ letter\n    # after the shift\n    # for example, 'a' maps to 'c', 'b' maps\
    \ to 'd', 'c' maps to 'e', etc.\n    # create a dictionary that maps each letter\
    \ to its corresponding letter\n    # after the shift\n    # for example, 'a' maps\
    \ to 'c', 'b' maps to 'd', 'c' maps to 'e', etc.\n    # create a dictionary that\
    \ maps each letter to its corresponding letter\n    # after the shift\n    # for\
    \ example, 'a' maps to 'c', 'b' maps to 'd', 'c' maps to 'e', etc.\n    # create\
    \ a dictionary that maps each letter to its corresponding letter\n    # after\
    \ the shift\n    # for example, 'a' maps to 'c', 'b' maps to 'd', 'c' maps to\
    \ 'e', etc.\n    # create a dictionary that maps each letter to its corresponding\
    \ letter\n    # after the shift\n    # for example, 'a' maps to 'c', 'b' maps\
    \ to 'd', 'c\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdh1bs8mh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdh1bs8mh.jl:1\n\
    in expression starting at /tmp/tmpdh1bs8mh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * string(char(int(i)\
    \ + 2))\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp889vg2m.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpp889vg2m.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpp889vg2m.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp889vg2m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp889vg2m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpp889vg2m.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpp889vg2m.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp889vg2m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp889vg2m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpp889vg2m.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpp889vg2m.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp889vg2m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp889vg2m.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpp889vg2m.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpp889vg2m.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpp889vg2m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpp889vg2m.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp889vg2m.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s2 = \"\"\n    for i in s\n        if i == 'z'\n            s2 = s2 *\
    \ 'b'\n        elseif i == 'y'\n            s2 = s2 * 'a'\n        else\n    \
    \        s2 = s2 * chr(int(i) + 2)\n        end\n    end\n    return s2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsmjooy0l.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsmjooy0l.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpsmjooy0l.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmjooy0l.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsmjooy0l.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsmjooy0l.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpsmjooy0l.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmjooy0l.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsmjooy0l.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpsmjooy0l.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpsmjooy0l.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmjooy0l.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsmjooy0l.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpsmjooy0l.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpsmjooy0l.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsmjooy0l.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsmjooy0l.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmjooy0l.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6rrpfxhu.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp6rrpfxhu.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6rrpfxhu.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6rrpfxhu.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp6rrpfxhu.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp6rrpfxhu.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6rrpfxhu.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6rrpfxhu.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmp6rrpfxhu.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted = \"\"\n    for i in s\n        if i == 'z'\n            encrypted\
    \ = encrypted * 'b'\n        elseif i == 'y'\n            encrypted = encrypted\
    \ * 'a'\n        else\n            encrypted = encrypted * string(char(int(i)\
    \ + 2))\n        end\n    end\n    return encrypted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiow2bnmo.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiow2bnmo.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpiow2bnmo.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiow2bnmo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiow2bnmo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiow2bnmo.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpiow2bnmo.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiow2bnmo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiow2bnmo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpiow2bnmo.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpiow2bnmo.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiow2bnmo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiow2bnmo.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpiow2bnmo.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpiow2bnmo.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiow2bnmo.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiow2bnmo.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiow2bnmo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i == \" \"\n            encrypted = encrypted * \" \"\n \
    \       else\n            encrypted = encrypted * alphabet[(findfirst(alphabet,\
    \ i) + 2) % 26]\n        end\n    end\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprlag8g5p.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprlag8g5p.jl:18\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprlag8g5p.jl:28 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprlag8g5p.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprlag8g5p.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprlag8g5p.jl:18\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprlag8g5p.jl:29 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprlag8g5p.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmprlag8g5p.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmprlag8g5p.jl:18\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprlag8g5p.jl:30 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \ encrypted_string = \"\"\n    for i in s\n        if i == \" \"\n           \
    \ encrypted_string = encrypted_string * \" \"\n        else\n            encrypted_string\
    \ = encrypted_string * alphabet[(alphabet.index(i) + 2) % 26]\n        end\n \
    \   end\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp79quqlc1.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp79quqlc1.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp79quqlc1.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79quqlc1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp79quqlc1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp79quqlc1.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp79quqlc1.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79quqlc1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp79quqlc1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp79quqlc1.jl:12\n   [3] macro expansion\n     @ /tmp/tmp79quqlc1.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp79quqlc1.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp79quqlc1.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp79quqlc1.jl:12\n   [3] macro expansion\n     @ /tmp/tmp79quqlc1.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79quqlc1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase\n    new_s = \"\"\n    for i in s\n        if i == 'z'\n\
    \            new_s = new_s * \"b\"\n        elseif i == 'y'\n            new_s\
    \ = new_s * \"a\"\n        else\n            new_s = new_s * (i+2)\n        end\n\
    \    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiehjobmt.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpiehjobmt.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpiehjobmt.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiehjobmt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpiehjobmt.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpiehjobmt.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpiehjobmt.jl:31 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiehjobmt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpiehjobmt.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpiehjobmt.jl:12\n   [3] macro expansion\n     @ /tmp/tmpiehjobmt.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiehjobmt.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpiehjobmt.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpiehjobmt.jl:12\n   [3] macro expansion\n     @ /tmp/tmpiehjobmt.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiehjobmt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet rotated by two\n    alphabet_rotated =\
    \ alphabet[3:end] * alphabet[1:2]\n    # Create a dictionary of the alphabet and\
    \ the alphabet rotated by two\n    alphabet_dict = Dict(alphabet[i] => alphabet_rotated[i]\
    \ for i in 1:length(alphabet))\n    # Create a string of the encrypted string\n\
    \    encrypted_string = \"\"\n    # Iterate through the string and add the encrypted\
    \ letter to the encrypted string\n    for i in 1:length(s)\n        encrypted_string\
    \ = encrypted_string * alphabet_dict[s[i]]\n    end\n    # Return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd7ev19r0.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd7ev19r0.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7ev19r0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd7ev19r0.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpd7ev19r0.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7ev19r0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd7ev19r0.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7ev19r0.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7ev19r0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd7ev19r0.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7ev19r0.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7ev19r0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd7ev19r0.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd7ev19r0.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd7ev19r0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd7ev19r0.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd7ev19r0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a new string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through each character in the string\n    for i in s\n   \
    \     #if the character is a space, add a space to the encrypted string\n    \
    \    if i == \" \"\n            push!(encrypted_string, \" \")\n        #if the\
    \ character is a lowercase letter, add the encrypted letter to the encrypted string\n\
    \        elseif i in 'a':'z'\n            push!(encrypted_string, Char(Int(i)\
    \ + 2))\n        #if the character is a uppercase letter, add the encrypted letter\
    \ to the encrypted string\n        elseif i in 'A':'Z'\n            push!(encrypted_string,\
    \ Char(Int(i) + 2))\n        #if the character is a punctuation mark, add the\
    \ punctuation mark to the encrypted string\n        elseif i in '!\"#$%&\\'()*+,-./:;<=>?@[\\\
    \\]^_`{|}~'\n            push!(encrypted_string, i)\n        #if the character\
    \ is a number, add the number to the encrypted string\n        elseif i in '0':'9'\n\
    \            push!(encrypted_string, i)\n        #if the character is a letter,\
    \ add the encrypted letter to the encrypted string\n        else\n           \
    \ push!(encrypted_string, Char(Int(i) + 2))\n        end\n    end\n    #return\
    \ the encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpzadwmbwc.jl:26\nin expression starting at /tmp/tmpzadwmbwc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # add 2 to the index\n        index += 2\n        # if the index is greater\
    \ than 26, subtract 26\n        if index > 26\n            index -= 26\n     \
    \   end\n        # add the character at the new index to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    # return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2o7ocroh.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp2o7ocroh.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp2o7ocroh.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2o7ocroh.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp2o7ocroh.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp2o7ocroh.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp2o7ocroh.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2o7ocroh.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp2o7ocroh.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp2o7ocroh.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp2o7ocroh.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create an array of the alphabet\n    alphabet = [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    # Create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    # Loop\
    \ through each character in the string\n    for i in s\n        # Find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       # Add two to the index\n        index += 2\n        # If the index is\
    \ greater than 26, subtract 26\n        if index > 26\n            index -= 26\n\
    \        end\n        # Add the encrypted character to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    # Return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpub06xrr9.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmpub06xrr9.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpub06xrr9.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpub06xrr9.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpub06xrr9.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpub06xrr9.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpub06xrr9.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpub06xrr9.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpub06xrr9.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpub06xrr9.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpub06xrr9.jl:39 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a new string to store the encrypted string\n    new_string =\
    \ \"\"\n    # Iterate through the string\n    for i in s\n        # If the character\
    \ is a space, add a space to the new string\n        if i == \" \"\n         \
    \   new_string *= \" \"\n        # If the character is a letter, add the encrypted\
    \ letter to the new string\n        else\n            new_string *= encrypt_letter(i)\n\
    \        end\n    end\n    # Return the new string\n    return new_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsd6hcbsl.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: encrypt_letter not\
    \ defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsd6hcbsl.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpsd6hcbsl.jl:32 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsd6hcbsl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsd6hcbsl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: encrypt_letter not\
    \ defined\n  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsd6hcbsl.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpsd6hcbsl.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsd6hcbsl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsd6hcbsl.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: encrypt_letter not defined\n \
    \ Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsd6hcbsl.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpsd6hcbsl.jl:34 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsd6hcbsl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsd6hcbsl.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: encrypt_letter not defined\n \
    \ Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpsd6hcbsl.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmpsd6hcbsl.jl:35 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpsd6hcbsl.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpsd6hcbsl.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"faew"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsd6hcbsl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ c in s\n        if c in alphabet\n            encrypted = encrypted * c\n  \
    \      end\n    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tn7nxj9.jl:26\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"hi\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tn7nxj9.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tn7nxj9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_tn7nxj9.jl:27\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"asdfghjkl\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_tn7nxj9.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tn7nxj9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_tn7nxj9.jl:28\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"gf\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_tn7nxj9.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tn7nxj9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_tn7nxj9.jl:29\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"et\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_tn7nxj9.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tn7nxj9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_tn7nxj9.jl:30\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"faewfawefaewg\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_tn7nxj9.jl:30 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tn7nxj9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_tn7nxj9.jl:31\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"hellomyfriend\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tn7nxj9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string = \"\"\
    \n    for i in s\n        encrypted_string = string(encrypted_string, alphabet[(findfirst(alphabet,\
    \ i) + 2) % 26])\n    end\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5c72_kl5.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5c72_kl5.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5c72_kl5.jl:24 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5c72_kl5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5c72_kl5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5c72_kl5.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5c72_kl5.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5c72_kl5.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmp5c72_kl5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp5c72_kl5.jl:15\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5c72_kl5.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create a string of the alphabet shifted down by two multiplied to two places\n\
    \    shifted_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\n    #create a dictionary\
    \ of the alphabet and the shifted alphabet\n    alphabet_dict = Dict(alphabet[i]\
    \ => shifted_alphabet[i] for i in 1:length(alphabet))\n    #create an empty string\
    \ to store the encrypted string\n    encrypted_string = \"\"\n    #iterate through\
    \ the string\n    for i in 1:length(s)\n        #add the encrypted letter to the\
    \ encrypted string\n        encrypted_string = string(encrypted_string,alphabet_dict[s[i]])\n\
    \    end\n    #return the encrypted string\n    return encrypted_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpot991kvq.jl:33\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpot991kvq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot991kvq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpot991kvq.jl:34\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpot991kvq.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot991kvq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpot991kvq.jl:35\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpot991kvq.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot991kvq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpot991kvq.jl:36\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpot991kvq.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot991kvq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpot991kvq.jl:37\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpot991kvq.jl:37 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot991kvq.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpot991kvq.jl:38\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpot991kvq.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * chr(ord(i)\
    \ + 2)\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiamv2983.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamv2983.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpiamv2983.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamv2983.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiamv2983.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamv2983.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpiamv2983.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamv2983.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiamv2983.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamv2983.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpiamv2983.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamv2983.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiamv2983.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpiamv2983.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpiamv2983.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpiamv2983.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpiamv2983.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiamv2983.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[3:26]\
    \ * \" \" * alphabet[1:2] * \" \" * alphabet[2:3]\n    s = s * \" \"\n    s =\
    \ s[1:length(s)]\n    s = lowercase(s)\n    s = replace(s, \" \", \"\")\n    s\
    \ = replace(s, alphabet, new_alphabet)\n    return s\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsuxzf0aq.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\n \
    \   replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpsuxzf0aq.jl:17\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpsuxzf0aq.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsuxzf0aq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpsuxzf0aq.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpsuxzf0aq.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsuxzf0aq.jl:27 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsuxzf0aq.jl:25\\ntest set:\
    \ Error During"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary with the alphabet as keys and the encrypted alphabet\
    \ as values\n    alphabet = Dict('a'=>'c', 'b'=>'d', 'c'=>'e', 'd'=>'f', 'e'=>'g',\
    \ 'f'=>'h', 'g'=>'i', 'h'=>'j', 'i'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'o',\
    \ 'n'=>'p', 'o'=>'q', 'p'=>'r', 'q'=>'s', 'r'=>'t', 's'=>'u', 't'=>'v', 'u'=>'w',\
    \ 'v'=>'x', 'w'=>'y', 'x'=>'z', 'y'=>'a', 'z'=>'b')\n    # create an empty string\
    \ to store the encrypted string\n    encrypted_string = \"\"\n    # iterate through\
    \ the string\n    for i in s\n        # append the encrypted letter to the encrypted\
    \ string\n        push!(encrypted_string, alphabet[i])\n    end\n    # return\
    \ the encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1kxx0x62.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp1kxx0x62.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp1kxx0x62.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1kxx0x62.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1kxx0x62.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp1kxx0x62.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp1kxx0x62.jl:30\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1kxx0x62.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1kxx0x62.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp1kxx0x62.jl:19\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # create a string of the alphabet shifted by two multiplied by two places\n\
    \    alphabet_shifted = \"cdefghijklmnopqrstuvwxyzab\"\n    # create an empty\
    \ string to store the encrypted string\n    encrypted_string = \"\"\n    # loop\
    \ through the string\n    for i in s\n        # find the index of the character\
    \ in the alphabet\n        index = findfirst(alphabet, i)\n        # add the character\
    \ at that index in the shifted alphabet to the encrypted string\n        push!(encrypted_string,\
    \ alphabet_shifted[index])\n    end\n    # return the encrypted string\n    return\
    \ encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4jm2eb0i.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4jm2eb0i.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4jm2eb0i.jl:33 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4jm2eb0i.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp4jm2eb0i.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4jm2eb0i.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4jm2eb0i.jl:34 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4jm2eb0i.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmp4jm2eb0i.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4jm2eb0i.jl:21\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4jm2eb0i.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    s = s.replace(\"a\", \"c\")\n    s = s.replace(\"\
    b\", \"d\")\n    s = s.replace(\"c\", \"e\")\n    s = s.replace(\"d\", \"f\")\n\
    \    s = s.replace(\"e\", \"g\")\n    s = s.replace(\"f\", \"h\")\n    s = s.replace(\"\
    g\", \"i\")\n    s = s.replace(\"h\", \"j\")\n    s = s.replace(\"i\", \"k\")\n\
    \    s = s.replace(\"j\", \"l\")\n    s = s.replace(\"k\", \"m\")\n    s = s.replace(\"\
    l\", \"n\")\n    s = s.replace(\"m\", \"o\")\n    s = s.replace(\"n\", \"p\")\n\
    \    s = s.replace(\"o\", \"q\")\n    s = s.replace(\"p\", \"r\")\n    s = s.replace(\"\
    q\", \"s\")\n    s = s.replace(\"r\", \"t\")\n    s = s.replace(\"s\", \"u\")\n\
    \    s = s.replace(\"t\", \"v\")\n    s = s.replace(\"u\", \"w\")\n    s = s.replace(\"\
    v\", \"x\")\n    s = s.replace(\"w\", \"y\")\n    s = s.replace(\"x\", \"z\")\n\
    \    s = s.replace(\"y\", \"a\")\n    s = s.replace(\"z\", \"b\")\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwusls68n.jl:46\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwusls68n.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpwusls68n.jl:46 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwusls68n.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpwusls68n.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpwusls68n.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmpwusls68n.jl:47 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwusls68n.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpwusls68n.jl:48\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwusls68n.jl:12\n   [3] macro expansion\n     @ /tmp/tmpwusls68n.jl:48\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwusls68n.jl:45\ntest set:\
    \ Error During Test at /tmp/tmpwusls68n.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpwusls68n.jl:12\n   [3] macro expansion\n     @ /tmp/tmpwusls68n.jl:49\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwusls68n.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxmv5yiyb.jl:46\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  type String has no\
    \ field lowercase\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpxmv5yiyb.jl:12\\\
    n   [3] macro expansion\\n     @ /tmp/tmpxmv5yiyb.jl:46 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmv5yiyb.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmpxmv5yiyb.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  type String has no field lowercase\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpxmv5yiyb.jl:12\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpxmv5yiyb.jl:47 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmv5yiyb.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmpxmv5yiyb.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmpxmv5yiyb.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmpxmv5yiyb.jl:48 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxmv5yiyb.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmpxmv5yiyb.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(\"et\") == \"ix\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmpxmv5yiyb.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmpxmv5yiyb.jl:49 [inlined"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i == \" \"\n            encrypted = encrypted * \" \"\n \
    \       else\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        end\n    end\n    return encrypted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl6d2h9d8.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpl6d2h9d8.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpl6d2h9d8.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6d2h9d8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6d2h9d8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpl6d2h9d8.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpl6d2h9d8.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6d2h9d8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6d2h9d8.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpl6d2h9d8.jl:18\n   [3] macro expansion\n     @ /tmp/tmpl6d2h9d8.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6d2h9d8.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpl6d2h9d8.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpl6d2h9d8.jl:18\n   [3] macro expansion\n     @ /tmp/tmpl6d2h9d8.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6d2h9d8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    #create a dictionary of the alphabet rotated by two\n    rotated = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    #create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    #iterate through the string\n    for i in s\n        #add the encrypted\
    \ letter to the string\n        encrypted = encrypted * string(rotated[i])\n \
    \   end\n    #return the encrypted string\n    return encrypted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp593bqft7.jl:31\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp593bqft7.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp593bqft7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp593bqft7.jl:32\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp593bqft7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp593bqft7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp593bqft7.jl:33\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp593bqft7.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp593bqft7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp593bqft7.jl:34\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp593bqft7.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp593bqft7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp593bqft7.jl:35\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp593bqft7.jl:35 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp593bqft7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp593bqft7.jl:36\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp593bqft7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    s = s.replace(\"a\", \"c\")\n    s = s.replace(\"\
    b\", \"d\")\n    s = s.replace(\"c\", \"e\")\n    s = s.replace(\"d\", \"f\")\n\
    \    s = s.replace(\"e\", \"g\")\n    s = s.replace(\"f\", \"h\")\n    s = s.replace(\"\
    g\", \"i\")\n    s = s.replace(\"h\", \"j\")\n    s = s.replace(\"i\", \"k\")\n\
    \    s = s.replace(\"j\", \"l\")\n    s = s.replace(\"k\", \"m\")\n    s = s.replace(\"\
    l\", \"n\")\n    s = s.replace(\"m\", \"o\")\n    s = s.replace(\"n\", \"p\")\n\
    \    s = s.replace(\"o\", \"q\")\n    s = s.replace(\"p\", \"r\")\n    s = s.replace(\"\
    q\", \"s\")\n    s = s.replace(\"r\", \"t\")\n    s = s.replace(\"s\", \"u\")\n\
    \    s = s.replace(\"t\", \"v\")\n    s = s.replace(\"u\", \"w\")\n    s = s.replace(\"\
    v\", \"x\")\n    s = s.replace(\"w\", \"y\")\n    s = s.replace(\"x\", \"z\")\n\
    \    s = s.replace(\"y\", \"a\")\n    s = s.replace(\"z\", \"b\")\n    return\
    \ s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_elyef5v.jl:46\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  type String has no\
    \ field lowercase\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] encrypt(s::String)\\n     @ Main /tmp/tmp_elyef5v.jl:12\\\
    n   [3] macro expansion\\n     @ /tmp/tmp_elyef5v.jl:46 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_elyef5v.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmp_elyef5v.jl:47\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  type String has no field lowercase\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] encrypt(s::String)\\n     @ Main /tmp/tmp_elyef5v.jl:12\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmp_elyef5v.jl:47 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_elyef5v.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmp_elyef5v.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmp_elyef5v.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmp_elyef5v.jl:48 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_elyef5v.jl:45\\ntest set:\
    \ Error During Test at /tmp/tmp_elyef5v.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(\"et\") == \"ix\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmp_elyef5v.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmp_elyef5v.jl:49 [inlined"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n   \
    \ encrypted = \"\"\n    for i in s\n        if i in alphabet\n            encrypted\
    \ = encrypted * alphabet[(alphabet.index(i) + 2) % 26]\n        else\n       \
    \     encrypted = encrypted * i\n        end\n    end\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppx34qsrd.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  type String has no\
    \ field lowercase\\n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\\
    n     @ Base ./Base.jl:33\\n   [2] encrypt(s::String)\\n     @ Main /tmp/tmppx34qsrd.jl:12\\\
    n   [3] macro expansion\\n     @ /tmp/tmppx34qsrd.jl:29 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppx34qsrd.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmppx34qsrd.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  type String has no field lowercase\\\
    n  Stacktrace:\\n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\\
    n   [2] encrypt(s::String)\\n     @ Main /tmp/tmppx34qsrd.jl:12\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmppx34qsrd.jl:30 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppx34qsrd.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmppx34qsrd.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmppx34qsrd.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmppx34qsrd.jl:31 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppx34qsrd.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmppx34qsrd.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"et\") == \"ix\"\\n  type String has no field lowercase\\n  Stacktrace:\\\
    n   [1] getproperty(x::String, f::Symbol)\\n     @ Base ./Base.jl:33\\n   [2]\
    \ encrypt(s::String)\\n     @ Main /tmp/tmppx34qsrd.jl:12\\n   [3] macro expansion\\\
    n     @ /tmp/tmppx34qsrd.jl:32 [inlined"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptae84te9.jl:46\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"ba\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptae84te9.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptae84te9.jl:45\ntest set: Test\
    \ Failed at /tmp/tmptae84te9.jl:47\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"aabbabbab\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptae84te9.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptae84te9.jl:45\ntest set: Test\
    \ Failed at /tmp/tmptae84te9.jl:48\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ab\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptae84te9.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptae84te9.jl:45\ntest set: Test\
    \ Failed at /tmp/tmptae84te9.jl:49\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"ab\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptae84te9.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptae84te9.jl:45\ntest set: Test\
    \ Failed at /tmp/tmptae84te9.jl:50\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"baaabaaabaaaa\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptae84te9.jl:50 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptae84te9.jl:45\ntest set: Test\
    \ Failed at /tmp/tmptae84te9.jl:51\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"babbaaabbaabb\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptae84te9.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    # Create a string of the alphabet rotated by two places\n    alphabet_rotated\
    \ = alphabet[3:end] * alphabet[1:2]\n    # Create a dictionary of the alphabet\
    \ and the alphabet rotated\n    alphabet_dict = Dict(alphabet[i] => alphabet_rotated[i]\
    \ for i in 1:length(alphabet))\n    # Create an empty string to store the encrypted\
    \ string\n    encrypted_string = \"\"\n    # Loop through the string and replace\
    \ the letters with the rotated letters\n    for i in 1:length(s)\n        encrypted_string\
    \ = encrypted_string * alphabet_dict[s[i]]\n    end\n    # Return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8i2sbdiu.jl:32\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8i2sbdiu.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i2sbdiu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8i2sbdiu.jl:33\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8i2sbdiu.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i2sbdiu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8i2sbdiu.jl:34\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8i2sbdiu.jl:34\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i2sbdiu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8i2sbdiu.jl:35\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8i2sbdiu.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i2sbdiu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8i2sbdiu.jl:36\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8i2sbdiu.jl:36 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i2sbdiu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8i2sbdiu.jl:37\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqoahtkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8i2sbdiu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for\
    \ i in s\n        if i == \" \"\n            encrypted = encrypted * \" \"\n \
    \       else\n            encrypted = encrypted * alphabet[(alphabet.index(i)\
    \ + 2) % 26]\n        end\n    end\n    return encrypted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk1ljka4x.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpk1ljka4x.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpk1ljka4x.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1ljka4x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpk1ljka4x.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field index\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmpk1ljka4x.jl:18\n   [3] macro expansion\n\
    \     @ /tmp/tmpk1ljka4x.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1ljka4x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpk1ljka4x.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpk1ljka4x.jl:18\n   [3] macro expansion\n     @ /tmp/tmpk1ljka4x.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk1ljka4x.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpk1ljka4x.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field index\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmpk1ljka4x.jl:18\n   [3] macro expansion\n     @ /tmp/tmpk1ljka4x.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1ljka4x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create an array of the alphabet\n    alphabet = [chr(i) for i in range(ord('a'),\
    \ ord('z')+1)]\n    # Create an array of the alphabet shifted by two\n    shifted_alphabet\
    \ = alphabet[2:end]\n    pushfirst!(shifted_alphabet, alphabet[1:2])\n    pushfirst!(shifted_alphabet,\
    \ alphabet[1:2])\n    # Create a dictionary of the alphabet and the shifted alphabet\n\
    \    alphabet_dict = Dict(zip(alphabet, shifted_alphabet))\n    # Create an array\
    \ of the encrypted string\n    encrypted_string = [alphabet_dict[i] for i in s]\n\
    \    # Return the encrypted string\n    return join(encrypted_string)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgrxx0eyz.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpgrxx0eyz.jl:13\n\
    \   [2] macro expansion\n     @ /tmp/tmpgrxx0eyz.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgrxx0eyz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgrxx0eyz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpgrxx0eyz.jl:13\n\
    \   [2] macro expansion\n     @ /tmp/tmpgrxx0eyz.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgrxx0eyz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgrxx0eyz.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpgrxx0eyz.jl:13\n   [2] macro expansion\n\
    \     @ /tmp/tmpgrxx0eyz.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgrxx0eyz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgrxx0eyz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpgrxx0eyz.jl:13\n   [2] macro expansion\n\
    \     @ /tmp/tmpgrxx0eyz.jl:33 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpgrxx0eyz.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpgrxx0eyz.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrxx0eyz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create an array of the alphabet\n    alphabet = [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    #create an empty\
    \ string to store the encrypted string\n    encrypted = \"\"\n    #loop through\
    \ the string\n    for i in s\n        #find the index of the letter in the alphabet\n\
    \        index = findfirst(alphabet,i)\n        #add two to the index\n      \
    \  index += 2\n        #if the index is greater than 26, subtract 26\n       \
    \ if index > 26\n            index -= 26\n        end\n        #add the letter\
    \ to the encrypted string\n        push!(encrypted,alphabet[index])\n    end\n\
    \    #return the encrypted string\n    return encrypted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9k3gn0ac.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmp9k3gn0ac.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp9k3gn0ac.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9k3gn0ac.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp9k3gn0ac.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp9k3gn0ac.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmp9k3gn0ac.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9k3gn0ac.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmp9k3gn0ac.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp9k3gn0ac.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9k3gn0ac.jl:39 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    return [shift(x,2) for x in s]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1i5zoisr.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp1i5zoisr.jl:12\n   [5] macro expansion\n     @ /tmp/tmp1i5zoisr.jl:19\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1i5zoisr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1i5zoisr.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @\
    \ Main /tmp/tmp1i5zoisr.jl:12\n   [5] macro expansion\n     @ /tmp/tmp1i5zoisr.jl:20\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1i5zoisr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1i5zoisr.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\")(x::Char)\n     @ Main ./none:0\n   [2] iterate\n     @\
    \ ./generator.jl:47 [inlined]\n   [3] collect(itr::Base.Generator{String, var\"\
    #1#2\"})\n     @ Base ./array.jl:681\n   [4] encrypt(s::String)\n     @ Main /tmp/tmp1i5zoisr.jl:12\n\
    \   [5] macro expansion\n     @ /tmp/tmp1i5zoisr.jl:21 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1i5zoisr.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp1i5zoisr.jl:22\n  Test threw"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1i5zoisr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbwqire7r.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpbwqire7r.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbwqire7r.jl:19 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbwqire7r.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbwqire7r.jl:20\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpbwqire7r.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbwqire7r.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbwqire7r.jl:18\\ntest set:\
    \ Error During Test at /tmp/tmpbwqire7r.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type String\\n  Closest candidates are:\\n    convert(::Type{String},\
    \ !Matched::String) at essentials.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:231\\"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = \"\"\n \
    \   for i in s\n        if i in alphabet\n            new_alphabet = new_alphabet\
    \ * string(alphabet[alphabet.find(i) + 2])\n        else\n            new_alphabet\
    \ = new_alphabet * string(i)\n        end\n    end\n    return new_alphabet\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph097ftrz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field find\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmph097ftrz.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmph097ftrz.jl:28 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph097ftrz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph097ftrz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field find\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmph097ftrz.jl:16\n   [3] macro expansion\n\
    \     @ /tmp/tmph097ftrz.jl:29 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph097ftrz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph097ftrz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmph097ftrz.jl:16\n   [3] macro expansion\n     @ /tmp/tmph097ftrz.jl:30\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph097ftrz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph097ftrz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field find\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmph097ftrz.jl:16\n   [3] macro expansion\n     @ /tmp/tmph097ftrz.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph097ftrz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create an array of the alphabet\n    alphabet = [\"a\",\"b\",\"c\",\"\
    d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"\
    q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    # Create an empty\
    \ array to store the encrypted string\n    encrypted = []\n    # Loop through\
    \ the string\n    for i in s\n        # Find the index of the letter in the alphabet\n\
    \        index = findfirst(alphabet, i)\n        # Add two to the index\n    \
    \    index += 2\n        # If the index is greater than the length of the alphabet,\
    \ subtract the length of the alphabet\n        if index > length(alphabet)\n \
    \           index -= length(alphabet)\n        end\n        # Push the letter\
    \ at the index to the encrypted array\n        push!(encrypted, alphabet[index])\n\
    \    end\n    # Return the encrypted array as a string\n    return join(encrypted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg_22iknx.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n\
    \    findfirst(!Matched::Function, ::Any) at array.jl:1902\\n    findfirst(::AbstractArray)\
    \ at array.jl:1828\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n\
    \   [1] encrypt(s::String)\\n     @ Main /tmp/tmpg_22iknx.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpg_22iknx.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_22iknx.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpg_22iknx.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::Vector{String}, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\\
    n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmpg_22iknx.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpg_22iknx.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_22iknx.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmpg_22iknx.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractArray) at array.jl:1828\\n    findfirst(::Any)\
    \ at array.jl:1818\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpg_22iknx.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg_22iknx.jl:39 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n  "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        new_string = new_string * string(shift(i,2))\n\
    \    end\n    return new_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk_1b55p8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpk_1b55p8.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpk_1b55p8.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_1b55p8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpk_1b55p8.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpk_1b55p8.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpk_1b55p8.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_1b55p8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpk_1b55p8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpk_1b55p8.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpk_1b55p8.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_1b55p8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpk_1b55p8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpk_1b55p8.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpk_1b55p8.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpk_1b55p8.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpk_1b55p8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_1b55p8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_string = \"\"\n    for i in s\n        if i == \"z\"\n           \
    \ new_string = new_string * \"b\"\n        elseif i == \"y\"\n            new_string\
    \ = new_string * \"a\"\n        else\n            new_string = new_string * string(Char(Int(i)\
    \ + 2))\n        end\n    end\n    return new_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8yenti4.jl:29\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"jk\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy8yenti4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8yenti4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8yenti4.jl:30\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"cufhijlmn\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpy8yenti4.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8yenti4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8yenti4.jl:31\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ih\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8yenti4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8yenti4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8yenti4.jl:32\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"gv\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8yenti4.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8yenti4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8yenti4.jl:33\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"hcgyhcyghcgyi\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8yenti4.jl:33 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8yenti4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpy8yenti4.jl:34\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"jgnnqo{htkgpf\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8yenti4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = s.lowercase\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted\
    \ = \"\"\n    for i in s\n        index = findfirst(alphabet, i)\n        if index\
    \ + 2 > 26\n            encrypted = encrypted * alphabet[index + 2 - 26]\n   \
    \     else\n            encrypted = encrypted * alphabet[index + 2]\n        end\n\
    \    end\n    return encrypted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4xwavg1p.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp4xwavg1p.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp4xwavg1p.jl:30 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xwavg1p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4xwavg1p.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  type String has no field lowercase\n\
    \  Stacktrace:\n   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n\
    \   [2] encrypt(s::String)\n     @ Main /tmp/tmp4xwavg1p.jl:12\n   [3] macro expansion\n\
    \     @ /tmp/tmp4xwavg1p.jl:31 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xwavg1p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4xwavg1p.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp4xwavg1p.jl:12\n   [3] macro expansion\n     @ /tmp/tmp4xwavg1p.jl:32\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4xwavg1p.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp4xwavg1p.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  type String has no field lowercase\n  Stacktrace:\n\
    \   [1] getproperty(x::String, f::Symbol)\n     @ Base ./Base.jl:33\n   [2] encrypt(s::String)\n\
    \     @ Main /tmp/tmp4xwavg1p.jl:12\n   [3] macro expansion\n     @ /tmp/tmp4xwavg1p.jl:33\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/packa"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xwavg1p.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create a variable to store the encrypted string\n    encrypted_string =\
    \ \"\"\n    #iterate through the string\n    for i in s\n        #find the index\
    \ of the letter in the alphabet\n        index = findfirst(alphabet, i)\n    \
    \    #add two to the index\n        index += 2\n        #if the index is greater\
    \ than the length of the alphabet\n        if index > length(alphabet)\n     \
    \       #subtract the length of the alphabet from the index\n            index\
    \ -= length(alphabet)\n        end\n        #add the letter at the index to the\
    \ encrypted string\n        push!(encrypted_string, alphabet[index])\n    end\n\
    \    #return the encrypted string\n    return encrypted_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkeup0vem.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkeup0vem.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkeup0vem.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkeup0vem.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpkeup0vem.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkeup0vem.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkeup0vem.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkeup0vem.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpkeup0vem.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpkeup0vem.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkeup0vem.jl:40 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a new string\n    new_string = \"\"\n    # loop through the string\n\
    \    for i in s\n        # if the character is a letter\n        if i in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            # add the character to the new string\n            new_string = new_string\
    \ * i\n        end\n    end\n    # return the new string\n    return new_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9dftzq6d.jl:17\nin expression\
    \ starting at /tmp/tmp9dftzq6d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary that maps each letter to the next letter\n    #\
    \ in the alphabet\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    dict = Dict()\n\
    \    for i in 1:26\n        dict[alphabet[i]] = alphabet[i+2]\n    end\n    dict[\"\
    z\"] = \"b\"\n    dict[\"y\"] = \"a\"\n    # create a new string that is the encrypted\
    \ version of the input string\n    new_string = \"\"\n    for i in 1:length(s)\n\
    \        new_string = new_string * dict[s[i]]\n    end\n    return new_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfsv2t823.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  BoundsError: attempt\
    \ to access 26-element Vector{String} at index [27]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpfsv2t823.jl:17\\\
    n   [3] macro expansion\\n     @ /tmp/tmpfsv2t823.jl:33 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfsv2t823.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpfsv2t823.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  BoundsError: attempt to access\
    \ 26-element Vector{String} at index [27]\\n  Stacktrace:\\n   [1] getindex\\\
    n     @ ./array.jl:805 [inlined]\\n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpfsv2t823.jl:17\\\
    n   [3] macro expansion\\n     @ /tmp/tmpfsv2t823.jl:34 [inlined]\\n   [4] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfsv2t823.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpfsv2t823.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  BoundsError: attempt to access 26-element Vector{String}\
    \ at index [27]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\\
    n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpfsv2t823.jl:17\\n   [3] macro\
    \ expansion\\n     @ /tmp/tmpfsv2t823.jl:35 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfsv2t823.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpfsv2t823.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"et\") == \"ix\"\\n  BoundsError: attempt to access 26-element Vector{String}\
    \ at index [27]\\n  Stacktrace:\\n   [1] getindex\\n     @ ./array.jl:805 [inlined]\\\
    n   [2] encrypt(s::String)\\n     @ Main /tmp/tmpfsv2t8"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create an empty string to store the encrypted string\n    encrypted = \"\
    \"\n    # iterate through the string\n    for i in s\n        # if the letter\
    \ is 'a' or 'b'\n        if i == 'a' || i == 'b'\n            # add the letter\
    \ to the encrypted string\n            push!(encrypted,i)\n        else\n    \
    \        # add the letter to the encrypted string\n            push!(encrypted,get(alphabet,i,0))\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp98tjaa02.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Int64)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp98tjaa02.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp98tjaa02.jl:35\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp98tjaa02.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp98tjaa02.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmp98tjaa02.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp98tjaa02.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp98tjaa02.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp98tjaa02.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp98tjaa02.jl:24\\\
    n   [2] macro exp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create an array of the alphabet\n    alphabet = [chr(i) for i in range(97,\
    \ 123)]\n    # create an array of the encrypted alphabet\n    encrypted_alphabet\
    \ = [chr(i) for i in range(99, 125)]\n    # create an array of the encrypted string\n\
    \    encrypted_string = []\n    # iterate through the string\n    for i in s\n\
    \        # find the index of the letter in the alphabet\n        index = findfirst(x\
    \ -> x == i, alphabet)\n        # push the encrypted letter to the encrypted string\
    \ array\n        push!(encrypted_string, encrypted_alphabet[index])\n    end\n\
    \    # return the encrypted string\n    return join(encrypted_string)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2heaojtu.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  ArgumentError: At least one of `length`\
    \ or `step` must be specified\n  Stacktrace:\n   [1] _range2(start::Int64, #unused#::Nothing,\
    \ stop::Int64, #unused#::Nothing)\n     @ Base ./range.jl:97\n   [2] range(start::Int64,\
    \ stop::Int64; length::Nothing, step::Nothing)\n     @ Base ./range.jl:94\n  \
    \ [3] range(start::Int64, stop::Int64)\n     @ Base ./range.jl:94\n   [4] encrypt(s::String)\n\
    \     @ Main /tmp/tmp2heaojtu.jl:13\n   [5] macro expansion\n     @ /tmp/tmp2heaojtu.jl:33\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2heaojtu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2heaojtu.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  ArgumentError: At least one of\
    \ `length` or `step` must be specified\n  Stacktrace:\n   [1] _range2(start::Int64,\
    \ #unused#::Nothing, stop::Int64, #unused#::Nothing)\n     @ Base ./range.jl:97\n\
    \   [2] range(start::Int64, stop::Int64; length::Nothing, step::Nothing)\n   \
    \  @ Base ./range.jl:94\n   [3] range(start::Int64, stop::Int64)\n     @ Base\
    \ ./range.jl:94\n   [4] encrypt(s::String)\n     @ Main /tmp/tmp2heaojtu.jl:13\n\
    \   [5] macro expansion\n     @ /tmp/tmp2heaojtu.jl:34 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2heaojtu.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp2heaojtu.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  ArgumentError: At least one of `length` or `step`\
    \ must be specified\n  Stacktrace:\n   [1] _range2(start::Int64, #unused#::Nothing,\
    \ stop::Int64, #unused#::Nothing)\n     @ Base ./range.jl:97\n   [2] range(start::Int64,\
    \ stop::Int64; length::Nothing, step::Nothing)\n     @ Base ./range.jl:94\n  \
    \ [3] range(start::Int64, stop::Int64)\n     @ Base ./range.jl:94\n   [4] en"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2heaojtu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_alphabet = alphabet[3:end]\
    \ * \" \" * alphabet[1:2]\n    new_string = \"\"\n    for i in s\n        new_string\
    \ = new_string * new_alphabet[findfirst(alphabet, i)]\n    end\n    return new_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzxbcwpim.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpzxbcwpim.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpzxbcwpim.jl:25 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxbcwpim.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpzxbcwpim.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpzxbcwpim.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpzxbcwpim.jl:26 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzxbcwpim.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpzxbcwpim.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpzxbcwpim.jl:16\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpzxbcwpim.jl:27 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_s = \"\"\n    for i in s\n        new_s = new_s * string(shift(i,\
    \ 2))\n    end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe94kdv1a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpe94kdv1a.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpe94kdv1a.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe94kdv1a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpe94kdv1a.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpe94kdv1a.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmpe94kdv1a.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe94kdv1a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpe94kdv1a.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpe94kdv1a.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpe94kdv1a.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe94kdv1a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpe94kdv1a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpe94kdv1a.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmpe94kdv1a.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe94kdv1a.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpe94kdv1a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe94kdv1a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a dictionary of the alphabet and the corresponding index\n  \
    \  alphabet = Dict('a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5, 'f'=>6, 'g'=>7, 'h'=>8,\
    \ 'i'=>9, 'j'=>10, 'k'=>11, 'l'=>12, 'm'=>13, 'n'=>14, 'o'=>15, 'p'=>16, 'q'=>17,\
    \ 'r'=>18, 's'=>19, 't'=>20, 'u'=>21, 'v'=>22, 'w'=>23, 'x'=>24, 'y'=>25, 'z'=>26)\n\
    \    # Create a dictionary of the index and the corresponding alphabet\n    index\
    \ = Dict(1=>'a', 2=>'b', 3=>'c', 4=>'d', 5=>'e', 6=>'f', 7=>'g', 8=>'h', 9=>'i',\
    \ 10=>'j', 11=>'k', 12=>'l', 13=>'m', 14=>'n', 15=>'o', 16=>'p', 17=>'q', 18=>'r',\
    \ 19=>'s', 20=>'t', 21=>'u', 22=>'v', 23=>'w', 24=>'x', 25=>'y', 26=>'z')\n  \
    \  # Create an empty string to store the encrypted string\n    encrypted = \"\"\
    \n    # Loop through the string\n    for i in s\n        # If the letter is 'z'\
    \ or 'y'\n        if i == 'z' || i == 'y'\n            # Add the corresponding\
    \ alphabet to the encrypted string\n            push!(encrypted, index[alphabet[i]-24])\n\
    \        # Else\n        else\n            # Add the corresponding alphabet to\
    \ the encrypted string\n            push!(encrypted, index[alphabet[i]+2])\n \
    \       end\n    end\n    # Return the encrypted string\n    return encrypted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplsxxw43z.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any,\
    \ ::Any, !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmplsxxw43z.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmplsxxw43z.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplsxxw43z.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmplsxxw43z.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ push!(::String, ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any,\
    \ !Matched::Any) at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel,\
    \ ::Any) at channels.jl:10\\n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\\
    n     @ Main /tmp/tmplsxxw43z.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmplsxxw43z.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplsxxw43z.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmplsxxw43z.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching push!(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2387\\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2388\\n    push!(!Matched::AbstractChannel, ::Any) at channels.jl:10\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmplsxxw43z.jl:27\\\
    n   [2] macro expan"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through the string\n    for i in s\n        #find the index\
    \ of the character in the alphabet\n        index = findfirst(alphabet, i)\n \
    \       #add 2 to the index\n        index += 2\n        #if the index is greater\
    \ than 26, subtract 26\n        if index > 26\n            index -= 26\n     \
    \   end\n        #add the character at the new index to the encrypted string\n\
    \        push!(encrypted_string, alphabet[index])\n    end\n    #return the encrypted\
    \ string\n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptub22mbp.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmptub22mbp.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptub22mbp.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptub22mbp.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmptub22mbp.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmptub22mbp.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptub22mbp.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptub22mbp.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmptub22mbp.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmptub22mbp.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptub22mbp.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_array = collect(s)\n    for i in 1:length(s_array)\n        s_array[i]\
    \ = Char(Int(s_array[i]) + 2*2)\n    end\n    return join(s_array)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0fol6_w.jl:27\n  Expression: candidate(\"\
    faewfawefaewg\") == \"jeiajeaijeiak\"\n   Evaluated: \"jei{je{ijei{k\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb0fol6_w.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0fol6_w.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb0fol6_w.jl:28\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"lippsq}jvmirh\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpb0fol6_w.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0fol6_w.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpb0fol6_w.jl:29\n  Expression: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n   Evaluated: \"h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb0fol6_w.jl:29 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0fol6_w.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0fol6_w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create a dictionary of the alphabet rotated by two\n    alphabet_rotated_two\
    \ = Dict('a'=>5,'b'=>6,'c'=>7,'d'=>8,'e'=>9,'f'=>10,'g'=>11,'h'=>12,'i'=>13,'j'=>14,'k'=>15,'l'=>16,'m'=>17,'n'=>18,'o'=>19,'p'=>20,'q'=>21,'r'=>22,'s'=>23,'t'=>24,'u'=>25,'v'=>26,'w'=>1,'x'=>2,'y'=>3,'z'=>4)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # loop through the string\n    for i in s\n        # if the letter\
    \ is in the alphabet\n        if i in keys(alphabet)\n            # get the value\
    \ of the\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqsiva1n.jl:1\nin expression starting at /tmp/tmpeqsiva1n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet shifted by two\n    alphabet_shift\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # if the letter\
    \ is in the alphabet\n        if i in keys(alphabet)\n            # add the shifted\
    \ letter to the encrypted string\n            encrypted_string = encrypted_string\
    \ * string(get(alphabet_shift,i,0))\n        else\n            # add the letter\
    \ to the encrypted string\n            encrypted_string = encrypted_string * i\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuodng9rv.jl:37\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"1011\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuodng9rv.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuodng9rv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuodng9rv.jl:38\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"32168910121314\" == \"ewhjklnop\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpuodng9rv.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuodng9rv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuodng9rv.jl:39\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"98\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuodng9rv.jl:39\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuodng9rv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuodng9rv.jl:40\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"722\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuodng9rv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuodng9rv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuodng9rv.jl:41\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"8372583257837259\" == \"jeiajeaijeiak\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuodng9rv.jl:41 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuodng9rv.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpuodng9rv.jl:42\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"107141417151820117166\" == \"lippsqcjvm"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuodng9rv.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # convert string to array of characters\n    s_arr = collect(s)\n    #\
    \ create array of encrypted characters\n    s_enc = Array{Char}(length(s_arr))\n\
    \    # loop through characters in s_arr\n    for i in 1:length(s_arr)\n      \
    \  # if character is a space, then encrypted character is a space\n        if\
    \ s_arr[i] == ' '\n            s_enc[i] = ' '\n        # else, convert character\
    \ to integer, add 2, and mod 26\n        else\n            s_enc[i] = Char(Int(s_arr[i])\
    \ + 2 - 97) % 26 + 97\n        end\n    end\n    # convert array of encrypted\
    \ characters to string\n    return join(s_enc)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy9qlvf3u.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching (Array{Char, N} where N)(::Int64)\\n  Closest candidates are:\\n  \
    \  (Array{T, N} where N)(!Matched::LinearAlgebra.AbstractQ) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:554\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:(AbstractMatrix{T}\
    \ where T)) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lq.jl:156\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:474\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmpy9qlvf3u.jl:15\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy9qlvf3u.jl:34 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy9qlvf3u.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpy9qlvf3u.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ (Array{Char, N} where N)(::Int64)\\n  Closest candidates are:\\n    (Array{T,\
    \ N} where N)(!Matched::LinearAlgebra.AbstractQ) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:554\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.LQPackedQ{T, S} where S<:(AbstractMatrix{T}\
    \ where T)) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/lq.jl:156\\\
    n    (Array{T, N} where N)(!Matched::LinearAlgebra.UniformScaling, !Matched::Tuple{Int64,\
    \ Int64}) where T at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/uniformscaling.jl:474\\\
    n    ...\\n  Stacktrace:\\n   [1] encrypt(s::String)\\n    "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    #create a string of the alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    #create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    #loop through the string\n    for i in s\n        #find the index\
    \ of the letter in the alphabet\n        index = findfirst(alphabet, i)\n    \
    \    #add two to the index\n        index += 2\n        #if the index is greater\
    \ than 26, subtract 26 from the index\n        if index > 26\n            index\
    \ -= 26\n        end\n        #add the letter at the new index to the encrypted\
    \ string\n        push!(encrypted_string, alphabet[index])\n    end\n    #return\
    \ the encrypted string\n    return encrypted_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplb4vqikl.jl:37\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmplb4vqikl.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmplb4vqikl.jl:37 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplb4vqikl.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmplb4vqikl.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ findfirst(::String, ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function,\
    \ ::Any) at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmplb4vqikl.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmplb4vqikl.jl:38 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplb4vqikl.jl:36\\ntest set:\
    \ Error During Test at /tmp/tmplb4vqikl.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching findfirst(::String,\
    \ ::Char)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(::AbstractString, !Matched::AbstractString)\
    \ at strings/search.jl:104\\n    findfirst(::Any) at array.jl:1818\\n  Stacktrace:\\\
    n   [1] encrypt(s::String)\\n     @ Main /tmp/tmplb4vqikl.jl:19\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmplb4vqikl.jl:39 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/pack"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    new_s = \"\"\n    for i in s\n        if i == \"z\"\n            new_s\
    \ = new_s * \"b\"\n        elseif i == \"y\"\n            new_s = new_s * \"a\"\
    \n        else\n            new_s = new_s * chr(ord(i) + 2)\n        end\n   \
    \ end\n    return new_s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpulybxxmv.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpulybxxmv.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpulybxxmv.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpulybxxmv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpulybxxmv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpulybxxmv.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpulybxxmv.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpulybxxmv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpulybxxmv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpulybxxmv.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpulybxxmv.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpulybxxmv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpulybxxmv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpulybxxmv.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpulybxxmv.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpulybxxmv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpulybxxmv.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulybxxmv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    encrypted_string = \"\"\n    for i in s\n        if i == 'z'\n       \
    \     encrypted_string = encrypted_string * 'b'\n        elseif i == 'y'\n   \
    \         encrypted_string = encrypted_string * 'a'\n        else\n          \
    \  encrypted_string = encrypted_string * chr(ord(i) + 2)\n        end\n    end\n\
    \    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcx_fm6co.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpcx_fm6co.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpcx_fm6co.jl:29 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcx_fm6co.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpcx_fm6co.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: ord not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmpcx_fm6co.jl:19\n\
    \   [2] macro expansion\n     @ /tmp/tmpcx_fm6co.jl:30 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcx_fm6co.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpcx_fm6co.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpcx_fm6co.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpcx_fm6co.jl:31 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcx_fm6co.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpcx_fm6co.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: ord not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmpcx_fm6co.jl:19\n   [2] macro expansion\n\
    \     @ /tmp/tmpcx_fm6co.jl:32 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpcx_fm6co.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpcx_fm6co.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  UndefVarErr"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx_fm6co.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s_new = \"\"\n    for i in s\n        s_new *= string(shift(i,2*2))\n\
    \    end\n    return s_new\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4h9nonyn.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"hi\") == \"lm\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp4h9nonyn.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmp4h9nonyn.jl:23 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4h9nonyn.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h9nonyn.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\n  UndefVarError: shift not defined\n\
    \  Stacktrace:\n   [1] encrypt(s::String)\n     @ Main /tmp/tmp4h9nonyn.jl:14\n\
    \   [2] macro expansion\n     @ /tmp/tmp4h9nonyn.jl:24 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4h9nonyn.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h9nonyn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp4h9nonyn.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmp4h9nonyn.jl:25 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4h9nonyn.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h9nonyn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"et\") == \"ix\"\n  UndefVarError: shift not defined\n  Stacktrace:\n\
    \   [1] encrypt(s::String)\n     @ Main /tmp/tmp4h9nonyn.jl:14\n   [2] macro expansion\n\
    \     @ /tmp/tmp4h9nonyn.jl:26 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp4h9nonyn.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4h9nonyn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\"\n  Und"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4h9nonyn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # create a dictionary of the alphabet\n    alphabet = Dict('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5,'f'=>6,'g'=>7,'h'=>8,'i'=>9,'j'=>10,'k'=>11,'l'=>12,'m'=>13,'n'=>14,'o'=>15,'p'=>16,'q'=>17,'r'=>18,'s'=>19,'t'=>20,'u'=>21,'v'=>22,'w'=>23,'x'=>24,'y'=>25,'z'=>26)\n\
    \    # create a dictionary of the alphabet rotated by two\n    alphabet_rotated\
    \ = Dict('a'=>3,'b'=>4,'c'=>5,'d'=>6,'e'=>7,'f'=>8,'g'=>9,'h'=>10,'i'=>11,'j'=>12,'k'=>13,'l'=>14,'m'=>15,'n'=>16,'o'=>17,'p'=>18,'q'=>19,'r'=>20,'s'=>21,'t'=>22,'u'=>23,'v'=>24,'w'=>25,'x'=>26,'y'=>1,'z'=>2)\n\
    \    # create an empty string to store the encrypted string\n    encrypted_string\
    \ = \"\"\n    # iterate through the string\n    for i in s\n        # if the character\
    \ is a space, add a space to the encrypted string\n        if i == \" \"\n   \
    \         encrypted_string = encrypted_string * \" \"\n        # if the character\
    \ is not a space, add the rotated character to the encrypted string\n        else\n\
    \            encrypted_string = encrypted_string * string(get(alphabet_rotated,get(alphabet,i),0))\n\
    \        end\n    end\n    # return the encrypted string\n    return encrypted_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4fm7dk4x.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate(\"hi\") == \"lm\"\\n  MethodError: no method\
    \ matching get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n   \
    \ get(::Dict{K, V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4fm7dk4x.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4fm7dk4x.jl:36 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4fm7dk4x.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp4fm7dk4x.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"asdfghjkl\") == \"ewhjklnop\"\\n  MethodError: no method matching\
    \ get(::Dict{Char, Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K,\
    \ V}, ::Any, !Matched::Any) where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K,\
    \ V} where V, ::Any, !Matched::Any) where K at weakkeydict.jl:140\\n    ...\\\
    n  Stacktrace:\\n   [1] encrypt(s::String)\\n     @ Main /tmp/tmp4fm7dk4x.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4fm7dk4x.jl:37 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4fm7dk4x.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmp4fm7dk4x.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(\"gf\") == \"kj\"\\n  MethodError: no method matching get(::Dict{Char,\
    \ Int64}, ::Char)\\n  Closest candidates are:\\n    get(::Dict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at dict.jl:504\\n    get(!Matched::IdDict{K, V}, ::Any, !Matched::Any)\
    \ where {K, V} at iddict.jl:86\\n    get(!Matched::WeakKeyDict{K, V} where V,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    s = lowercase(s)\n    s = replace(s, \"a\" => \"c\")\n    s = replace(s,\
    \ \"b\" => \"d\")\n    s = replace(s, \"c\" => \"e\")\n    s = replace(s, \"d\"\
    \ => \"f\")\n    s = replace(s, \"e\" => \"g\")\n    s = replace(s, \"f\" => \"\
    h\")\n    s = replace(s, \"g\" => \"i\")\n    s = replace(s, \"h\" => \"j\")\n\
    \    s = replace(s, \"i\" => \"k\")\n    s = replace(s, \"j\" => \"l\")\n    s\
    \ = replace(s, \"k\" => \"m\")\n    s = replace(s, \"l\" => \"n\")\n    s = replace(s,\
    \ \"m\" => \"o\")\n    s = replace(s, \"n\" => \"p\")\n    s = replace(s, \"o\"\
    \ => \"q\")\n    s = replace(s, \"p\" => \"r\")\n    s = replace(s, \"q\" => \"\
    s\")\n    s = replace(s, \"r\" => \"t\")\n    s = replace(s, \"s\" => \"u\")\n\
    \    s = replace(s, \"t\" => \"v\")\n    s = replace(s, \"u\" => \"w\")\n    s\
    \ = replace(s, \"v\" => \"x\")\n    s = replace(s, \"w\" => \"y\")\n    s = replace(s,\
    \ \"x\" => \"z\")\n    s = replace(s, \"y\" => \"a\")\n    s = replace(s, \"z\"\
    \ => \"b\")\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeh9g05mx.jl:46\n  Expression: candidate(\"\
    hi\") == \"lm\"\n   Evaluated: \"ba\" == \"lm\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpeh9g05mx.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeh9g05mx.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeh9g05mx.jl:47\n  Expression: candidate(\"asdfghjkl\") ==\
    \ \"ewhjklnop\"\n   Evaluated: \"aabbabbab\" == \"ewhjklnop\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpeh9g05mx.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeh9g05mx.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeh9g05mx.jl:48\n  Expression: candidate(\"gf\") == \"kj\"\n\
    \   Evaluated: \"ab\" == \"kj\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeh9g05mx.jl:48\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeh9g05mx.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeh9g05mx.jl:49\n  Expression: candidate(\"et\") == \"ix\"\n\
    \   Evaluated: \"ab\" == \"ix\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeh9g05mx.jl:49\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeh9g05mx.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeh9g05mx.jl:50\n  Expression: candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\"\n   Evaluated: \"baaabaaabaaaa\" == \"jeiajeaijeiak\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeh9g05mx.jl:50 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeh9g05mx.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpeh9g05mx.jl:51\n  Expression: candidate(\"hellomyfriend\"\
    ) == \"lippsqcjvmirh\"\n   Evaluated: \"babbaaabbaabb\" == \"lippsqcjvmirh\"\n\
    Stacktrace:\n ["
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeh9g05mx.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    # Create a list of the alphabet\n    alphabet = ['a':'z']\n    # Create\
    \ a list of the alphabet shifted by two\n    shifted_alphabet = ['c':'b']\n  \
    \  # Create a list of the alphabet shifted by four\n    shifted_alphabet_2 = ['e':'d']\n\
    \    # Create a list of the alphabet shifted by six\n    shifted_alphabet_3 =\
    \ ['g':'f']\n    # Create a list of the alphabet shifted by eight\n    shifted_alphabet_4\
    \ = ['i':'h']\n    # Create a list of the alphabet shifted by ten\n    shifted_alphabet_5\
    \ = ['k':'j']\n    # Create a list of the alphabet shifted by twelve\n    shifted_alphabet_6\
    \ = ['m':'l']\n    # Create a list of the alphabet shifted by fourteen\n    shifted_alphabet_7\
    \ = ['o':'n']\n    # Create a list of the alphabet shifted by sixteen\n    shifted_alphabet_8\
    \ = ['q':'p']\n    # Create a list of the alphabet shifted by eighteen\n    shifted_alphabet_9\
    \ = ['s':'r']\n    # Create a list of the alphabet shifted by twenty\n    shifted_alphabet_10\
    \ = ['u':'t']\n    # Create a list of the alphabet shifted by twenty-two\n   \
    \ shifted_alphabet_11 = ['w':'v']\n    # Create a list of the alphabet shifted\
    \ by twenty-four\n    shifted_alphabet_12 = ['y':'x']\n    # Create a list of\
    \ the alphabet shifted by twenty-six\n    shifted_alphabet_13 = ['a':'z']\n  \
    \  # Create a list of the alphabet shifted by twenty-eight\n    shifted_alphabet_14\
    \ = ['c':'b']\n    # Create a list of the alphabet shifted by thirty\n    shifted_alphabet_15\
    \ = ['e':'d']\n    # Create a list of the alphabet shifted by thirty-two\n   \
    \ shifted_alphabet_16 = ['g':'f']\n    # Create a list of the alphabet shifted\
    \ by thirty-four\n    shifted_alphabet_17 = ['i':'h']\n    # Create a list of\
    \ the alphabet shifted by thirty-six\n    shifted_alphabet_18 = ['\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp_bs8k377.jl:55\nin expression starting at /tmp/tmp_bs8k377.jl:55\n"
  exit_code: 1
  status: SyntaxError
