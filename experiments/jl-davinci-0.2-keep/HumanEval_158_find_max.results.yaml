name: HumanEval_158_find_max
language: julia
results:
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3mph0zkx.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3mph0zkx.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3mph0zkx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3mph0zkx.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3mph0zkx.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3mph0zkx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mph0zkx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7b6obpzc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7b6obpzc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7b6obpzc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7b6obpzc.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7b6obpzc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7b6obpzc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7b6obpzc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeskguuyn.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeskguuyn.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeskguuyn.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeskguuyn.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeskguuyn.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeskguuyn.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeskguuyn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6fezxc4a.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6fezxc4a.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6fezxc4a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6fezxc4a.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6fezxc4a.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6fezxc4a.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6fezxc4a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnzvyv8s.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnzvyv8s.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnzvyv8s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcnzvyv8s.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcnzvyv8s.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcnzvyv8s.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnzvyv8s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2yh7v22.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp2yh7v22.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp2yh7v22.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpp2yh7v22.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp2yh7v22.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp2yh7v22.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2yh7v22.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpznlqla7w.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpznlqla7w.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpznlqla7w.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpznlqla7w.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpznlqla7w.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpznlqla7w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznlqla7w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc2puktwu.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc2puktwu.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc2puktwu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc2puktwu.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc2puktwu.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc2puktwu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2puktwu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp04xi47v5.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp04xi47v5.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp04xi47v5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp04xi47v5.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp04xi47v5.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp04xi47v5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp04xi47v5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2hmb9cm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph2hmb9cm.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2hmb9cm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph2hmb9cm.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph2hmb9cm.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2hmb9cm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2hmb9cm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjto5mdbm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjto5mdbm.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjto5mdbm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjto5mdbm.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjto5mdbm.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjto5mdbm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjto5mdbm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprsn5p6sm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprsn5p6sm.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprsn5p6sm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprsn5p6sm.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprsn5p6sm.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprsn5p6sm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsn5p6sm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0avufp7u.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0avufp7u.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0avufp7u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0avufp7u.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0avufp7u.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0avufp7u.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0avufp7u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwl7_cw40.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwl7_cw40.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwl7_cw40.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwl7_cw40.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwl7_cw40.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwl7_cw40.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwl7_cw40.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuwvi10dq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpuwvi10dq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuwvi10dq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuwvi10dq.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuwvi10dq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuwvi10dq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuwvi10dq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprap4rm3b.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprap4rm3b.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprap4rm3b.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprap4rm3b.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprap4rm3b.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprap4rm3b.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprap4rm3b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeudz98fc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeudz98fc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeudz98fc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeudz98fc.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeudz98fc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeudz98fc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeudz98fc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqwndpfoa.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqwndpfoa.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwndpfoa.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqwndpfoa.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqwndpfoa.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwndpfoa.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqwndpfoa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp69791f8m.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp69791f8m.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp69791f8m.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp69791f8m.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp69791f8m.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp69791f8m.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69791f8m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxo77n_9y.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxo77n_9y.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxo77n_9y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxo77n_9y.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxo77n_9y.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxo77n_9y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxo77n_9y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp5naxj4g.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp5naxj4g.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp5naxj4g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpp5naxj4g.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp5naxj4g.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp5naxj4g.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5naxj4g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0z29yaza.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0z29yaza.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0z29yaza.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0z29yaza.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0z29yaza.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0z29yaza.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z29yaza.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4aapwnst.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4aapwnst.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4aapwnst.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4aapwnst.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4aapwnst.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4aapwnst.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4aapwnst.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1m8zuqa0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1m8zuqa0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1m8zuqa0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1m8zuqa0.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1m8zuqa0.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1m8zuqa0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1m8zuqa0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdtssq9y2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpdtssq9y2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtssq9y2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdtssq9y2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdtssq9y2.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtssq9y2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdtssq9y2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pxpmwss.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pxpmwss.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pxpmwss.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2pxpmwss.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pxpmwss.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pxpmwss.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pxpmwss.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwvn1t2g.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwvn1t2g.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwvn1t2g.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfwvn1t2g.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfwvn1t2g.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfwvn1t2g.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwvn1t2g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iqaas8y.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iqaas8y.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iqaas8y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8iqaas8y.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iqaas8y.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iqaas8y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iqaas8y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaf_6bvxg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpaf_6bvxg.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaf_6bvxg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpaf_6bvxg.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaf_6bvxg.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaf_6bvxg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaf_6bvxg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46i66v3l.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp46i66v3l.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46i66v3l.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp46i66v3l.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp46i66v3l.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp46i66v3l.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46i66v3l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgll8rj2i.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgll8rj2i.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgll8rj2i.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgll8rj2i.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgll8rj2i.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgll8rj2i.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgll8rj2i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdxwub3k.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxwub3k.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxwub3k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprdxwub3k.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxwub3k.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxwub3k.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdxwub3k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc2fbcbd2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc2fbcbd2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc2fbcbd2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc2fbcbd2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc2fbcbd2.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc2fbcbd2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2fbcbd2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_chars = 0\n    for word in words\n        if length(unique(word))\
    \ > max_chars\n            max_chars = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02ywhh8c.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp02ywhh8c.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02ywhh8c.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp02ywhh8c.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02ywhh8c.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02ywhh8c.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02ywhh8c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsabjcogd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsabjcogd.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsabjcogd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsabjcogd.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsabjcogd.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsabjcogd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsabjcogd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2i8h081r.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2i8h081r.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2i8h081r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2i8h081r.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2i8h081r.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2i8h081r.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2i8h081r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_char = 0\n    for word in words\n        unique_char =\
    \ length(unique(word))\n        if unique_char > max_unique_char\n           \
    \ max_unique_char = unique_char\n            max_word = word\n        end\n  \
    \  end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl51k09qs.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpl51k09qs.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl51k09qs.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpl51k09qs.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl51k09qs.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl51k09qs.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl51k09qs.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe500sdsv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpe500sdsv.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe500sdsv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe500sdsv.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe500sdsv.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe500sdsv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe500sdsv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_nxtcap.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8_nxtcap.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_nxtcap.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8_nxtcap.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8_nxtcap.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_nxtcap.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_nxtcap.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzl_0pxov.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzl_0pxov.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzl_0pxov.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzl_0pxov.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzl_0pxov.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzl_0pxov.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzl_0pxov.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1vqy92c.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1vqy92c.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1vqy92c.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpp1vqy92c.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp1vqy92c.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp1vqy92c.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1vqy92c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqivi5o3.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpiqivi5o3.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiqivi5o3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpiqivi5o3.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiqivi5o3.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiqivi5o3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqivi5o3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe9758fcz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9758fcz.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9758fcz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpe9758fcz.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe9758fcz.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9758fcz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9758fcz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9aylwc2w.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9aylwc2w.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9aylwc2w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9aylwc2w.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9aylwc2w.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9aylwc2w.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9aylwc2w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeplii39c.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeplii39c.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeplii39c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeplii39c.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeplii39c.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeplii39c.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeplii39c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fhpaubb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fhpaubb.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fhpaubb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3fhpaubb.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3fhpaubb.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3fhpaubb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fhpaubb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgnvxiio1.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnvxiio1.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnvxiio1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgnvxiio1.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnvxiio1.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnvxiio1.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgnvxiio1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_5zayoq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpg_5zayoq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg_5zayoq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg_5zayoq.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg_5zayoq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg_5zayoq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_5zayoq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_char_count\
    \ = Dict{String, Int}()\n    for word in words\n        unique_char_count[word]\
    \ = length(unique(word))\n    end\n    max_unique_char_count = maximum(values(unique_char_count))\n\
    \    max_unique_char_words = filter(x -> unique_char_count[x] == max_unique_char_count,\
    \ keys(unique_char_count))\n    return min(max_unique_char_words)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpedl9ue6s.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    \\n  MethodError: no method matching min(::Set{String})\\n  Closest candidates\
    \ are:\\n    min(::Any, !Matched::Missing) at missing.jl:127\\n    min(::Any,\
    \ !Matched::Any) at operators.jl:433\\n    min(::Any, !Matched::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:560\\n    ...\\n  Stacktrace:\\n   [1] find_max(words::Vector{String})\\\
    n     @ Main /tmp/tmpedl9ue6s.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpedl9ue6s.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpedl9ue6s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpedl9ue6s.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\\n  MethodError: no method\
    \ matching min(::Set{String})\\n  Closest candidates are:\\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:127\\n    min(::Any, !Matched::Any) at operators.jl:433\\n   \
    \ min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:560\\\
    n    ...\\n  Stacktrace:\\n   [1] find_max(words::Vector{String})\\n     @ Main\
    \ /tmp/tmpedl9ue6s.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpedl9ue6s.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpedl9ue6s.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpedl9ue6s.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\\n  MethodError: no\
    \ method matching min(::Set{String})\\n  Closest candidates are:\\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:127\\n    min(::Any, !Matched::Any) at operators.jl:433\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:560\\\
    n    ...\\n  Stacktrace:\\n   [1] find_max(words::Vector{String})\\n     @ Main\
    \ /tmp/tmpedl9ue6s.jl:17\\n   [2] "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3jxh_qm0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jxh_qm0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jxh_qm0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3jxh_qm0.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3jxh_qm0.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3jxh_qm0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jxh_qm0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzq4gqdgz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzq4gqdgz.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzq4gqdgz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzq4gqdgz.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzq4gqdgz.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzq4gqdgz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzq4gqdgz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8j1puvd9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8j1puvd9.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8j1puvd9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8j1puvd9.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8j1puvd9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8j1puvd9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8j1puvd9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfu345l6d.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfu345l6d.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfu345l6d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfu345l6d.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfu345l6d.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfu345l6d.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfu345l6d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpenn0ugwh.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpenn0ugwh.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpenn0ugwh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpenn0ugwh.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpenn0ugwh.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpenn0ugwh.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpenn0ugwh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7wj3uakh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7wj3uakh.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7wj3uakh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7wj3uakh.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7wj3uakh.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7wj3uakh.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wj3uakh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu8fiyc0s.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpu8fiyc0s.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu8fiyc0s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpu8fiyc0s.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu8fiyc0s.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu8fiyc0s.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8fiyc0s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfh6xh7jw.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfh6xh7jw.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfh6xh7jw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfh6xh7jw.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfh6xh7jw.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfh6xh7jw.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfh6xh7jw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpley_v1x8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpley_v1x8.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpley_v1x8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpley_v1x8.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpley_v1x8.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpley_v1x8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpley_v1x8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1vjng0a.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc1vjng0a.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1vjng0a.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpc1vjng0a.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc1vjng0a.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1vjng0a.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1vjng0a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps0imgw3p.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps0imgw3p.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps0imgw3p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps0imgw3p.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps0imgw3p.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps0imgw3p.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps0imgw3p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbf1i6llg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbf1i6llg.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf1i6llg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpbf1i6llg.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbf1i6llg.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf1i6llg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbf1i6llg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wirysm7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6wirysm7.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6wirysm7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6wirysm7.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6wirysm7.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6wirysm7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wirysm7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphlv87a4p.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphlv87a4p.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlv87a4p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphlv87a4p.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphlv87a4p.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlv87a4p.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlv87a4p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9x5ik9rd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9x5ik9rd.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x5ik9rd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9x5ik9rd.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9x5ik9rd.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9x5ik9rd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x5ik9rd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppezufmj_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppezufmj_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppezufmj_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppezufmj_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppezufmj_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppezufmj_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppezufmj_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26_0pe8n.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp26_0pe8n.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26_0pe8n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp26_0pe8n.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp26_0pe8n.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp26_0pe8n.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26_0pe8n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppwwbts7k.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppwwbts7k.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwwbts7k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmppwwbts7k.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppwwbts7k.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppwwbts7k.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppwwbts7k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpquvdw6uk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpquvdw6uk.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquvdw6uk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpquvdw6uk.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpquvdw6uk.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquvdw6uk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquvdw6uk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpma7qxkjc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpma7qxkjc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpma7qxkjc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpma7qxkjc.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpma7qxkjc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpma7qxkjc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpma7qxkjc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwf8644r8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwf8644r8.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf8644r8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwf8644r8.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwf8644r8.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwf8644r8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwf8644r8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qk_1nml.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2qk_1nml.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2qk_1nml.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2qk_1nml.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2qk_1nml.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2qk_1nml.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qk_1nml.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi5n0oqk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi5n0oqk.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi5n0oqk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpoi5n0oqk.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi5n0oqk.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi5n0oqk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi5n0oqk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5awr7zo_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5awr7zo_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5awr7zo_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5awr7zo_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5awr7zo_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5awr7zo_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5awr7zo_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02v2gsg8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp02v2gsg8.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02v2gsg8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02v2gsg8.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02v2gsg8.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02v2gsg8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02v2gsg8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8e_8iv1w.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8e_8iv1w.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8e_8iv1w.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8e_8iv1w.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8e_8iv1w.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8e_8iv1w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8e_8iv1w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqozxzcjj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqozxzcjj.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqozxzcjj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqozxzcjj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqozxzcjj.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqozxzcjj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqozxzcjj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxwlm_vq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxwlm_vq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxwlm_vq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvxwlm_vq.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxwlm_vq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxwlm_vq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxwlm_vq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2zj452o.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_2zj452o.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_2zj452o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_2zj452o.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_2zj452o.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_2zj452o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2zj452o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6ilnoh85.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ilnoh85.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ilnoh85.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6ilnoh85.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6ilnoh85.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ilnoh85.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ilnoh85.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeswx7h19.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpeswx7h19.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeswx7h19.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpeswx7h19.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeswx7h19.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeswx7h19.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeswx7h19.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2g02fll_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2g02fll_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2g02fll_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2g02fll_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2g02fll_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2g02fll_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g02fll_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp07k1d3u_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp07k1d3u_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07k1d3u_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp07k1d3u_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp07k1d3u_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07k1d3u_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp07k1d3u_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_word_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_word_len\n            max_word = word\n            max_word_len = length(unique(word))\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrwh6yz_.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrwh6yz_.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrwh6yz_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpvrwh6yz_.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrwh6yz_.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrwh6yz_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrwh6yz_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyqev1v_y.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyqev1v_y.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqev1v_y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyqev1v_y.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyqev1v_y.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyqev1v_y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqev1v_y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_char = 0\n    for word in words\n        if length(unique(word))\
    \ > max_char\n            max_char = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2q954y5k.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2q954y5k.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2q954y5k.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2q954y5k.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2q954y5k.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2q954y5k.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2q954y5k.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyusx1uu2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpyusx1uu2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyusx1uu2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpyusx1uu2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyusx1uu2.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyusx1uu2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyusx1uu2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponbz20sf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmponbz20sf.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponbz20sf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmponbz20sf.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmponbz20sf.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponbz20sf.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponbz20sf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5882fgvi.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5882fgvi.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5882fgvi.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5882fgvi.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5882fgvi.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5882fgvi.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5882fgvi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5aukguhq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aukguhq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aukguhq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5aukguhq.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aukguhq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aukguhq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5aukguhq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpws8b8t7k.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpws8b8t7k.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpws8b8t7k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpws8b8t7k.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpws8b8t7k.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpws8b8t7k.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpws8b8t7k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf5c411tl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpf5c411tl.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf5c411tl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf5c411tl.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf5c411tl.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf5c411tl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf5c411tl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprtso6yqw.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprtso6yqw.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtso6yqw.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprtso6yqw.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtso6yqw.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtso6yqw.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprtso6yqw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48tvqyef.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp48tvqyef.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48tvqyef.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp48tvqyef.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp48tvqyef.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48tvqyef.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48tvqyef.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8b4zf61f.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8b4zf61f.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8b4zf61f.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp8b4zf61f.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8b4zf61f.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8b4zf61f.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8b4zf61f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_count = length(unique(word))\n\
    \        if unique_count > max_count\n            max_count = unique_count\n \
    \           max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqjs8qc4k.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjs8qc4k.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjs8qc4k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqjs8qc4k.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqjs8qc4k.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqjs8qc4k.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjs8qc4k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpktivgxzo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpktivgxzo.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktivgxzo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpktivgxzo.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktivgxzo.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktivgxzo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktivgxzo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv98p7bjf.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpv98p7bjf.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv98p7bjf.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpv98p7bjf.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv98p7bjf.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv98p7bjf.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv98p7bjf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvcdui3qh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvcdui3qh.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcdui3qh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvcdui3qh.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvcdui3qh.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvcdui3qh.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcdui3qh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpng3dchs2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpng3dchs2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng3dchs2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpng3dchs2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpng3dchs2.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpng3dchs2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpng3dchs2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovybfem7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpovybfem7.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovybfem7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpovybfem7.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpovybfem7.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovybfem7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovybfem7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprgu60hjo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmprgu60hjo.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgu60hjo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmprgu60hjo.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprgu60hjo.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgu60hjo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgu60hjo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0l_rqnx.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw0l_rqnx.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0l_rqnx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpw0l_rqnx.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw0l_rqnx.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0l_rqnx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0l_rqnx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3n9e14yc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3n9e14yc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3n9e14yc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp3n9e14yc.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3n9e14yc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3n9e14yc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3n9e14yc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpieams3af.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpieams3af.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpieams3af.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpieams3af.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpieams3af.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpieams3af.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpieams3af.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpae7ftqrg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpae7ftqrg.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpae7ftqrg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpae7ftqrg.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpae7ftqrg.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpae7ftqrg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpae7ftqrg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphdyuxtkm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphdyuxtkm.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphdyuxtkm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphdyuxtkm.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphdyuxtkm.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphdyuxtkm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphdyuxtkm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuouqi9y4.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpuouqi9y4.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuouqi9y4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuouqi9y4.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuouqi9y4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuouqi9y4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuouqi9y4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    # find the\
    \ word with maximum number of unique characters\n    # if multiple strings have\
    \ maximum number of unique characters,\n    # return the one which comes first\
    \ in lexicographical order.\n    #\n    # YOUR CODE HERE\n    #\n    return \"\
    \"\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_a5c1dny.jl:24\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"\" == \"string\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a5c1dny.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a5c1dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_a5c1dny.jl:25\n  Expression: candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\"\n   Evaluated: \"\" == \"enam\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_a5c1dny.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a5c1dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_a5c1dny.jl:26\n  Expression: candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\"\n   Evaluated: \"\" == \"aaaaaaa\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_a5c1dny.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a5c1dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_a5c1dny.jl:27\n  Expression: candidate([\"abc\", \"cba\"\
    ]) == \"abc\"\n   Evaluated: \"\" == \"abc\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_a5c1dny.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a5c1dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_a5c1dny.jl:28\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"\" == \"footbott\"\
    \nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a5c1dny.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a5c1dny.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_a5c1dny.jl:29\n  Expression: candidate([\"we\", \"are\",\
    \ \"gonna\", \"rock\"]) == \"go"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a5c1dny.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9dkfjhto.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9dkfjhto.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9dkfjhto.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9dkfjhto.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9dkfjhto.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9dkfjhto.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9dkfjhto.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmploendjmg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmploendjmg.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmploendjmg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmploendjmg.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmploendjmg.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmploendjmg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmploendjmg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2aj82f0q.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2aj82f0q.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2aj82f0q.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2aj82f0q.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2aj82f0q.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2aj82f0q.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2aj82f0q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy1sllzgb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1sllzgb.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1sllzgb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpy1sllzgb.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy1sllzgb.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy1sllzgb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1sllzgb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4m99_hb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpv4m99_hb.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4m99_hb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv4m99_hb.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv4m99_hb.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4m99_hb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4m99_hb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps_ey4o5o.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps_ey4o5o.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_ey4o5o.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps_ey4o5o.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps_ey4o5o.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps_ey4o5o.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps_ey4o5o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7f7qc5p1.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7f7qc5p1.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7f7qc5p1.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7f7qc5p1.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7f7qc5p1.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7f7qc5p1.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7f7qc5p1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_chars_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_chars_word = word\n\
    \        end\n    end\n    return max_unique_chars_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr62lj3nj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpr62lj3nj.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr62lj3nj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr62lj3nj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr62lj3nj.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr62lj3nj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr62lj3nj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4y59yr1n.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4y59yr1n.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4y59yr1n.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4y59yr1n.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4y59yr1n.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4y59yr1n.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4y59yr1n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpir81vtik.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpir81vtik.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpir81vtik.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpir81vtik.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpir81vtik.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpir81vtik.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpir81vtik.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkp2ao_ci.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp2ao_ci.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp2ao_ci.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpkp2ao_ci.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkp2ao_ci.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkp2ao_ci.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkp2ao_ci.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp172p1mrk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp172p1mrk.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp172p1mrk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp172p1mrk.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp172p1mrk.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp172p1mrk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp172p1mrk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfc9ix5k4.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc9ix5k4.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc9ix5k4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfc9ix5k4.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfc9ix5k4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfc9ix5k4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfc9ix5k4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv0qvcypf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0qvcypf.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0qvcypf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpv0qvcypf.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv0qvcypf.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv0qvcypf.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv0qvcypf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuc16h7u_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpuc16h7u_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuc16h7u_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuc16h7u_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuc16h7u_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuc16h7u_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuc16h7u_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdo3r75r.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppdo3r75r.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdo3r75r.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppdo3r75r.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppdo3r75r.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdo3r75r.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdo3r75r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0_oi7rz_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0_oi7rz_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_oi7rz_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0_oi7rz_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0_oi7rz_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0_oi7rz_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0_oi7rz_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvv67dbu3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpvv67dbu3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvv67dbu3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpvv67dbu3.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvv67dbu3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvv67dbu3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvv67dbu3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6r44_b6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6r44_b6.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6r44_b6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpz6r44_b6.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6r44_b6.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6r44_b6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6r44_b6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7_an75vd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_an75vd.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_an75vd.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7_an75vd.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_an75vd.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_an75vd.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_an75vd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjqe7t7b.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjqe7t7b.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjqe7t7b.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzjqe7t7b.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjqe7t7b.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjqe7t7b.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjqe7t7b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo47npqs_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo47npqs_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo47npqs_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo47npqs_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo47npqs_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo47npqs_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo47npqs_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9z_no0d0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9z_no0d0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9z_no0d0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp9z_no0d0.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9z_no0d0.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9z_no0d0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9z_no0d0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpymzxiucx.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpymzxiucx.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymzxiucx.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpymzxiucx.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymzxiucx.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymzxiucx.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymzxiucx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45w7ssyg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp45w7ssyg.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45w7ssyg.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp45w7ssyg.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45w7ssyg.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45w7ssyg.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45w7ssyg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqooa_4bj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqooa_4bj.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqooa_4bj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqooa_4bj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqooa_4bj.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqooa_4bj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqooa_4bj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7gtyslf9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7gtyslf9.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gtyslf9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7gtyslf9.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7gtyslf9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7gtyslf9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gtyslf9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphi375i0c.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmphi375i0c.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphi375i0c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmphi375i0c.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphi375i0c.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphi375i0c.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphi375i0c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovn5n3ts.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpovn5n3ts.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovn5n3ts.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpovn5n3ts.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpovn5n3ts.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpovn5n3ts.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovn5n3ts.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1y3iu08z.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1y3iu08z.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1y3iu08z.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1y3iu08z.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1y3iu08z.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1y3iu08z.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1y3iu08z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_characters\
    \ = 0\n    max_unique_characters_word = \"\"\n    for word in words\n        unique_characters\
    \ = Set(word)\n        if length(unique_characters) > max_unique_characters\n\
    \            max_unique_characters = length(unique_characters)\n            max_unique_characters_word\
    \ = word\n        end\n    end\n    return max_unique_characters_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08rsmy_0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp08rsmy_0.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08rsmy_0.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp08rsmy_0.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp08rsmy_0.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08rsmy_0.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08rsmy_0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g6k52v7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g6k52v7.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g6k52v7.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp4g6k52v7.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g6k52v7.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g6k52v7.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g6k52v7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ny1iv51.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ny1iv51.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ny1iv51.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7ny1iv51.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ny1iv51.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ny1iv51.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ny1iv51.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp78ykhacl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp78ykhacl.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78ykhacl.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp78ykhacl.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp78ykhacl.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp78ykhacl.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78ykhacl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpafd09f7d.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpafd09f7d.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpafd09f7d.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpafd09f7d.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpafd09f7d.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpafd09f7d.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpafd09f7d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp030ik29g.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp030ik29g.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp030ik29g.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp030ik29g.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp030ik29g.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp030ik29g.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp030ik29g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ee5uptc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ee5uptc.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ee5uptc.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp2ee5uptc.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ee5uptc.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ee5uptc.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ee5uptc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr28bdsa_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpr28bdsa_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr28bdsa_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr28bdsa_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr28bdsa_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr28bdsa_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr28bdsa_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqupb5pn9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqupb5pn9.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqupb5pn9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpqupb5pn9.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqupb5pn9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqupb5pn9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqupb5pn9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpta_2p68y.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpta_2p68y.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpta_2p68y.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpta_2p68y.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpta_2p68y.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpta_2p68y.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpta_2p68y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuvkcn_8_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvkcn_8_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvkcn_8_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpuvkcn_8_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvkcn_8_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvkcn_8_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvkcn_8_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7zd6m229.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7zd6m229.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7zd6m229.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp7zd6m229.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7zd6m229.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7zd6m229.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7zd6m229.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9lnf6pp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd9lnf6pp.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9lnf6pp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpd9lnf6pp.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd9lnf6pp.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9lnf6pp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9lnf6pp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0e7e2yn.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0e7e2yn.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0e7e2yn.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpx0e7e2yn.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0e7e2yn.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0e7e2yn.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0e7e2yn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0aa6o1ge.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aa6o1ge.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aa6o1ge.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0aa6o1ge.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0aa6o1ge.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0aa6o1ge.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0aa6o1ge.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsjn_xg5v.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpsjn_xg5v.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsjn_xg5v.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsjn_xg5v.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsjn_xg5v.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsjn_xg5v.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjn_xg5v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = Set(word)\n\
    \        if length(unique_chars) > max_unique\n            max_unique = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpklcwift9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpklcwift9.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpklcwift9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpklcwift9.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpklcwift9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpklcwift9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklcwift9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpazigkgaz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpazigkgaz.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpazigkgaz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpazigkgaz.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpazigkgaz.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpazigkgaz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazigkgaz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3yau7u2b.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3yau7u2b.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3yau7u2b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3yau7u2b.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3yau7u2b.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3yau7u2b.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3yau7u2b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjt_xi95e.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjt_xi95e.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt_xi95e.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjt_xi95e.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjt_xi95e.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjt_xi95e.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjt_xi95e.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0kjt1rz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph0kjt1rz.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0kjt1rz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph0kjt1rz.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph0kjt1rz.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0kjt1rz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0kjt1rz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6rqrooj3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rqrooj3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rqrooj3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6rqrooj3.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6rqrooj3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6rqrooj3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6rqrooj3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gwa7p1_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gwa7p1_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gwa7p1_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp6gwa7p1_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6gwa7p1_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6gwa7p1_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gwa7p1_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5miqjjp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5miqjjp.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5miqjjp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpm5miqjjp.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm5miqjjp.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm5miqjjp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5miqjjp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgf9viv2c.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgf9viv2c.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf9viv2c.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpgf9viv2c.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgf9viv2c.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgf9viv2c.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgf9viv2c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo511ed1b.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo511ed1b.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo511ed1b.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpo511ed1b.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo511ed1b.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo511ed1b.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo511ed1b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplemfeve_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmplemfeve_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplemfeve_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmplemfeve_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplemfeve_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplemfeve_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplemfeve_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvmfx6bp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpdvmfx6bp.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvmfx6bp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpdvmfx6bp.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdvmfx6bp.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvmfx6bp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvmfx6bp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptiyjodfq.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptiyjodfq.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiyjodfq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptiyjodfq.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptiyjodfq.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiyjodfq.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptiyjodfq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqep5wfsp.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpqep5wfsp.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqep5wfsp.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpqep5wfsp.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqep5wfsp.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqep5wfsp.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqep5wfsp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpas_5m4d5.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpas_5m4d5.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpas_5m4d5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpas_5m4d5.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpas_5m4d5.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpas_5m4d5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas_5m4d5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1jj5mew6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1jj5mew6.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jj5mew6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp1jj5mew6.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1jj5mew6.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jj5mew6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jj5mew6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02u7cnio.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp02u7cnio.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02u7cnio.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp02u7cnio.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02u7cnio.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02u7cnio.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02u7cnio.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph38beofq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmph38beofq.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph38beofq.jl:26\ntest set: Test\
    \ Failed at /tmp/tmph38beofq.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph38beofq.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph38beofq.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph38beofq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        len = length(unique(word))\n\
    \        if len > max_len\n            max_len = len\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5t_d2uu4.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t_d2uu4.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t_d2uu4.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5t_d2uu4.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t_d2uu4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t_d2uu4.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t_d2uu4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg825z1b_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpg825z1b_.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg825z1b_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpg825z1b_.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg825z1b_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg825z1b_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg825z1b_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_vhyyrnk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vhyyrnk.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vhyyrnk.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp_vhyyrnk.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vhyyrnk.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vhyyrnk.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_vhyyrnk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_length = 0\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4y5nn51.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4y5nn51.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4y5nn51.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc4y5nn51.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc4y5nn51.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4y5nn51.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4y5nn51.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    # find the\
    \ word with maximum number of unique characters\n    # if multiple strings have\
    \ maximum number of unique characters,\n    # return the one which comes first\
    \ in lexicographical order.\n    max_word = \"\"\n    max_unique_chars = 0\n \
    \   for word in words\n        unique_chars = length(unique(word))\n        if\
    \ unique_chars > max_unique_chars\n            max_word = word\n            max_unique_chars\
    \ = unique_chars\n        elseif unique_chars == max_unique_chars\n          \
    \  if word < max_word\n                max_word = word\n            end\n    \
    \    end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0cvgokuj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cvgokuj.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cvgokuj.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp0cvgokuj.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0cvgokuj.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0cvgokuj.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cvgokuj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_length\
    \ = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5t43tc4l.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t43tc4l.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t43tc4l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp5t43tc4l.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5t43tc4l.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t43tc4l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t43tc4l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaanuqn5p.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpaanuqn5p.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaanuqn5p.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpaanuqn5p.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaanuqn5p.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaanuqn5p.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaanuqn5p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppujvcfnv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmppujvcfnv.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppujvcfnv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmppujvcfnv.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppujvcfnv.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppujvcfnv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppujvcfnv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpohl_8do9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpohl_8do9.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohl_8do9.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpohl_8do9.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpohl_8do9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohl_8do9.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohl_8do9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxda9dojp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxda9dojp.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxda9dojp.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxda9dojp.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxda9dojp.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxda9dojp.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxda9dojp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfync9byo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpfync9byo.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfync9byo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpfync9byo.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfync9byo.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfync9byo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfync9byo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vxwwwqm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp5vxwwwqm.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5vxwwwqm.jl:26\ntest set: Test\
    \ Failed at /tmp/tmp5vxwwwqm.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5vxwwwqm.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5vxwwwqm.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vxwwwqm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxzobbcw3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpxzobbcw3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxzobbcw3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxzobbcw3.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxzobbcw3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxzobbcw3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzobbcw3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1q_j9okn.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1q_j9okn.jl:27 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1q_j9okn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1q_j9okn.jl:30\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1q_j9okn.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1q_j9okn.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1q_j9okn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwjbckihv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwjbckihv.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwjbckihv.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpwjbckihv.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwjbckihv.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwjbckihv.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjbckihv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_char_count\
    \ = 0\n    max_unique_char_word = \"\"\n    for word in words\n        unique_char_count\
    \ = length(unique(word))\n        if unique_char_count > max_unique_char_count\n\
    \            max_unique_char_count = unique_char_count\n            max_unique_char_word\
    \ = word\n        end\n    end\n    return max_unique_char_word\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6idi9rh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6idi9rh.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6idi9rh.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpf6idi9rh.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6idi9rh.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6idi9rh.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6idi9rh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjdiqgw3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjdiqgw3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjdiqgw3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpjjdiqgw3.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjdiqgw3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjdiqgw3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjdiqgw3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpek9q7kp8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpek9q7kp8.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek9q7kp8.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpek9q7kp8.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpek9q7kp8.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpek9q7kp8.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpek9q7kp8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpflmi31oo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpflmi31oo.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpflmi31oo.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpflmi31oo.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpflmi31oo.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpflmi31oo.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflmi31oo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9v4icu6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmps9v4icu6.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9v4icu6.jl:26\ntest set: Test\
    \ Failed at /tmp/tmps9v4icu6.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps9v4icu6.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9v4icu6.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9v4icu6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0_d0gb2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0_d0gb2.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0_d0gb2.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpn0_d0gb2.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0_d0gb2.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0_d0gb2.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0_d0gb2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_char\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_char = length(unique(word))\n\
    \        if unique_char > max_unique_char\n            max_unique_char = unique_char\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi1zrgbu5.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpi1zrgbu5.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi1zrgbu5.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpi1zrgbu5.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi1zrgbu5.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi1zrgbu5.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1zrgbu5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpywtwnjsf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpywtwnjsf.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpywtwnjsf.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpywtwnjsf.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpywtwnjsf.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpywtwnjsf.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywtwnjsf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpihnc8l_s.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpihnc8l_s.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpihnc8l_s.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpihnc8l_s.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpihnc8l_s.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpihnc8l_s.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpihnc8l_s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbtuxszuy.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbtuxszuy.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbtuxszuy.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpbtuxszuy.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbtuxszuy.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbtuxszuy.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbtuxszuy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7_46t6k.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7_46t6k.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7_46t6k.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpx7_46t6k.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7_46t6k.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7_46t6k.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7_46t6k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyrq94j3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpcyrq94j3.jl:28 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcyrq94j3.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpcyrq94j3.jl:31\n  Expression: candidate([\"play\", \"this\"\
    , \"game\", \"of\", \"footbott\"]) == \"footbott\"\n   Evaluated: \"play\" ==\
    \ \"footbott\"\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcyrq94j3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcyrq94j3.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyrq94j3.jl:24\n"
  exit_code: 1
  status: SyntaxError
